{
  "duplicate_blocks": 1359,
  "pattern_matches": {
    "let\\s+\\w+.*=.*": 390,
    "match\\s+.*\\s+with\\s+\\|.*->": 203,
    "Printf\\.(sprintf|printf).*": 66,
    "List\\.(map|fold_left|fold_right|filter).*": 158,
    "try\\s+.*\\s+with\\s+.*->": 146,
    "String\\.(length|sub|concat).*": 91
  },
  "specific_patterns": {
    "rhyme_files": [
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_types.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_utils.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_scoring.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_api_core.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_lookup.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_helpers.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_rhyme_engine.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_matching.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_validation.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_io.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_access.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_parser.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_cache.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_pattern.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_rhyme_core.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/unified_rhyme_data.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_analysis.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_unified.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_database.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_detection.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/consolidated_rhyme_data.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_data.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_types.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_advanced_analysis.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_api.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_fallback.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_rhyme_data.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_loader.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_cache.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/unified_rhyme_api.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_data_loader.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/expanded_rhyme_data.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/unified_rhyme_database.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/yu_rhyme_data.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/hua_rhyme_data.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/rhyme_group_types.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/ping_sheng/feng_rhyme_data.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/ze_sheng/yue_rhyme_data.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/ze_sheng/hui_rhyme_data.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/ze_sheng/jiang_rhyme_data.ml"
    ],
    "token_files": [
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_identifiers.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_literals.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_operators.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/unified_token_core.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_string_converter.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_delimiters.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_tokens.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_literals_compatibility.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/unified_token_registry.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_type_keywords.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_basic_keywords_compatibility.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_type_keywords_compatibility.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_identifiers_compatibility.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_classical_compatibility.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_literals.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_types_core.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_classical.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/formatter_tokens.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_utils_core.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_token_reducer.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_reports.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_types.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_converter.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core_refactored.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_delimiters_compatibility.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_identifiers.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_core.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_basic_keywords.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_literals.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_keywords.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_types.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_category_checker.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_keywords.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/string_processing/token_formatter.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/special_token_mapping.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/token_registry_stats.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/token_registry_keywords.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/type_token_mapping.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/basic_token_mapping.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/classical_token_mapping.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/token_registry_converter.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/simple_token_mapper.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/unified_token_mapper.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/token_registry_core.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/token_registry_literals.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/token_registry.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/token_registry_operators.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/token_definitions_unified.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/token_registry_identifiers.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/tokens/operator_tokens.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/tokens/identifier_tokens.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/tokens/basic_tokens.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/tokens/delimiter_tokens.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/tokens/token_unified.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/tokens/token_compatibility.ml"
    ],
    "error_files": [
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/error_handler_statistics.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/builtin_error.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/error_conversion.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/error_messages.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/compiler_errors_formatter.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/compiler_errors_types.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/error_recovery.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/unified_error_utils.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/error_messages_reporting.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/error_types.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/semantic_errors.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/error_messages_generation.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/error_handler.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/compiler_errors_creation.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/error_handler_recovery.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/error_handler_types.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/error_handler_core.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/error_utils.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/compiler_errors.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/types_errors.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/error_messages_analysis.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/formatter_errors.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/error_messages_translation.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/error_handler_formatting.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/unified_errors.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/data_loader_error.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/string_processing/error_message_formatter.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/string_processing/error_templates.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/utils/error_formatters.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/utils/unified_error_formatter.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/constants/error_constants.ml",
      "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/utils/formatting/error_formatter.ml"
    ]
  },
  "detailed_duplicates": {
    "9cbc10ba3cfe2a8f4048fd5edaf9b8c1": [
      {
        "hash": "9cbc10ba3cfe2a8f4048fd5edaf9b8c1",
        "text": "@author 骆言技术债务清理团队\n@version 1.0 (重构版)\n@since 2025-07-20 Issue #718 长函数重构 *)",
        "lines": [
          "@author 骆言技术债务清理团队",
          "@version 1.0 (重构版)",
          "@since 2025-07-20 Issue #718 长函数重构 *)"
        ],
        "start_line": 3,
        "end_line": 5,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/error_handler_statistics.ml"
      },
      {
        "hash": "9cbc10ba3cfe2a8f4048fd5edaf9b8c1",
        "text": "@author 骆言技术债务清理团队\n@version 1.0 (重构版)\n@since 2025-07-20 Issue #718 长函数重构 *)",
        "lines": [
          "@author 骆言技术债务清理团队",
          "@version 1.0 (重构版)",
          "@since 2025-07-20 Issue #718 长函数重构 *)"
        ],
        "start_line": 3,
        "end_line": 5,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/error_handler_recovery.ml"
      },
      {
        "hash": "9cbc10ba3cfe2a8f4048fd5edaf9b8c1",
        "text": "@author 骆言技术债务清理团队\n@version 1.0 (重构版)\n@since 2025-07-20 Issue #718 长函数重构 *)",
        "lines": [
          "@author 骆言技术债务清理团队",
          "@version 1.0 (重构版)",
          "@since 2025-07-20 Issue #718 长函数重构 *)"
        ],
        "start_line": 3,
        "end_line": 5,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/error_handler_types.ml"
      },
      {
        "hash": "9cbc10ba3cfe2a8f4048fd5edaf9b8c1",
        "text": "@author 骆言技术债务清理团队\n@version 1.0 (重构版)\n@since 2025-07-20 Issue #718 长函数重构 *)",
        "lines": [
          "@author 骆言技术债务清理团队",
          "@version 1.0 (重构版)",
          "@since 2025-07-20 Issue #718 长函数重构 *)"
        ],
        "start_line": 3,
        "end_line": 5,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/error_handler_core.ml"
      },
      {
        "hash": "9cbc10ba3cfe2a8f4048fd5edaf9b8c1",
        "text": "@author 骆言技术债务清理团队\n@version 1.0 (重构版)\n@since 2025-07-20 Issue #718 长函数重构 *)",
        "lines": [
          "@author 骆言技术债务清理团队",
          "@version 1.0 (重构版)",
          "@since 2025-07-20 Issue #718 长函数重构 *)"
        ],
        "start_line": 3,
        "end_line": 5,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/error_handler_formatting.ml"
      }
    ],
    "201976b4e3754047f677580b21213ab1": [
      {
        "hash": "201976b4e3754047f677580b21213ab1",
        "text": "open Ast\nopen Lexer\nopen Parser_utils\nopen Utils.Base_formatter",
        "lines": [
          "open Ast",
          "open Lexer",
          "open Parser_utils",
          "open Utils.Base_formatter"
        ],
        "start_line": 4,
        "end_line": 7,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_poetry.ml"
      },
      {
        "hash": "201976b4e3754047f677580b21213ab1",
        "text": "open Ast\nopen Lexer\nopen Parser_utils\nopen Utils.Base_formatter",
        "lines": [
          "open Ast",
          "open Lexer",
          "open Parser_utils",
          "open Utils.Base_formatter"
        ],
        "start_line": 17,
        "end_line": 20,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_calls.ml"
      },
      {
        "hash": "201976b4e3754047f677580b21213ab1",
        "text": "open Ast\nopen Lexer\nopen Parser_utils\nopen Utils.Base_formatter",
        "lines": [
          "open Ast",
          "open Lexer",
          "open Parser_utils",
          "open Utils.Base_formatter"
        ],
        "start_line": 3,
        "end_line": 6,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_natural_functions.ml"
      }
    ],
    "ae6df4d562e05b98997bb13694bce1b5": [
      {
        "hash": "ae6df4d562e05b98997bb13694bce1b5",
        "text": "open Lexer\nopen Parser_utils\nopen Utils.Base_formatter",
        "lines": [
          "open Lexer",
          "open Parser_utils",
          "open Utils.Base_formatter"
        ],
        "start_line": 5,
        "end_line": 7,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_poetry.ml"
      },
      {
        "hash": "ae6df4d562e05b98997bb13694bce1b5",
        "text": "open Lexer\nopen Parser_utils\nopen Utils.Base_formatter",
        "lines": [
          "open Lexer",
          "open Parser_utils",
          "open Utils.Base_formatter"
        ],
        "start_line": 18,
        "end_line": 20,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_calls.ml"
      },
      {
        "hash": "ae6df4d562e05b98997bb13694bce1b5",
        "text": "open Lexer\nopen Parser_utils\nopen Utils.Base_formatter",
        "lines": [
          "open Lexer",
          "open Parser_utils",
          "open Utils.Base_formatter"
        ],
        "start_line": 4,
        "end_line": 6,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_natural_functions.ml"
      }
    ],
    "da277d6c12e5fcf846625840f28b2ce0": [
      {
        "hash": "da277d6c12e5fcf846625840f28b2ce0",
        "text": "open Ast\nopen Lexer\nopen Parser_utils",
        "lines": [
          "open Ast",
          "open Lexer",
          "open Parser_utils"
        ],
        "start_line": 3,
        "end_line": 5,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_patterns.ml"
      },
      {
        "hash": "da277d6c12e5fcf846625840f28b2ce0",
        "text": "open Ast\nopen Lexer\nopen Parser_utils",
        "lines": [
          "open Ast",
          "open Lexer",
          "open Parser_utils"
        ],
        "start_line": 14,
        "end_line": 16,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_constructs.ml"
      },
      {
        "hash": "da277d6c12e5fcf846625840f28b2ce0",
        "text": "open Ast\nopen Lexer\nopen Parser_utils",
        "lines": [
          "open Ast",
          "open Lexer",
          "open Parser_utils"
        ],
        "start_line": 24,
        "end_line": 26,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_operators.ml"
      },
      {
        "hash": "da277d6c12e5fcf846625840f28b2ce0",
        "text": "open Ast\nopen Lexer\nopen Parser_utils",
        "lines": [
          "open Ast",
          "open Lexer",
          "open Parser_utils"
        ],
        "start_line": 11,
        "end_line": 13,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_literals.ml"
      },
      {
        "hash": "da277d6c12e5fcf846625840f28b2ce0",
        "text": "open Ast\nopen Lexer\nopen Parser_utils",
        "lines": [
          "open Ast",
          "open Lexer",
          "open Parser_utils"
        ],
        "start_line": 3,
        "end_line": 5,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_types.ml"
      },
      {
        "hash": "da277d6c12e5fcf846625840f28b2ce0",
        "text": "open Ast\nopen Lexer\nopen Parser_utils",
        "lines": [
          "open Ast",
          "open Lexer",
          "open Parser_utils"
        ],
        "start_line": 15,
        "end_line": 17,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_literals.ml"
      },
      {
        "hash": "da277d6c12e5fcf846625840f28b2ce0",
        "text": "open Ast\nopen Lexer\nopen Parser_utils",
        "lines": [
          "open Ast",
          "open Lexer",
          "open Parser_utils"
        ],
        "start_line": 16,
        "end_line": 18,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_operators_consolidated.ml"
      },
      {
        "hash": "da277d6c12e5fcf846625840f28b2ce0",
        "text": "open Ast\nopen Lexer\nopen Parser_utils",
        "lines": [
          "open Ast",
          "open Lexer",
          "open Parser_utils"
        ],
        "start_line": 19,
        "end_line": 21,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_structured_consolidated.ml"
      },
      {
        "hash": "da277d6c12e5fcf846625840f28b2ce0",
        "text": "open Ast\nopen Lexer\nopen Parser_utils",
        "lines": [
          "open Ast",
          "open Lexer",
          "open Parser_utils"
        ],
        "start_line": 19,
        "end_line": 21,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_consolidated.ml"
      },
      {
        "hash": "da277d6c12e5fcf846625840f28b2ce0",
        "text": "open Ast\nopen Lexer\nopen Parser_utils",
        "lines": [
          "open Ast",
          "open Lexer",
          "open Parser_utils"
        ],
        "start_line": 19,
        "end_line": 21,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_identifiers.ml"
      }
    ],
    "48599f57837a99ee4378749dc39cf4b3": [
      {
        "hash": "48599f57837a99ee4378749dc39cf4b3",
        "text": "let rec skip_newlines state =\nlet token, _pos = current_token state in\nif token = Newline then skip_newlines (advance_parser state) else state",
        "lines": [
          "let rec skip_newlines state =",
          "let token, _pos = current_token state in",
          "if token = Newline then skip_newlines (advance_parser state) else state"
        ],
        "start_line": 10,
        "end_line": 12,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_statements.ml"
      },
      {
        "hash": "48599f57837a99ee4378749dc39cf4b3",
        "text": "let rec skip_newlines state =\nlet token, _pos = current_token state in\nif token = Newline then skip_newlines (advance_parser state) else state",
        "lines": [
          "let rec skip_newlines state =",
          "let token, _pos = current_token state in",
          "if token = Newline then skip_newlines (advance_parser state) else state"
        ],
        "start_line": 38,
        "end_line": 40,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser.ml"
      },
      {
        "hash": "48599f57837a99ee4378749dc39cf4b3",
        "text": "let rec skip_newlines state =\nlet token, _pos = current_token state in\nif token = Newline then skip_newlines (advance_parser state) else state",
        "lines": [
          "let rec skip_newlines state =",
          "let token, _pos = current_token state in",
          "if token = Newline then skip_newlines (advance_parser state) else state"
        ],
        "start_line": 19,
        "end_line": 21,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_utils.ml"
      },
      {
        "hash": "48599f57837a99ee4378749dc39cf4b3",
        "text": "let rec skip_newlines state =\nlet token, _pos = current_token state in\nif token = Newline then skip_newlines (advance_parser state) else state",
        "lines": [
          "let rec skip_newlines state =",
          "let token, _pos = current_token state in",
          "if token = Newline then skip_newlines (advance_parser state) else state"
        ],
        "start_line": 20,
        "end_line": 22,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_ancient.ml"
      }
    ],
    "044803395c8d6b94ed88cbb3f0626bc5": [
      {
        "hash": "044803395c8d6b94ed88cbb3f0626bc5",
        "text": "let token, _ = current_token state in\nmatch token with\n| RightParen -> (List.rev acc, state)\n| QuotedIdentifierToken param_name -> (\nlet state1 = advance_parser state in\nlet state2 = expect_token state1 Colon in\nlet token, _ = current_token state2 in\nmatch token with\n| QuotedIdentifierToken \"表达式\" ->\nlet state3 = advance_parser state2 in",
        "lines": [
          "let token, _ = current_token state in",
          "match token with",
          "| RightParen -> (List.rev acc, state)",
          "| QuotedIdentifierToken param_name -> (",
          "let state1 = advance_parser state in",
          "let state2 = expect_token state1 Colon in",
          "let token, _ = current_token state2 in",
          "match token with",
          "| QuotedIdentifierToken \"表达式\" ->",
          "let state3 = advance_parser state2 in"
        ],
        "start_line": 16,
        "end_line": 25,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_statements.ml"
      },
      {
        "hash": "044803395c8d6b94ed88cbb3f0626bc5",
        "text": "let token, _ = current_token state in\nmatch token with\n| RightParen -> (List.rev acc, state)\n| QuotedIdentifierToken param_name -> (\nlet state1 = advance_parser state in\nlet state2 = expect_token state1 Colon in\nlet token, _ = current_token state2 in\nmatch token with\n| QuotedIdentifierToken \"表达式\" ->\nlet state3 = advance_parser state2 in",
        "lines": [
          "let token, _ = current_token state in",
          "match token with",
          "| RightParen -> (List.rev acc, state)",
          "| QuotedIdentifierToken param_name -> (",
          "let state1 = advance_parser state in",
          "let state2 = expect_token state1 Colon in",
          "let token, _ = current_token state2 in",
          "match token with",
          "| QuotedIdentifierToken \"表达式\" ->",
          "let state3 = advance_parser state2 in"
        ],
        "start_line": 49,
        "end_line": 58,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser.ml"
      }
    ],
    "983c83b9e0987bb6fa4e839c83c0bf0d": [
      {
        "hash": "983c83b9e0987bb6fa4e839c83c0bf0d",
        "text": "match token with\n| RightParen -> (List.rev acc, state)\n| QuotedIdentifierToken param_name -> (\nlet state1 = advance_parser state in\nlet state2 = expect_token state1 Colon in\nlet token, _ = current_token state2 in\nmatch token with\n| QuotedIdentifierToken \"表达式\" ->\nlet state3 = advance_parser state2 in\nlet new_param = ExprParam param_name in",
        "lines": [
          "match token with",
          "| RightParen -> (List.rev acc, state)",
          "| QuotedIdentifierToken param_name -> (",
          "let state1 = advance_parser state in",
          "let state2 = expect_token state1 Colon in",
          "let token, _ = current_token state2 in",
          "match token with",
          "| QuotedIdentifierToken \"表达式\" ->",
          "let state3 = advance_parser state2 in",
          "let new_param = ExprParam param_name in"
        ],
        "start_line": 17,
        "end_line": 26,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_statements.ml"
      },
      {
        "hash": "983c83b9e0987bb6fa4e839c83c0bf0d",
        "text": "match token with\n| RightParen -> (List.rev acc, state)\n| QuotedIdentifierToken param_name -> (\nlet state1 = advance_parser state in\nlet state2 = expect_token state1 Colon in\nlet token, _ = current_token state2 in\nmatch token with\n| QuotedIdentifierToken \"表达式\" ->\nlet state3 = advance_parser state2 in\nlet new_param = ExprParam param_name in",
        "lines": [
          "match token with",
          "| RightParen -> (List.rev acc, state)",
          "| QuotedIdentifierToken param_name -> (",
          "let state1 = advance_parser state in",
          "let state2 = expect_token state1 Colon in",
          "let token, _ = current_token state2 in",
          "match token with",
          "| QuotedIdentifierToken \"表达式\" ->",
          "let state3 = advance_parser state2 in",
          "let new_param = ExprParam param_name in"
        ],
        "start_line": 50,
        "end_line": 59,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser.ml"
      }
    ],
    "e6b8de2833b0c95772c15ccf7dcfd801": [
      {
        "hash": "e6b8de2833b0c95772c15ccf7dcfd801",
        "text": "| RightParen -> (List.rev acc, state)\n| QuotedIdentifierToken param_name -> (\nlet state1 = advance_parser state in\nlet state2 = expect_token state1 Colon in\nlet token, _ = current_token state2 in\nmatch token with\n| QuotedIdentifierToken \"表达式\" ->\nlet state3 = advance_parser state2 in\nlet new_param = ExprParam param_name in\nlet next_token, _ = current_token state3 in",
        "lines": [
          "| RightParen -> (List.rev acc, state)",
          "| QuotedIdentifierToken param_name -> (",
          "let state1 = advance_parser state in",
          "let state2 = expect_token state1 Colon in",
          "let token, _ = current_token state2 in",
          "match token with",
          "| QuotedIdentifierToken \"表达式\" ->",
          "let state3 = advance_parser state2 in",
          "let new_param = ExprParam param_name in",
          "let next_token, _ = current_token state3 in"
        ],
        "start_line": 18,
        "end_line": 27,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_statements.ml"
      },
      {
        "hash": "e6b8de2833b0c95772c15ccf7dcfd801",
        "text": "| RightParen -> (List.rev acc, state)\n| QuotedIdentifierToken param_name -> (\nlet state1 = advance_parser state in\nlet state2 = expect_token state1 Colon in\nlet token, _ = current_token state2 in\nmatch token with\n| QuotedIdentifierToken \"表达式\" ->\nlet state3 = advance_parser state2 in\nlet new_param = ExprParam param_name in\nlet next_token, _ = current_token state3 in",
        "lines": [
          "| RightParen -> (List.rev acc, state)",
          "| QuotedIdentifierToken param_name -> (",
          "let state1 = advance_parser state in",
          "let state2 = expect_token state1 Colon in",
          "let token, _ = current_token state2 in",
          "match token with",
          "| QuotedIdentifierToken \"表达式\" ->",
          "let state3 = advance_parser state2 in",
          "let new_param = ExprParam param_name in",
          "let next_token, _ = current_token state3 in"
        ],
        "start_line": 51,
        "end_line": 60,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser.ml"
      }
    ],
    "d08ec0eab34e62e9d792688c72699097": [
      {
        "hash": "d08ec0eab34e62e9d792688c72699097",
        "text": "| QuotedIdentifierToken param_name -> (\nlet state1 = advance_parser state in\nlet state2 = expect_token state1 Colon in\nlet token, _ = current_token state2 in\nmatch token with\n| QuotedIdentifierToken \"表达式\" ->\nlet state3 = advance_parser state2 in\nlet new_param = ExprParam param_name in\nlet next_token, _ = current_token state3 in\nif next_token = Comma then",
        "lines": [
          "| QuotedIdentifierToken param_name -> (",
          "let state1 = advance_parser state in",
          "let state2 = expect_token state1 Colon in",
          "let token, _ = current_token state2 in",
          "match token with",
          "| QuotedIdentifierToken \"表达式\" ->",
          "let state3 = advance_parser state2 in",
          "let new_param = ExprParam param_name in",
          "let next_token, _ = current_token state3 in",
          "if next_token = Comma then"
        ],
        "start_line": 19,
        "end_line": 28,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_statements.ml"
      },
      {
        "hash": "d08ec0eab34e62e9d792688c72699097",
        "text": "| QuotedIdentifierToken param_name -> (\nlet state1 = advance_parser state in\nlet state2 = expect_token state1 Colon in\nlet token, _ = current_token state2 in\nmatch token with\n| QuotedIdentifierToken \"表达式\" ->\nlet state3 = advance_parser state2 in\nlet new_param = ExprParam param_name in\nlet next_token, _ = current_token state3 in\nif next_token = Comma then",
        "lines": [
          "| QuotedIdentifierToken param_name -> (",
          "let state1 = advance_parser state in",
          "let state2 = expect_token state1 Colon in",
          "let token, _ = current_token state2 in",
          "match token with",
          "| QuotedIdentifierToken \"表达式\" ->",
          "let state3 = advance_parser state2 in",
          "let new_param = ExprParam param_name in",
          "let next_token, _ = current_token state3 in",
          "if next_token = Comma then"
        ],
        "start_line": 52,
        "end_line": 61,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser.ml"
      }
    ],
    "7f24d8917fd4f6adc5055cd26cb4c926": [
      {
        "hash": "7f24d8917fd4f6adc5055cd26cb4c926",
        "text": "let state1 = advance_parser state in\nlet state2 = expect_token state1 Colon in\nlet token, _ = current_token state2 in\nmatch token with\n| QuotedIdentifierToken \"表达式\" ->\nlet state3 = advance_parser state2 in\nlet new_param = ExprParam param_name in\nlet next_token, _ = current_token state3 in\nif next_token = Comma then\nlet state4 = advance_parser state3 in",
        "lines": [
          "let state1 = advance_parser state in",
          "let state2 = expect_token state1 Colon in",
          "let token, _ = current_token state2 in",
          "match token with",
          "| QuotedIdentifierToken \"表达式\" ->",
          "let state3 = advance_parser state2 in",
          "let new_param = ExprParam param_name in",
          "let next_token, _ = current_token state3 in",
          "if next_token = Comma then",
          "let state4 = advance_parser state3 in"
        ],
        "start_line": 20,
        "end_line": 29,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_statements.ml"
      },
      {
        "hash": "7f24d8917fd4f6adc5055cd26cb4c926",
        "text": "let state1 = advance_parser state in\nlet state2 = expect_token state1 Colon in\nlet token, _ = current_token state2 in\nmatch token with\n| QuotedIdentifierToken \"表达式\" ->\nlet state3 = advance_parser state2 in\nlet new_param = ExprParam param_name in\nlet next_token, _ = current_token state3 in\nif next_token = Comma then\nlet state4 = advance_parser state3 in",
        "lines": [
          "let state1 = advance_parser state in",
          "let state2 = expect_token state1 Colon in",
          "let token, _ = current_token state2 in",
          "match token with",
          "| QuotedIdentifierToken \"表达式\" ->",
          "let state3 = advance_parser state2 in",
          "let new_param = ExprParam param_name in",
          "let next_token, _ = current_token state3 in",
          "if next_token = Comma then",
          "let state4 = advance_parser state3 in"
        ],
        "start_line": 53,
        "end_line": 62,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser.ml"
      }
    ],
    "7c983059dbdcbb394645a76ff648f1a8": [
      {
        "hash": "7c983059dbdcbb394645a76ff648f1a8",
        "text": "open Value_operations\nopen Builtin_error\nopen Builtin_function_helpers",
        "lines": [
          "open Value_operations",
          "open Builtin_error",
          "open Builtin_function_helpers"
        ],
        "start_line": 3,
        "end_line": 5,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/builtin_types.ml"
      },
      {
        "hash": "7c983059dbdcbb394645a76ff648f1a8",
        "text": "open Value_operations\nopen Builtin_error\nopen Builtin_function_helpers",
        "lines": [
          "open Value_operations",
          "open Builtin_error",
          "open Builtin_function_helpers"
        ],
        "start_line": 3,
        "end_line": 5,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/builtin_io.ml"
      },
      {
        "hash": "7c983059dbdcbb394645a76ff648f1a8",
        "text": "open Value_operations\nopen Builtin_error\nopen Builtin_function_helpers",
        "lines": [
          "open Value_operations",
          "open Builtin_error",
          "open Builtin_function_helpers"
        ],
        "start_line": 3,
        "end_line": 5,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/builtin_string.ml"
      }
    ],
    "f8de5fe2332b7585b1b578aab6f69c28": [
      {
        "hash": "f8de5fe2332b7585b1b578aab6f69c28",
        "text": "| FloatLit f -> FloatValue f\n| StringLit s -> StringValue s\n| BoolLit b -> BoolValue b\n| UnitLit -> UnitValue",
        "lines": [
          "| FloatLit f -> FloatValue f",
          "| StringLit s -> StringValue s",
          "| BoolLit b -> BoolValue b",
          "| UnitLit -> UnitValue"
        ],
        "start_line": 61,
        "end_line": 64,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/interpreter_utils.ml"
      },
      {
        "hash": "f8de5fe2332b7585b1b578aab6f69c28",
        "text": "| FloatLit f -> FloatValue f\n| StringLit s -> StringValue s\n| BoolLit b -> BoolValue b\n| UnitLit -> UnitValue",
        "lines": [
          "| FloatLit f -> FloatValue f",
          "| StringLit s -> StringValue s",
          "| BoolLit b -> BoolValue b",
          "| UnitLit -> UnitValue"
        ],
        "start_line": 13,
        "end_line": 16,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/expression_evaluator_basic.ml"
      }
    ],
    "2903817d52214975e94bcc108694b249": [
      {
        "hash": "2903817d52214975e94bcc108694b249",
        "text": "| StringLit s -> StringValue s\n| BoolLit b -> BoolValue b\n| UnitLit -> UnitValue",
        "lines": [
          "| StringLit s -> StringValue s",
          "| BoolLit b -> BoolValue b",
          "| UnitLit -> UnitValue"
        ],
        "start_line": 62,
        "end_line": 64,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/interpreter_utils.ml"
      },
      {
        "hash": "2903817d52214975e94bcc108694b249",
        "text": "| StringLit s -> StringValue s\n| BoolLit b -> BoolValue b\n| UnitLit -> UnitValue",
        "lines": [
          "| StringLit s -> StringValue s",
          "| BoolLit b -> BoolValue b",
          "| UnitLit -> UnitValue"
        ],
        "start_line": 14,
        "end_line": 16,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/expression_evaluator_basic.ml"
      }
    ],
    "5763b31347066acc72a3debc4748169b": [
      {
        "hash": "5763b31347066acc72a3debc4748169b",
        "text": "@author 骆言技术债务清理团队 Issue #1256\n@version 1.0\n@since 2025-07-25 *)",
        "lines": [
          "@author 骆言技术债务清理团队 Issue #1256",
          "@version 1.0",
          "@since 2025-07-25 *)"
        ],
        "start_line": 6,
        "end_line": 8,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_identifiers.ml"
      },
      {
        "hash": "5763b31347066acc72a3debc4748169b",
        "text": "@author 骆言技术债务清理团队 Issue #1256\n@version 1.0\n@since 2025-07-25 *)",
        "lines": [
          "@author 骆言技术债务清理团队 Issue #1256",
          "@version 1.0",
          "@since 2025-07-25 *)"
        ],
        "start_line": 6,
        "end_line": 8,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "5763b31347066acc72a3debc4748169b",
        "text": "@author 骆言技术债务清理团队 Issue #1256\n@version 1.0\n@since 2025-07-25 *)",
        "lines": [
          "@author 骆言技术债务清理团队 Issue #1256",
          "@version 1.0",
          "@since 2025-07-25 *)"
        ],
        "start_line": 6,
        "end_line": 8,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_literals.ml"
      },
      {
        "hash": "5763b31347066acc72a3debc4748169b",
        "text": "@author 骆言技术债务清理团队 Issue #1256\n@version 1.0\n@since 2025-07-25 *)",
        "lines": [
          "@author 骆言技术债务清理团队 Issue #1256",
          "@version 1.0",
          "@since 2025-07-25 *)"
        ],
        "start_line": 6,
        "end_line": 8,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_keywords.ml"
      },
      {
        "hash": "5763b31347066acc72a3debc4748169b",
        "text": "@author 骆言技术债务清理团队 Issue #1256\n@version 1.0\n@since 2025-07-25 *)",
        "lines": [
          "@author 骆言技术债务清理团队 Issue #1256",
          "@version 1.0",
          "@since 2025-07-25 *)"
        ],
        "start_line": 6,
        "end_line": 8,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_types.ml"
      }
    ],
    "da220eca93895ba256252428b3c748fe": [
      {
        "hash": "da220eca93895ba256252428b3c748fe",
        "text": "open Ast\nopen C_codegen_context\nopen Error_utils\nopen Utils.Base_formatter",
        "lines": [
          "open Ast",
          "open C_codegen_context",
          "open Error_utils",
          "open Utils.Base_formatter"
        ],
        "start_line": 4,
        "end_line": 7,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/c_codegen_control.ml"
      },
      {
        "hash": "da220eca93895ba256252428b3c748fe",
        "text": "open Ast\nopen C_codegen_context\nopen Error_utils\nopen Utils.Base_formatter",
        "lines": [
          "open Ast",
          "open C_codegen_context",
          "open Error_utils",
          "open Utils.Base_formatter"
        ],
        "start_line": 3,
        "end_line": 6,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/c_codegen_structured.ml"
      },
      {
        "hash": "da220eca93895ba256252428b3c748fe",
        "text": "open Ast\nopen C_codegen_context\nopen Error_utils\nopen Utils.Base_formatter",
        "lines": [
          "open Ast",
          "open C_codegen_context",
          "open Error_utils",
          "open Utils.Base_formatter"
        ],
        "start_line": 3,
        "end_line": 6,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/c_codegen_literals.ml"
      }
    ],
    "ee708f27ff4d26c682bc8855675942e6": [
      {
        "hash": "ee708f27ff4d26c682bc8855675942e6",
        "text": "open C_codegen_context\nopen Error_utils\nopen Utils.Base_formatter",
        "lines": [
          "open C_codegen_context",
          "open Error_utils",
          "open Utils.Base_formatter"
        ],
        "start_line": 5,
        "end_line": 7,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/c_codegen_control.ml"
      },
      {
        "hash": "ee708f27ff4d26c682bc8855675942e6",
        "text": "open C_codegen_context\nopen Error_utils\nopen Utils.Base_formatter",
        "lines": [
          "open C_codegen_context",
          "open Error_utils",
          "open Utils.Base_formatter"
        ],
        "start_line": 4,
        "end_line": 6,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/c_codegen_structured.ml"
      },
      {
        "hash": "ee708f27ff4d26c682bc8855675942e6",
        "text": "open C_codegen_context\nopen Error_utils\nopen Utils.Base_formatter",
        "lines": [
          "open C_codegen_context",
          "open Error_utils",
          "open Utils.Base_formatter"
        ],
        "start_line": 4,
        "end_line": 6,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/c_codegen_literals.ml"
      }
    ],
    "c9dc4480e6d35c5b4d1d089fd4c9a54a": [
      {
        "hash": "c9dc4480e6d35c5b4d1d089fd4c9a54a",
        "text": "@author 骆言技术债务清理团队 Issue #646\n@version 1.0\n@since 2025-07-20 *)",
        "lines": [
          "@author 骆言技术债务清理团队 Issue #646",
          "@version 1.0",
          "@since 2025-07-20 *)"
        ],
        "start_line": 5,
        "end_line": 7,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_literals.ml"
      },
      {
        "hash": "c9dc4480e6d35c5b4d1d089fd4c9a54a",
        "text": "@author 骆言技术债务清理团队 Issue #646\n@version 1.0\n@since 2025-07-20 *)",
        "lines": [
          "@author 骆言技术债务清理团队 Issue #646",
          "@version 1.0",
          "@since 2025-07-20 *)"
        ],
        "start_line": 5,
        "end_line": 7,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_operators.ml"
      },
      {
        "hash": "c9dc4480e6d35c5b4d1d089fd4c9a54a",
        "text": "@author 骆言技术债务清理团队 Issue #646\n@version 1.0\n@since 2025-07-20 *)",
        "lines": [
          "@author 骆言技术债务清理团队 Issue #646",
          "@version 1.0",
          "@since 2025-07-20 *)"
        ],
        "start_line": 5,
        "end_line": 7,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_delimiters.ml"
      },
      {
        "hash": "c9dc4480e6d35c5b4d1d089fd4c9a54a",
        "text": "@author 骆言技术债务清理团队 Issue #646\n@version 1.0\n@since 2025-07-20 *)",
        "lines": [
          "@author 骆言技术债务清理团队 Issue #646",
          "@version 1.0",
          "@since 2025-07-20 *)"
        ],
        "start_line": 5,
        "end_line": 7,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_reports.ml"
      },
      {
        "hash": "c9dc4480e6d35c5b4d1d089fd4c9a54a",
        "text": "@author 骆言技术债务清理团队 Issue #646\n@version 1.0\n@since 2025-07-20 *)",
        "lines": [
          "@author 骆言技术债务清理团队 Issue #646",
          "@version 1.0",
          "@since 2025-07-20 *)"
        ],
        "start_line": 5,
        "end_line": 7,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_core.ml"
      },
      {
        "hash": "c9dc4480e6d35c5b4d1d089fd4c9a54a",
        "text": "@author 骆言技术债务清理团队 Issue #646\n@version 1.0\n@since 2025-07-20 *)",
        "lines": [
          "@author 骆言技术债务清理团队 Issue #646",
          "@version 1.0",
          "@since 2025-07-20 *)"
        ],
        "start_line": 5,
        "end_line": 7,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_keywords.ml"
      }
    ],
    "dc3548fa36d0c55fa3d684f5f86cbc8e": [
      {
        "hash": "dc3548fa36d0c55fa3d684f5f86cbc8e",
        "text": "| s\nwhen try\nlet _ = int_of_string s in\ntrue\nwith _ -> false ->\nSome (IntToken (int_of_string s))\n| s\nwhen try\nlet _ = float_of_string s in\ntrue",
        "lines": [
          "| s",
          "when try",
          "let _ = int_of_string s in",
          "true",
          "with _ -> false ->",
          "Some (IntToken (int_of_string s))",
          "| s",
          "when try",
          "let _ = float_of_string s in",
          "true"
        ],
        "start_line": 14,
        "end_line": 23,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_literals.ml"
      },
      {
        "hash": "dc3548fa36d0c55fa3d684f5f86cbc8e",
        "text": "| s\nwhen try\nlet _ = int_of_string s in\ntrue\nwith _ -> false ->\nSome (IntToken (int_of_string s))\n| s\nwhen try\nlet _ = float_of_string s in\ntrue",
        "lines": [
          "| s",
          "when try",
          "let _ = int_of_string s in",
          "true",
          "with _ -> false ->",
          "Some (IntToken (int_of_string s))",
          "| s",
          "when try",
          "let _ = float_of_string s in",
          "true"
        ],
        "start_line": 113,
        "end_line": 122,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      }
    ],
    "71b1dc20df80b8cc072fde5373f4eb40": [
      {
        "hash": "71b1dc20df80b8cc072fde5373f4eb40",
        "text": "when try\nlet _ = int_of_string s in\ntrue\nwith _ -> false ->\nSome (IntToken (int_of_string s))\n| s\nwhen try\nlet _ = float_of_string s in\ntrue\nwith _ -> false ->",
        "lines": [
          "when try",
          "let _ = int_of_string s in",
          "true",
          "with _ -> false ->",
          "Some (IntToken (int_of_string s))",
          "| s",
          "when try",
          "let _ = float_of_string s in",
          "true",
          "with _ -> false ->"
        ],
        "start_line": 15,
        "end_line": 24,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_literals.ml"
      },
      {
        "hash": "71b1dc20df80b8cc072fde5373f4eb40",
        "text": "when try\nlet _ = int_of_string s in\ntrue\nwith _ -> false ->\nSome (IntToken (int_of_string s))\n| s\nwhen try\nlet _ = float_of_string s in\ntrue\nwith _ -> false ->",
        "lines": [
          "when try",
          "let _ = int_of_string s in",
          "true",
          "with _ -> false ->",
          "Some (IntToken (int_of_string s))",
          "| s",
          "when try",
          "let _ = float_of_string s in",
          "true",
          "with _ -> false ->"
        ],
        "start_line": 114,
        "end_line": 123,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      }
    ],
    "0a21c12bbd40b11fa66220f29a62e8fe": [
      {
        "hash": "0a21c12bbd40b11fa66220f29a62e8fe",
        "text": "let _ = int_of_string s in\ntrue\nwith _ -> false ->\nSome (IntToken (int_of_string s))\n| s\nwhen try\nlet _ = float_of_string s in\ntrue\nwith _ -> false ->\nSome (FloatToken (float_of_string s))",
        "lines": [
          "let _ = int_of_string s in",
          "true",
          "with _ -> false ->",
          "Some (IntToken (int_of_string s))",
          "| s",
          "when try",
          "let _ = float_of_string s in",
          "true",
          "with _ -> false ->",
          "Some (FloatToken (float_of_string s))"
        ],
        "start_line": 16,
        "end_line": 25,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_literals.ml"
      },
      {
        "hash": "0a21c12bbd40b11fa66220f29a62e8fe",
        "text": "let _ = int_of_string s in\ntrue\nwith _ -> false ->\nSome (IntToken (int_of_string s))\n| s\nwhen try\nlet _ = float_of_string s in\ntrue\nwith _ -> false ->\nSome (FloatToken (float_of_string s))",
        "lines": [
          "let _ = int_of_string s in",
          "true",
          "with _ -> false ->",
          "Some (IntToken (int_of_string s))",
          "| s",
          "when try",
          "let _ = float_of_string s in",
          "true",
          "with _ -> false ->",
          "Some (FloatToken (float_of_string s))"
        ],
        "start_line": 115,
        "end_line": 124,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      }
    ],
    "3d68ac1274384ff2a4e96081a071deba": [
      {
        "hash": "3d68ac1274384ff2a4e96081a071deba",
        "text": "true\nwith _ -> false ->\nSome (IntToken (int_of_string s))\n| s\nwhen try\nlet _ = float_of_string s in\ntrue\nwith _ -> false ->\nSome (FloatToken (float_of_string s))",
        "lines": [
          "true",
          "with _ -> false ->",
          "Some (IntToken (int_of_string s))",
          "| s",
          "when try",
          "let _ = float_of_string s in",
          "true",
          "with _ -> false ->",
          "Some (FloatToken (float_of_string s))"
        ],
        "start_line": 17,
        "end_line": 25,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_literals.ml"
      },
      {
        "hash": "3d68ac1274384ff2a4e96081a071deba",
        "text": "true\nwith _ -> false ->\nSome (IntToken (int_of_string s))\n| s\nwhen try\nlet _ = float_of_string s in\ntrue\nwith _ -> false ->\nSome (FloatToken (float_of_string s))",
        "lines": [
          "true",
          "with _ -> false ->",
          "Some (IntToken (int_of_string s))",
          "| s",
          "when try",
          "let _ = float_of_string s in",
          "true",
          "with _ -> false ->",
          "Some (FloatToken (float_of_string s))"
        ],
        "start_line": 116,
        "end_line": 124,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      }
    ],
    "1c050cedf25d5ed8575ce5b6b84d182d": [
      {
        "hash": "1c050cedf25d5ed8575ce5b6b84d182d",
        "text": "with _ -> false ->\nSome (IntToken (int_of_string s))\n| s\nwhen try\nlet _ = float_of_string s in\ntrue\nwith _ -> false ->\nSome (FloatToken (float_of_string s))",
        "lines": [
          "with _ -> false ->",
          "Some (IntToken (int_of_string s))",
          "| s",
          "when try",
          "let _ = float_of_string s in",
          "true",
          "with _ -> false ->",
          "Some (FloatToken (float_of_string s))"
        ],
        "start_line": 18,
        "end_line": 25,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_literals.ml"
      },
      {
        "hash": "1c050cedf25d5ed8575ce5b6b84d182d",
        "text": "with _ -> false ->\nSome (IntToken (int_of_string s))\n| s\nwhen try\nlet _ = float_of_string s in\ntrue\nwith _ -> false ->\nSome (FloatToken (float_of_string s))",
        "lines": [
          "with _ -> false ->",
          "Some (IntToken (int_of_string s))",
          "| s",
          "when try",
          "let _ = float_of_string s in",
          "true",
          "with _ -> false ->",
          "Some (FloatToken (float_of_string s))"
        ],
        "start_line": 117,
        "end_line": 124,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      }
    ],
    "508eff40b4cdf2dbe92a8d59da7c59ef": [
      {
        "hash": "508eff40b4cdf2dbe92a8d59da7c59ef",
        "text": "Some (IntToken (int_of_string s))\n| s\nwhen try\nlet _ = float_of_string s in\ntrue\nwith _ -> false ->\nSome (FloatToken (float_of_string s))",
        "lines": [
          "Some (IntToken (int_of_string s))",
          "| s",
          "when try",
          "let _ = float_of_string s in",
          "true",
          "with _ -> false ->",
          "Some (FloatToken (float_of_string s))"
        ],
        "start_line": 19,
        "end_line": 25,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_literals.ml"
      },
      {
        "hash": "508eff40b4cdf2dbe92a8d59da7c59ef",
        "text": "Some (IntToken (int_of_string s))\n| s\nwhen try\nlet _ = float_of_string s in\ntrue\nwith _ -> false ->\nSome (FloatToken (float_of_string s))",
        "lines": [
          "Some (IntToken (int_of_string s))",
          "| s",
          "when try",
          "let _ = float_of_string s in",
          "true",
          "with _ -> false ->",
          "Some (FloatToken (float_of_string s))"
        ],
        "start_line": 118,
        "end_line": 124,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      }
    ],
    "8b1482e017f975b6ba28fb03fe1c2af8": [
      {
        "hash": "8b1482e017f975b6ba28fb03fe1c2af8",
        "text": "| s\nwhen try\nlet _ = float_of_string s in\ntrue\nwith _ -> false ->\nSome (FloatToken (float_of_string s))",
        "lines": [
          "| s",
          "when try",
          "let _ = float_of_string s in",
          "true",
          "with _ -> false ->",
          "Some (FloatToken (float_of_string s))"
        ],
        "start_line": 20,
        "end_line": 25,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_literals.ml"
      },
      {
        "hash": "8b1482e017f975b6ba28fb03fe1c2af8",
        "text": "| s\nwhen try\nlet _ = float_of_string s in\ntrue\nwith _ -> false ->\nSome (FloatToken (float_of_string s))",
        "lines": [
          "| s",
          "when try",
          "let _ = float_of_string s in",
          "true",
          "with _ -> false ->",
          "Some (FloatToken (float_of_string s))"
        ],
        "start_line": 119,
        "end_line": 124,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      }
    ],
    "08f302fd058d0a8e53a60eccfc6071a4": [
      {
        "hash": "08f302fd058d0a8e53a60eccfc6071a4",
        "text": "when try\nlet _ = float_of_string s in\ntrue\nwith _ -> false ->\nSome (FloatToken (float_of_string s))",
        "lines": [
          "when try",
          "let _ = float_of_string s in",
          "true",
          "with _ -> false ->",
          "Some (FloatToken (float_of_string s))"
        ],
        "start_line": 21,
        "end_line": 25,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_literals.ml"
      },
      {
        "hash": "08f302fd058d0a8e53a60eccfc6071a4",
        "text": "when try\nlet _ = float_of_string s in\ntrue\nwith _ -> false ->\nSome (FloatToken (float_of_string s))",
        "lines": [
          "when try",
          "let _ = float_of_string s in",
          "true",
          "with _ -> false ->",
          "Some (FloatToken (float_of_string s))"
        ],
        "start_line": 120,
        "end_line": 124,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      }
    ],
    "a1dfa52e465738d50bb4a2ead340c269": [
      {
        "hash": "a1dfa52e465738d50bb4a2ead340c269",
        "text": "let _ = float_of_string s in\ntrue\nwith _ -> false ->\nSome (FloatToken (float_of_string s))",
        "lines": [
          "let _ = float_of_string s in",
          "true",
          "with _ -> false ->",
          "Some (FloatToken (float_of_string s))"
        ],
        "start_line": 22,
        "end_line": 25,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_literals.ml"
      },
      {
        "hash": "a1dfa52e465738d50bb4a2ead340c269",
        "text": "let _ = float_of_string s in\ntrue\nwith _ -> false ->\nSome (FloatToken (float_of_string s))",
        "lines": [
          "let _ = float_of_string s in",
          "true",
          "with _ -> false ->",
          "Some (FloatToken (float_of_string s))"
        ],
        "start_line": 121,
        "end_line": 124,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      }
    ],
    "1762f0d52fce27ff71d1a10e7b4635df": [
      {
        "hash": "1762f0d52fce27ff71d1a10e7b4635df",
        "text": "true\nwith _ -> false ->\nSome (FloatToken (float_of_string s))",
        "lines": [
          "true",
          "with _ -> false ->",
          "Some (FloatToken (float_of_string s))"
        ],
        "start_line": 23,
        "end_line": 25,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_literals.ml"
      },
      {
        "hash": "1762f0d52fce27ff71d1a10e7b4635df",
        "text": "true\nwith _ -> false ->\nSome (FloatToken (float_of_string s))",
        "lines": [
          "true",
          "with _ -> false ->",
          "Some (FloatToken (float_of_string s))"
        ],
        "start_line": 122,
        "end_line": 124,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      }
    ],
    "3362157ec46d4982dfc88b5042ec14c5": [
      {
        "hash": "3362157ec46d4982dfc88b5042ec14c5",
        "text": "| s when String.length s >= 2 && s.[0] = '\"' && s.[String.length s - 1] = '\"' ->\nlet content = String.sub s 1 (String.length s - 2) in\nSome (StringToken content)",
        "lines": [
          "| s when String.length s >= 2 && s.[0] = '\"' && s.[String.length s - 1] = '\"' ->",
          "let content = String.sub s 1 (String.length s - 2) in",
          "Some (StringToken content)"
        ],
        "start_line": 33,
        "end_line": 35,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_literals.ml"
      },
      {
        "hash": "3362157ec46d4982dfc88b5042ec14c5",
        "text": "| s when String.length s >= 2 && s.[0] = '\"' && s.[String.length s - 1] = '\"' ->\nlet content = String.sub s 1 (String.length s - 2) in\nSome (StringToken content)",
        "lines": [
          "| s when String.length s >= 2 && s.[0] = '\"' && s.[String.length s - 1] = '\"' ->",
          "let content = String.sub s 1 (String.length s - 2) in",
          "Some (StringToken content)"
        ],
        "start_line": 132,
        "end_line": 134,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      }
    ],
    "72631600753ce61397f91d718ed55a81": [
      {
        "hash": "72631600753ce61397f91d718ed55a81",
        "text": "| \"零\" -> Some (ChineseNumberToken \"零\")\n| \"一\" -> Some (ChineseNumberToken \"一\")\n| \"二\" -> Some (ChineseNumberToken \"二\")\n| \"三\" -> Some (ChineseNumberToken \"三\")\n| \"四\" -> Some (ChineseNumberToken \"四\")\n| \"五\" -> Some (ChineseNumberToken \"五\")\n| \"六\" -> Some (ChineseNumberToken \"六\")\n| \"七\" -> Some (ChineseNumberToken \"七\")\n| \"八\" -> Some (ChineseNumberToken \"八\")\n| \"九\" -> Some (ChineseNumberToken \"九\")",
        "lines": [
          "| \"零\" -> Some (ChineseNumberToken \"零\")",
          "| \"一\" -> Some (ChineseNumberToken \"一\")",
          "| \"二\" -> Some (ChineseNumberToken \"二\")",
          "| \"三\" -> Some (ChineseNumberToken \"三\")",
          "| \"四\" -> Some (ChineseNumberToken \"四\")",
          "| \"五\" -> Some (ChineseNumberToken \"五\")",
          "| \"六\" -> Some (ChineseNumberToken \"六\")",
          "| \"七\" -> Some (ChineseNumberToken \"七\")",
          "| \"八\" -> Some (ChineseNumberToken \"八\")",
          "| \"九\" -> Some (ChineseNumberToken \"九\")"
        ],
        "start_line": 37,
        "end_line": 46,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_literals.ml"
      },
      {
        "hash": "72631600753ce61397f91d718ed55a81",
        "text": "| \"零\" -> Some (ChineseNumberToken \"零\")\n| \"一\" -> Some (ChineseNumberToken \"一\")\n| \"二\" -> Some (ChineseNumberToken \"二\")\n| \"三\" -> Some (ChineseNumberToken \"三\")\n| \"四\" -> Some (ChineseNumberToken \"四\")\n| \"五\" -> Some (ChineseNumberToken \"五\")\n| \"六\" -> Some (ChineseNumberToken \"六\")\n| \"七\" -> Some (ChineseNumberToken \"七\")\n| \"八\" -> Some (ChineseNumberToken \"八\")\n| \"九\" -> Some (ChineseNumberToken \"九\")",
        "lines": [
          "| \"零\" -> Some (ChineseNumberToken \"零\")",
          "| \"一\" -> Some (ChineseNumberToken \"一\")",
          "| \"二\" -> Some (ChineseNumberToken \"二\")",
          "| \"三\" -> Some (ChineseNumberToken \"三\")",
          "| \"四\" -> Some (ChineseNumberToken \"四\")",
          "| \"五\" -> Some (ChineseNumberToken \"五\")",
          "| \"六\" -> Some (ChineseNumberToken \"六\")",
          "| \"七\" -> Some (ChineseNumberToken \"七\")",
          "| \"八\" -> Some (ChineseNumberToken \"八\")",
          "| \"九\" -> Some (ChineseNumberToken \"九\")"
        ],
        "start_line": 136,
        "end_line": 145,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      }
    ],
    "8f7b121e3f4db7a392e0ef9e240797ed": [
      {
        "hash": "8f7b121e3f4db7a392e0ef9e240797ed",
        "text": "| \"一\" -> Some (ChineseNumberToken \"一\")\n| \"二\" -> Some (ChineseNumberToken \"二\")\n| \"三\" -> Some (ChineseNumberToken \"三\")\n| \"四\" -> Some (ChineseNumberToken \"四\")\n| \"五\" -> Some (ChineseNumberToken \"五\")\n| \"六\" -> Some (ChineseNumberToken \"六\")\n| \"七\" -> Some (ChineseNumberToken \"七\")\n| \"八\" -> Some (ChineseNumberToken \"八\")\n| \"九\" -> Some (ChineseNumberToken \"九\")\n| \"十\" -> Some (ChineseNumberToken \"十\")",
        "lines": [
          "| \"一\" -> Some (ChineseNumberToken \"一\")",
          "| \"二\" -> Some (ChineseNumberToken \"二\")",
          "| \"三\" -> Some (ChineseNumberToken \"三\")",
          "| \"四\" -> Some (ChineseNumberToken \"四\")",
          "| \"五\" -> Some (ChineseNumberToken \"五\")",
          "| \"六\" -> Some (ChineseNumberToken \"六\")",
          "| \"七\" -> Some (ChineseNumberToken \"七\")",
          "| \"八\" -> Some (ChineseNumberToken \"八\")",
          "| \"九\" -> Some (ChineseNumberToken \"九\")",
          "| \"十\" -> Some (ChineseNumberToken \"十\")"
        ],
        "start_line": 38,
        "end_line": 47,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_literals.ml"
      },
      {
        "hash": "8f7b121e3f4db7a392e0ef9e240797ed",
        "text": "| \"一\" -> Some (ChineseNumberToken \"一\")\n| \"二\" -> Some (ChineseNumberToken \"二\")\n| \"三\" -> Some (ChineseNumberToken \"三\")\n| \"四\" -> Some (ChineseNumberToken \"四\")\n| \"五\" -> Some (ChineseNumberToken \"五\")\n| \"六\" -> Some (ChineseNumberToken \"六\")\n| \"七\" -> Some (ChineseNumberToken \"七\")\n| \"八\" -> Some (ChineseNumberToken \"八\")\n| \"九\" -> Some (ChineseNumberToken \"九\")\n| \"十\" -> Some (ChineseNumberToken \"十\")",
        "lines": [
          "| \"一\" -> Some (ChineseNumberToken \"一\")",
          "| \"二\" -> Some (ChineseNumberToken \"二\")",
          "| \"三\" -> Some (ChineseNumberToken \"三\")",
          "| \"四\" -> Some (ChineseNumberToken \"四\")",
          "| \"五\" -> Some (ChineseNumberToken \"五\")",
          "| \"六\" -> Some (ChineseNumberToken \"六\")",
          "| \"七\" -> Some (ChineseNumberToken \"七\")",
          "| \"八\" -> Some (ChineseNumberToken \"八\")",
          "| \"九\" -> Some (ChineseNumberToken \"九\")",
          "| \"十\" -> Some (ChineseNumberToken \"十\")"
        ],
        "start_line": 137,
        "end_line": 146,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      }
    ],
    "fdfcf3bd6e6f154e68e707d3effe312c": [
      {
        "hash": "fdfcf3bd6e6f154e68e707d3effe312c",
        "text": "| \"二\" -> Some (ChineseNumberToken \"二\")\n| \"三\" -> Some (ChineseNumberToken \"三\")\n| \"四\" -> Some (ChineseNumberToken \"四\")\n| \"五\" -> Some (ChineseNumberToken \"五\")\n| \"六\" -> Some (ChineseNumberToken \"六\")\n| \"七\" -> Some (ChineseNumberToken \"七\")\n| \"八\" -> Some (ChineseNumberToken \"八\")\n| \"九\" -> Some (ChineseNumberToken \"九\")\n| \"十\" -> Some (ChineseNumberToken \"十\")\n| \"百\" -> Some (ChineseNumberToken \"百\")",
        "lines": [
          "| \"二\" -> Some (ChineseNumberToken \"二\")",
          "| \"三\" -> Some (ChineseNumberToken \"三\")",
          "| \"四\" -> Some (ChineseNumberToken \"四\")",
          "| \"五\" -> Some (ChineseNumberToken \"五\")",
          "| \"六\" -> Some (ChineseNumberToken \"六\")",
          "| \"七\" -> Some (ChineseNumberToken \"七\")",
          "| \"八\" -> Some (ChineseNumberToken \"八\")",
          "| \"九\" -> Some (ChineseNumberToken \"九\")",
          "| \"十\" -> Some (ChineseNumberToken \"十\")",
          "| \"百\" -> Some (ChineseNumberToken \"百\")"
        ],
        "start_line": 39,
        "end_line": 48,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_literals.ml"
      },
      {
        "hash": "fdfcf3bd6e6f154e68e707d3effe312c",
        "text": "| \"二\" -> Some (ChineseNumberToken \"二\")\n| \"三\" -> Some (ChineseNumberToken \"三\")\n| \"四\" -> Some (ChineseNumberToken \"四\")\n| \"五\" -> Some (ChineseNumberToken \"五\")\n| \"六\" -> Some (ChineseNumberToken \"六\")\n| \"七\" -> Some (ChineseNumberToken \"七\")\n| \"八\" -> Some (ChineseNumberToken \"八\")\n| \"九\" -> Some (ChineseNumberToken \"九\")\n| \"十\" -> Some (ChineseNumberToken \"十\")\n| \"百\" -> Some (ChineseNumberToken \"百\")",
        "lines": [
          "| \"二\" -> Some (ChineseNumberToken \"二\")",
          "| \"三\" -> Some (ChineseNumberToken \"三\")",
          "| \"四\" -> Some (ChineseNumberToken \"四\")",
          "| \"五\" -> Some (ChineseNumberToken \"五\")",
          "| \"六\" -> Some (ChineseNumberToken \"六\")",
          "| \"七\" -> Some (ChineseNumberToken \"七\")",
          "| \"八\" -> Some (ChineseNumberToken \"八\")",
          "| \"九\" -> Some (ChineseNumberToken \"九\")",
          "| \"十\" -> Some (ChineseNumberToken \"十\")",
          "| \"百\" -> Some (ChineseNumberToken \"百\")"
        ],
        "start_line": 138,
        "end_line": 147,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      }
    ],
    "1a4ea72f0da141faad9fa98ebd3fce1f": [
      {
        "hash": "1a4ea72f0da141faad9fa98ebd3fce1f",
        "text": "| \"三\" -> Some (ChineseNumberToken \"三\")\n| \"四\" -> Some (ChineseNumberToken \"四\")\n| \"五\" -> Some (ChineseNumberToken \"五\")\n| \"六\" -> Some (ChineseNumberToken \"六\")\n| \"七\" -> Some (ChineseNumberToken \"七\")\n| \"八\" -> Some (ChineseNumberToken \"八\")\n| \"九\" -> Some (ChineseNumberToken \"九\")\n| \"十\" -> Some (ChineseNumberToken \"十\")\n| \"百\" -> Some (ChineseNumberToken \"百\")\n| \"千\" -> Some (ChineseNumberToken \"千\")",
        "lines": [
          "| \"三\" -> Some (ChineseNumberToken \"三\")",
          "| \"四\" -> Some (ChineseNumberToken \"四\")",
          "| \"五\" -> Some (ChineseNumberToken \"五\")",
          "| \"六\" -> Some (ChineseNumberToken \"六\")",
          "| \"七\" -> Some (ChineseNumberToken \"七\")",
          "| \"八\" -> Some (ChineseNumberToken \"八\")",
          "| \"九\" -> Some (ChineseNumberToken \"九\")",
          "| \"十\" -> Some (ChineseNumberToken \"十\")",
          "| \"百\" -> Some (ChineseNumberToken \"百\")",
          "| \"千\" -> Some (ChineseNumberToken \"千\")"
        ],
        "start_line": 40,
        "end_line": 49,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_literals.ml"
      },
      {
        "hash": "1a4ea72f0da141faad9fa98ebd3fce1f",
        "text": "| \"三\" -> Some (ChineseNumberToken \"三\")\n| \"四\" -> Some (ChineseNumberToken \"四\")\n| \"五\" -> Some (ChineseNumberToken \"五\")\n| \"六\" -> Some (ChineseNumberToken \"六\")\n| \"七\" -> Some (ChineseNumberToken \"七\")\n| \"八\" -> Some (ChineseNumberToken \"八\")\n| \"九\" -> Some (ChineseNumberToken \"九\")\n| \"十\" -> Some (ChineseNumberToken \"十\")\n| \"百\" -> Some (ChineseNumberToken \"百\")\n| \"千\" -> Some (ChineseNumberToken \"千\")",
        "lines": [
          "| \"三\" -> Some (ChineseNumberToken \"三\")",
          "| \"四\" -> Some (ChineseNumberToken \"四\")",
          "| \"五\" -> Some (ChineseNumberToken \"五\")",
          "| \"六\" -> Some (ChineseNumberToken \"六\")",
          "| \"七\" -> Some (ChineseNumberToken \"七\")",
          "| \"八\" -> Some (ChineseNumberToken \"八\")",
          "| \"九\" -> Some (ChineseNumberToken \"九\")",
          "| \"十\" -> Some (ChineseNumberToken \"十\")",
          "| \"百\" -> Some (ChineseNumberToken \"百\")",
          "| \"千\" -> Some (ChineseNumberToken \"千\")"
        ],
        "start_line": 139,
        "end_line": 148,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      }
    ],
    "fb87230cd71508045c03216df184c650": [
      {
        "hash": "fb87230cd71508045c03216df184c650",
        "text": "| \"四\" -> Some (ChineseNumberToken \"四\")\n| \"五\" -> Some (ChineseNumberToken \"五\")\n| \"六\" -> Some (ChineseNumberToken \"六\")\n| \"七\" -> Some (ChineseNumberToken \"七\")\n| \"八\" -> Some (ChineseNumberToken \"八\")\n| \"九\" -> Some (ChineseNumberToken \"九\")\n| \"十\" -> Some (ChineseNumberToken \"十\")\n| \"百\" -> Some (ChineseNumberToken \"百\")\n| \"千\" -> Some (ChineseNumberToken \"千\")\n| \"万\" -> Some (ChineseNumberToken \"万\")",
        "lines": [
          "| \"四\" -> Some (ChineseNumberToken \"四\")",
          "| \"五\" -> Some (ChineseNumberToken \"五\")",
          "| \"六\" -> Some (ChineseNumberToken \"六\")",
          "| \"七\" -> Some (ChineseNumberToken \"七\")",
          "| \"八\" -> Some (ChineseNumberToken \"八\")",
          "| \"九\" -> Some (ChineseNumberToken \"九\")",
          "| \"十\" -> Some (ChineseNumberToken \"十\")",
          "| \"百\" -> Some (ChineseNumberToken \"百\")",
          "| \"千\" -> Some (ChineseNumberToken \"千\")",
          "| \"万\" -> Some (ChineseNumberToken \"万\")"
        ],
        "start_line": 41,
        "end_line": 50,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_literals.ml"
      },
      {
        "hash": "fb87230cd71508045c03216df184c650",
        "text": "| \"四\" -> Some (ChineseNumberToken \"四\")\n| \"五\" -> Some (ChineseNumberToken \"五\")\n| \"六\" -> Some (ChineseNumberToken \"六\")\n| \"七\" -> Some (ChineseNumberToken \"七\")\n| \"八\" -> Some (ChineseNumberToken \"八\")\n| \"九\" -> Some (ChineseNumberToken \"九\")\n| \"十\" -> Some (ChineseNumberToken \"十\")\n| \"百\" -> Some (ChineseNumberToken \"百\")\n| \"千\" -> Some (ChineseNumberToken \"千\")\n| \"万\" -> Some (ChineseNumberToken \"万\")",
        "lines": [
          "| \"四\" -> Some (ChineseNumberToken \"四\")",
          "| \"五\" -> Some (ChineseNumberToken \"五\")",
          "| \"六\" -> Some (ChineseNumberToken \"六\")",
          "| \"七\" -> Some (ChineseNumberToken \"七\")",
          "| \"八\" -> Some (ChineseNumberToken \"八\")",
          "| \"九\" -> Some (ChineseNumberToken \"九\")",
          "| \"十\" -> Some (ChineseNumberToken \"十\")",
          "| \"百\" -> Some (ChineseNumberToken \"百\")",
          "| \"千\" -> Some (ChineseNumberToken \"千\")",
          "| \"万\" -> Some (ChineseNumberToken \"万\")"
        ],
        "start_line": 140,
        "end_line": 149,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      }
    ],
    "e45ce0d6f492a8adb619948e24aeb978": [
      {
        "hash": "e45ce0d6f492a8adb619948e24aeb978",
        "text": "| \"五\" -> Some (ChineseNumberToken \"五\")\n| \"六\" -> Some (ChineseNumberToken \"六\")\n| \"七\" -> Some (ChineseNumberToken \"七\")\n| \"八\" -> Some (ChineseNumberToken \"八\")\n| \"九\" -> Some (ChineseNumberToken \"九\")\n| \"十\" -> Some (ChineseNumberToken \"十\")\n| \"百\" -> Some (ChineseNumberToken \"百\")\n| \"千\" -> Some (ChineseNumberToken \"千\")\n| \"万\" -> Some (ChineseNumberToken \"万\")",
        "lines": [
          "| \"五\" -> Some (ChineseNumberToken \"五\")",
          "| \"六\" -> Some (ChineseNumberToken \"六\")",
          "| \"七\" -> Some (ChineseNumberToken \"七\")",
          "| \"八\" -> Some (ChineseNumberToken \"八\")",
          "| \"九\" -> Some (ChineseNumberToken \"九\")",
          "| \"十\" -> Some (ChineseNumberToken \"十\")",
          "| \"百\" -> Some (ChineseNumberToken \"百\")",
          "| \"千\" -> Some (ChineseNumberToken \"千\")",
          "| \"万\" -> Some (ChineseNumberToken \"万\")"
        ],
        "start_line": 42,
        "end_line": 50,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_literals.ml"
      },
      {
        "hash": "e45ce0d6f492a8adb619948e24aeb978",
        "text": "| \"五\" -> Some (ChineseNumberToken \"五\")\n| \"六\" -> Some (ChineseNumberToken \"六\")\n| \"七\" -> Some (ChineseNumberToken \"七\")\n| \"八\" -> Some (ChineseNumberToken \"八\")\n| \"九\" -> Some (ChineseNumberToken \"九\")\n| \"十\" -> Some (ChineseNumberToken \"十\")\n| \"百\" -> Some (ChineseNumberToken \"百\")\n| \"千\" -> Some (ChineseNumberToken \"千\")\n| \"万\" -> Some (ChineseNumberToken \"万\")",
        "lines": [
          "| \"五\" -> Some (ChineseNumberToken \"五\")",
          "| \"六\" -> Some (ChineseNumberToken \"六\")",
          "| \"七\" -> Some (ChineseNumberToken \"七\")",
          "| \"八\" -> Some (ChineseNumberToken \"八\")",
          "| \"九\" -> Some (ChineseNumberToken \"九\")",
          "| \"十\" -> Some (ChineseNumberToken \"十\")",
          "| \"百\" -> Some (ChineseNumberToken \"百\")",
          "| \"千\" -> Some (ChineseNumberToken \"千\")",
          "| \"万\" -> Some (ChineseNumberToken \"万\")"
        ],
        "start_line": 141,
        "end_line": 149,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      }
    ],
    "fbba4fde983d947b15ec57ceb490b505": [
      {
        "hash": "fbba4fde983d947b15ec57ceb490b505",
        "text": "| \"六\" -> Some (ChineseNumberToken \"六\")\n| \"七\" -> Some (ChineseNumberToken \"七\")\n| \"八\" -> Some (ChineseNumberToken \"八\")\n| \"九\" -> Some (ChineseNumberToken \"九\")\n| \"十\" -> Some (ChineseNumberToken \"十\")\n| \"百\" -> Some (ChineseNumberToken \"百\")\n| \"千\" -> Some (ChineseNumberToken \"千\")\n| \"万\" -> Some (ChineseNumberToken \"万\")",
        "lines": [
          "| \"六\" -> Some (ChineseNumberToken \"六\")",
          "| \"七\" -> Some (ChineseNumberToken \"七\")",
          "| \"八\" -> Some (ChineseNumberToken \"八\")",
          "| \"九\" -> Some (ChineseNumberToken \"九\")",
          "| \"十\" -> Some (ChineseNumberToken \"十\")",
          "| \"百\" -> Some (ChineseNumberToken \"百\")",
          "| \"千\" -> Some (ChineseNumberToken \"千\")",
          "| \"万\" -> Some (ChineseNumberToken \"万\")"
        ],
        "start_line": 43,
        "end_line": 50,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_literals.ml"
      },
      {
        "hash": "fbba4fde983d947b15ec57ceb490b505",
        "text": "| \"六\" -> Some (ChineseNumberToken \"六\")\n| \"七\" -> Some (ChineseNumberToken \"七\")\n| \"八\" -> Some (ChineseNumberToken \"八\")\n| \"九\" -> Some (ChineseNumberToken \"九\")\n| \"十\" -> Some (ChineseNumberToken \"十\")\n| \"百\" -> Some (ChineseNumberToken \"百\")\n| \"千\" -> Some (ChineseNumberToken \"千\")\n| \"万\" -> Some (ChineseNumberToken \"万\")",
        "lines": [
          "| \"六\" -> Some (ChineseNumberToken \"六\")",
          "| \"七\" -> Some (ChineseNumberToken \"七\")",
          "| \"八\" -> Some (ChineseNumberToken \"八\")",
          "| \"九\" -> Some (ChineseNumberToken \"九\")",
          "| \"十\" -> Some (ChineseNumberToken \"十\")",
          "| \"百\" -> Some (ChineseNumberToken \"百\")",
          "| \"千\" -> Some (ChineseNumberToken \"千\")",
          "| \"万\" -> Some (ChineseNumberToken \"万\")"
        ],
        "start_line": 142,
        "end_line": 149,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      }
    ],
    "604424aa7154f7256c63e1cf1f122f02": [
      {
        "hash": "604424aa7154f7256c63e1cf1f122f02",
        "text": "| \"七\" -> Some (ChineseNumberToken \"七\")\n| \"八\" -> Some (ChineseNumberToken \"八\")\n| \"九\" -> Some (ChineseNumberToken \"九\")\n| \"十\" -> Some (ChineseNumberToken \"十\")\n| \"百\" -> Some (ChineseNumberToken \"百\")\n| \"千\" -> Some (ChineseNumberToken \"千\")\n| \"万\" -> Some (ChineseNumberToken \"万\")",
        "lines": [
          "| \"七\" -> Some (ChineseNumberToken \"七\")",
          "| \"八\" -> Some (ChineseNumberToken \"八\")",
          "| \"九\" -> Some (ChineseNumberToken \"九\")",
          "| \"十\" -> Some (ChineseNumberToken \"十\")",
          "| \"百\" -> Some (ChineseNumberToken \"百\")",
          "| \"千\" -> Some (ChineseNumberToken \"千\")",
          "| \"万\" -> Some (ChineseNumberToken \"万\")"
        ],
        "start_line": 44,
        "end_line": 50,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_literals.ml"
      },
      {
        "hash": "604424aa7154f7256c63e1cf1f122f02",
        "text": "| \"七\" -> Some (ChineseNumberToken \"七\")\n| \"八\" -> Some (ChineseNumberToken \"八\")\n| \"九\" -> Some (ChineseNumberToken \"九\")\n| \"十\" -> Some (ChineseNumberToken \"十\")\n| \"百\" -> Some (ChineseNumberToken \"百\")\n| \"千\" -> Some (ChineseNumberToken \"千\")\n| \"万\" -> Some (ChineseNumberToken \"万\")",
        "lines": [
          "| \"七\" -> Some (ChineseNumberToken \"七\")",
          "| \"八\" -> Some (ChineseNumberToken \"八\")",
          "| \"九\" -> Some (ChineseNumberToken \"九\")",
          "| \"十\" -> Some (ChineseNumberToken \"十\")",
          "| \"百\" -> Some (ChineseNumberToken \"百\")",
          "| \"千\" -> Some (ChineseNumberToken \"千\")",
          "| \"万\" -> Some (ChineseNumberToken \"万\")"
        ],
        "start_line": 143,
        "end_line": 149,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      }
    ],
    "c568bf363c23a67ac8d23d5f2baac3b1": [
      {
        "hash": "c568bf363c23a67ac8d23d5f2baac3b1",
        "text": "| \"八\" -> Some (ChineseNumberToken \"八\")\n| \"九\" -> Some (ChineseNumberToken \"九\")\n| \"十\" -> Some (ChineseNumberToken \"十\")\n| \"百\" -> Some (ChineseNumberToken \"百\")\n| \"千\" -> Some (ChineseNumberToken \"千\")\n| \"万\" -> Some (ChineseNumberToken \"万\")",
        "lines": [
          "| \"八\" -> Some (ChineseNumberToken \"八\")",
          "| \"九\" -> Some (ChineseNumberToken \"九\")",
          "| \"十\" -> Some (ChineseNumberToken \"十\")",
          "| \"百\" -> Some (ChineseNumberToken \"百\")",
          "| \"千\" -> Some (ChineseNumberToken \"千\")",
          "| \"万\" -> Some (ChineseNumberToken \"万\")"
        ],
        "start_line": 45,
        "end_line": 50,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_literals.ml"
      },
      {
        "hash": "c568bf363c23a67ac8d23d5f2baac3b1",
        "text": "| \"八\" -> Some (ChineseNumberToken \"八\")\n| \"九\" -> Some (ChineseNumberToken \"九\")\n| \"十\" -> Some (ChineseNumberToken \"十\")\n| \"百\" -> Some (ChineseNumberToken \"百\")\n| \"千\" -> Some (ChineseNumberToken \"千\")\n| \"万\" -> Some (ChineseNumberToken \"万\")",
        "lines": [
          "| \"八\" -> Some (ChineseNumberToken \"八\")",
          "| \"九\" -> Some (ChineseNumberToken \"九\")",
          "| \"十\" -> Some (ChineseNumberToken \"十\")",
          "| \"百\" -> Some (ChineseNumberToken \"百\")",
          "| \"千\" -> Some (ChineseNumberToken \"千\")",
          "| \"万\" -> Some (ChineseNumberToken \"万\")"
        ],
        "start_line": 144,
        "end_line": 149,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      }
    ],
    "136f9db627bbb7e062dce526e588d169": [
      {
        "hash": "136f9db627bbb7e062dce526e588d169",
        "text": "| \"九\" -> Some (ChineseNumberToken \"九\")\n| \"十\" -> Some (ChineseNumberToken \"十\")\n| \"百\" -> Some (ChineseNumberToken \"百\")\n| \"千\" -> Some (ChineseNumberToken \"千\")\n| \"万\" -> Some (ChineseNumberToken \"万\")",
        "lines": [
          "| \"九\" -> Some (ChineseNumberToken \"九\")",
          "| \"十\" -> Some (ChineseNumberToken \"十\")",
          "| \"百\" -> Some (ChineseNumberToken \"百\")",
          "| \"千\" -> Some (ChineseNumberToken \"千\")",
          "| \"万\" -> Some (ChineseNumberToken \"万\")"
        ],
        "start_line": 46,
        "end_line": 50,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_literals.ml"
      },
      {
        "hash": "136f9db627bbb7e062dce526e588d169",
        "text": "| \"九\" -> Some (ChineseNumberToken \"九\")\n| \"十\" -> Some (ChineseNumberToken \"十\")\n| \"百\" -> Some (ChineseNumberToken \"百\")\n| \"千\" -> Some (ChineseNumberToken \"千\")\n| \"万\" -> Some (ChineseNumberToken \"万\")",
        "lines": [
          "| \"九\" -> Some (ChineseNumberToken \"九\")",
          "| \"十\" -> Some (ChineseNumberToken \"十\")",
          "| \"百\" -> Some (ChineseNumberToken \"百\")",
          "| \"千\" -> Some (ChineseNumberToken \"千\")",
          "| \"万\" -> Some (ChineseNumberToken \"万\")"
        ],
        "start_line": 145,
        "end_line": 149,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      }
    ],
    "dfee883564c1f36e5b8196f10c02590e": [
      {
        "hash": "dfee883564c1f36e5b8196f10c02590e",
        "text": "| \"十\" -> Some (ChineseNumberToken \"十\")\n| \"百\" -> Some (ChineseNumberToken \"百\")\n| \"千\" -> Some (ChineseNumberToken \"千\")\n| \"万\" -> Some (ChineseNumberToken \"万\")",
        "lines": [
          "| \"十\" -> Some (ChineseNumberToken \"十\")",
          "| \"百\" -> Some (ChineseNumberToken \"百\")",
          "| \"千\" -> Some (ChineseNumberToken \"千\")",
          "| \"万\" -> Some (ChineseNumberToken \"万\")"
        ],
        "start_line": 47,
        "end_line": 50,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_literals.ml"
      },
      {
        "hash": "dfee883564c1f36e5b8196f10c02590e",
        "text": "| \"十\" -> Some (ChineseNumberToken \"十\")\n| \"百\" -> Some (ChineseNumberToken \"百\")\n| \"千\" -> Some (ChineseNumberToken \"千\")\n| \"万\" -> Some (ChineseNumberToken \"万\")",
        "lines": [
          "| \"十\" -> Some (ChineseNumberToken \"十\")",
          "| \"百\" -> Some (ChineseNumberToken \"百\")",
          "| \"千\" -> Some (ChineseNumberToken \"千\")",
          "| \"万\" -> Some (ChineseNumberToken \"万\")"
        ],
        "start_line": 146,
        "end_line": 149,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      }
    ],
    "2049ac04afa74495d26103936d49e78e": [
      {
        "hash": "2049ac04afa74495d26103936d49e78e",
        "text": "| \"百\" -> Some (ChineseNumberToken \"百\")\n| \"千\" -> Some (ChineseNumberToken \"千\")\n| \"万\" -> Some (ChineseNumberToken \"万\")",
        "lines": [
          "| \"百\" -> Some (ChineseNumberToken \"百\")",
          "| \"千\" -> Some (ChineseNumberToken \"千\")",
          "| \"万\" -> Some (ChineseNumberToken \"万\")"
        ],
        "start_line": 48,
        "end_line": 50,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_literals.ml"
      },
      {
        "hash": "2049ac04afa74495d26103936d49e78e",
        "text": "| \"百\" -> Some (ChineseNumberToken \"百\")\n| \"千\" -> Some (ChineseNumberToken \"千\")\n| \"万\" -> Some (ChineseNumberToken \"万\")",
        "lines": [
          "| \"百\" -> Some (ChineseNumberToken \"百\")",
          "| \"千\" -> Some (ChineseNumberToken \"千\")",
          "| \"万\" -> Some (ChineseNumberToken \"万\")"
        ],
        "start_line": 147,
        "end_line": 149,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      }
    ],
    "8f27d9d8288f7f4cdcbbc6bb15f13862": [
      {
        "hash": "8f27d9d8288f7f4cdcbbc6bb15f13862",
        "text": "| \"EOF\" -> None\n| \"Whitespace\" -> None\n| \"Newline\" -> None\n| \"Tab\" -> None",
        "lines": [
          "| \"EOF\" -> None",
          "| \"Whitespace\" -> None",
          "| \"Newline\" -> None",
          "| \"Tab\" -> None"
        ],
        "start_line": 57,
        "end_line": 60,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_literals.ml"
      },
      {
        "hash": "8f27d9d8288f7f4cdcbbc6bb15f13862",
        "text": "| \"EOF\" -> None\n| \"Whitespace\" -> None\n| \"Newline\" -> None\n| \"Tab\" -> None",
        "lines": [
          "| \"EOF\" -> None",
          "| \"Whitespace\" -> None",
          "| \"Newline\" -> None",
          "| \"Tab\" -> None"
        ],
        "start_line": 156,
        "end_line": 159,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      }
    ],
    "8ac2a6bc51c9f2a5217b27bf899fe0fa": [
      {
        "hash": "8ac2a6bc51c9f2a5217b27bf899fe0fa",
        "text": "| \"Whitespace\" -> None\n| \"Newline\" -> None\n| \"Tab\" -> None",
        "lines": [
          "| \"Whitespace\" -> None",
          "| \"Newline\" -> None",
          "| \"Tab\" -> None"
        ],
        "start_line": 58,
        "end_line": 60,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_literals.ml"
      },
      {
        "hash": "8ac2a6bc51c9f2a5217b27bf899fe0fa",
        "text": "| \"Whitespace\" -> None\n| \"Newline\" -> None\n| \"Tab\" -> None",
        "lines": [
          "| \"Whitespace\" -> None",
          "| \"Newline\" -> None",
          "| \"Tab\" -> None"
        ],
        "start_line": 157,
        "end_line": 159,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      }
    ],
    "54f6483c99f3e980ea2b8b60299710ce": [
      {
        "hash": "54f6483c99f3e980ea2b8b60299710ce",
        "text": "| s\nwhen String.length s > 0\n&&\nlet code = Char.code s.[0] in\ncode > 127 ->\nSome (IdentifierToken s)",
        "lines": [
          "| s",
          "when String.length s > 0",
          "&&",
          "let code = Char.code s.[0] in",
          "code > 127 ->",
          "Some (IdentifierToken s)"
        ],
        "start_line": 72,
        "end_line": 77,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_literals.ml"
      },
      {
        "hash": "54f6483c99f3e980ea2b8b60299710ce",
        "text": "| s\nwhen String.length s > 0\n&&\nlet code = Char.code s.[0] in\ncode > 127 ->\nSome (IdentifierToken s)",
        "lines": [
          "| s",
          "when String.length s > 0",
          "&&",
          "let code = Char.code s.[0] in",
          "code > 127 ->",
          "Some (IdentifierToken s)"
        ],
        "start_line": 171,
        "end_line": 176,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      }
    ],
    "41287ba0c524a2bc4fd023bf9e239be4": [
      {
        "hash": "41287ba0c524a2bc4fd023bf9e239be4",
        "text": "when String.length s > 0\n&&\nlet code = Char.code s.[0] in\ncode > 127 ->\nSome (IdentifierToken s)",
        "lines": [
          "when String.length s > 0",
          "&&",
          "let code = Char.code s.[0] in",
          "code > 127 ->",
          "Some (IdentifierToken s)"
        ],
        "start_line": 73,
        "end_line": 77,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_literals.ml"
      },
      {
        "hash": "41287ba0c524a2bc4fd023bf9e239be4",
        "text": "when String.length s > 0\n&&\nlet code = Char.code s.[0] in\ncode > 127 ->\nSome (IdentifierToken s)",
        "lines": [
          "when String.length s > 0",
          "&&",
          "let code = Char.code s.[0] in",
          "code > 127 ->",
          "Some (IdentifierToken s)"
        ],
        "start_line": 172,
        "end_line": 176,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      }
    ],
    "32e50d6ecbb29ddfe84d53a29cc4948d": [
      {
        "hash": "32e50d6ecbb29ddfe84d53a29cc4948d",
        "text": "&&\nlet code = Char.code s.[0] in\ncode > 127 ->\nSome (IdentifierToken s)",
        "lines": [
          "&&",
          "let code = Char.code s.[0] in",
          "code > 127 ->",
          "Some (IdentifierToken s)"
        ],
        "start_line": 74,
        "end_line": 77,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_literals.ml"
      },
      {
        "hash": "32e50d6ecbb29ddfe84d53a29cc4948d",
        "text": "&&\nlet code = Char.code s.[0] in\ncode > 127 ->\nSome (IdentifierToken s)",
        "lines": [
          "&&",
          "let code = Char.code s.[0] in",
          "code > 127 ->",
          "Some (IdentifierToken s)"
        ],
        "start_line": 173,
        "end_line": 176,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      }
    ],
    "7564911d9e03bb69ff3530203b787d9d": [
      {
        "hash": "7564911d9e03bb69ff3530203b787d9d",
        "text": "let code = Char.code s.[0] in\ncode > 127 ->\nSome (IdentifierToken s)",
        "lines": [
          "let code = Char.code s.[0] in",
          "code > 127 ->",
          "Some (IdentifierToken s)"
        ],
        "start_line": 75,
        "end_line": 77,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_literals.ml"
      },
      {
        "hash": "7564911d9e03bb69ff3530203b787d9d",
        "text": "let code = Char.code s.[0] in\ncode > 127 ->\nSome (IdentifierToken s)",
        "lines": [
          "let code = Char.code s.[0] in",
          "code > 127 ->",
          "Some (IdentifierToken s)"
        ],
        "start_line": 174,
        "end_line": 176,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      }
    ],
    "067d6b0be0dfa94c2f67d33315ad322c": [
      {
        "hash": "067d6b0be0dfa94c2f67d33315ad322c",
        "text": "| s when String.length s >= 3 && s.[0] = '\\'' && s.[String.length s - 1] = '\\'' ->\nlet content = String.sub s 1 (String.length s - 2) in\nSome (QuotedIdentifierToken content)",
        "lines": [
          "| s when String.length s >= 3 && s.[0] = '\\'' && s.[String.length s - 1] = '\\'' ->",
          "let content = String.sub s 1 (String.length s - 2) in",
          "Some (QuotedIdentifierToken content)"
        ],
        "start_line": 79,
        "end_line": 81,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_literals.ml"
      },
      {
        "hash": "067d6b0be0dfa94c2f67d33315ad322c",
        "text": "| s when String.length s >= 3 && s.[0] = '\\'' && s.[String.length s - 1] = '\\'' ->\nlet content = String.sub s 1 (String.length s - 2) in\nSome (QuotedIdentifierToken content)",
        "lines": [
          "| s when String.length s >= 3 && s.[0] = '\\'' && s.[String.length s - 1] = '\\'' ->",
          "let content = String.sub s 1 (String.length s - 2) in",
          "Some (QuotedIdentifierToken content)"
        ],
        "start_line": 178,
        "end_line": 180,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      }
    ],
    "23adca34527da475161427679ddf10c7": [
      {
        "hash": "23adca34527da475161427679ddf10c7",
        "text": "| \"\\n\" -> Some Newline\n| \"\\t\" -> Some Whitespace\n| \"\\\\n\" -> Some Newline\n| \"\\\\t\" -> Some Whitespace",
        "lines": [
          "| \"\\n\" -> Some Newline",
          "| \"\\t\" -> Some Whitespace",
          "| \"\\\\n\" -> Some Newline",
          "| \"\\\\t\" -> Some Whitespace"
        ],
        "start_line": 90,
        "end_line": 93,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_literals.ml"
      },
      {
        "hash": "23adca34527da475161427679ddf10c7",
        "text": "| \"\\n\" -> Some Newline\n| \"\\t\" -> Some Whitespace\n| \"\\\\n\" -> Some Newline\n| \"\\\\t\" -> Some Whitespace",
        "lines": [
          "| \"\\n\" -> Some Newline",
          "| \"\\t\" -> Some Whitespace",
          "| \"\\\\n\" -> Some Newline",
          "| \"\\\\t\" -> Some Whitespace"
        ],
        "start_line": 189,
        "end_line": 192,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      }
    ],
    "13890782c00e864d3061d8df0db3a060": [
      {
        "hash": "13890782c00e864d3061d8df0db3a060",
        "text": "| \"\\t\" -> Some Whitespace\n| \"\\\\n\" -> Some Newline\n| \"\\\\t\" -> Some Whitespace",
        "lines": [
          "| \"\\t\" -> Some Whitespace",
          "| \"\\\\n\" -> Some Newline",
          "| \"\\\\t\" -> Some Whitespace"
        ],
        "start_line": 91,
        "end_line": 93,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_literals.ml"
      },
      {
        "hash": "13890782c00e864d3061d8df0db3a060",
        "text": "| \"\\t\" -> Some Whitespace\n| \"\\\\n\" -> Some Newline\n| \"\\\\t\" -> Some Whitespace",
        "lines": [
          "| \"\\t\" -> Some Whitespace",
          "| \"\\\\n\" -> Some Newline",
          "| \"\\\\t\" -> Some Whitespace"
        ],
        "start_line": 190,
        "end_line": 192,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      }
    ],
    "262ddbcbb27fdcf6665612ed7a7b14a7": [
      {
        "hash": "262ddbcbb27fdcf6665612ed7a7b14a7",
        "text": "| s\nwhen String.length s >= 4\n&& String.sub s 0 2 = \"(*\"\n&& String.sub s (String.length s - 2) 2 = \"*)\" ->\nlet content = String.sub s 2 (String.length s - 4) in\nSome (Comment content)\n| s when String.length s >= 2 && String.sub s 0 2 = \"\nlet content = String.sub s 2 (String.length s - 2) in\nSome (Comment content)",
        "lines": [
          "| s",
          "when String.length s >= 4",
          "&& String.sub s 0 2 = \"(*\"",
          "&& String.sub s (String.length s - 2) 2 = \"*)\" ->",
          "let content = String.sub s 2 (String.length s - 4) in",
          "Some (Comment content)",
          "| s when String.length s >= 2 && String.sub s 0 2 = \"",
          "let content = String.sub s 2 (String.length s - 2) in",
          "Some (Comment content)"
        ],
        "start_line": 95,
        "end_line": 103,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_literals.ml"
      },
      {
        "hash": "262ddbcbb27fdcf6665612ed7a7b14a7",
        "text": "| s\nwhen String.length s >= 4\n&& String.sub s 0 2 = \"(*\"\n&& String.sub s (String.length s - 2) 2 = \"*)\" ->\nlet content = String.sub s 2 (String.length s - 4) in\nSome (Comment content)\n| s when String.length s >= 2 && String.sub s 0 2 = \"\nlet content = String.sub s 2 (String.length s - 2) in\nSome (Comment content)",
        "lines": [
          "| s",
          "when String.length s >= 4",
          "&& String.sub s 0 2 = \"(*\"",
          "&& String.sub s (String.length s - 2) 2 = \"*)\" ->",
          "let content = String.sub s 2 (String.length s - 4) in",
          "Some (Comment content)",
          "| s when String.length s >= 2 && String.sub s 0 2 = \"",
          "let content = String.sub s 2 (String.length s - 2) in",
          "Some (Comment content)"
        ],
        "start_line": 194,
        "end_line": 202,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      }
    ],
    "de707dc633ad8f2dffdd10e8a5ca4f37": [
      {
        "hash": "de707dc633ad8f2dffdd10e8a5ca4f37",
        "text": "when String.length s >= 4\n&& String.sub s 0 2 = \"(*\"\n&& String.sub s (String.length s - 2) 2 = \"*)\" ->\nlet content = String.sub s 2 (String.length s - 4) in\nSome (Comment content)\n| s when String.length s >= 2 && String.sub s 0 2 = \"\nlet content = String.sub s 2 (String.length s - 2) in\nSome (Comment content)",
        "lines": [
          "when String.length s >= 4",
          "&& String.sub s 0 2 = \"(*\"",
          "&& String.sub s (String.length s - 2) 2 = \"*)\" ->",
          "let content = String.sub s 2 (String.length s - 4) in",
          "Some (Comment content)",
          "| s when String.length s >= 2 && String.sub s 0 2 = \"",
          "let content = String.sub s 2 (String.length s - 2) in",
          "Some (Comment content)"
        ],
        "start_line": 96,
        "end_line": 103,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_literals.ml"
      },
      {
        "hash": "de707dc633ad8f2dffdd10e8a5ca4f37",
        "text": "when String.length s >= 4\n&& String.sub s 0 2 = \"(*\"\n&& String.sub s (String.length s - 2) 2 = \"*)\" ->\nlet content = String.sub s 2 (String.length s - 4) in\nSome (Comment content)\n| s when String.length s >= 2 && String.sub s 0 2 = \"\nlet content = String.sub s 2 (String.length s - 2) in\nSome (Comment content)",
        "lines": [
          "when String.length s >= 4",
          "&& String.sub s 0 2 = \"(*\"",
          "&& String.sub s (String.length s - 2) 2 = \"*)\" ->",
          "let content = String.sub s 2 (String.length s - 4) in",
          "Some (Comment content)",
          "| s when String.length s >= 2 && String.sub s 0 2 = \"",
          "let content = String.sub s 2 (String.length s - 2) in",
          "Some (Comment content)"
        ],
        "start_line": 195,
        "end_line": 202,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      }
    ],
    "5e5b45539f753a0e5b33a9ae9e736f48": [
      {
        "hash": "5e5b45539f753a0e5b33a9ae9e736f48",
        "text": "&& String.sub s 0 2 = \"(*\"\n&& String.sub s (String.length s - 2) 2 = \"*)\" ->\nlet content = String.sub s 2 (String.length s - 4) in\nSome (Comment content)\n| s when String.length s >= 2 && String.sub s 0 2 = \"\nlet content = String.sub s 2 (String.length s - 2) in\nSome (Comment content)",
        "lines": [
          "&& String.sub s 0 2 = \"(*\"",
          "&& String.sub s (String.length s - 2) 2 = \"*)\" ->",
          "let content = String.sub s 2 (String.length s - 4) in",
          "Some (Comment content)",
          "| s when String.length s >= 2 && String.sub s 0 2 = \"",
          "let content = String.sub s 2 (String.length s - 2) in",
          "Some (Comment content)"
        ],
        "start_line": 97,
        "end_line": 103,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_literals.ml"
      },
      {
        "hash": "5e5b45539f753a0e5b33a9ae9e736f48",
        "text": "&& String.sub s 0 2 = \"(*\"\n&& String.sub s (String.length s - 2) 2 = \"*)\" ->\nlet content = String.sub s 2 (String.length s - 4) in\nSome (Comment content)\n| s when String.length s >= 2 && String.sub s 0 2 = \"\nlet content = String.sub s 2 (String.length s - 2) in\nSome (Comment content)",
        "lines": [
          "&& String.sub s 0 2 = \"(*\"",
          "&& String.sub s (String.length s - 2) 2 = \"*)\" ->",
          "let content = String.sub s 2 (String.length s - 4) in",
          "Some (Comment content)",
          "| s when String.length s >= 2 && String.sub s 0 2 = \"",
          "let content = String.sub s 2 (String.length s - 2) in",
          "Some (Comment content)"
        ],
        "start_line": 196,
        "end_line": 202,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      }
    ],
    "89d8932c6a578e18c5768d648f30a879": [
      {
        "hash": "89d8932c6a578e18c5768d648f30a879",
        "text": "&& String.sub s (String.length s - 2) 2 = \"*)\" ->\nlet content = String.sub s 2 (String.length s - 4) in\nSome (Comment content)\n| s when String.length s >= 2 && String.sub s 0 2 = \"\nlet content = String.sub s 2 (String.length s - 2) in\nSome (Comment content)",
        "lines": [
          "&& String.sub s (String.length s - 2) 2 = \"*)\" ->",
          "let content = String.sub s 2 (String.length s - 4) in",
          "Some (Comment content)",
          "| s when String.length s >= 2 && String.sub s 0 2 = \"",
          "let content = String.sub s 2 (String.length s - 2) in",
          "Some (Comment content)"
        ],
        "start_line": 98,
        "end_line": 103,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_literals.ml"
      },
      {
        "hash": "89d8932c6a578e18c5768d648f30a879",
        "text": "&& String.sub s (String.length s - 2) 2 = \"*)\" ->\nlet content = String.sub s 2 (String.length s - 4) in\nSome (Comment content)\n| s when String.length s >= 2 && String.sub s 0 2 = \"\nlet content = String.sub s 2 (String.length s - 2) in\nSome (Comment content)",
        "lines": [
          "&& String.sub s (String.length s - 2) 2 = \"*)\" ->",
          "let content = String.sub s 2 (String.length s - 4) in",
          "Some (Comment content)",
          "| s when String.length s >= 2 && String.sub s 0 2 = \"",
          "let content = String.sub s 2 (String.length s - 2) in",
          "Some (Comment content)"
        ],
        "start_line": 197,
        "end_line": 202,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      }
    ],
    "9ea622d8a34801b2044eb842cdc59b26": [
      {
        "hash": "9ea622d8a34801b2044eb842cdc59b26",
        "text": "let content = String.sub s 2 (String.length s - 4) in\nSome (Comment content)\n| s when String.length s >= 2 && String.sub s 0 2 = \"\nlet content = String.sub s 2 (String.length s - 2) in\nSome (Comment content)",
        "lines": [
          "let content = String.sub s 2 (String.length s - 4) in",
          "Some (Comment content)",
          "| s when String.length s >= 2 && String.sub s 0 2 = \"",
          "let content = String.sub s 2 (String.length s - 2) in",
          "Some (Comment content)"
        ],
        "start_line": 99,
        "end_line": 103,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_literals.ml"
      },
      {
        "hash": "9ea622d8a34801b2044eb842cdc59b26",
        "text": "let content = String.sub s 2 (String.length s - 4) in\nSome (Comment content)\n| s when String.length s >= 2 && String.sub s 0 2 = \"\nlet content = String.sub s 2 (String.length s - 2) in\nSome (Comment content)",
        "lines": [
          "let content = String.sub s 2 (String.length s - 4) in",
          "Some (Comment content)",
          "| s when String.length s >= 2 && String.sub s 0 2 = \"",
          "let content = String.sub s 2 (String.length s - 2) in",
          "Some (Comment content)"
        ],
        "start_line": 198,
        "end_line": 202,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      }
    ],
    "c260daebc39517a29f07a41d2093cc39": [
      {
        "hash": "c260daebc39517a29f07a41d2093cc39",
        "text": "Some (Comment content)\n| s when String.length s >= 2 && String.sub s 0 2 = \"\nlet content = String.sub s 2 (String.length s - 2) in\nSome (Comment content)",
        "lines": [
          "Some (Comment content)",
          "| s when String.length s >= 2 && String.sub s 0 2 = \"",
          "let content = String.sub s 2 (String.length s - 2) in",
          "Some (Comment content)"
        ],
        "start_line": 100,
        "end_line": 103,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_literals.ml"
      },
      {
        "hash": "c260daebc39517a29f07a41d2093cc39",
        "text": "Some (Comment content)\n| s when String.length s >= 2 && String.sub s 0 2 = \"\nlet content = String.sub s 2 (String.length s - 2) in\nSome (Comment content)",
        "lines": [
          "Some (Comment content)",
          "| s when String.length s >= 2 && String.sub s 0 2 = \"",
          "let content = String.sub s 2 (String.length s - 2) in",
          "Some (Comment content)"
        ],
        "start_line": 199,
        "end_line": 202,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      }
    ],
    "ada5e4826881dc24746edfcaf87b09c9": [
      {
        "hash": "ada5e4826881dc24746edfcaf87b09c9",
        "text": "| s when String.length s >= 2 && String.sub s 0 2 = \"\nlet content = String.sub s 2 (String.length s - 2) in\nSome (Comment content)",
        "lines": [
          "| s when String.length s >= 2 && String.sub s 0 2 = \"",
          "let content = String.sub s 2 (String.length s - 2) in",
          "Some (Comment content)"
        ],
        "start_line": 101,
        "end_line": 103,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_literals.ml"
      },
      {
        "hash": "ada5e4826881dc24746edfcaf87b09c9",
        "text": "| s when String.length s >= 2 && String.sub s 0 2 = \"\nlet content = String.sub s 2 (String.length s - 2) in\nSome (Comment content)",
        "lines": [
          "| s when String.length s >= 2 && String.sub s 0 2 = \"",
          "let content = String.sub s 2 (String.length s - 2) in",
          "Some (Comment content)"
        ],
        "start_line": 200,
        "end_line": 202,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      }
    ],
    "c44d51fe09c8a5f183b8947f587d35d1": [
      {
        "hash": "c44d51fe09c8a5f183b8947f587d35d1",
        "text": "open Ast\nopen Types\nopen Semantic_context",
        "lines": [
          "open Ast",
          "open Types",
          "open Semantic_context"
        ],
        "start_line": 3,
        "end_line": 5,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/semantic_types.ml"
      },
      {
        "hash": "c44d51fe09c8a5f183b8947f587d35d1",
        "text": "open Ast\nopen Types\nopen Semantic_context",
        "lines": [
          "open Ast",
          "open Types",
          "open Semantic_context"
        ],
        "start_line": 3,
        "end_line": 5,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/semantic_errors.ml"
      }
    ],
    "0e2a60a66c9ed2a568f5233a495987e6": [
      {
        "hash": "0e2a60a66c9ed2a568f5233a495987e6",
        "text": "input : string;\nposition : int;\nlength : int;\ncurrent_line : int;\ncurrent_column : int;\nfilename : string;\n}",
        "lines": [
          "input : string;",
          "position : int;",
          "length : int;",
          "current_line : int;",
          "current_column : int;",
          "filename : string;",
          "}"
        ],
        "start_line": 9,
        "end_line": 15,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/keyword_matcher_modular.ml"
      },
      {
        "hash": "0e2a60a66c9ed2a568f5233a495987e6",
        "text": "input : string;\nposition : int;\nlength : int;\ncurrent_line : int;\ncurrent_column : int;\nfilename : string;\n}",
        "lines": [
          "input : string;",
          "position : int;",
          "length : int;",
          "current_line : int;",
          "current_column : int;",
          "filename : string;",
          "}"
        ],
        "start_line": 6,
        "end_line": 12,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/keyword_matcher.ml"
      }
    ],
    "11004cfd1295d6b1cd1e3d3774dfdd13": [
      {
        "hash": "11004cfd1295d6b1cd1e3d3774dfdd13",
        "text": "position : int;\nlength : int;\ncurrent_line : int;\ncurrent_column : int;\nfilename : string;\n}",
        "lines": [
          "position : int;",
          "length : int;",
          "current_line : int;",
          "current_column : int;",
          "filename : string;",
          "}"
        ],
        "start_line": 10,
        "end_line": 15,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/keyword_matcher_modular.ml"
      },
      {
        "hash": "11004cfd1295d6b1cd1e3d3774dfdd13",
        "text": "position : int;\nlength : int;\ncurrent_line : int;\ncurrent_column : int;\nfilename : string;\n}",
        "lines": [
          "position : int;",
          "length : int;",
          "current_line : int;",
          "current_column : int;",
          "filename : string;",
          "}"
        ],
        "start_line": 7,
        "end_line": 12,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/keyword_matcher.ml"
      }
    ],
    "e0f8f5bd2044cc88c4a447f16d77ceb1": [
      {
        "hash": "e0f8f5bd2044cc88c4a447f16d77ceb1",
        "text": "length : int;\ncurrent_line : int;\ncurrent_column : int;\nfilename : string;\n}",
        "lines": [
          "length : int;",
          "current_line : int;",
          "current_column : int;",
          "filename : string;",
          "}"
        ],
        "start_line": 11,
        "end_line": 15,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/keyword_matcher_modular.ml"
      },
      {
        "hash": "e0f8f5bd2044cc88c4a447f16d77ceb1",
        "text": "length : int;\ncurrent_line : int;\ncurrent_column : int;\nfilename : string;\n}",
        "lines": [
          "length : int;",
          "current_line : int;",
          "current_column : int;",
          "filename : string;",
          "}"
        ],
        "start_line": 8,
        "end_line": 12,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/keyword_matcher.ml"
      }
    ],
    "3cc9cc7f20d893f9188d8f829751eea1": [
      {
        "hash": "3cc9cc7f20d893f9188d8f829751eea1",
        "text": "current_line : int;\ncurrent_column : int;\nfilename : string;\n}",
        "lines": [
          "current_line : int;",
          "current_column : int;",
          "filename : string;",
          "}"
        ],
        "start_line": 12,
        "end_line": 15,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/keyword_matcher_modular.ml"
      },
      {
        "hash": "3cc9cc7f20d893f9188d8f829751eea1",
        "text": "current_line : int;\ncurrent_column : int;\nfilename : string;\n}",
        "lines": [
          "current_line : int;",
          "current_column : int;",
          "filename : string;",
          "}"
        ],
        "start_line": 9,
        "end_line": 12,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/keyword_matcher.ml"
      },
      {
        "hash": "3cc9cc7f20d893f9188d8f829751eea1",
        "text": "current_line : int;\ncurrent_column : int;\nfilename : string;\n}",
        "lines": [
          "current_line : int;",
          "current_column : int;",
          "filename : string;",
          "}"
        ],
        "start_line": 10,
        "end_line": 13,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_state.ml"
      }
    ],
    "fd486b945500dfa7e6cdbabbcfff5b8b": [
      {
        "hash": "fd486b945500dfa7e6cdbabbcfff5b8b",
        "text": "current_column : int;\nfilename : string;\n}",
        "lines": [
          "current_column : int;",
          "filename : string;",
          "}"
        ],
        "start_line": 13,
        "end_line": 15,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/keyword_matcher_modular.ml"
      },
      {
        "hash": "fd486b945500dfa7e6cdbabbcfff5b8b",
        "text": "current_column : int;\nfilename : string;\n}",
        "lines": [
          "current_column : int;",
          "filename : string;",
          "}"
        ],
        "start_line": 10,
        "end_line": 12,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/keyword_matcher.ml"
      },
      {
        "hash": "fd486b945500dfa7e6cdbabbcfff5b8b",
        "text": "current_column : int;\nfilename : string;\n}",
        "lines": [
          "current_column : int;",
          "filename : string;",
          "}"
        ],
        "start_line": 11,
        "end_line": 13,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_state.ml"
      }
    ],
    "9bcda92af0e4b0e597a0c670f22fa5e4": [
      {
        "hash": "9bcda92af0e4b0e597a0c670f22fa5e4",
        "text": "重构目的：大型模块细化 - Fix #893\n@author 骆言AI代理\n@version 1.0\n@since 2025-07-22 *)",
        "lines": [
          "重构目的：大型模块细化 - Fix #893",
          "@author 骆言AI代理",
          "@version 1.0",
          "@since 2025-07-22 *)"
        ],
        "start_line": 5,
        "end_line": 8,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/formatter_core.ml"
      },
      {
        "hash": "9bcda92af0e4b0e597a0c670f22fa5e4",
        "text": "重构目的：大型模块细化 - Fix #893\n@author 骆言AI代理\n@version 1.0\n@since 2025-07-22 *)",
        "lines": [
          "重构目的：大型模块细化 - Fix #893",
          "@author 骆言AI代理",
          "@version 1.0",
          "@since 2025-07-22 *)"
        ],
        "start_line": 5,
        "end_line": 8,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/formatter_poetry.ml"
      },
      {
        "hash": "9bcda92af0e4b0e597a0c670f22fa5e4",
        "text": "重构目的：大型模块细化 - Fix #893\n@author 骆言AI代理\n@version 1.0\n@since 2025-07-22 *)",
        "lines": [
          "重构目的：大型模块细化 - Fix #893",
          "@author 骆言AI代理",
          "@version 1.0",
          "@since 2025-07-22 *)"
        ],
        "start_line": 5,
        "end_line": 8,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/formatter_codegen.ml"
      },
      {
        "hash": "9bcda92af0e4b0e597a0c670f22fa5e4",
        "text": "重构目的：大型模块细化 - Fix #893\n@author 骆言AI代理\n@version 1.0\n@since 2025-07-22 *)",
        "lines": [
          "重构目的：大型模块细化 - Fix #893",
          "@author 骆言AI代理",
          "@version 1.0",
          "@since 2025-07-22 *)"
        ],
        "start_line": 5,
        "end_line": 8,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/formatter_logging.ml"
      },
      {
        "hash": "9bcda92af0e4b0e597a0c670f22fa5e4",
        "text": "重构目的：大型模块细化 - Fix #893\n@author 骆言AI代理\n@version 1.0\n@since 2025-07-22 *)",
        "lines": [
          "重构目的：大型模块细化 - Fix #893",
          "@author 骆言AI代理",
          "@version 1.0",
          "@since 2025-07-22 *)"
        ],
        "start_line": 5,
        "end_line": 8,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/formatter_tokens.ml"
      },
      {
        "hash": "9bcda92af0e4b0e597a0c670f22fa5e4",
        "text": "重构目的：大型模块细化 - Fix #893\n@author 骆言AI代理\n@version 1.0\n@since 2025-07-22 *)",
        "lines": [
          "重构目的：大型模块细化 - Fix #893",
          "@author 骆言AI代理",
          "@version 1.0",
          "@since 2025-07-22 *)"
        ],
        "start_line": 5,
        "end_line": 8,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/formatter_errors.ml"
      }
    ],
    "c8e25ae5ea3804787af7cf0b2119f4ee": [
      {
        "hash": "c8e25ae5ea3804787af7cf0b2119f4ee",
        "text": "@author 骆言AI代理\n@version 1.0\n@since 2025-07-22 *)",
        "lines": [
          "@author 骆言AI代理",
          "@version 1.0",
          "@since 2025-07-22 *)"
        ],
        "start_line": 6,
        "end_line": 8,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/formatter_core.ml"
      },
      {
        "hash": "c8e25ae5ea3804787af7cf0b2119f4ee",
        "text": "@author 骆言AI代理\n@version 1.0\n@since 2025-07-22 *)",
        "lines": [
          "@author 骆言AI代理",
          "@version 1.0",
          "@since 2025-07-22 *)"
        ],
        "start_line": 6,
        "end_line": 8,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/formatter_poetry.ml"
      },
      {
        "hash": "c8e25ae5ea3804787af7cf0b2119f4ee",
        "text": "@author 骆言AI代理\n@version 1.0\n@since 2025-07-22 *)",
        "lines": [
          "@author 骆言AI代理",
          "@version 1.0",
          "@since 2025-07-22 *)"
        ],
        "start_line": 6,
        "end_line": 8,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/formatter_codegen.ml"
      },
      {
        "hash": "c8e25ae5ea3804787af7cf0b2119f4ee",
        "text": "@author 骆言AI代理\n@version 1.0\n@since 2025-07-22 *)",
        "lines": [
          "@author 骆言AI代理",
          "@version 1.0",
          "@since 2025-07-22 *)"
        ],
        "start_line": 6,
        "end_line": 8,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/formatter_logging.ml"
      },
      {
        "hash": "c8e25ae5ea3804787af7cf0b2119f4ee",
        "text": "@author 骆言AI代理\n@version 1.0\n@since 2025-07-22 *)",
        "lines": [
          "@author 骆言AI代理",
          "@version 1.0",
          "@since 2025-07-22 *)"
        ],
        "start_line": 6,
        "end_line": 8,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/formatter_tokens.ml"
      },
      {
        "hash": "c8e25ae5ea3804787af7cf0b2119f4ee",
        "text": "@author 骆言AI代理\n@version 1.0\n@since 2025-07-22 *)",
        "lines": [
          "@author 骆言AI代理",
          "@version 1.0",
          "@since 2025-07-22 *)"
        ],
        "start_line": 6,
        "end_line": 8,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/formatter_errors.ml"
      }
    ],
    "c65a0821165c55c0f2892501254210c4": [
      {
        "hash": "c65a0821165c55c0f2892501254210c4",
        "text": "\" 个\\n\";\n\"分类详情: \";\ncategories_detail;\n\"\\n \";\n]",
        "lines": [
          "\" 个\\n\";",
          "\"分类详情: \";",
          "categories_detail;",
          "\"\\n \";",
          "]"
        ],
        "start_line": 141,
        "end_line": 145,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/formatter_core.ml"
      },
      {
        "hash": "c65a0821165c55c0f2892501254210c4",
        "text": "\" 个\\n\";\n\"分类详情: \";\ncategories_detail;\n\"\\n \";\n]",
        "lines": [
          "\" 个\\n\";",
          "\"分类详情: \";",
          "categories_detail;",
          "\"\\n \";",
          "]"
        ],
        "start_line": 27,
        "end_line": 31,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/token_registry_stats.ml"
      }
    ],
    "02979480f70a2a34f15f7ffb0c33c10f": [
      {
        "hash": "02979480f70a2a34f15f7ffb0c33c10f",
        "text": "\"分类详情: \";\ncategories_detail;\n\"\\n \";\n]",
        "lines": [
          "\"分类详情: \";",
          "categories_detail;",
          "\"\\n \";",
          "]"
        ],
        "start_line": 142,
        "end_line": 145,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/formatter_core.ml"
      },
      {
        "hash": "02979480f70a2a34f15f7ffb0c33c10f",
        "text": "\"分类详情: \";\ncategories_detail;\n\"\\n \";\n]",
        "lines": [
          "\"分类详情: \";",
          "categories_detail;",
          "\"\\n \";",
          "]"
        ],
        "start_line": 28,
        "end_line": 31,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/token_registry_stats.ml"
      }
    ],
    "1b2fdd4d98b3365115bdf1824c4056a5": [
      {
        "hash": "1b2fdd4d98b3365115bdf1824c4056a5",
        "text": "categories_detail;\n\"\\n \";\n]",
        "lines": [
          "categories_detail;",
          "\"\\n \";",
          "]"
        ],
        "start_line": 143,
        "end_line": 145,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/formatter_core.ml"
      },
      {
        "hash": "1b2fdd4d98b3365115bdf1824c4056a5",
        "text": "categories_detail;\n\"\\n \";\n]",
        "lines": [
          "categories_detail;",
          "\"\\n \";",
          "]"
        ],
        "start_line": 29,
        "end_line": 31,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/token_registry_stats.ml"
      }
    ],
    "787e4a9290d067920336d0edfeb2d860": [
      {
        "hash": "787e4a9290d067920336d0edfeb2d860",
        "text": "@author 骆言AI代理\n@version 1.0\n@since 2025-07-24 *)",
        "lines": [
          "@author 骆言AI代理",
          "@version 1.0",
          "@since 2025-07-24 *)"
        ],
        "start_line": 13,
        "end_line": 15,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_calls.ml"
      },
      {
        "hash": "787e4a9290d067920336d0edfeb2d860",
        "text": "@author 骆言AI代理\n@version 1.0\n@since 2025-07-24 *)",
        "lines": [
          "@author 骆言AI代理",
          "@version 1.0",
          "@since 2025-07-24 *)"
        ],
        "start_line": 10,
        "end_line": 12,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_constructs.ml"
      },
      {
        "hash": "787e4a9290d067920336d0edfeb2d860",
        "text": "@author 骆言AI代理\n@version 1.0\n@since 2025-07-24 *)",
        "lines": [
          "@author 骆言AI代理",
          "@version 1.0",
          "@since 2025-07-24 *)"
        ],
        "start_line": 20,
        "end_line": 22,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_operators.ml"
      },
      {
        "hash": "787e4a9290d067920336d0edfeb2d860",
        "text": "@author 骆言AI代理\n@version 1.0\n@since 2025-07-24 *)",
        "lines": [
          "@author 骆言AI代理",
          "@version 1.0",
          "@since 2025-07-24 *)"
        ],
        "start_line": 11,
        "end_line": 13,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_literals.ml"
      },
      {
        "hash": "787e4a9290d067920336d0edfeb2d860",
        "text": "@author 骆言AI代理\n@version 1.0\n@since 2025-07-24 *)",
        "lines": [
          "@author 骆言AI代理",
          "@version 1.0",
          "@since 2025-07-24 *)"
        ],
        "start_line": 10,
        "end_line": 12,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_special.ml"
      },
      {
        "hash": "787e4a9290d067920336d0edfeb2d860",
        "text": "@author 骆言AI代理\n@version 1.0\n@since 2025-07-24 *)",
        "lines": [
          "@author 骆言AI代理",
          "@version 1.0",
          "@since 2025-07-24 *)"
        ],
        "start_line": 15,
        "end_line": 17,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_identifiers.ml"
      }
    ],
    "c4252be422a06b547d9aa7c2904b9ac3": [
      {
        "hash": "c4252be422a06b547d9aa7c2904b9ac3",
        "text": "let parse_single_argument parse_expr token current_state =\nmatch token with\n| QuotedIdentifierToken var_name ->\nlet st1 = advance_parser current_state in\n(VarExpr var_name, st1)\n| IntToken i ->\nlet st1 = advance_parser current_state in\n(LitExpr (IntLit i), st1)\n| ChineseNumberToken s ->\nlet st1 = advance_parser current_state in",
        "lines": [
          "let parse_single_argument parse_expr token current_state =",
          "match token with",
          "| QuotedIdentifierToken var_name ->",
          "let st1 = advance_parser current_state in",
          "(VarExpr var_name, st1)",
          "| IntToken i ->",
          "let st1 = advance_parser current_state in",
          "(LitExpr (IntLit i), st1)",
          "| ChineseNumberToken s ->",
          "let st1 = advance_parser current_state in"
        ],
        "start_line": 25,
        "end_line": 34,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_calls.ml"
      },
      {
        "hash": "c4252be422a06b547d9aa7c2904b9ac3",
        "text": "let parse_single_argument parse_expr token current_state =\nmatch token with\n| QuotedIdentifierToken var_name ->\nlet st1 = advance_parser current_state in\n(VarExpr var_name, st1)\n| IntToken i ->\nlet st1 = advance_parser current_state in\n(LitExpr (IntLit i), st1)\n| ChineseNumberToken s ->\nlet st1 = advance_parser current_state in",
        "lines": [
          "let parse_single_argument parse_expr token current_state =",
          "match token with",
          "| QuotedIdentifierToken var_name ->",
          "let st1 = advance_parser current_state in",
          "(VarExpr var_name, st1)",
          "| IntToken i ->",
          "let st1 = advance_parser current_state in",
          "(LitExpr (IntLit i), st1)",
          "| ChineseNumberToken s ->",
          "let st1 = advance_parser current_state in"
        ],
        "start_line": 37,
        "end_line": 46,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_identifiers.ml"
      }
    ],
    "22ebd52c8f92ab4010a036d83cca7f4c": [
      {
        "hash": "22ebd52c8f92ab4010a036d83cca7f4c",
        "text": "match token with\n| QuotedIdentifierToken var_name ->\nlet st1 = advance_parser current_state in\n(VarExpr var_name, st1)\n| IntToken i ->\nlet st1 = advance_parser current_state in\n(LitExpr (IntLit i), st1)\n| ChineseNumberToken s ->\nlet st1 = advance_parser current_state in\nlet n = Parser_utils.chinese_number_to_int s in",
        "lines": [
          "match token with",
          "| QuotedIdentifierToken var_name ->",
          "let st1 = advance_parser current_state in",
          "(VarExpr var_name, st1)",
          "| IntToken i ->",
          "let st1 = advance_parser current_state in",
          "(LitExpr (IntLit i), st1)",
          "| ChineseNumberToken s ->",
          "let st1 = advance_parser current_state in",
          "let n = Parser_utils.chinese_number_to_int s in"
        ],
        "start_line": 26,
        "end_line": 35,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_calls.ml"
      },
      {
        "hash": "22ebd52c8f92ab4010a036d83cca7f4c",
        "text": "match token with\n| QuotedIdentifierToken var_name ->\nlet st1 = advance_parser current_state in\n(VarExpr var_name, st1)\n| IntToken i ->\nlet st1 = advance_parser current_state in\n(LitExpr (IntLit i), st1)\n| ChineseNumberToken s ->\nlet st1 = advance_parser current_state in\nlet n = Parser_utils.chinese_number_to_int s in",
        "lines": [
          "match token with",
          "| QuotedIdentifierToken var_name ->",
          "let st1 = advance_parser current_state in",
          "(VarExpr var_name, st1)",
          "| IntToken i ->",
          "let st1 = advance_parser current_state in",
          "(LitExpr (IntLit i), st1)",
          "| ChineseNumberToken s ->",
          "let st1 = advance_parser current_state in",
          "let n = Parser_utils.chinese_number_to_int s in"
        ],
        "start_line": 38,
        "end_line": 47,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_identifiers.ml"
      }
    ],
    "1ce661ff795c1fe75f8d93e974afee14": [
      {
        "hash": "1ce661ff795c1fe75f8d93e974afee14",
        "text": "| QuotedIdentifierToken var_name ->\nlet st1 = advance_parser current_state in\n(VarExpr var_name, st1)\n| IntToken i ->\nlet st1 = advance_parser current_state in\n(LitExpr (IntLit i), st1)\n| ChineseNumberToken s ->\nlet st1 = advance_parser current_state in\nlet n = Parser_utils.chinese_number_to_int s in\n(LitExpr (IntLit n), st1)",
        "lines": [
          "| QuotedIdentifierToken var_name ->",
          "let st1 = advance_parser current_state in",
          "(VarExpr var_name, st1)",
          "| IntToken i ->",
          "let st1 = advance_parser current_state in",
          "(LitExpr (IntLit i), st1)",
          "| ChineseNumberToken s ->",
          "let st1 = advance_parser current_state in",
          "let n = Parser_utils.chinese_number_to_int s in",
          "(LitExpr (IntLit n), st1)"
        ],
        "start_line": 27,
        "end_line": 36,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_calls.ml"
      },
      {
        "hash": "1ce661ff795c1fe75f8d93e974afee14",
        "text": "| QuotedIdentifierToken var_name ->\nlet st1 = advance_parser current_state in\n(VarExpr var_name, st1)\n| IntToken i ->\nlet st1 = advance_parser current_state in\n(LitExpr (IntLit i), st1)\n| ChineseNumberToken s ->\nlet st1 = advance_parser current_state in\nlet n = Parser_utils.chinese_number_to_int s in\n(LitExpr (IntLit n), st1)",
        "lines": [
          "| QuotedIdentifierToken var_name ->",
          "let st1 = advance_parser current_state in",
          "(VarExpr var_name, st1)",
          "| IntToken i ->",
          "let st1 = advance_parser current_state in",
          "(LitExpr (IntLit i), st1)",
          "| ChineseNumberToken s ->",
          "let st1 = advance_parser current_state in",
          "let n = Parser_utils.chinese_number_to_int s in",
          "(LitExpr (IntLit n), st1)"
        ],
        "start_line": 39,
        "end_line": 48,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_identifiers.ml"
      }
    ],
    "191837575f5e1aa4d5c00f843ab90723": [
      {
        "hash": "191837575f5e1aa4d5c00f843ab90723",
        "text": "let st1 = advance_parser current_state in\n(VarExpr var_name, st1)\n| IntToken i ->\nlet st1 = advance_parser current_state in\n(LitExpr (IntLit i), st1)\n| ChineseNumberToken s ->\nlet st1 = advance_parser current_state in\nlet n = Parser_utils.chinese_number_to_int s in\n(LitExpr (IntLit n), st1)\n| FloatToken f ->",
        "lines": [
          "let st1 = advance_parser current_state in",
          "(VarExpr var_name, st1)",
          "| IntToken i ->",
          "let st1 = advance_parser current_state in",
          "(LitExpr (IntLit i), st1)",
          "| ChineseNumberToken s ->",
          "let st1 = advance_parser current_state in",
          "let n = Parser_utils.chinese_number_to_int s in",
          "(LitExpr (IntLit n), st1)",
          "| FloatToken f ->"
        ],
        "start_line": 28,
        "end_line": 37,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_calls.ml"
      },
      {
        "hash": "191837575f5e1aa4d5c00f843ab90723",
        "text": "let st1 = advance_parser current_state in\n(VarExpr var_name, st1)\n| IntToken i ->\nlet st1 = advance_parser current_state in\n(LitExpr (IntLit i), st1)\n| ChineseNumberToken s ->\nlet st1 = advance_parser current_state in\nlet n = Parser_utils.chinese_number_to_int s in\n(LitExpr (IntLit n), st1)\n| FloatToken f ->",
        "lines": [
          "let st1 = advance_parser current_state in",
          "(VarExpr var_name, st1)",
          "| IntToken i ->",
          "let st1 = advance_parser current_state in",
          "(LitExpr (IntLit i), st1)",
          "| ChineseNumberToken s ->",
          "let st1 = advance_parser current_state in",
          "let n = Parser_utils.chinese_number_to_int s in",
          "(LitExpr (IntLit n), st1)",
          "| FloatToken f ->"
        ],
        "start_line": 40,
        "end_line": 49,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_identifiers.ml"
      }
    ],
    "23a058c07e55670996949b6244538b4c": [
      {
        "hash": "23a058c07e55670996949b6244538b4c",
        "text": "(VarExpr var_name, st1)\n| IntToken i ->\nlet st1 = advance_parser current_state in\n(LitExpr (IntLit i), st1)\n| ChineseNumberToken s ->\nlet st1 = advance_parser current_state in\nlet n = Parser_utils.chinese_number_to_int s in\n(LitExpr (IntLit n), st1)\n| FloatToken f ->\nlet st1 = advance_parser current_state in",
        "lines": [
          "(VarExpr var_name, st1)",
          "| IntToken i ->",
          "let st1 = advance_parser current_state in",
          "(LitExpr (IntLit i), st1)",
          "| ChineseNumberToken s ->",
          "let st1 = advance_parser current_state in",
          "let n = Parser_utils.chinese_number_to_int s in",
          "(LitExpr (IntLit n), st1)",
          "| FloatToken f ->",
          "let st1 = advance_parser current_state in"
        ],
        "start_line": 29,
        "end_line": 38,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_calls.ml"
      },
      {
        "hash": "23a058c07e55670996949b6244538b4c",
        "text": "(VarExpr var_name, st1)\n| IntToken i ->\nlet st1 = advance_parser current_state in\n(LitExpr (IntLit i), st1)\n| ChineseNumberToken s ->\nlet st1 = advance_parser current_state in\nlet n = Parser_utils.chinese_number_to_int s in\n(LitExpr (IntLit n), st1)\n| FloatToken f ->\nlet st1 = advance_parser current_state in",
        "lines": [
          "(VarExpr var_name, st1)",
          "| IntToken i ->",
          "let st1 = advance_parser current_state in",
          "(LitExpr (IntLit i), st1)",
          "| ChineseNumberToken s ->",
          "let st1 = advance_parser current_state in",
          "let n = Parser_utils.chinese_number_to_int s in",
          "(LitExpr (IntLit n), st1)",
          "| FloatToken f ->",
          "let st1 = advance_parser current_state in"
        ],
        "start_line": 41,
        "end_line": 50,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_identifiers.ml"
      }
    ],
    "4d6f6aeff972b01e5eebaf97744433b7": [
      {
        "hash": "4d6f6aeff972b01e5eebaf97744433b7",
        "text": "| IntToken i ->\nlet st1 = advance_parser current_state in\n(LitExpr (IntLit i), st1)\n| ChineseNumberToken s ->\nlet st1 = advance_parser current_state in\nlet n = Parser_utils.chinese_number_to_int s in\n(LitExpr (IntLit n), st1)\n| FloatToken f ->\nlet st1 = advance_parser current_state in\n(LitExpr (FloatLit f), st1)",
        "lines": [
          "| IntToken i ->",
          "let st1 = advance_parser current_state in",
          "(LitExpr (IntLit i), st1)",
          "| ChineseNumberToken s ->",
          "let st1 = advance_parser current_state in",
          "let n = Parser_utils.chinese_number_to_int s in",
          "(LitExpr (IntLit n), st1)",
          "| FloatToken f ->",
          "let st1 = advance_parser current_state in",
          "(LitExpr (FloatLit f), st1)"
        ],
        "start_line": 30,
        "end_line": 39,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_calls.ml"
      },
      {
        "hash": "4d6f6aeff972b01e5eebaf97744433b7",
        "text": "| IntToken i ->\nlet st1 = advance_parser current_state in\n(LitExpr (IntLit i), st1)\n| ChineseNumberToken s ->\nlet st1 = advance_parser current_state in\nlet n = Parser_utils.chinese_number_to_int s in\n(LitExpr (IntLit n), st1)\n| FloatToken f ->\nlet st1 = advance_parser current_state in\n(LitExpr (FloatLit f), st1)",
        "lines": [
          "| IntToken i ->",
          "let st1 = advance_parser current_state in",
          "(LitExpr (IntLit i), st1)",
          "| ChineseNumberToken s ->",
          "let st1 = advance_parser current_state in",
          "let n = Parser_utils.chinese_number_to_int s in",
          "(LitExpr (IntLit n), st1)",
          "| FloatToken f ->",
          "let st1 = advance_parser current_state in",
          "(LitExpr (FloatLit f), st1)"
        ],
        "start_line": 42,
        "end_line": 51,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_identifiers.ml"
      }
    ],
    "9787406732d61935aa93021e2a63b32f": [
      {
        "hash": "9787406732d61935aa93021e2a63b32f",
        "text": "let st1 = advance_parser current_state in\n(LitExpr (IntLit i), st1)\n| ChineseNumberToken s ->\nlet st1 = advance_parser current_state in\nlet n = Parser_utils.chinese_number_to_int s in\n(LitExpr (IntLit n), st1)\n| FloatToken f ->\nlet st1 = advance_parser current_state in\n(LitExpr (FloatLit f), st1)\n| StringToken s ->",
        "lines": [
          "let st1 = advance_parser current_state in",
          "(LitExpr (IntLit i), st1)",
          "| ChineseNumberToken s ->",
          "let st1 = advance_parser current_state in",
          "let n = Parser_utils.chinese_number_to_int s in",
          "(LitExpr (IntLit n), st1)",
          "| FloatToken f ->",
          "let st1 = advance_parser current_state in",
          "(LitExpr (FloatLit f), st1)",
          "| StringToken s ->"
        ],
        "start_line": 31,
        "end_line": 40,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_calls.ml"
      },
      {
        "hash": "9787406732d61935aa93021e2a63b32f",
        "text": "let st1 = advance_parser current_state in\n(LitExpr (IntLit i), st1)\n| ChineseNumberToken s ->\nlet st1 = advance_parser current_state in\nlet n = Parser_utils.chinese_number_to_int s in\n(LitExpr (IntLit n), st1)\n| FloatToken f ->\nlet st1 = advance_parser current_state in\n(LitExpr (FloatLit f), st1)\n| StringToken s ->",
        "lines": [
          "let st1 = advance_parser current_state in",
          "(LitExpr (IntLit i), st1)",
          "| ChineseNumberToken s ->",
          "let st1 = advance_parser current_state in",
          "let n = Parser_utils.chinese_number_to_int s in",
          "(LitExpr (IntLit n), st1)",
          "| FloatToken f ->",
          "let st1 = advance_parser current_state in",
          "(LitExpr (FloatLit f), st1)",
          "| StringToken s ->"
        ],
        "start_line": 43,
        "end_line": 52,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_identifiers.ml"
      }
    ],
    "60678f9f21383f6a6b0051dd64e84557": [
      {
        "hash": "60678f9f21383f6a6b0051dd64e84557",
        "text": "(LitExpr (IntLit i), st1)\n| ChineseNumberToken s ->\nlet st1 = advance_parser current_state in\nlet n = Parser_utils.chinese_number_to_int s in\n(LitExpr (IntLit n), st1)\n| FloatToken f ->\nlet st1 = advance_parser current_state in\n(LitExpr (FloatLit f), st1)\n| StringToken s ->\nlet st1 = advance_parser current_state in",
        "lines": [
          "(LitExpr (IntLit i), st1)",
          "| ChineseNumberToken s ->",
          "let st1 = advance_parser current_state in",
          "let n = Parser_utils.chinese_number_to_int s in",
          "(LitExpr (IntLit n), st1)",
          "| FloatToken f ->",
          "let st1 = advance_parser current_state in",
          "(LitExpr (FloatLit f), st1)",
          "| StringToken s ->",
          "let st1 = advance_parser current_state in"
        ],
        "start_line": 32,
        "end_line": 41,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_calls.ml"
      },
      {
        "hash": "60678f9f21383f6a6b0051dd64e84557",
        "text": "(LitExpr (IntLit i), st1)\n| ChineseNumberToken s ->\nlet st1 = advance_parser current_state in\nlet n = Parser_utils.chinese_number_to_int s in\n(LitExpr (IntLit n), st1)\n| FloatToken f ->\nlet st1 = advance_parser current_state in\n(LitExpr (FloatLit f), st1)\n| StringToken s ->\nlet st1 = advance_parser current_state in",
        "lines": [
          "(LitExpr (IntLit i), st1)",
          "| ChineseNumberToken s ->",
          "let st1 = advance_parser current_state in",
          "let n = Parser_utils.chinese_number_to_int s in",
          "(LitExpr (IntLit n), st1)",
          "| FloatToken f ->",
          "let st1 = advance_parser current_state in",
          "(LitExpr (FloatLit f), st1)",
          "| StringToken s ->",
          "let st1 = advance_parser current_state in"
        ],
        "start_line": 44,
        "end_line": 53,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_identifiers.ml"
      }
    ],
    "a92b089f86fb4014bf4ca2697199ae14": [
      {
        "hash": "a92b089f86fb4014bf4ca2697199ae14",
        "text": "| ChineseNumberToken s ->\nlet st1 = advance_parser current_state in\nlet n = Parser_utils.chinese_number_to_int s in\n(LitExpr (IntLit n), st1)\n| FloatToken f ->\nlet st1 = advance_parser current_state in\n(LitExpr (FloatLit f), st1)\n| StringToken s ->\nlet st1 = advance_parser current_state in\n(LitExpr (StringLit s), st1)",
        "lines": [
          "| ChineseNumberToken s ->",
          "let st1 = advance_parser current_state in",
          "let n = Parser_utils.chinese_number_to_int s in",
          "(LitExpr (IntLit n), st1)",
          "| FloatToken f ->",
          "let st1 = advance_parser current_state in",
          "(LitExpr (FloatLit f), st1)",
          "| StringToken s ->",
          "let st1 = advance_parser current_state in",
          "(LitExpr (StringLit s), st1)"
        ],
        "start_line": 33,
        "end_line": 42,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_calls.ml"
      },
      {
        "hash": "a92b089f86fb4014bf4ca2697199ae14",
        "text": "| ChineseNumberToken s ->\nlet st1 = advance_parser current_state in\nlet n = Parser_utils.chinese_number_to_int s in\n(LitExpr (IntLit n), st1)\n| FloatToken f ->\nlet st1 = advance_parser current_state in\n(LitExpr (FloatLit f), st1)\n| StringToken s ->\nlet st1 = advance_parser current_state in\n(LitExpr (StringLit s), st1)",
        "lines": [
          "| ChineseNumberToken s ->",
          "let st1 = advance_parser current_state in",
          "let n = Parser_utils.chinese_number_to_int s in",
          "(LitExpr (IntLit n), st1)",
          "| FloatToken f ->",
          "let st1 = advance_parser current_state in",
          "(LitExpr (FloatLit f), st1)",
          "| StringToken s ->",
          "let st1 = advance_parser current_state in",
          "(LitExpr (StringLit s), st1)"
        ],
        "start_line": 45,
        "end_line": 54,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_identifiers.ml"
      }
    ],
    "5d3071d367bd7247e0fcdc143b500857": [
      {
        "hash": "5d3071d367bd7247e0fcdc143b500857",
        "text": "let st1 = advance_parser current_state in\nlet n = Parser_utils.chinese_number_to_int s in\n(LitExpr (IntLit n), st1)\n| FloatToken f ->\nlet st1 = advance_parser current_state in\n(LitExpr (FloatLit f), st1)\n| StringToken s ->\nlet st1 = advance_parser current_state in\n(LitExpr (StringLit s), st1)\n| TrueKeyword ->",
        "lines": [
          "let st1 = advance_parser current_state in",
          "let n = Parser_utils.chinese_number_to_int s in",
          "(LitExpr (IntLit n), st1)",
          "| FloatToken f ->",
          "let st1 = advance_parser current_state in",
          "(LitExpr (FloatLit f), st1)",
          "| StringToken s ->",
          "let st1 = advance_parser current_state in",
          "(LitExpr (StringLit s), st1)",
          "| TrueKeyword ->"
        ],
        "start_line": 34,
        "end_line": 43,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_calls.ml"
      },
      {
        "hash": "5d3071d367bd7247e0fcdc143b500857",
        "text": "let st1 = advance_parser current_state in\nlet n = Parser_utils.chinese_number_to_int s in\n(LitExpr (IntLit n), st1)\n| FloatToken f ->\nlet st1 = advance_parser current_state in\n(LitExpr (FloatLit f), st1)\n| StringToken s ->\nlet st1 = advance_parser current_state in\n(LitExpr (StringLit s), st1)\n| TrueKeyword ->",
        "lines": [
          "let st1 = advance_parser current_state in",
          "let n = Parser_utils.chinese_number_to_int s in",
          "(LitExpr (IntLit n), st1)",
          "| FloatToken f ->",
          "let st1 = advance_parser current_state in",
          "(LitExpr (FloatLit f), st1)",
          "| StringToken s ->",
          "let st1 = advance_parser current_state in",
          "(LitExpr (StringLit s), st1)",
          "| TrueKeyword ->"
        ],
        "start_line": 46,
        "end_line": 55,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_identifiers.ml"
      }
    ],
    "aa960621cbf1ffddf9e2cc684fc37973": [
      {
        "hash": "aa960621cbf1ffddf9e2cc684fc37973",
        "text": "let n = Parser_utils.chinese_number_to_int s in\n(LitExpr (IntLit n), st1)\n| FloatToken f ->\nlet st1 = advance_parser current_state in\n(LitExpr (FloatLit f), st1)\n| StringToken s ->\nlet st1 = advance_parser current_state in\n(LitExpr (StringLit s), st1)\n| TrueKeyword ->\nlet st1 = advance_parser current_state in",
        "lines": [
          "let n = Parser_utils.chinese_number_to_int s in",
          "(LitExpr (IntLit n), st1)",
          "| FloatToken f ->",
          "let st1 = advance_parser current_state in",
          "(LitExpr (FloatLit f), st1)",
          "| StringToken s ->",
          "let st1 = advance_parser current_state in",
          "(LitExpr (StringLit s), st1)",
          "| TrueKeyword ->",
          "let st1 = advance_parser current_state in"
        ],
        "start_line": 35,
        "end_line": 44,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_calls.ml"
      },
      {
        "hash": "aa960621cbf1ffddf9e2cc684fc37973",
        "text": "let n = Parser_utils.chinese_number_to_int s in\n(LitExpr (IntLit n), st1)\n| FloatToken f ->\nlet st1 = advance_parser current_state in\n(LitExpr (FloatLit f), st1)\n| StringToken s ->\nlet st1 = advance_parser current_state in\n(LitExpr (StringLit s), st1)\n| TrueKeyword ->\nlet st1 = advance_parser current_state in",
        "lines": [
          "let n = Parser_utils.chinese_number_to_int s in",
          "(LitExpr (IntLit n), st1)",
          "| FloatToken f ->",
          "let st1 = advance_parser current_state in",
          "(LitExpr (FloatLit f), st1)",
          "| StringToken s ->",
          "let st1 = advance_parser current_state in",
          "(LitExpr (StringLit s), st1)",
          "| TrueKeyword ->",
          "let st1 = advance_parser current_state in"
        ],
        "start_line": 47,
        "end_line": 56,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_identifiers.ml"
      }
    ],
    "bbc734132b1f955ced6a19d193d78df1": [
      {
        "hash": "bbc734132b1f955ced6a19d193d78df1",
        "text": "(LitExpr (IntLit n), st1)\n| FloatToken f ->\nlet st1 = advance_parser current_state in\n(LitExpr (FloatLit f), st1)\n| StringToken s ->\nlet st1 = advance_parser current_state in\n(LitExpr (StringLit s), st1)\n| TrueKeyword ->\nlet st1 = advance_parser current_state in\n(LitExpr (BoolLit true), st1)",
        "lines": [
          "(LitExpr (IntLit n), st1)",
          "| FloatToken f ->",
          "let st1 = advance_parser current_state in",
          "(LitExpr (FloatLit f), st1)",
          "| StringToken s ->",
          "let st1 = advance_parser current_state in",
          "(LitExpr (StringLit s), st1)",
          "| TrueKeyword ->",
          "let st1 = advance_parser current_state in",
          "(LitExpr (BoolLit true), st1)"
        ],
        "start_line": 36,
        "end_line": 45,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_calls.ml"
      },
      {
        "hash": "bbc734132b1f955ced6a19d193d78df1",
        "text": "(LitExpr (IntLit n), st1)\n| FloatToken f ->\nlet st1 = advance_parser current_state in\n(LitExpr (FloatLit f), st1)\n| StringToken s ->\nlet st1 = advance_parser current_state in\n(LitExpr (StringLit s), st1)\n| TrueKeyword ->\nlet st1 = advance_parser current_state in\n(LitExpr (BoolLit true), st1)",
        "lines": [
          "(LitExpr (IntLit n), st1)",
          "| FloatToken f ->",
          "let st1 = advance_parser current_state in",
          "(LitExpr (FloatLit f), st1)",
          "| StringToken s ->",
          "let st1 = advance_parser current_state in",
          "(LitExpr (StringLit s), st1)",
          "| TrueKeyword ->",
          "let st1 = advance_parser current_state in",
          "(LitExpr (BoolLit true), st1)"
        ],
        "start_line": 48,
        "end_line": 57,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_identifiers.ml"
      }
    ],
    "bb402bd6f838aaba218d0a3c7ef4b09a": [
      {
        "hash": "bb402bd6f838aaba218d0a3c7ef4b09a",
        "text": "| FloatToken f ->\nlet st1 = advance_parser current_state in\n(LitExpr (FloatLit f), st1)\n| StringToken s ->\nlet st1 = advance_parser current_state in\n(LitExpr (StringLit s), st1)\n| TrueKeyword ->\nlet st1 = advance_parser current_state in\n(LitExpr (BoolLit true), st1)\n| FalseKeyword ->",
        "lines": [
          "| FloatToken f ->",
          "let st1 = advance_parser current_state in",
          "(LitExpr (FloatLit f), st1)",
          "| StringToken s ->",
          "let st1 = advance_parser current_state in",
          "(LitExpr (StringLit s), st1)",
          "| TrueKeyword ->",
          "let st1 = advance_parser current_state in",
          "(LitExpr (BoolLit true), st1)",
          "| FalseKeyword ->"
        ],
        "start_line": 37,
        "end_line": 46,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_calls.ml"
      },
      {
        "hash": "bb402bd6f838aaba218d0a3c7ef4b09a",
        "text": "| FloatToken f ->\nlet st1 = advance_parser current_state in\n(LitExpr (FloatLit f), st1)\n| StringToken s ->\nlet st1 = advance_parser current_state in\n(LitExpr (StringLit s), st1)\n| TrueKeyword ->\nlet st1 = advance_parser current_state in\n(LitExpr (BoolLit true), st1)\n| FalseKeyword ->",
        "lines": [
          "| FloatToken f ->",
          "let st1 = advance_parser current_state in",
          "(LitExpr (FloatLit f), st1)",
          "| StringToken s ->",
          "let st1 = advance_parser current_state in",
          "(LitExpr (StringLit s), st1)",
          "| TrueKeyword ->",
          "let st1 = advance_parser current_state in",
          "(LitExpr (BoolLit true), st1)",
          "| FalseKeyword ->"
        ],
        "start_line": 49,
        "end_line": 58,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_identifiers.ml"
      }
    ],
    "5201558f6f9bcaca8c57219275465484": [
      {
        "hash": "5201558f6f9bcaca8c57219275465484",
        "text": "let st1 = advance_parser current_state in\n(LitExpr (FloatLit f), st1)\n| StringToken s ->\nlet st1 = advance_parser current_state in\n(LitExpr (StringLit s), st1)\n| TrueKeyword ->\nlet st1 = advance_parser current_state in\n(LitExpr (BoolLit true), st1)\n| FalseKeyword ->\nlet st1 = advance_parser current_state in",
        "lines": [
          "let st1 = advance_parser current_state in",
          "(LitExpr (FloatLit f), st1)",
          "| StringToken s ->",
          "let st1 = advance_parser current_state in",
          "(LitExpr (StringLit s), st1)",
          "| TrueKeyword ->",
          "let st1 = advance_parser current_state in",
          "(LitExpr (BoolLit true), st1)",
          "| FalseKeyword ->",
          "let st1 = advance_parser current_state in"
        ],
        "start_line": 38,
        "end_line": 47,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_calls.ml"
      },
      {
        "hash": "5201558f6f9bcaca8c57219275465484",
        "text": "let st1 = advance_parser current_state in\n(LitExpr (FloatLit f), st1)\n| StringToken s ->\nlet st1 = advance_parser current_state in\n(LitExpr (StringLit s), st1)\n| TrueKeyword ->\nlet st1 = advance_parser current_state in\n(LitExpr (BoolLit true), st1)\n| FalseKeyword ->\nlet st1 = advance_parser current_state in",
        "lines": [
          "let st1 = advance_parser current_state in",
          "(LitExpr (FloatLit f), st1)",
          "| StringToken s ->",
          "let st1 = advance_parser current_state in",
          "(LitExpr (StringLit s), st1)",
          "| TrueKeyword ->",
          "let st1 = advance_parser current_state in",
          "(LitExpr (BoolLit true), st1)",
          "| FalseKeyword ->",
          "let st1 = advance_parser current_state in"
        ],
        "start_line": 50,
        "end_line": 59,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_identifiers.ml"
      }
    ],
    "e01687846335666a4a8b07c18db8becc": [
      {
        "hash": "e01687846335666a4a8b07c18db8becc",
        "text": "(LitExpr (FloatLit f), st1)\n| StringToken s ->\nlet st1 = advance_parser current_state in\n(LitExpr (StringLit s), st1)\n| TrueKeyword ->\nlet st1 = advance_parser current_state in\n(LitExpr (BoolLit true), st1)\n| FalseKeyword ->\nlet st1 = advance_parser current_state in\n(LitExpr (BoolLit false), st1)",
        "lines": [
          "(LitExpr (FloatLit f), st1)",
          "| StringToken s ->",
          "let st1 = advance_parser current_state in",
          "(LitExpr (StringLit s), st1)",
          "| TrueKeyword ->",
          "let st1 = advance_parser current_state in",
          "(LitExpr (BoolLit true), st1)",
          "| FalseKeyword ->",
          "let st1 = advance_parser current_state in",
          "(LitExpr (BoolLit false), st1)"
        ],
        "start_line": 39,
        "end_line": 48,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_calls.ml"
      },
      {
        "hash": "e01687846335666a4a8b07c18db8becc",
        "text": "(LitExpr (FloatLit f), st1)\n| StringToken s ->\nlet st1 = advance_parser current_state in\n(LitExpr (StringLit s), st1)\n| TrueKeyword ->\nlet st1 = advance_parser current_state in\n(LitExpr (BoolLit true), st1)\n| FalseKeyword ->\nlet st1 = advance_parser current_state in\n(LitExpr (BoolLit false), st1)",
        "lines": [
          "(LitExpr (FloatLit f), st1)",
          "| StringToken s ->",
          "let st1 = advance_parser current_state in",
          "(LitExpr (StringLit s), st1)",
          "| TrueKeyword ->",
          "let st1 = advance_parser current_state in",
          "(LitExpr (BoolLit true), st1)",
          "| FalseKeyword ->",
          "let st1 = advance_parser current_state in",
          "(LitExpr (BoolLit false), st1)"
        ],
        "start_line": 51,
        "end_line": 60,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_identifiers.ml"
      }
    ],
    "0b02934b6095d250b7efb08f798ff90a": [
      {
        "hash": "0b02934b6095d250b7efb08f798ff90a",
        "text": "| StringToken s ->\nlet st1 = advance_parser current_state in\n(LitExpr (StringLit s), st1)\n| TrueKeyword ->\nlet st1 = advance_parser current_state in\n(LitExpr (BoolLit true), st1)\n| FalseKeyword ->\nlet st1 = advance_parser current_state in\n(LitExpr (BoolLit false), st1)\n| OneKeyword ->",
        "lines": [
          "| StringToken s ->",
          "let st1 = advance_parser current_state in",
          "(LitExpr (StringLit s), st1)",
          "| TrueKeyword ->",
          "let st1 = advance_parser current_state in",
          "(LitExpr (BoolLit true), st1)",
          "| FalseKeyword ->",
          "let st1 = advance_parser current_state in",
          "(LitExpr (BoolLit false), st1)",
          "| OneKeyword ->"
        ],
        "start_line": 40,
        "end_line": 49,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_calls.ml"
      },
      {
        "hash": "0b02934b6095d250b7efb08f798ff90a",
        "text": "| StringToken s ->\nlet st1 = advance_parser current_state in\n(LitExpr (StringLit s), st1)\n| TrueKeyword ->\nlet st1 = advance_parser current_state in\n(LitExpr (BoolLit true), st1)\n| FalseKeyword ->\nlet st1 = advance_parser current_state in\n(LitExpr (BoolLit false), st1)\n| OneKeyword ->",
        "lines": [
          "| StringToken s ->",
          "let st1 = advance_parser current_state in",
          "(LitExpr (StringLit s), st1)",
          "| TrueKeyword ->",
          "let st1 = advance_parser current_state in",
          "(LitExpr (BoolLit true), st1)",
          "| FalseKeyword ->",
          "let st1 = advance_parser current_state in",
          "(LitExpr (BoolLit false), st1)",
          "| OneKeyword ->"
        ],
        "start_line": 52,
        "end_line": 61,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_identifiers.ml"
      }
    ],
    "bff08a8fe44962ec6960cb948880986b": [
      {
        "hash": "bff08a8fe44962ec6960cb948880986b",
        "text": "let st1 = advance_parser current_state in\n(LitExpr (StringLit s), st1)\n| TrueKeyword ->\nlet st1 = advance_parser current_state in\n(LitExpr (BoolLit true), st1)\n| FalseKeyword ->\nlet st1 = advance_parser current_state in\n(LitExpr (BoolLit false), st1)\n| OneKeyword ->\nlet st1 = advance_parser current_state in",
        "lines": [
          "let st1 = advance_parser current_state in",
          "(LitExpr (StringLit s), st1)",
          "| TrueKeyword ->",
          "let st1 = advance_parser current_state in",
          "(LitExpr (BoolLit true), st1)",
          "| FalseKeyword ->",
          "let st1 = advance_parser current_state in",
          "(LitExpr (BoolLit false), st1)",
          "| OneKeyword ->",
          "let st1 = advance_parser current_state in"
        ],
        "start_line": 41,
        "end_line": 50,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_calls.ml"
      },
      {
        "hash": "bff08a8fe44962ec6960cb948880986b",
        "text": "let st1 = advance_parser current_state in\n(LitExpr (StringLit s), st1)\n| TrueKeyword ->\nlet st1 = advance_parser current_state in\n(LitExpr (BoolLit true), st1)\n| FalseKeyword ->\nlet st1 = advance_parser current_state in\n(LitExpr (BoolLit false), st1)\n| OneKeyword ->\nlet st1 = advance_parser current_state in",
        "lines": [
          "let st1 = advance_parser current_state in",
          "(LitExpr (StringLit s), st1)",
          "| TrueKeyword ->",
          "let st1 = advance_parser current_state in",
          "(LitExpr (BoolLit true), st1)",
          "| FalseKeyword ->",
          "let st1 = advance_parser current_state in",
          "(LitExpr (BoolLit false), st1)",
          "| OneKeyword ->",
          "let st1 = advance_parser current_state in"
        ],
        "start_line": 53,
        "end_line": 62,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_identifiers.ml"
      }
    ],
    "a382c7e356cc552083eb9bd3cbed5b10": [
      {
        "hash": "a382c7e356cc552083eb9bd3cbed5b10",
        "text": "(LitExpr (StringLit s), st1)\n| TrueKeyword ->\nlet st1 = advance_parser current_state in\n(LitExpr (BoolLit true), st1)\n| FalseKeyword ->\nlet st1 = advance_parser current_state in\n(LitExpr (BoolLit false), st1)\n| OneKeyword ->\nlet st1 = advance_parser current_state in\n(LitExpr (IntLit 1), st1)",
        "lines": [
          "(LitExpr (StringLit s), st1)",
          "| TrueKeyword ->",
          "let st1 = advance_parser current_state in",
          "(LitExpr (BoolLit true), st1)",
          "| FalseKeyword ->",
          "let st1 = advance_parser current_state in",
          "(LitExpr (BoolLit false), st1)",
          "| OneKeyword ->",
          "let st1 = advance_parser current_state in",
          "(LitExpr (IntLit 1), st1)"
        ],
        "start_line": 42,
        "end_line": 51,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_calls.ml"
      },
      {
        "hash": "a382c7e356cc552083eb9bd3cbed5b10",
        "text": "(LitExpr (StringLit s), st1)\n| TrueKeyword ->\nlet st1 = advance_parser current_state in\n(LitExpr (BoolLit true), st1)\n| FalseKeyword ->\nlet st1 = advance_parser current_state in\n(LitExpr (BoolLit false), st1)\n| OneKeyword ->\nlet st1 = advance_parser current_state in\n(LitExpr (IntLit 1), st1)",
        "lines": [
          "(LitExpr (StringLit s), st1)",
          "| TrueKeyword ->",
          "let st1 = advance_parser current_state in",
          "(LitExpr (BoolLit true), st1)",
          "| FalseKeyword ->",
          "let st1 = advance_parser current_state in",
          "(LitExpr (BoolLit false), st1)",
          "| OneKeyword ->",
          "let st1 = advance_parser current_state in",
          "(LitExpr (IntLit 1), st1)"
        ],
        "start_line": 54,
        "end_line": 63,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_identifiers.ml"
      }
    ],
    "a22f1f74215a20b0f5a68df752c65403": [
      {
        "hash": "a22f1f74215a20b0f5a68df752c65403",
        "text": "| TrueKeyword ->\nlet st1 = advance_parser current_state in\n(LitExpr (BoolLit true), st1)\n| FalseKeyword ->\nlet st1 = advance_parser current_state in\n(LitExpr (BoolLit false), st1)\n| OneKeyword ->\nlet st1 = advance_parser current_state in\n(LitExpr (IntLit 1), st1)\n| LeftParen | ChineseLeftParen ->",
        "lines": [
          "| TrueKeyword ->",
          "let st1 = advance_parser current_state in",
          "(LitExpr (BoolLit true), st1)",
          "| FalseKeyword ->",
          "let st1 = advance_parser current_state in",
          "(LitExpr (BoolLit false), st1)",
          "| OneKeyword ->",
          "let st1 = advance_parser current_state in",
          "(LitExpr (IntLit 1), st1)",
          "| LeftParen | ChineseLeftParen ->"
        ],
        "start_line": 43,
        "end_line": 52,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_calls.ml"
      },
      {
        "hash": "a22f1f74215a20b0f5a68df752c65403",
        "text": "| TrueKeyword ->\nlet st1 = advance_parser current_state in\n(LitExpr (BoolLit true), st1)\n| FalseKeyword ->\nlet st1 = advance_parser current_state in\n(LitExpr (BoolLit false), st1)\n| OneKeyword ->\nlet st1 = advance_parser current_state in\n(LitExpr (IntLit 1), st1)\n| LeftParen | ChineseLeftParen ->",
        "lines": [
          "| TrueKeyword ->",
          "let st1 = advance_parser current_state in",
          "(LitExpr (BoolLit true), st1)",
          "| FalseKeyword ->",
          "let st1 = advance_parser current_state in",
          "(LitExpr (BoolLit false), st1)",
          "| OneKeyword ->",
          "let st1 = advance_parser current_state in",
          "(LitExpr (IntLit 1), st1)",
          "| LeftParen | ChineseLeftParen ->"
        ],
        "start_line": 55,
        "end_line": 64,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_identifiers.ml"
      }
    ],
    "f529c933fc166fc947b6b35b7db676b0": [
      {
        "hash": "f529c933fc166fc947b6b35b7db676b0",
        "text": "let st1 = advance_parser current_state in\n(LitExpr (BoolLit true), st1)\n| FalseKeyword ->\nlet st1 = advance_parser current_state in\n(LitExpr (BoolLit false), st1)\n| OneKeyword ->\nlet st1 = advance_parser current_state in\n(LitExpr (IntLit 1), st1)\n| LeftParen | ChineseLeftParen ->",
        "lines": [
          "let st1 = advance_parser current_state in",
          "(LitExpr (BoolLit true), st1)",
          "| FalseKeyword ->",
          "let st1 = advance_parser current_state in",
          "(LitExpr (BoolLit false), st1)",
          "| OneKeyword ->",
          "let st1 = advance_parser current_state in",
          "(LitExpr (IntLit 1), st1)",
          "| LeftParen | ChineseLeftParen ->"
        ],
        "start_line": 44,
        "end_line": 52,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_calls.ml"
      },
      {
        "hash": "f529c933fc166fc947b6b35b7db676b0",
        "text": "let st1 = advance_parser current_state in\n(LitExpr (BoolLit true), st1)\n| FalseKeyword ->\nlet st1 = advance_parser current_state in\n(LitExpr (BoolLit false), st1)\n| OneKeyword ->\nlet st1 = advance_parser current_state in\n(LitExpr (IntLit 1), st1)\n| LeftParen | ChineseLeftParen ->",
        "lines": [
          "let st1 = advance_parser current_state in",
          "(LitExpr (BoolLit true), st1)",
          "| FalseKeyword ->",
          "let st1 = advance_parser current_state in",
          "(LitExpr (BoolLit false), st1)",
          "| OneKeyword ->",
          "let st1 = advance_parser current_state in",
          "(LitExpr (IntLit 1), st1)",
          "| LeftParen | ChineseLeftParen ->"
        ],
        "start_line": 56,
        "end_line": 64,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_identifiers.ml"
      }
    ],
    "0c351f4b9ca0a390adfe7cb2c7204eec": [
      {
        "hash": "0c351f4b9ca0a390adfe7cb2c7204eec",
        "text": "(LitExpr (BoolLit true), st1)\n| FalseKeyword ->\nlet st1 = advance_parser current_state in\n(LitExpr (BoolLit false), st1)\n| OneKeyword ->\nlet st1 = advance_parser current_state in\n(LitExpr (IntLit 1), st1)\n| LeftParen | ChineseLeftParen ->",
        "lines": [
          "(LitExpr (BoolLit true), st1)",
          "| FalseKeyword ->",
          "let st1 = advance_parser current_state in",
          "(LitExpr (BoolLit false), st1)",
          "| OneKeyword ->",
          "let st1 = advance_parser current_state in",
          "(LitExpr (IntLit 1), st1)",
          "| LeftParen | ChineseLeftParen ->"
        ],
        "start_line": 45,
        "end_line": 52,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_calls.ml"
      },
      {
        "hash": "0c351f4b9ca0a390adfe7cb2c7204eec",
        "text": "(LitExpr (BoolLit true), st1)\n| FalseKeyword ->\nlet st1 = advance_parser current_state in\n(LitExpr (BoolLit false), st1)\n| OneKeyword ->\nlet st1 = advance_parser current_state in\n(LitExpr (IntLit 1), st1)\n| LeftParen | ChineseLeftParen ->",
        "lines": [
          "(LitExpr (BoolLit true), st1)",
          "| FalseKeyword ->",
          "let st1 = advance_parser current_state in",
          "(LitExpr (BoolLit false), st1)",
          "| OneKeyword ->",
          "let st1 = advance_parser current_state in",
          "(LitExpr (IntLit 1), st1)",
          "| LeftParen | ChineseLeftParen ->"
        ],
        "start_line": 57,
        "end_line": 64,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_identifiers.ml"
      }
    ],
    "d262e2b1e12fd23da00be17e4bebb890": [
      {
        "hash": "d262e2b1e12fd23da00be17e4bebb890",
        "text": "| FalseKeyword ->\nlet st1 = advance_parser current_state in\n(LitExpr (BoolLit false), st1)\n| OneKeyword ->\nlet st1 = advance_parser current_state in\n(LitExpr (IntLit 1), st1)\n| LeftParen | ChineseLeftParen ->",
        "lines": [
          "| FalseKeyword ->",
          "let st1 = advance_parser current_state in",
          "(LitExpr (BoolLit false), st1)",
          "| OneKeyword ->",
          "let st1 = advance_parser current_state in",
          "(LitExpr (IntLit 1), st1)",
          "| LeftParen | ChineseLeftParen ->"
        ],
        "start_line": 46,
        "end_line": 52,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_calls.ml"
      },
      {
        "hash": "d262e2b1e12fd23da00be17e4bebb890",
        "text": "| FalseKeyword ->\nlet st1 = advance_parser current_state in\n(LitExpr (BoolLit false), st1)\n| OneKeyword ->\nlet st1 = advance_parser current_state in\n(LitExpr (IntLit 1), st1)\n| LeftParen | ChineseLeftParen ->",
        "lines": [
          "| FalseKeyword ->",
          "let st1 = advance_parser current_state in",
          "(LitExpr (BoolLit false), st1)",
          "| OneKeyword ->",
          "let st1 = advance_parser current_state in",
          "(LitExpr (IntLit 1), st1)",
          "| LeftParen | ChineseLeftParen ->"
        ],
        "start_line": 58,
        "end_line": 64,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_identifiers.ml"
      }
    ],
    "f23c053871a75488865c32e1c2823b0f": [
      {
        "hash": "f23c053871a75488865c32e1c2823b0f",
        "text": "let st1 = advance_parser current_state in\n(LitExpr (BoolLit false), st1)\n| OneKeyword ->\nlet st1 = advance_parser current_state in\n(LitExpr (IntLit 1), st1)\n| LeftParen | ChineseLeftParen ->",
        "lines": [
          "let st1 = advance_parser current_state in",
          "(LitExpr (BoolLit false), st1)",
          "| OneKeyword ->",
          "let st1 = advance_parser current_state in",
          "(LitExpr (IntLit 1), st1)",
          "| LeftParen | ChineseLeftParen ->"
        ],
        "start_line": 47,
        "end_line": 52,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_calls.ml"
      },
      {
        "hash": "f23c053871a75488865c32e1c2823b0f",
        "text": "let st1 = advance_parser current_state in\n(LitExpr (BoolLit false), st1)\n| OneKeyword ->\nlet st1 = advance_parser current_state in\n(LitExpr (IntLit 1), st1)\n| LeftParen | ChineseLeftParen ->",
        "lines": [
          "let st1 = advance_parser current_state in",
          "(LitExpr (BoolLit false), st1)",
          "| OneKeyword ->",
          "let st1 = advance_parser current_state in",
          "(LitExpr (IntLit 1), st1)",
          "| LeftParen | ChineseLeftParen ->"
        ],
        "start_line": 59,
        "end_line": 64,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_identifiers.ml"
      }
    ],
    "9de5c3f9c43a15ab2f35f2db1a732cd8": [
      {
        "hash": "9de5c3f9c43a15ab2f35f2db1a732cd8",
        "text": "(LitExpr (BoolLit false), st1)\n| OneKeyword ->\nlet st1 = advance_parser current_state in\n(LitExpr (IntLit 1), st1)\n| LeftParen | ChineseLeftParen ->",
        "lines": [
          "(LitExpr (BoolLit false), st1)",
          "| OneKeyword ->",
          "let st1 = advance_parser current_state in",
          "(LitExpr (IntLit 1), st1)",
          "| LeftParen | ChineseLeftParen ->"
        ],
        "start_line": 48,
        "end_line": 52,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_calls.ml"
      },
      {
        "hash": "9de5c3f9c43a15ab2f35f2db1a732cd8",
        "text": "(LitExpr (BoolLit false), st1)\n| OneKeyword ->\nlet st1 = advance_parser current_state in\n(LitExpr (IntLit 1), st1)\n| LeftParen | ChineseLeftParen ->",
        "lines": [
          "(LitExpr (BoolLit false), st1)",
          "| OneKeyword ->",
          "let st1 = advance_parser current_state in",
          "(LitExpr (IntLit 1), st1)",
          "| LeftParen | ChineseLeftParen ->"
        ],
        "start_line": 60,
        "end_line": 64,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_identifiers.ml"
      }
    ],
    "9460596419955a7426a581963a05374d": [
      {
        "hash": "9460596419955a7426a581963a05374d",
        "text": "| OneKeyword ->\nlet st1 = advance_parser current_state in\n(LitExpr (IntLit 1), st1)\n| LeftParen | ChineseLeftParen ->",
        "lines": [
          "| OneKeyword ->",
          "let st1 = advance_parser current_state in",
          "(LitExpr (IntLit 1), st1)",
          "| LeftParen | ChineseLeftParen ->"
        ],
        "start_line": 49,
        "end_line": 52,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_calls.ml"
      },
      {
        "hash": "9460596419955a7426a581963a05374d",
        "text": "| OneKeyword ->\nlet st1 = advance_parser current_state in\n(LitExpr (IntLit 1), st1)\n| LeftParen | ChineseLeftParen ->",
        "lines": [
          "| OneKeyword ->",
          "let st1 = advance_parser current_state in",
          "(LitExpr (IntLit 1), st1)",
          "| LeftParen | ChineseLeftParen ->"
        ],
        "start_line": 61,
        "end_line": 64,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_identifiers.ml"
      }
    ],
    "27bebc9a193fc707bbc33134d698a7b4": [
      {
        "hash": "27bebc9a193fc707bbc33134d698a7b4",
        "text": "let st1 = advance_parser current_state in\n(LitExpr (IntLit 1), st1)\n| LeftParen | ChineseLeftParen ->",
        "lines": [
          "let st1 = advance_parser current_state in",
          "(LitExpr (IntLit 1), st1)",
          "| LeftParen | ChineseLeftParen ->"
        ],
        "start_line": 50,
        "end_line": 52,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_calls.ml"
      },
      {
        "hash": "27bebc9a193fc707bbc33134d698a7b4",
        "text": "let st1 = advance_parser current_state in\n(LitExpr (IntLit 1), st1)\n| LeftParen | ChineseLeftParen ->",
        "lines": [
          "let st1 = advance_parser current_state in",
          "(LitExpr (IntLit 1), st1)",
          "| LeftParen | ChineseLeftParen ->"
        ],
        "start_line": 62,
        "end_line": 64,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_identifiers.ml"
      }
    ],
    "289b6bb49116e64bc4e898c242d53a42": [
      {
        "hash": "289b6bb49116e64bc4e898c242d53a42",
        "text": "let st1 = advance_parser current_state in\nlet inner_expr, st2 = parse_expr st1 in\nlet st3 = expect_token_punctuation st2 is_right_paren \"right parenthesis\" in\n(inner_expr, st3)\n| _ ->\nraise\n(Parser_utils.make_unexpected_token_error\n(\"Expected basic argument expr in function call, got: \" ^ show_token token)\n(snd (current_token current_state)))",
        "lines": [
          "let st1 = advance_parser current_state in",
          "let inner_expr, st2 = parse_expr st1 in",
          "let st3 = expect_token_punctuation st2 is_right_paren \"right parenthesis\" in",
          "(inner_expr, st3)",
          "| _ ->",
          "raise",
          "(Parser_utils.make_unexpected_token_error",
          "(\"Expected basic argument expr in function call, got: \" ^ show_token token)",
          "(snd (current_token current_state)))"
        ],
        "start_line": 54,
        "end_line": 62,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_calls.ml"
      },
      {
        "hash": "289b6bb49116e64bc4e898c242d53a42",
        "text": "let st1 = advance_parser current_state in\nlet inner_expr, st2 = parse_expr st1 in\nlet st3 = expect_token_punctuation st2 is_right_paren \"right parenthesis\" in\n(inner_expr, st3)\n| _ ->\nraise\n(Parser_utils.make_unexpected_token_error\n(\"Expected basic argument expr in function call, got: \" ^ show_token token)\n(snd (current_token current_state)))",
        "lines": [
          "let st1 = advance_parser current_state in",
          "let inner_expr, st2 = parse_expr st1 in",
          "let st3 = expect_token_punctuation st2 is_right_paren \"right parenthesis\" in",
          "(inner_expr, st3)",
          "| _ ->",
          "raise",
          "(Parser_utils.make_unexpected_token_error",
          "(\"Expected basic argument expr in function call, got: \" ^ show_token token)",
          "(snd (current_token current_state)))"
        ],
        "start_line": 66,
        "end_line": 74,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_identifiers.ml"
      }
    ],
    "105b2f1759d7b2d3c92457bce2eef0a0": [
      {
        "hash": "105b2f1759d7b2d3c92457bce2eef0a0",
        "text": "let inner_expr, st2 = parse_expr st1 in\nlet st3 = expect_token_punctuation st2 is_right_paren \"right parenthesis\" in\n(inner_expr, st3)\n| _ ->\nraise\n(Parser_utils.make_unexpected_token_error\n(\"Expected basic argument expr in function call, got: \" ^ show_token token)\n(snd (current_token current_state)))",
        "lines": [
          "let inner_expr, st2 = parse_expr st1 in",
          "let st3 = expect_token_punctuation st2 is_right_paren \"right parenthesis\" in",
          "(inner_expr, st3)",
          "| _ ->",
          "raise",
          "(Parser_utils.make_unexpected_token_error",
          "(\"Expected basic argument expr in function call, got: \" ^ show_token token)",
          "(snd (current_token current_state)))"
        ],
        "start_line": 55,
        "end_line": 62,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_calls.ml"
      },
      {
        "hash": "105b2f1759d7b2d3c92457bce2eef0a0",
        "text": "let inner_expr, st2 = parse_expr st1 in\nlet st3 = expect_token_punctuation st2 is_right_paren \"right parenthesis\" in\n(inner_expr, st3)\n| _ ->\nraise\n(Parser_utils.make_unexpected_token_error\n(\"Expected basic argument expr in function call, got: \" ^ show_token token)\n(snd (current_token current_state)))",
        "lines": [
          "let inner_expr, st2 = parse_expr st1 in",
          "let st3 = expect_token_punctuation st2 is_right_paren \"right parenthesis\" in",
          "(inner_expr, st3)",
          "| _ ->",
          "raise",
          "(Parser_utils.make_unexpected_token_error",
          "(\"Expected basic argument expr in function call, got: \" ^ show_token token)",
          "(snd (current_token current_state)))"
        ],
        "start_line": 67,
        "end_line": 74,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_identifiers.ml"
      }
    ],
    "a897f446f13380fdcb5a6418c5b870a0": [
      {
        "hash": "a897f446f13380fdcb5a6418c5b870a0",
        "text": "let st3 = expect_token_punctuation st2 is_right_paren \"right parenthesis\" in\n(inner_expr, st3)\n| _ ->\nraise\n(Parser_utils.make_unexpected_token_error\n(\"Expected basic argument expr in function call, got: \" ^ show_token token)\n(snd (current_token current_state)))",
        "lines": [
          "let st3 = expect_token_punctuation st2 is_right_paren \"right parenthesis\" in",
          "(inner_expr, st3)",
          "| _ ->",
          "raise",
          "(Parser_utils.make_unexpected_token_error",
          "(\"Expected basic argument expr in function call, got: \" ^ show_token token)",
          "(snd (current_token current_state)))"
        ],
        "start_line": 56,
        "end_line": 62,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_calls.ml"
      },
      {
        "hash": "a897f446f13380fdcb5a6418c5b870a0",
        "text": "let st3 = expect_token_punctuation st2 is_right_paren \"right parenthesis\" in\n(inner_expr, st3)\n| _ ->\nraise\n(Parser_utils.make_unexpected_token_error\n(\"Expected basic argument expr in function call, got: \" ^ show_token token)\n(snd (current_token current_state)))",
        "lines": [
          "let st3 = expect_token_punctuation st2 is_right_paren \"right parenthesis\" in",
          "(inner_expr, st3)",
          "| _ ->",
          "raise",
          "(Parser_utils.make_unexpected_token_error",
          "(\"Expected basic argument expr in function call, got: \" ^ show_token token)",
          "(snd (current_token current_state)))"
        ],
        "start_line": 68,
        "end_line": 74,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_identifiers.ml"
      }
    ],
    "e291f30b94110f3e141a219cb82cf0e7": [
      {
        "hash": "e291f30b94110f3e141a219cb82cf0e7",
        "text": "(inner_expr, st3)\n| _ ->\nraise\n(Parser_utils.make_unexpected_token_error\n(\"Expected basic argument expr in function call, got: \" ^ show_token token)\n(snd (current_token current_state)))",
        "lines": [
          "(inner_expr, st3)",
          "| _ ->",
          "raise",
          "(Parser_utils.make_unexpected_token_error",
          "(\"Expected basic argument expr in function call, got: \" ^ show_token token)",
          "(snd (current_token current_state)))"
        ],
        "start_line": 57,
        "end_line": 62,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_calls.ml"
      },
      {
        "hash": "e291f30b94110f3e141a219cb82cf0e7",
        "text": "(inner_expr, st3)\n| _ ->\nraise\n(Parser_utils.make_unexpected_token_error\n(\"Expected basic argument expr in function call, got: \" ^ show_token token)\n(snd (current_token current_state)))",
        "lines": [
          "(inner_expr, st3)",
          "| _ ->",
          "raise",
          "(Parser_utils.make_unexpected_token_error",
          "(\"Expected basic argument expr in function call, got: \" ^ show_token token)",
          "(snd (current_token current_state)))"
        ],
        "start_line": 69,
        "end_line": 74,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_identifiers.ml"
      }
    ],
    "a6b70c42718a4c236e68d818172956ff": [
      {
        "hash": "a6b70c42718a4c236e68d818172956ff",
        "text": "| _ ->\nraise\n(Parser_utils.make_unexpected_token_error\n(\"Expected basic argument expr in function call, got: \" ^ show_token token)\n(snd (current_token current_state)))",
        "lines": [
          "| _ ->",
          "raise",
          "(Parser_utils.make_unexpected_token_error",
          "(\"Expected basic argument expr in function call, got: \" ^ show_token token)",
          "(snd (current_token current_state)))"
        ],
        "start_line": 58,
        "end_line": 62,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_calls.ml"
      },
      {
        "hash": "a6b70c42718a4c236e68d818172956ff",
        "text": "| _ ->\nraise\n(Parser_utils.make_unexpected_token_error\n(\"Expected basic argument expr in function call, got: \" ^ show_token token)\n(snd (current_token current_state)))",
        "lines": [
          "| _ ->",
          "raise",
          "(Parser_utils.make_unexpected_token_error",
          "(\"Expected basic argument expr in function call, got: \" ^ show_token token)",
          "(snd (current_token current_state)))"
        ],
        "start_line": 70,
        "end_line": 74,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_identifiers.ml"
      }
    ],
    "6b5f23cb32aa1f92281d2016d14f83ec": [
      {
        "hash": "6b5f23cb32aa1f92281d2016d14f83ec",
        "text": "raise\n(Parser_utils.make_unexpected_token_error\n(\"Expected basic argument expr in function call, got: \" ^ show_token token)\n(snd (current_token current_state)))",
        "lines": [
          "raise",
          "(Parser_utils.make_unexpected_token_error",
          "(\"Expected basic argument expr in function call, got: \" ^ show_token token)",
          "(snd (current_token current_state)))"
        ],
        "start_line": 59,
        "end_line": 62,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_calls.ml"
      },
      {
        "hash": "6b5f23cb32aa1f92281d2016d14f83ec",
        "text": "raise\n(Parser_utils.make_unexpected_token_error\n(\"Expected basic argument expr in function call, got: \" ^ show_token token)\n(snd (current_token current_state)))",
        "lines": [
          "raise",
          "(Parser_utils.make_unexpected_token_error",
          "(\"Expected basic argument expr in function call, got: \" ^ show_token token)",
          "(snd (current_token current_state)))"
        ],
        "start_line": 71,
        "end_line": 74,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_identifiers.ml"
      }
    ],
    "6904b536634d5a60d7451ca7e707fc9a": [
      {
        "hash": "6904b536634d5a60d7451ca7e707fc9a",
        "text": "(Parser_utils.make_unexpected_token_error\n(\"Expected basic argument expr in function call, got: \" ^ show_token token)\n(snd (current_token current_state)))",
        "lines": [
          "(Parser_utils.make_unexpected_token_error",
          "(\"Expected basic argument expr in function call, got: \" ^ show_token token)",
          "(snd (current_token current_state)))"
        ],
        "start_line": 60,
        "end_line": 62,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_calls.ml"
      },
      {
        "hash": "6904b536634d5a60d7451ca7e707fc9a",
        "text": "(Parser_utils.make_unexpected_token_error\n(\"Expected basic argument expr in function call, got: \" ^ show_token token)\n(snd (current_token current_state)))",
        "lines": [
          "(Parser_utils.make_unexpected_token_error",
          "(\"Expected basic argument expr in function call, got: \" ^ show_token token)",
          "(snd (current_token current_state)))"
        ],
        "start_line": 72,
        "end_line": 74,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_identifiers.ml"
      }
    ],
    "91de40fb8c4b17094e23f35ca74e469a": [
      {
        "hash": "91de40fb8c4b17094e23f35ca74e469a",
        "text": "let rec collect_function_arguments parse_expr args current_state =\nlet token, _ = current_token current_state in\nif Parser_expressions_utils.is_argument_token token then\nlet arg_expr, next_state = parse_single_argument parse_expr token current_state in\ncollect_function_arguments parse_expr (arg_expr :: args) next_state\nelse (List.rev args, current_state)",
        "lines": [
          "let rec collect_function_arguments parse_expr args current_state =",
          "let token, _ = current_token current_state in",
          "if Parser_expressions_utils.is_argument_token token then",
          "let arg_expr, next_state = parse_single_argument parse_expr token current_state in",
          "collect_function_arguments parse_expr (arg_expr :: args) next_state",
          "else (List.rev args, current_state)"
        ],
        "start_line": 65,
        "end_line": 70,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_calls.ml"
      },
      {
        "hash": "91de40fb8c4b17094e23f35ca74e469a",
        "text": "let rec collect_function_arguments parse_expr args current_state =\nlet token, _ = current_token current_state in\nif Parser_expressions_utils.is_argument_token token then\nlet arg_expr, next_state = parse_single_argument parse_expr token current_state in\ncollect_function_arguments parse_expr (arg_expr :: args) next_state\nelse (List.rev args, current_state)",
        "lines": [
          "let rec collect_function_arguments parse_expr args current_state =",
          "let token, _ = current_token current_state in",
          "if Parser_expressions_utils.is_argument_token token then",
          "let arg_expr, next_state = parse_single_argument parse_expr token current_state in",
          "collect_function_arguments parse_expr (arg_expr :: args) next_state",
          "else (List.rev args, current_state)"
        ],
        "start_line": 77,
        "end_line": 82,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_identifiers.ml"
      }
    ],
    "fcd9be3e2eb223d617dacc99b38a1768": [
      {
        "hash": "fcd9be3e2eb223d617dacc99b38a1768",
        "text": "let token, _ = current_token current_state in\nif Parser_expressions_utils.is_argument_token token then\nlet arg_expr, next_state = parse_single_argument parse_expr token current_state in\ncollect_function_arguments parse_expr (arg_expr :: args) next_state\nelse (List.rev args, current_state)",
        "lines": [
          "let token, _ = current_token current_state in",
          "if Parser_expressions_utils.is_argument_token token then",
          "let arg_expr, next_state = parse_single_argument parse_expr token current_state in",
          "collect_function_arguments parse_expr (arg_expr :: args) next_state",
          "else (List.rev args, current_state)"
        ],
        "start_line": 66,
        "end_line": 70,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_calls.ml"
      },
      {
        "hash": "fcd9be3e2eb223d617dacc99b38a1768",
        "text": "let token, _ = current_token current_state in\nif Parser_expressions_utils.is_argument_token token then\nlet arg_expr, next_state = parse_single_argument parse_expr token current_state in\ncollect_function_arguments parse_expr (arg_expr :: args) next_state\nelse (List.rev args, current_state)",
        "lines": [
          "let token, _ = current_token current_state in",
          "if Parser_expressions_utils.is_argument_token token then",
          "let arg_expr, next_state = parse_single_argument parse_expr token current_state in",
          "collect_function_arguments parse_expr (arg_expr :: args) next_state",
          "else (List.rev args, current_state)"
        ],
        "start_line": 78,
        "end_line": 82,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_identifiers.ml"
      }
    ],
    "49707c3e59858d2dda471060e982844b": [
      {
        "hash": "49707c3e59858d2dda471060e982844b",
        "text": "if Parser_expressions_utils.is_argument_token token then\nlet arg_expr, next_state = parse_single_argument parse_expr token current_state in\ncollect_function_arguments parse_expr (arg_expr :: args) next_state\nelse (List.rev args, current_state)",
        "lines": [
          "if Parser_expressions_utils.is_argument_token token then",
          "let arg_expr, next_state = parse_single_argument parse_expr token current_state in",
          "collect_function_arguments parse_expr (arg_expr :: args) next_state",
          "else (List.rev args, current_state)"
        ],
        "start_line": 67,
        "end_line": 70,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_calls.ml"
      },
      {
        "hash": "49707c3e59858d2dda471060e982844b",
        "text": "if Parser_expressions_utils.is_argument_token token then\nlet arg_expr, next_state = parse_single_argument parse_expr token current_state in\ncollect_function_arguments parse_expr (arg_expr :: args) next_state\nelse (List.rev args, current_state)",
        "lines": [
          "if Parser_expressions_utils.is_argument_token token then",
          "let arg_expr, next_state = parse_single_argument parse_expr token current_state in",
          "collect_function_arguments parse_expr (arg_expr :: args) next_state",
          "else (List.rev args, current_state)"
        ],
        "start_line": 79,
        "end_line": 82,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_identifiers.ml"
      }
    ],
    "e256279e564849045c5a379a65046bc9": [
      {
        "hash": "e256279e564849045c5a379a65046bc9",
        "text": "let arg_expr, next_state = parse_single_argument parse_expr token current_state in\ncollect_function_arguments parse_expr (arg_expr :: args) next_state\nelse (List.rev args, current_state)",
        "lines": [
          "let arg_expr, next_state = parse_single_argument parse_expr token current_state in",
          "collect_function_arguments parse_expr (arg_expr :: args) next_state",
          "else (List.rev args, current_state)"
        ],
        "start_line": 68,
        "end_line": 70,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_calls.ml"
      },
      {
        "hash": "e256279e564849045c5a379a65046bc9",
        "text": "let arg_expr, next_state = parse_single_argument parse_expr token current_state in\ncollect_function_arguments parse_expr (arg_expr :: args) next_state\nelse (List.rev args, current_state)",
        "lines": [
          "let arg_expr, next_state = parse_single_argument parse_expr token current_state in",
          "collect_function_arguments parse_expr (arg_expr :: args) next_state",
          "else (List.rev args, current_state)"
        ],
        "start_line": 80,
        "end_line": 82,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_identifiers.ml"
      }
    ],
    "4979f545b0606f105b2aefc0d5db9deb": [
      {
        "hash": "4979f545b0606f105b2aefc0d5db9deb",
        "text": "let parse_function_call_or_variable parse_expr name state =\nlet next_token, _ = current_token state in\nif Parser_expressions_utils.is_argument_token next_token then",
        "lines": [
          "let parse_function_call_or_variable parse_expr name state =",
          "let next_token, _ = current_token state in",
          "if Parser_expressions_utils.is_argument_token next_token then"
        ],
        "start_line": 79,
        "end_line": 81,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_calls.ml"
      },
      {
        "hash": "4979f545b0606f105b2aefc0d5db9deb",
        "text": "let parse_function_call_or_variable parse_expr name state =\nlet next_token, _ = current_token state in\nif Parser_expressions_utils.is_argument_token next_token then",
        "lines": [
          "let parse_function_call_or_variable parse_expr name state =",
          "let next_token, _ = current_token state in",
          "if Parser_expressions_utils.is_argument_token next_token then"
        ],
        "start_line": 89,
        "end_line": 91,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_identifiers.ml"
      }
    ],
    "f03e74058b2330713e22407631ea6650": [
      {
        "hash": "f03e74058b2330713e22407631ea6650",
        "text": "let args, final_state = parse_function_arguments parse_expr state in\n(FunCallExpr (VarExpr name, args), final_state)\nelse",
        "lines": [
          "let args, final_state = parse_function_arguments parse_expr state in",
          "(FunCallExpr (VarExpr name, args), final_state)",
          "else"
        ],
        "start_line": 83,
        "end_line": 85,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_calls.ml"
      },
      {
        "hash": "f03e74058b2330713e22407631ea6650",
        "text": "let args, final_state = parse_function_arguments parse_expr state in\n(FunCallExpr (VarExpr name, args), final_state)\nelse",
        "lines": [
          "let args, final_state = parse_function_arguments parse_expr state in",
          "(FunCallExpr (VarExpr name, args), final_state)",
          "else"
        ],
        "start_line": 93,
        "end_line": 95,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_identifiers.ml"
      }
    ],
    "746cd8a30e5d4259e57a93ada64cd34b": [
      {
        "hash": "746cd8a30e5d4259e57a93ada64cd34b",
        "text": "let rec parse_postfix_expr parse_expr expr state =\nlet token, _ = current_token state in\nmatch token with\n| Dot -> (\nlet state1 = advance_parser state in\nlet token2, _ = current_token state1 in\nmatch token2 with\n| QuotedIdentifierToken field_name ->\nlet state2 = advance_parser state1 in",
        "lines": [
          "let rec parse_postfix_expr parse_expr expr state =",
          "let token, _ = current_token state in",
          "match token with",
          "| Dot -> (",
          "let state1 = advance_parser state in",
          "let token2, _ = current_token state1 in",
          "match token2 with",
          "| QuotedIdentifierToken field_name ->",
          "let state2 = advance_parser state1 in"
        ],
        "start_line": 92,
        "end_line": 100,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_calls.ml"
      },
      {
        "hash": "746cd8a30e5d4259e57a93ada64cd34b",
        "text": "let rec parse_postfix_expr parse_expr expr state =\nlet token, _ = current_token state in\nmatch token with\n| Dot -> (\nlet state1 = advance_parser state in\nlet token2, _ = current_token state1 in\nmatch token2 with\n| QuotedIdentifierToken field_name ->\nlet state2 = advance_parser state1 in",
        "lines": [
          "let rec parse_postfix_expr parse_expr expr state =",
          "let token, _ = current_token state in",
          "match token with",
          "| Dot -> (",
          "let state1 = advance_parser state in",
          "let token2, _ = current_token state1 in",
          "match token2 with",
          "| QuotedIdentifierToken field_name ->",
          "let state2 = advance_parser state1 in"
        ],
        "start_line": 87,
        "end_line": 95,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_constructs.ml"
      }
    ],
    "5b62a45cebbae36e5f977fa3a023d80d": [
      {
        "hash": "5b62a45cebbae36e5f977fa3a023d80d",
        "text": "let token, _ = current_token state in\nmatch token with\n| Dot -> (\nlet state1 = advance_parser state in\nlet token2, _ = current_token state1 in\nmatch token2 with\n| QuotedIdentifierToken field_name ->\nlet state2 = advance_parser state1 in",
        "lines": [
          "let token, _ = current_token state in",
          "match token with",
          "| Dot -> (",
          "let state1 = advance_parser state in",
          "let token2, _ = current_token state1 in",
          "match token2 with",
          "| QuotedIdentifierToken field_name ->",
          "let state2 = advance_parser state1 in"
        ],
        "start_line": 93,
        "end_line": 100,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_calls.ml"
      },
      {
        "hash": "5b62a45cebbae36e5f977fa3a023d80d",
        "text": "let token, _ = current_token state in\nmatch token with\n| Dot -> (\nlet state1 = advance_parser state in\nlet token2, _ = current_token state1 in\nmatch token2 with\n| QuotedIdentifierToken field_name ->\nlet state2 = advance_parser state1 in",
        "lines": [
          "let token, _ = current_token state in",
          "match token with",
          "| Dot -> (",
          "let state1 = advance_parser state in",
          "let token2, _ = current_token state1 in",
          "match token2 with",
          "| QuotedIdentifierToken field_name ->",
          "let state2 = advance_parser state1 in"
        ],
        "start_line": 88,
        "end_line": 95,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_constructs.ml"
      }
    ],
    "1efd4138e55e8a6de56686e63fe3cd2c": [
      {
        "hash": "1efd4138e55e8a6de56686e63fe3cd2c",
        "text": "match token with\n| Dot -> (\nlet state1 = advance_parser state in\nlet token2, _ = current_token state1 in\nmatch token2 with\n| QuotedIdentifierToken field_name ->\nlet state2 = advance_parser state1 in",
        "lines": [
          "match token with",
          "| Dot -> (",
          "let state1 = advance_parser state in",
          "let token2, _ = current_token state1 in",
          "match token2 with",
          "| QuotedIdentifierToken field_name ->",
          "let state2 = advance_parser state1 in"
        ],
        "start_line": 94,
        "end_line": 100,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_calls.ml"
      },
      {
        "hash": "1efd4138e55e8a6de56686e63fe3cd2c",
        "text": "match token with\n| Dot -> (\nlet state1 = advance_parser state in\nlet token2, _ = current_token state1 in\nmatch token2 with\n| QuotedIdentifierToken field_name ->\nlet state2 = advance_parser state1 in",
        "lines": [
          "match token with",
          "| Dot -> (",
          "let state1 = advance_parser state in",
          "let token2, _ = current_token state1 in",
          "match token2 with",
          "| QuotedIdentifierToken field_name ->",
          "let state2 = advance_parser state1 in"
        ],
        "start_line": 89,
        "end_line": 95,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_constructs.ml"
      }
    ],
    "c024f05a63ab42e89512dff8e2bf4c96": [
      {
        "hash": "c024f05a63ab42e89512dff8e2bf4c96",
        "text": "| Dot -> (\nlet state1 = advance_parser state in\nlet token2, _ = current_token state1 in\nmatch token2 with\n| QuotedIdentifierToken field_name ->\nlet state2 = advance_parser state1 in",
        "lines": [
          "| Dot -> (",
          "let state1 = advance_parser state in",
          "let token2, _ = current_token state1 in",
          "match token2 with",
          "| QuotedIdentifierToken field_name ->",
          "let state2 = advance_parser state1 in"
        ],
        "start_line": 95,
        "end_line": 100,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_calls.ml"
      },
      {
        "hash": "c024f05a63ab42e89512dff8e2bf4c96",
        "text": "| Dot -> (\nlet state1 = advance_parser state in\nlet token2, _ = current_token state1 in\nmatch token2 with\n| QuotedIdentifierToken field_name ->\nlet state2 = advance_parser state1 in",
        "lines": [
          "| Dot -> (",
          "let state1 = advance_parser state in",
          "let token2, _ = current_token state1 in",
          "match token2 with",
          "| QuotedIdentifierToken field_name ->",
          "let state2 = advance_parser state1 in"
        ],
        "start_line": 90,
        "end_line": 95,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_constructs.ml"
      },
      {
        "hash": "c024f05a63ab42e89512dff8e2bf4c96",
        "text": "| Dot -> (\nlet state1 = advance_parser state in\nlet token2, _ = current_token state1 in\nmatch token2 with\n| QuotedIdentifierToken field_name ->\nlet state2 = advance_parser state1 in",
        "lines": [
          "| Dot -> (",
          "let state1 = advance_parser state in",
          "let token2, _ = current_token state1 in",
          "match token2 with",
          "| QuotedIdentifierToken field_name ->",
          "let state2 = advance_parser state1 in"
        ],
        "start_line": 118,
        "end_line": 123,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_operators_consolidated.ml"
      },
      {
        "hash": "c024f05a63ab42e89512dff8e2bf4c96",
        "text": "| Dot -> (\nlet state1 = advance_parser state in\nlet token2, _ = current_token state1 in\nmatch token2 with\n| QuotedIdentifierToken field_name ->\nlet state2 = advance_parser state1 in",
        "lines": [
          "| Dot -> (",
          "let state1 = advance_parser state in",
          "let token2, _ = current_token state1 in",
          "match token2 with",
          "| QuotedIdentifierToken field_name ->",
          "let state2 = advance_parser state1 in"
        ],
        "start_line": 214,
        "end_line": 219,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_operators_consolidated.ml"
      }
    ],
    "cf639857527d14b80f6ef8c2dd76a270": [
      {
        "hash": "cf639857527d14b80f6ef8c2dd76a270",
        "text": "let state1 = advance_parser state in\nlet token2, _ = current_token state1 in\nmatch token2 with\n| QuotedIdentifierToken field_name ->\nlet state2 = advance_parser state1 in",
        "lines": [
          "let state1 = advance_parser state in",
          "let token2, _ = current_token state1 in",
          "match token2 with",
          "| QuotedIdentifierToken field_name ->",
          "let state2 = advance_parser state1 in"
        ],
        "start_line": 96,
        "end_line": 100,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_calls.ml"
      },
      {
        "hash": "cf639857527d14b80f6ef8c2dd76a270",
        "text": "let state1 = advance_parser state in\nlet token2, _ = current_token state1 in\nmatch token2 with\n| QuotedIdentifierToken field_name ->\nlet state2 = advance_parser state1 in",
        "lines": [
          "let state1 = advance_parser state in",
          "let token2, _ = current_token state1 in",
          "match token2 with",
          "| QuotedIdentifierToken field_name ->",
          "let state2 = advance_parser state1 in"
        ],
        "start_line": 91,
        "end_line": 95,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_constructs.ml"
      },
      {
        "hash": "cf639857527d14b80f6ef8c2dd76a270",
        "text": "let state1 = advance_parser state in\nlet token2, _ = current_token state1 in\nmatch token2 with\n| QuotedIdentifierToken field_name ->\nlet state2 = advance_parser state1 in",
        "lines": [
          "let state1 = advance_parser state in",
          "let token2, _ = current_token state1 in",
          "match token2 with",
          "| QuotedIdentifierToken field_name ->",
          "let state2 = advance_parser state1 in"
        ],
        "start_line": 119,
        "end_line": 123,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_operators_consolidated.ml"
      },
      {
        "hash": "cf639857527d14b80f6ef8c2dd76a270",
        "text": "let state1 = advance_parser state in\nlet token2, _ = current_token state1 in\nmatch token2 with\n| QuotedIdentifierToken field_name ->\nlet state2 = advance_parser state1 in",
        "lines": [
          "let state1 = advance_parser state in",
          "let token2, _ = current_token state1 in",
          "match token2 with",
          "| QuotedIdentifierToken field_name ->",
          "let state2 = advance_parser state1 in"
        ],
        "start_line": 215,
        "end_line": 219,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_operators_consolidated.ml"
      }
    ],
    "2e4408eae1b9a891cb515b720b56bff2": [
      {
        "hash": "2e4408eae1b9a891cb515b720b56bff2",
        "text": "let token2, _ = current_token state1 in\nmatch token2 with\n| QuotedIdentifierToken field_name ->\nlet state2 = advance_parser state1 in",
        "lines": [
          "let token2, _ = current_token state1 in",
          "match token2 with",
          "| QuotedIdentifierToken field_name ->",
          "let state2 = advance_parser state1 in"
        ],
        "start_line": 97,
        "end_line": 100,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_calls.ml"
      },
      {
        "hash": "2e4408eae1b9a891cb515b720b56bff2",
        "text": "let token2, _ = current_token state1 in\nmatch token2 with\n| QuotedIdentifierToken field_name ->\nlet state2 = advance_parser state1 in",
        "lines": [
          "let token2, _ = current_token state1 in",
          "match token2 with",
          "| QuotedIdentifierToken field_name ->",
          "let state2 = advance_parser state1 in"
        ],
        "start_line": 92,
        "end_line": 95,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_constructs.ml"
      },
      {
        "hash": "2e4408eae1b9a891cb515b720b56bff2",
        "text": "let token2, _ = current_token state1 in\nmatch token2 with\n| QuotedIdentifierToken field_name ->\nlet state2 = advance_parser state1 in",
        "lines": [
          "let token2, _ = current_token state1 in",
          "match token2 with",
          "| QuotedIdentifierToken field_name ->",
          "let state2 = advance_parser state1 in"
        ],
        "start_line": 120,
        "end_line": 123,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_operators_consolidated.ml"
      },
      {
        "hash": "2e4408eae1b9a891cb515b720b56bff2",
        "text": "let token2, _ = current_token state1 in\nmatch token2 with\n| QuotedIdentifierToken field_name ->\nlet state2 = advance_parser state1 in",
        "lines": [
          "let token2, _ = current_token state1 in",
          "match token2 with",
          "| QuotedIdentifierToken field_name ->",
          "let state2 = advance_parser state1 in"
        ],
        "start_line": 216,
        "end_line": 219,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_operators_consolidated.ml"
      }
    ],
    "768ba6345a36728434da7b552f5be4bf": [
      {
        "hash": "768ba6345a36728434da7b552f5be4bf",
        "text": "match token2 with\n| QuotedIdentifierToken field_name ->\nlet state2 = advance_parser state1 in",
        "lines": [
          "match token2 with",
          "| QuotedIdentifierToken field_name ->",
          "let state2 = advance_parser state1 in"
        ],
        "start_line": 98,
        "end_line": 100,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_calls.ml"
      },
      {
        "hash": "768ba6345a36728434da7b552f5be4bf",
        "text": "match token2 with\n| QuotedIdentifierToken field_name ->\nlet state2 = advance_parser state1 in",
        "lines": [
          "match token2 with",
          "| QuotedIdentifierToken field_name ->",
          "let state2 = advance_parser state1 in"
        ],
        "start_line": 93,
        "end_line": 95,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_constructs.ml"
      },
      {
        "hash": "768ba6345a36728434da7b552f5be4bf",
        "text": "match token2 with\n| QuotedIdentifierToken field_name ->\nlet state2 = advance_parser state1 in",
        "lines": [
          "match token2 with",
          "| QuotedIdentifierToken field_name ->",
          "let state2 = advance_parser state1 in"
        ],
        "start_line": 121,
        "end_line": 123,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_operators_consolidated.ml"
      },
      {
        "hash": "768ba6345a36728434da7b552f5be4bf",
        "text": "match token2 with\n| QuotedIdentifierToken field_name ->\nlet state2 = advance_parser state1 in",
        "lines": [
          "match token2 with",
          "| QuotedIdentifierToken field_name ->",
          "let state2 = advance_parser state1 in"
        ],
        "start_line": 217,
        "end_line": 219,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_operators_consolidated.ml"
      }
    ],
    "da02f56c65b91a818be4adf9597e1189": [
      {
        "hash": "da02f56c65b91a818be4adf9597e1189",
        "text": "let new_expr =\nmatch expr with\n| VarExpr module_name\nwhen String.length module_name > 0\n&& Char.uppercase_ascii module_name.[0] = module_name.[0] ->",
        "lines": [
          "let new_expr =",
          "match expr with",
          "| VarExpr module_name",
          "when String.length module_name > 0",
          "&& Char.uppercase_ascii module_name.[0] = module_name.[0] ->"
        ],
        "start_line": 102,
        "end_line": 106,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_calls.ml"
      },
      {
        "hash": "da02f56c65b91a818be4adf9597e1189",
        "text": "let new_expr =\nmatch expr with\n| VarExpr module_name\nwhen String.length module_name > 0\n&& Char.uppercase_ascii module_name.[0] = module_name.[0] ->",
        "lines": [
          "let new_expr =",
          "match expr with",
          "| VarExpr module_name",
          "when String.length module_name > 0",
          "&& Char.uppercase_ascii module_name.[0] = module_name.[0] ->"
        ],
        "start_line": 97,
        "end_line": 101,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_constructs.ml"
      },
      {
        "hash": "da02f56c65b91a818be4adf9597e1189",
        "text": "let new_expr =\nmatch expr with\n| VarExpr module_name\nwhen String.length module_name > 0\n&& Char.uppercase_ascii module_name.[0] = module_name.[0] ->",
        "lines": [
          "let new_expr =",
          "match expr with",
          "| VarExpr module_name",
          "when String.length module_name > 0",
          "&& Char.uppercase_ascii module_name.[0] = module_name.[0] ->"
        ],
        "start_line": 125,
        "end_line": 129,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_operators_consolidated.ml"
      },
      {
        "hash": "da02f56c65b91a818be4adf9597e1189",
        "text": "let new_expr =\nmatch expr with\n| VarExpr module_name\nwhen String.length module_name > 0\n&& Char.uppercase_ascii module_name.[0] = module_name.[0] ->",
        "lines": [
          "let new_expr =",
          "match expr with",
          "| VarExpr module_name",
          "when String.length module_name > 0",
          "&& Char.uppercase_ascii module_name.[0] = module_name.[0] ->"
        ],
        "start_line": 221,
        "end_line": 225,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_operators_consolidated.ml"
      }
    ],
    "4fe5209da3c5c67c3f75e335e3d34bbc": [
      {
        "hash": "4fe5209da3c5c67c3f75e335e3d34bbc",
        "text": "match expr with\n| VarExpr module_name\nwhen String.length module_name > 0\n&& Char.uppercase_ascii module_name.[0] = module_name.[0] ->",
        "lines": [
          "match expr with",
          "| VarExpr module_name",
          "when String.length module_name > 0",
          "&& Char.uppercase_ascii module_name.[0] = module_name.[0] ->"
        ],
        "start_line": 103,
        "end_line": 106,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_calls.ml"
      },
      {
        "hash": "4fe5209da3c5c67c3f75e335e3d34bbc",
        "text": "match expr with\n| VarExpr module_name\nwhen String.length module_name > 0\n&& Char.uppercase_ascii module_name.[0] = module_name.[0] ->",
        "lines": [
          "match expr with",
          "| VarExpr module_name",
          "when String.length module_name > 0",
          "&& Char.uppercase_ascii module_name.[0] = module_name.[0] ->"
        ],
        "start_line": 98,
        "end_line": 101,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_constructs.ml"
      },
      {
        "hash": "4fe5209da3c5c67c3f75e335e3d34bbc",
        "text": "match expr with\n| VarExpr module_name\nwhen String.length module_name > 0\n&& Char.uppercase_ascii module_name.[0] = module_name.[0] ->",
        "lines": [
          "match expr with",
          "| VarExpr module_name",
          "when String.length module_name > 0",
          "&& Char.uppercase_ascii module_name.[0] = module_name.[0] ->"
        ],
        "start_line": 126,
        "end_line": 129,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_operators_consolidated.ml"
      },
      {
        "hash": "4fe5209da3c5c67c3f75e335e3d34bbc",
        "text": "match expr with\n| VarExpr module_name\nwhen String.length module_name > 0\n&& Char.uppercase_ascii module_name.[0] = module_name.[0] ->",
        "lines": [
          "match expr with",
          "| VarExpr module_name",
          "when String.length module_name > 0",
          "&& Char.uppercase_ascii module_name.[0] = module_name.[0] ->"
        ],
        "start_line": 222,
        "end_line": 225,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_operators_consolidated.ml"
      }
    ],
    "cbb1b8e41c9bc41d24e7312666787a89": [
      {
        "hash": "cbb1b8e41c9bc41d24e7312666787a89",
        "text": "| VarExpr module_name\nwhen String.length module_name > 0\n&& Char.uppercase_ascii module_name.[0] = module_name.[0] ->",
        "lines": [
          "| VarExpr module_name",
          "when String.length module_name > 0",
          "&& Char.uppercase_ascii module_name.[0] = module_name.[0] ->"
        ],
        "start_line": 104,
        "end_line": 106,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_calls.ml"
      },
      {
        "hash": "cbb1b8e41c9bc41d24e7312666787a89",
        "text": "| VarExpr module_name\nwhen String.length module_name > 0\n&& Char.uppercase_ascii module_name.[0] = module_name.[0] ->",
        "lines": [
          "| VarExpr module_name",
          "when String.length module_name > 0",
          "&& Char.uppercase_ascii module_name.[0] = module_name.[0] ->"
        ],
        "start_line": 99,
        "end_line": 101,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_constructs.ml"
      },
      {
        "hash": "cbb1b8e41c9bc41d24e7312666787a89",
        "text": "| VarExpr module_name\nwhen String.length module_name > 0\n&& Char.uppercase_ascii module_name.[0] = module_name.[0] ->",
        "lines": [
          "| VarExpr module_name",
          "when String.length module_name > 0",
          "&& Char.uppercase_ascii module_name.[0] = module_name.[0] ->"
        ],
        "start_line": 127,
        "end_line": 129,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_operators_consolidated.ml"
      },
      {
        "hash": "cbb1b8e41c9bc41d24e7312666787a89",
        "text": "| VarExpr module_name\nwhen String.length module_name > 0\n&& Char.uppercase_ascii module_name.[0] = module_name.[0] ->",
        "lines": [
          "| VarExpr module_name",
          "when String.length module_name > 0",
          "&& Char.uppercase_ascii module_name.[0] = module_name.[0] ->"
        ],
        "start_line": 223,
        "end_line": 225,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_operators_consolidated.ml"
      }
    ],
    "7efc458d3fb7d9a13bdb08af1038e08f": [
      {
        "hash": "7efc458d3fb7d9a13bdb08af1038e08f",
        "text": "FieldAccessExpr (expr, field_name)\nin\nparse_postfix_expr parse_expr new_expr state2\n| _ -> (expr, state))\n| LeftBracket | ChineseLeftBracket ->",
        "lines": [
          "FieldAccessExpr (expr, field_name)",
          "in",
          "parse_postfix_expr parse_expr new_expr state2",
          "| _ -> (expr, state))",
          "| LeftBracket | ChineseLeftBracket ->"
        ],
        "start_line": 111,
        "end_line": 115,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_calls.ml"
      },
      {
        "hash": "7efc458d3fb7d9a13bdb08af1038e08f",
        "text": "FieldAccessExpr (expr, field_name)\nin\nparse_postfix_expr parse_expr new_expr state2\n| _ -> (expr, state))\n| LeftBracket | ChineseLeftBracket ->",
        "lines": [
          "FieldAccessExpr (expr, field_name)",
          "in",
          "parse_postfix_expr parse_expr new_expr state2",
          "| _ -> (expr, state))",
          "| LeftBracket | ChineseLeftBracket ->"
        ],
        "start_line": 106,
        "end_line": 110,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_constructs.ml"
      }
    ],
    "db2709c6aa13ca1151740224b605e29b": [
      {
        "hash": "db2709c6aa13ca1151740224b605e29b",
        "text": "in\nparse_postfix_expr parse_expr new_expr state2\n| _ -> (expr, state))\n| LeftBracket | ChineseLeftBracket ->",
        "lines": [
          "in",
          "parse_postfix_expr parse_expr new_expr state2",
          "| _ -> (expr, state))",
          "| LeftBracket | ChineseLeftBracket ->"
        ],
        "start_line": 112,
        "end_line": 115,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_calls.ml"
      },
      {
        "hash": "db2709c6aa13ca1151740224b605e29b",
        "text": "in\nparse_postfix_expr parse_expr new_expr state2\n| _ -> (expr, state))\n| LeftBracket | ChineseLeftBracket ->",
        "lines": [
          "in",
          "parse_postfix_expr parse_expr new_expr state2",
          "| _ -> (expr, state))",
          "| LeftBracket | ChineseLeftBracket ->"
        ],
        "start_line": 107,
        "end_line": 110,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_constructs.ml"
      }
    ],
    "2c843134313c9b2f7dd1a468eaed465f": [
      {
        "hash": "2c843134313c9b2f7dd1a468eaed465f",
        "text": "parse_postfix_expr parse_expr new_expr state2\n| _ -> (expr, state))\n| LeftBracket | ChineseLeftBracket ->",
        "lines": [
          "parse_postfix_expr parse_expr new_expr state2",
          "| _ -> (expr, state))",
          "| LeftBracket | ChineseLeftBracket ->"
        ],
        "start_line": 113,
        "end_line": 115,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_calls.ml"
      },
      {
        "hash": "2c843134313c9b2f7dd1a468eaed465f",
        "text": "parse_postfix_expr parse_expr new_expr state2\n| _ -> (expr, state))\n| LeftBracket | ChineseLeftBracket ->",
        "lines": [
          "parse_postfix_expr parse_expr new_expr state2",
          "| _ -> (expr, state))",
          "| LeftBracket | ChineseLeftBracket ->"
        ],
        "start_line": 108,
        "end_line": 110,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_constructs.ml"
      }
    ],
    "44c46f56c6b213b348bb5fa99fe9ce9d": [
      {
        "hash": "44c46f56c6b213b348bb5fa99fe9ce9d",
        "text": "let state1 = advance_parser state in\nlet index_expr, state2 = parse_expr state1 in\nlet state3 = expect_token_punctuation state2 is_right_bracket \"right bracket\" in\nlet new_expr = ArrayAccessExpr (expr, index_expr) in\nparse_postfix_expr parse_expr new_expr state3\n| _ -> (expr, state)",
        "lines": [
          "let state1 = advance_parser state in",
          "let index_expr, state2 = parse_expr state1 in",
          "let state3 = expect_token_punctuation state2 is_right_bracket \"right bracket\" in",
          "let new_expr = ArrayAccessExpr (expr, index_expr) in",
          "parse_postfix_expr parse_expr new_expr state3",
          "| _ -> (expr, state)"
        ],
        "start_line": 117,
        "end_line": 122,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_calls.ml"
      },
      {
        "hash": "44c46f56c6b213b348bb5fa99fe9ce9d",
        "text": "let state1 = advance_parser state in\nlet index_expr, state2 = parse_expr state1 in\nlet state3 = expect_token_punctuation state2 is_right_bracket \"right bracket\" in\nlet new_expr = ArrayAccessExpr (expr, index_expr) in\nparse_postfix_expr parse_expr new_expr state3\n| _ -> (expr, state)",
        "lines": [
          "let state1 = advance_parser state in",
          "let index_expr, state2 = parse_expr state1 in",
          "let state3 = expect_token_punctuation state2 is_right_bracket \"right bracket\" in",
          "let new_expr = ArrayAccessExpr (expr, index_expr) in",
          "parse_postfix_expr parse_expr new_expr state3",
          "| _ -> (expr, state)"
        ],
        "start_line": 112,
        "end_line": 117,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_constructs.ml"
      },
      {
        "hash": "44c46f56c6b213b348bb5fa99fe9ce9d",
        "text": "let state1 = advance_parser state in\nlet index_expr, state2 = parse_expr state1 in\nlet state3 = expect_token_punctuation state2 is_right_bracket \"right bracket\" in\nlet new_expr = ArrayAccessExpr (expr, index_expr) in\nparse_postfix_expr parse_expr new_expr state3\n| _ -> (expr, state)",
        "lines": [
          "let state1 = advance_parser state in",
          "let index_expr, state2 = parse_expr state1 in",
          "let state3 = expect_token_punctuation state2 is_right_bracket \"right bracket\" in",
          "let new_expr = ArrayAccessExpr (expr, index_expr) in",
          "parse_postfix_expr parse_expr new_expr state3",
          "| _ -> (expr, state)"
        ],
        "start_line": 140,
        "end_line": 145,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_operators_consolidated.ml"
      }
    ],
    "b94c5716b1a6c8771ec755e39ea7b643": [
      {
        "hash": "b94c5716b1a6c8771ec755e39ea7b643",
        "text": "let index_expr, state2 = parse_expr state1 in\nlet state3 = expect_token_punctuation state2 is_right_bracket \"right bracket\" in\nlet new_expr = ArrayAccessExpr (expr, index_expr) in\nparse_postfix_expr parse_expr new_expr state3\n| _ -> (expr, state)",
        "lines": [
          "let index_expr, state2 = parse_expr state1 in",
          "let state3 = expect_token_punctuation state2 is_right_bracket \"right bracket\" in",
          "let new_expr = ArrayAccessExpr (expr, index_expr) in",
          "parse_postfix_expr parse_expr new_expr state3",
          "| _ -> (expr, state)"
        ],
        "start_line": 118,
        "end_line": 122,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_calls.ml"
      },
      {
        "hash": "b94c5716b1a6c8771ec755e39ea7b643",
        "text": "let index_expr, state2 = parse_expr state1 in\nlet state3 = expect_token_punctuation state2 is_right_bracket \"right bracket\" in\nlet new_expr = ArrayAccessExpr (expr, index_expr) in\nparse_postfix_expr parse_expr new_expr state3\n| _ -> (expr, state)",
        "lines": [
          "let index_expr, state2 = parse_expr state1 in",
          "let state3 = expect_token_punctuation state2 is_right_bracket \"right bracket\" in",
          "let new_expr = ArrayAccessExpr (expr, index_expr) in",
          "parse_postfix_expr parse_expr new_expr state3",
          "| _ -> (expr, state)"
        ],
        "start_line": 113,
        "end_line": 117,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_constructs.ml"
      },
      {
        "hash": "b94c5716b1a6c8771ec755e39ea7b643",
        "text": "let index_expr, state2 = parse_expr state1 in\nlet state3 = expect_token_punctuation state2 is_right_bracket \"right bracket\" in\nlet new_expr = ArrayAccessExpr (expr, index_expr) in\nparse_postfix_expr parse_expr new_expr state3\n| _ -> (expr, state)",
        "lines": [
          "let index_expr, state2 = parse_expr state1 in",
          "let state3 = expect_token_punctuation state2 is_right_bracket \"right bracket\" in",
          "let new_expr = ArrayAccessExpr (expr, index_expr) in",
          "parse_postfix_expr parse_expr new_expr state3",
          "| _ -> (expr, state)"
        ],
        "start_line": 141,
        "end_line": 145,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_operators_consolidated.ml"
      }
    ],
    "051c98e376b8eaad72fc168321b5cc84": [
      {
        "hash": "051c98e376b8eaad72fc168321b5cc84",
        "text": "let state3 = expect_token_punctuation state2 is_right_bracket \"right bracket\" in\nlet new_expr = ArrayAccessExpr (expr, index_expr) in\nparse_postfix_expr parse_expr new_expr state3\n| _ -> (expr, state)",
        "lines": [
          "let state3 = expect_token_punctuation state2 is_right_bracket \"right bracket\" in",
          "let new_expr = ArrayAccessExpr (expr, index_expr) in",
          "parse_postfix_expr parse_expr new_expr state3",
          "| _ -> (expr, state)"
        ],
        "start_line": 119,
        "end_line": 122,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_calls.ml"
      },
      {
        "hash": "051c98e376b8eaad72fc168321b5cc84",
        "text": "let state3 = expect_token_punctuation state2 is_right_bracket \"right bracket\" in\nlet new_expr = ArrayAccessExpr (expr, index_expr) in\nparse_postfix_expr parse_expr new_expr state3\n| _ -> (expr, state)",
        "lines": [
          "let state3 = expect_token_punctuation state2 is_right_bracket \"right bracket\" in",
          "let new_expr = ArrayAccessExpr (expr, index_expr) in",
          "parse_postfix_expr parse_expr new_expr state3",
          "| _ -> (expr, state)"
        ],
        "start_line": 114,
        "end_line": 117,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_constructs.ml"
      },
      {
        "hash": "051c98e376b8eaad72fc168321b5cc84",
        "text": "let state3 = expect_token_punctuation state2 is_right_bracket \"right bracket\" in\nlet new_expr = ArrayAccessExpr (expr, index_expr) in\nparse_postfix_expr parse_expr new_expr state3\n| _ -> (expr, state)",
        "lines": [
          "let state3 = expect_token_punctuation state2 is_right_bracket \"right bracket\" in",
          "let new_expr = ArrayAccessExpr (expr, index_expr) in",
          "parse_postfix_expr parse_expr new_expr state3",
          "| _ -> (expr, state)"
        ],
        "start_line": 142,
        "end_line": 145,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_operators_consolidated.ml"
      }
    ],
    "98a601dd12785391c625a8a35524f073": [
      {
        "hash": "98a601dd12785391c625a8a35524f073",
        "text": "let new_expr = ArrayAccessExpr (expr, index_expr) in\nparse_postfix_expr parse_expr new_expr state3\n| _ -> (expr, state)",
        "lines": [
          "let new_expr = ArrayAccessExpr (expr, index_expr) in",
          "parse_postfix_expr parse_expr new_expr state3",
          "| _ -> (expr, state)"
        ],
        "start_line": 120,
        "end_line": 122,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_calls.ml"
      },
      {
        "hash": "98a601dd12785391c625a8a35524f073",
        "text": "let new_expr = ArrayAccessExpr (expr, index_expr) in\nparse_postfix_expr parse_expr new_expr state3\n| _ -> (expr, state)",
        "lines": [
          "let new_expr = ArrayAccessExpr (expr, index_expr) in",
          "parse_postfix_expr parse_expr new_expr state3",
          "| _ -> (expr, state)"
        ],
        "start_line": 115,
        "end_line": 117,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_constructs.ml"
      },
      {
        "hash": "98a601dd12785391c625a8a35524f073",
        "text": "let new_expr = ArrayAccessExpr (expr, index_expr) in\nparse_postfix_expr parse_expr new_expr state3\n| _ -> (expr, state)",
        "lines": [
          "let new_expr = ArrayAccessExpr (expr, index_expr) in",
          "parse_postfix_expr parse_expr new_expr state3",
          "| _ -> (expr, state)"
        ],
        "start_line": 143,
        "end_line": 145,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_operators_consolidated.ml"
      }
    ],
    "d6df5b8044f96d3f3953827df6b52b1f": [
      {
        "hash": "d6df5b8044f96d3f3953827df6b52b1f",
        "text": "let config = Error_recovery.get_recovery_config () in\nif config.enabled then Error_recovery.show_recovery_statistics ();\ntrue\n| Error msg ->\nLogger.print_user_output msg;\nfalse",
        "lines": [
          "let config = Error_recovery.get_recovery_config () in",
          "if config.enabled then Error_recovery.show_recovery_statistics ();",
          "true",
          "| Error msg ->",
          "Logger.print_user_output msg;",
          "false"
        ],
        "start_line": 32,
        "end_line": 37,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/interpreter.ml"
      },
      {
        "hash": "d6df5b8044f96d3f3953827df6b52b1f",
        "text": "let config = Error_recovery.get_recovery_config () in\nif config.enabled then Error_recovery.show_recovery_statistics ();\ntrue\n| Error msg ->\nLogger.print_user_output msg;\nfalse",
        "lines": [
          "let config = Error_recovery.get_recovery_config () in",
          "if config.enabled then Error_recovery.show_recovery_statistics ();",
          "true",
          "| Error msg ->",
          "Logger.print_user_output msg;",
          "false"
        ],
        "start_line": 48,
        "end_line": 53,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/interpreter.ml"
      }
    ],
    "e6e1027ea4354f7cbb7dc6a29ccb8f70": [
      {
        "hash": "e6e1027ea4354f7cbb7dc6a29ccb8f70",
        "text": "if config.enabled then Error_recovery.show_recovery_statistics ();\ntrue\n| Error msg ->\nLogger.print_user_output msg;\nfalse",
        "lines": [
          "if config.enabled then Error_recovery.show_recovery_statistics ();",
          "true",
          "| Error msg ->",
          "Logger.print_user_output msg;",
          "false"
        ],
        "start_line": 33,
        "end_line": 37,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/interpreter.ml"
      },
      {
        "hash": "e6e1027ea4354f7cbb7dc6a29ccb8f70",
        "text": "if config.enabled then Error_recovery.show_recovery_statistics ();\ntrue\n| Error msg ->\nLogger.print_user_output msg;\nfalse",
        "lines": [
          "if config.enabled then Error_recovery.show_recovery_statistics ();",
          "true",
          "| Error msg ->",
          "Logger.print_user_output msg;",
          "false"
        ],
        "start_line": 49,
        "end_line": 53,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/interpreter.ml"
      }
    ],
    "6a8a3ac6a328547625a6392d75c65c66": [
      {
        "hash": "6a8a3ac6a328547625a6392d75c65c66",
        "text": "true\n| Error msg ->\nLogger.print_user_output msg;\nfalse",
        "lines": [
          "true",
          "| Error msg ->",
          "Logger.print_user_output msg;",
          "false"
        ],
        "start_line": 34,
        "end_line": 37,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/interpreter.ml"
      },
      {
        "hash": "6a8a3ac6a328547625a6392d75c65c66",
        "text": "true\n| Error msg ->\nLogger.print_user_output msg;\nfalse",
        "lines": [
          "true",
          "| Error msg ->",
          "Logger.print_user_output msg;",
          "false"
        ],
        "start_line": 50,
        "end_line": 53,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/interpreter.ml"
      }
    ],
    "f894ebb30da24344f6f236adefa10254": [
      {
        "hash": "f894ebb30da24344f6f236adefa10254",
        "text": "| Error msg ->\nLogger.print_user_output msg;\nfalse",
        "lines": [
          "| Error msg ->",
          "Logger.print_user_output msg;",
          "false"
        ],
        "start_line": 35,
        "end_line": 37,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/interpreter.ml"
      },
      {
        "hash": "f894ebb30da24344f6f236adefa10254",
        "text": "| Error msg ->\nLogger.print_user_output msg;\nfalse",
        "lines": [
          "| Error msg ->",
          "Logger.print_user_output msg;",
          "false"
        ],
        "start_line": 51,
        "end_line": 53,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/interpreter.ml"
      }
    ],
    "5538592d4763b2b5d5d2b69f971ee730": [
      {
        "hash": "5538592d4763b2b5d5d2b69f971ee730",
        "text": "@author 骆言技术债务清理团队 Issue #1066\n@version 1.0\n@since 2025-07-24 *)",
        "lines": [
          "@author 骆言技术债务清理团队 Issue #1066",
          "@version 1.0",
          "@since 2025-07-24 *)"
        ],
        "start_line": 12,
        "end_line": 14,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "5538592d4763b2b5d5d2b69f971ee730",
        "text": "@author 骆言技术债务清理团队 Issue #1066\n@version 1.0\n@since 2025-07-24 *)",
        "lines": [
          "@author 骆言技术债务清理团队 Issue #1066",
          "@version 1.0",
          "@since 2025-07-24 *)"
        ],
        "start_line": 6,
        "end_line": 8,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_literals_compatibility.ml"
      },
      {
        "hash": "5538592d4763b2b5d5d2b69f971ee730",
        "text": "@author 骆言技术债务清理团队 Issue #1066\n@version 1.0\n@since 2025-07-24 *)",
        "lines": [
          "@author 骆言技术债务清理团队 Issue #1066",
          "@version 1.0",
          "@since 2025-07-24 *)"
        ],
        "start_line": 6,
        "end_line": 8,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_basic_keywords_compatibility.ml"
      },
      {
        "hash": "5538592d4763b2b5d5d2b69f971ee730",
        "text": "@author 骆言技术债务清理团队 Issue #1066\n@version 1.0\n@since 2025-07-24 *)",
        "lines": [
          "@author 骆言技术债务清理团队 Issue #1066",
          "@version 1.0",
          "@since 2025-07-24 *)"
        ],
        "start_line": 6,
        "end_line": 8,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_type_keywords_compatibility.ml"
      },
      {
        "hash": "5538592d4763b2b5d5d2b69f971ee730",
        "text": "@author 骆言技术债务清理团队 Issue #1066\n@version 1.0\n@since 2025-07-24 *)",
        "lines": [
          "@author 骆言技术债务清理团队 Issue #1066",
          "@version 1.0",
          "@since 2025-07-24 *)"
        ],
        "start_line": 6,
        "end_line": 8,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_identifiers_compatibility.ml"
      },
      {
        "hash": "5538592d4763b2b5d5d2b69f971ee730",
        "text": "@author 骆言技术债务清理团队 Issue #1066\n@version 1.0\n@since 2025-07-24 *)",
        "lines": [
          "@author 骆言技术债务清理团队 Issue #1066",
          "@version 1.0",
          "@since 2025-07-24 *)"
        ],
        "start_line": 6,
        "end_line": 8,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_classical_compatibility.ml"
      },
      {
        "hash": "5538592d4763b2b5d5d2b69f971ee730",
        "text": "@author 骆言技术债务清理团队 Issue #1066\n@version 1.0\n@since 2025-07-24 *)",
        "lines": [
          "@author 骆言技术债务清理团队 Issue #1066",
          "@version 1.0",
          "@since 2025-07-24 *)"
        ],
        "start_line": 6,
        "end_line": 8,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_delimiters_compatibility.ml"
      },
      {
        "hash": "5538592d4763b2b5d5d2b69f971ee730",
        "text": "@author 骆言技术债务清理团队 Issue #1066\n@version 1.0\n@since 2025-07-24 *)",
        "lines": [
          "@author 骆言技术债务清理团队 Issue #1066",
          "@version 1.0",
          "@since 2025-07-24 *)"
        ],
        "start_line": 15,
        "end_line": 17,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      }
    ],
    "6b0409fc703a625e9a37d43d845ef55c": [
      {
        "hash": "6b0409fc703a625e9a37d43d845ef55c",
        "text": "| Token_mapping.Token_definitions_unified.LetKeyword -> LetKeyword\n| Token_mapping.Token_definitions_unified.RecKeyword -> RecKeyword\n| Token_mapping.Token_definitions_unified.InKeyword -> InKeyword\n| Token_mapping.Token_definitions_unified.FunKeyword -> FunKeyword\n| Token_mapping.Token_definitions_unified.IfKeyword -> IfKeyword\n| Token_mapping.Token_definitions_unified.ThenKeyword -> ThenKeyword\n| Token_mapping.Token_definitions_unified.ElseKeyword -> ElseKeyword\n| Token_mapping.Token_definitions_unified.MatchKeyword -> MatchKeyword\n| Token_mapping.Token_definitions_unified.WithKeyword -> WithKeyword\n| Token_mapping.Token_definitions_unified.OtherKeyword -> OtherKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.LetKeyword -> LetKeyword",
          "| Token_mapping.Token_definitions_unified.RecKeyword -> RecKeyword",
          "| Token_mapping.Token_definitions_unified.InKeyword -> InKeyword",
          "| Token_mapping.Token_definitions_unified.FunKeyword -> FunKeyword",
          "| Token_mapping.Token_definitions_unified.IfKeyword -> IfKeyword",
          "| Token_mapping.Token_definitions_unified.ThenKeyword -> ThenKeyword",
          "| Token_mapping.Token_definitions_unified.ElseKeyword -> ElseKeyword",
          "| Token_mapping.Token_definitions_unified.MatchKeyword -> MatchKeyword",
          "| Token_mapping.Token_definitions_unified.WithKeyword -> WithKeyword",
          "| Token_mapping.Token_definitions_unified.OtherKeyword -> OtherKeyword"
        ],
        "start_line": 63,
        "end_line": 72,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "6b0409fc703a625e9a37d43d845ef55c",
        "text": "| Token_mapping.Token_definitions_unified.LetKeyword -> LetKeyword\n| Token_mapping.Token_definitions_unified.RecKeyword -> RecKeyword\n| Token_mapping.Token_definitions_unified.InKeyword -> InKeyword\n| Token_mapping.Token_definitions_unified.FunKeyword -> FunKeyword\n| Token_mapping.Token_definitions_unified.IfKeyword -> IfKeyword\n| Token_mapping.Token_definitions_unified.ThenKeyword -> ThenKeyword\n| Token_mapping.Token_definitions_unified.ElseKeyword -> ElseKeyword\n| Token_mapping.Token_definitions_unified.MatchKeyword -> MatchKeyword\n| Token_mapping.Token_definitions_unified.WithKeyword -> WithKeyword\n| Token_mapping.Token_definitions_unified.OtherKeyword -> OtherKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.LetKeyword -> LetKeyword",
          "| Token_mapping.Token_definitions_unified.RecKeyword -> RecKeyword",
          "| Token_mapping.Token_definitions_unified.InKeyword -> InKeyword",
          "| Token_mapping.Token_definitions_unified.FunKeyword -> FunKeyword",
          "| Token_mapping.Token_definitions_unified.IfKeyword -> IfKeyword",
          "| Token_mapping.Token_definitions_unified.ThenKeyword -> ThenKeyword",
          "| Token_mapping.Token_definitions_unified.ElseKeyword -> ElseKeyword",
          "| Token_mapping.Token_definitions_unified.MatchKeyword -> MatchKeyword",
          "| Token_mapping.Token_definitions_unified.WithKeyword -> WithKeyword",
          "| Token_mapping.Token_definitions_unified.OtherKeyword -> OtherKeyword"
        ],
        "start_line": 18,
        "end_line": 27,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_keywords.ml"
      }
    ],
    "2a75bb654e9636dad2252347ae984556": [
      {
        "hash": "2a75bb654e9636dad2252347ae984556",
        "text": "| Token_mapping.Token_definitions_unified.RecKeyword -> RecKeyword\n| Token_mapping.Token_definitions_unified.InKeyword -> InKeyword\n| Token_mapping.Token_definitions_unified.FunKeyword -> FunKeyword\n| Token_mapping.Token_definitions_unified.IfKeyword -> IfKeyword\n| Token_mapping.Token_definitions_unified.ThenKeyword -> ThenKeyword\n| Token_mapping.Token_definitions_unified.ElseKeyword -> ElseKeyword\n| Token_mapping.Token_definitions_unified.MatchKeyword -> MatchKeyword\n| Token_mapping.Token_definitions_unified.WithKeyword -> WithKeyword\n| Token_mapping.Token_definitions_unified.OtherKeyword -> OtherKeyword\n| Token_mapping.Token_definitions_unified.AndKeyword -> AndKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.RecKeyword -> RecKeyword",
          "| Token_mapping.Token_definitions_unified.InKeyword -> InKeyword",
          "| Token_mapping.Token_definitions_unified.FunKeyword -> FunKeyword",
          "| Token_mapping.Token_definitions_unified.IfKeyword -> IfKeyword",
          "| Token_mapping.Token_definitions_unified.ThenKeyword -> ThenKeyword",
          "| Token_mapping.Token_definitions_unified.ElseKeyword -> ElseKeyword",
          "| Token_mapping.Token_definitions_unified.MatchKeyword -> MatchKeyword",
          "| Token_mapping.Token_definitions_unified.WithKeyword -> WithKeyword",
          "| Token_mapping.Token_definitions_unified.OtherKeyword -> OtherKeyword",
          "| Token_mapping.Token_definitions_unified.AndKeyword -> AndKeyword"
        ],
        "start_line": 64,
        "end_line": 73,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "2a75bb654e9636dad2252347ae984556",
        "text": "| Token_mapping.Token_definitions_unified.RecKeyword -> RecKeyword\n| Token_mapping.Token_definitions_unified.InKeyword -> InKeyword\n| Token_mapping.Token_definitions_unified.FunKeyword -> FunKeyword\n| Token_mapping.Token_definitions_unified.IfKeyword -> IfKeyword\n| Token_mapping.Token_definitions_unified.ThenKeyword -> ThenKeyword\n| Token_mapping.Token_definitions_unified.ElseKeyword -> ElseKeyword\n| Token_mapping.Token_definitions_unified.MatchKeyword -> MatchKeyword\n| Token_mapping.Token_definitions_unified.WithKeyword -> WithKeyword\n| Token_mapping.Token_definitions_unified.OtherKeyword -> OtherKeyword\n| Token_mapping.Token_definitions_unified.AndKeyword -> AndKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.RecKeyword -> RecKeyword",
          "| Token_mapping.Token_definitions_unified.InKeyword -> InKeyword",
          "| Token_mapping.Token_definitions_unified.FunKeyword -> FunKeyword",
          "| Token_mapping.Token_definitions_unified.IfKeyword -> IfKeyword",
          "| Token_mapping.Token_definitions_unified.ThenKeyword -> ThenKeyword",
          "| Token_mapping.Token_definitions_unified.ElseKeyword -> ElseKeyword",
          "| Token_mapping.Token_definitions_unified.MatchKeyword -> MatchKeyword",
          "| Token_mapping.Token_definitions_unified.WithKeyword -> WithKeyword",
          "| Token_mapping.Token_definitions_unified.OtherKeyword -> OtherKeyword",
          "| Token_mapping.Token_definitions_unified.AndKeyword -> AndKeyword"
        ],
        "start_line": 19,
        "end_line": 28,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_keywords.ml"
      }
    ],
    "01a52d34a8102af84dbe516d06b262c5": [
      {
        "hash": "01a52d34a8102af84dbe516d06b262c5",
        "text": "| Token_mapping.Token_definitions_unified.InKeyword -> InKeyword\n| Token_mapping.Token_definitions_unified.FunKeyword -> FunKeyword\n| Token_mapping.Token_definitions_unified.IfKeyword -> IfKeyword\n| Token_mapping.Token_definitions_unified.ThenKeyword -> ThenKeyword\n| Token_mapping.Token_definitions_unified.ElseKeyword -> ElseKeyword\n| Token_mapping.Token_definitions_unified.MatchKeyword -> MatchKeyword\n| Token_mapping.Token_definitions_unified.WithKeyword -> WithKeyword\n| Token_mapping.Token_definitions_unified.OtherKeyword -> OtherKeyword\n| Token_mapping.Token_definitions_unified.AndKeyword -> AndKeyword\n| Token_mapping.Token_definitions_unified.OrKeyword -> OrKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.InKeyword -> InKeyword",
          "| Token_mapping.Token_definitions_unified.FunKeyword -> FunKeyword",
          "| Token_mapping.Token_definitions_unified.IfKeyword -> IfKeyword",
          "| Token_mapping.Token_definitions_unified.ThenKeyword -> ThenKeyword",
          "| Token_mapping.Token_definitions_unified.ElseKeyword -> ElseKeyword",
          "| Token_mapping.Token_definitions_unified.MatchKeyword -> MatchKeyword",
          "| Token_mapping.Token_definitions_unified.WithKeyword -> WithKeyword",
          "| Token_mapping.Token_definitions_unified.OtherKeyword -> OtherKeyword",
          "| Token_mapping.Token_definitions_unified.AndKeyword -> AndKeyword",
          "| Token_mapping.Token_definitions_unified.OrKeyword -> OrKeyword"
        ],
        "start_line": 65,
        "end_line": 74,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "01a52d34a8102af84dbe516d06b262c5",
        "text": "| Token_mapping.Token_definitions_unified.InKeyword -> InKeyword\n| Token_mapping.Token_definitions_unified.FunKeyword -> FunKeyword\n| Token_mapping.Token_definitions_unified.IfKeyword -> IfKeyword\n| Token_mapping.Token_definitions_unified.ThenKeyword -> ThenKeyword\n| Token_mapping.Token_definitions_unified.ElseKeyword -> ElseKeyword\n| Token_mapping.Token_definitions_unified.MatchKeyword -> MatchKeyword\n| Token_mapping.Token_definitions_unified.WithKeyword -> WithKeyword\n| Token_mapping.Token_definitions_unified.OtherKeyword -> OtherKeyword\n| Token_mapping.Token_definitions_unified.AndKeyword -> AndKeyword\n| Token_mapping.Token_definitions_unified.OrKeyword -> OrKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.InKeyword -> InKeyword",
          "| Token_mapping.Token_definitions_unified.FunKeyword -> FunKeyword",
          "| Token_mapping.Token_definitions_unified.IfKeyword -> IfKeyword",
          "| Token_mapping.Token_definitions_unified.ThenKeyword -> ThenKeyword",
          "| Token_mapping.Token_definitions_unified.ElseKeyword -> ElseKeyword",
          "| Token_mapping.Token_definitions_unified.MatchKeyword -> MatchKeyword",
          "| Token_mapping.Token_definitions_unified.WithKeyword -> WithKeyword",
          "| Token_mapping.Token_definitions_unified.OtherKeyword -> OtherKeyword",
          "| Token_mapping.Token_definitions_unified.AndKeyword -> AndKeyword",
          "| Token_mapping.Token_definitions_unified.OrKeyword -> OrKeyword"
        ],
        "start_line": 20,
        "end_line": 29,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_keywords.ml"
      }
    ],
    "40e2b479e265a5e7a00738e7439d6418": [
      {
        "hash": "40e2b479e265a5e7a00738e7439d6418",
        "text": "| Token_mapping.Token_definitions_unified.FunKeyword -> FunKeyword\n| Token_mapping.Token_definitions_unified.IfKeyword -> IfKeyword\n| Token_mapping.Token_definitions_unified.ThenKeyword -> ThenKeyword\n| Token_mapping.Token_definitions_unified.ElseKeyword -> ElseKeyword\n| Token_mapping.Token_definitions_unified.MatchKeyword -> MatchKeyword\n| Token_mapping.Token_definitions_unified.WithKeyword -> WithKeyword\n| Token_mapping.Token_definitions_unified.OtherKeyword -> OtherKeyword\n| Token_mapping.Token_definitions_unified.AndKeyword -> AndKeyword\n| Token_mapping.Token_definitions_unified.OrKeyword -> OrKeyword\n| Token_mapping.Token_definitions_unified.NotKeyword -> NotKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.FunKeyword -> FunKeyword",
          "| Token_mapping.Token_definitions_unified.IfKeyword -> IfKeyword",
          "| Token_mapping.Token_definitions_unified.ThenKeyword -> ThenKeyword",
          "| Token_mapping.Token_definitions_unified.ElseKeyword -> ElseKeyword",
          "| Token_mapping.Token_definitions_unified.MatchKeyword -> MatchKeyword",
          "| Token_mapping.Token_definitions_unified.WithKeyword -> WithKeyword",
          "| Token_mapping.Token_definitions_unified.OtherKeyword -> OtherKeyword",
          "| Token_mapping.Token_definitions_unified.AndKeyword -> AndKeyword",
          "| Token_mapping.Token_definitions_unified.OrKeyword -> OrKeyword",
          "| Token_mapping.Token_definitions_unified.NotKeyword -> NotKeyword"
        ],
        "start_line": 66,
        "end_line": 75,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "40e2b479e265a5e7a00738e7439d6418",
        "text": "| Token_mapping.Token_definitions_unified.FunKeyword -> FunKeyword\n| Token_mapping.Token_definitions_unified.IfKeyword -> IfKeyword\n| Token_mapping.Token_definitions_unified.ThenKeyword -> ThenKeyword\n| Token_mapping.Token_definitions_unified.ElseKeyword -> ElseKeyword\n| Token_mapping.Token_definitions_unified.MatchKeyword -> MatchKeyword\n| Token_mapping.Token_definitions_unified.WithKeyword -> WithKeyword\n| Token_mapping.Token_definitions_unified.OtherKeyword -> OtherKeyword\n| Token_mapping.Token_definitions_unified.AndKeyword -> AndKeyword\n| Token_mapping.Token_definitions_unified.OrKeyword -> OrKeyword\n| Token_mapping.Token_definitions_unified.NotKeyword -> NotKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.FunKeyword -> FunKeyword",
          "| Token_mapping.Token_definitions_unified.IfKeyword -> IfKeyword",
          "| Token_mapping.Token_definitions_unified.ThenKeyword -> ThenKeyword",
          "| Token_mapping.Token_definitions_unified.ElseKeyword -> ElseKeyword",
          "| Token_mapping.Token_definitions_unified.MatchKeyword -> MatchKeyword",
          "| Token_mapping.Token_definitions_unified.WithKeyword -> WithKeyword",
          "| Token_mapping.Token_definitions_unified.OtherKeyword -> OtherKeyword",
          "| Token_mapping.Token_definitions_unified.AndKeyword -> AndKeyword",
          "| Token_mapping.Token_definitions_unified.OrKeyword -> OrKeyword",
          "| Token_mapping.Token_definitions_unified.NotKeyword -> NotKeyword"
        ],
        "start_line": 21,
        "end_line": 30,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_keywords.ml"
      }
    ],
    "3090946997a0857e92e760881a284fee": [
      {
        "hash": "3090946997a0857e92e760881a284fee",
        "text": "| Token_mapping.Token_definitions_unified.IfKeyword -> IfKeyword\n| Token_mapping.Token_definitions_unified.ThenKeyword -> ThenKeyword\n| Token_mapping.Token_definitions_unified.ElseKeyword -> ElseKeyword\n| Token_mapping.Token_definitions_unified.MatchKeyword -> MatchKeyword\n| Token_mapping.Token_definitions_unified.WithKeyword -> WithKeyword\n| Token_mapping.Token_definitions_unified.OtherKeyword -> OtherKeyword\n| Token_mapping.Token_definitions_unified.AndKeyword -> AndKeyword\n| Token_mapping.Token_definitions_unified.OrKeyword -> OrKeyword\n| Token_mapping.Token_definitions_unified.NotKeyword -> NotKeyword\n| Token_mapping.Token_definitions_unified.OfKeyword -> OfKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.IfKeyword -> IfKeyword",
          "| Token_mapping.Token_definitions_unified.ThenKeyword -> ThenKeyword",
          "| Token_mapping.Token_definitions_unified.ElseKeyword -> ElseKeyword",
          "| Token_mapping.Token_definitions_unified.MatchKeyword -> MatchKeyword",
          "| Token_mapping.Token_definitions_unified.WithKeyword -> WithKeyword",
          "| Token_mapping.Token_definitions_unified.OtherKeyword -> OtherKeyword",
          "| Token_mapping.Token_definitions_unified.AndKeyword -> AndKeyword",
          "| Token_mapping.Token_definitions_unified.OrKeyword -> OrKeyword",
          "| Token_mapping.Token_definitions_unified.NotKeyword -> NotKeyword",
          "| Token_mapping.Token_definitions_unified.OfKeyword -> OfKeyword"
        ],
        "start_line": 67,
        "end_line": 76,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "3090946997a0857e92e760881a284fee",
        "text": "| Token_mapping.Token_definitions_unified.IfKeyword -> IfKeyword\n| Token_mapping.Token_definitions_unified.ThenKeyword -> ThenKeyword\n| Token_mapping.Token_definitions_unified.ElseKeyword -> ElseKeyword\n| Token_mapping.Token_definitions_unified.MatchKeyword -> MatchKeyword\n| Token_mapping.Token_definitions_unified.WithKeyword -> WithKeyword\n| Token_mapping.Token_definitions_unified.OtherKeyword -> OtherKeyword\n| Token_mapping.Token_definitions_unified.AndKeyword -> AndKeyword\n| Token_mapping.Token_definitions_unified.OrKeyword -> OrKeyword\n| Token_mapping.Token_definitions_unified.NotKeyword -> NotKeyword\n| Token_mapping.Token_definitions_unified.OfKeyword -> OfKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.IfKeyword -> IfKeyword",
          "| Token_mapping.Token_definitions_unified.ThenKeyword -> ThenKeyword",
          "| Token_mapping.Token_definitions_unified.ElseKeyword -> ElseKeyword",
          "| Token_mapping.Token_definitions_unified.MatchKeyword -> MatchKeyword",
          "| Token_mapping.Token_definitions_unified.WithKeyword -> WithKeyword",
          "| Token_mapping.Token_definitions_unified.OtherKeyword -> OtherKeyword",
          "| Token_mapping.Token_definitions_unified.AndKeyword -> AndKeyword",
          "| Token_mapping.Token_definitions_unified.OrKeyword -> OrKeyword",
          "| Token_mapping.Token_definitions_unified.NotKeyword -> NotKeyword",
          "| Token_mapping.Token_definitions_unified.OfKeyword -> OfKeyword"
        ],
        "start_line": 22,
        "end_line": 31,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_keywords.ml"
      }
    ],
    "e0f425c239972eec7415723169ac01c5": [
      {
        "hash": "e0f425c239972eec7415723169ac01c5",
        "text": "| Token_mapping.Token_definitions_unified.ModuleKeyword -> ModuleKeyword\n| Token_mapping.Token_definitions_unified.ModuleTypeKeyword -> ModuleTypeKeyword\n| Token_mapping.Token_definitions_unified.RefKeyword -> RefKeyword\n| Token_mapping.Token_definitions_unified.IncludeKeyword -> IncludeKeyword\n| Token_mapping.Token_definitions_unified.FunctorKeyword -> FunctorKeyword\n| Token_mapping.Token_definitions_unified.SigKeyword -> SigKeyword\n| Token_mapping.Token_definitions_unified.EndKeyword -> EndKeyword\n| Token_mapping.Token_definitions_unified.MacroKeyword -> MacroKeyword\n| Token_mapping.Token_definitions_unified.ExpandKeyword -> ExpandKeyword\n| Token_mapping.Token_definitions_unified.TypeKeyword -> TypeKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.ModuleKeyword -> ModuleKeyword",
          "| Token_mapping.Token_definitions_unified.ModuleTypeKeyword -> ModuleTypeKeyword",
          "| Token_mapping.Token_definitions_unified.RefKeyword -> RefKeyword",
          "| Token_mapping.Token_definitions_unified.IncludeKeyword -> IncludeKeyword",
          "| Token_mapping.Token_definitions_unified.FunctorKeyword -> FunctorKeyword",
          "| Token_mapping.Token_definitions_unified.SigKeyword -> SigKeyword",
          "| Token_mapping.Token_definitions_unified.EndKeyword -> EndKeyword",
          "| Token_mapping.Token_definitions_unified.MacroKeyword -> MacroKeyword",
          "| Token_mapping.Token_definitions_unified.ExpandKeyword -> ExpandKeyword",
          "| Token_mapping.Token_definitions_unified.TypeKeyword -> TypeKeyword"
        ],
        "start_line": 105,
        "end_line": 114,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "e0f425c239972eec7415723169ac01c5",
        "text": "| Token_mapping.Token_definitions_unified.ModuleKeyword -> ModuleKeyword\n| Token_mapping.Token_definitions_unified.ModuleTypeKeyword -> ModuleTypeKeyword\n| Token_mapping.Token_definitions_unified.RefKeyword -> RefKeyword\n| Token_mapping.Token_definitions_unified.IncludeKeyword -> IncludeKeyword\n| Token_mapping.Token_definitions_unified.FunctorKeyword -> FunctorKeyword\n| Token_mapping.Token_definitions_unified.SigKeyword -> SigKeyword\n| Token_mapping.Token_definitions_unified.EndKeyword -> EndKeyword\n| Token_mapping.Token_definitions_unified.MacroKeyword -> MacroKeyword\n| Token_mapping.Token_definitions_unified.ExpandKeyword -> ExpandKeyword\n| Token_mapping.Token_definitions_unified.TypeKeyword -> TypeKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.ModuleKeyword -> ModuleKeyword",
          "| Token_mapping.Token_definitions_unified.ModuleTypeKeyword -> ModuleTypeKeyword",
          "| Token_mapping.Token_definitions_unified.RefKeyword -> RefKeyword",
          "| Token_mapping.Token_definitions_unified.IncludeKeyword -> IncludeKeyword",
          "| Token_mapping.Token_definitions_unified.FunctorKeyword -> FunctorKeyword",
          "| Token_mapping.Token_definitions_unified.SigKeyword -> SigKeyword",
          "| Token_mapping.Token_definitions_unified.EndKeyword -> EndKeyword",
          "| Token_mapping.Token_definitions_unified.MacroKeyword -> MacroKeyword",
          "| Token_mapping.Token_definitions_unified.ExpandKeyword -> ExpandKeyword",
          "| Token_mapping.Token_definitions_unified.TypeKeyword -> TypeKeyword"
        ],
        "start_line": 48,
        "end_line": 57,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_keywords.ml"
      }
    ],
    "8d7ccc19f9a23882259c9f9018b3b958": [
      {
        "hash": "8d7ccc19f9a23882259c9f9018b3b958",
        "text": "| Token_mapping.Token_definitions_unified.ModuleTypeKeyword -> ModuleTypeKeyword\n| Token_mapping.Token_definitions_unified.RefKeyword -> RefKeyword\n| Token_mapping.Token_definitions_unified.IncludeKeyword -> IncludeKeyword\n| Token_mapping.Token_definitions_unified.FunctorKeyword -> FunctorKeyword\n| Token_mapping.Token_definitions_unified.SigKeyword -> SigKeyword\n| Token_mapping.Token_definitions_unified.EndKeyword -> EndKeyword\n| Token_mapping.Token_definitions_unified.MacroKeyword -> MacroKeyword\n| Token_mapping.Token_definitions_unified.ExpandKeyword -> ExpandKeyword\n| Token_mapping.Token_definitions_unified.TypeKeyword -> TypeKeyword\n| Token_mapping.Token_definitions_unified.PrivateKeyword -> PrivateKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.ModuleTypeKeyword -> ModuleTypeKeyword",
          "| Token_mapping.Token_definitions_unified.RefKeyword -> RefKeyword",
          "| Token_mapping.Token_definitions_unified.IncludeKeyword -> IncludeKeyword",
          "| Token_mapping.Token_definitions_unified.FunctorKeyword -> FunctorKeyword",
          "| Token_mapping.Token_definitions_unified.SigKeyword -> SigKeyword",
          "| Token_mapping.Token_definitions_unified.EndKeyword -> EndKeyword",
          "| Token_mapping.Token_definitions_unified.MacroKeyword -> MacroKeyword",
          "| Token_mapping.Token_definitions_unified.ExpandKeyword -> ExpandKeyword",
          "| Token_mapping.Token_definitions_unified.TypeKeyword -> TypeKeyword",
          "| Token_mapping.Token_definitions_unified.PrivateKeyword -> PrivateKeyword"
        ],
        "start_line": 106,
        "end_line": 115,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "8d7ccc19f9a23882259c9f9018b3b958",
        "text": "| Token_mapping.Token_definitions_unified.ModuleTypeKeyword -> ModuleTypeKeyword\n| Token_mapping.Token_definitions_unified.RefKeyword -> RefKeyword\n| Token_mapping.Token_definitions_unified.IncludeKeyword -> IncludeKeyword\n| Token_mapping.Token_definitions_unified.FunctorKeyword -> FunctorKeyword\n| Token_mapping.Token_definitions_unified.SigKeyword -> SigKeyword\n| Token_mapping.Token_definitions_unified.EndKeyword -> EndKeyword\n| Token_mapping.Token_definitions_unified.MacroKeyword -> MacroKeyword\n| Token_mapping.Token_definitions_unified.ExpandKeyword -> ExpandKeyword\n| Token_mapping.Token_definitions_unified.TypeKeyword -> TypeKeyword\n| Token_mapping.Token_definitions_unified.PrivateKeyword -> PrivateKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.ModuleTypeKeyword -> ModuleTypeKeyword",
          "| Token_mapping.Token_definitions_unified.RefKeyword -> RefKeyword",
          "| Token_mapping.Token_definitions_unified.IncludeKeyword -> IncludeKeyword",
          "| Token_mapping.Token_definitions_unified.FunctorKeyword -> FunctorKeyword",
          "| Token_mapping.Token_definitions_unified.SigKeyword -> SigKeyword",
          "| Token_mapping.Token_definitions_unified.EndKeyword -> EndKeyword",
          "| Token_mapping.Token_definitions_unified.MacroKeyword -> MacroKeyword",
          "| Token_mapping.Token_definitions_unified.ExpandKeyword -> ExpandKeyword",
          "| Token_mapping.Token_definitions_unified.TypeKeyword -> TypeKeyword",
          "| Token_mapping.Token_definitions_unified.PrivateKeyword -> PrivateKeyword"
        ],
        "start_line": 49,
        "end_line": 58,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_keywords.ml"
      }
    ],
    "905d7cd4dc86ac26ec4fdfa1aaee030c": [
      {
        "hash": "905d7cd4dc86ac26ec4fdfa1aaee030c",
        "text": "| Token_mapping.Token_definitions_unified.RefKeyword -> RefKeyword\n| Token_mapping.Token_definitions_unified.IncludeKeyword -> IncludeKeyword\n| Token_mapping.Token_definitions_unified.FunctorKeyword -> FunctorKeyword\n| Token_mapping.Token_definitions_unified.SigKeyword -> SigKeyword\n| Token_mapping.Token_definitions_unified.EndKeyword -> EndKeyword\n| Token_mapping.Token_definitions_unified.MacroKeyword -> MacroKeyword\n| Token_mapping.Token_definitions_unified.ExpandKeyword -> ExpandKeyword\n| Token_mapping.Token_definitions_unified.TypeKeyword -> TypeKeyword\n| Token_mapping.Token_definitions_unified.PrivateKeyword -> PrivateKeyword\n| Token_mapping.Token_definitions_unified.ParamKeyword -> ParamKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.RefKeyword -> RefKeyword",
          "| Token_mapping.Token_definitions_unified.IncludeKeyword -> IncludeKeyword",
          "| Token_mapping.Token_definitions_unified.FunctorKeyword -> FunctorKeyword",
          "| Token_mapping.Token_definitions_unified.SigKeyword -> SigKeyword",
          "| Token_mapping.Token_definitions_unified.EndKeyword -> EndKeyword",
          "| Token_mapping.Token_definitions_unified.MacroKeyword -> MacroKeyword",
          "| Token_mapping.Token_definitions_unified.ExpandKeyword -> ExpandKeyword",
          "| Token_mapping.Token_definitions_unified.TypeKeyword -> TypeKeyword",
          "| Token_mapping.Token_definitions_unified.PrivateKeyword -> PrivateKeyword",
          "| Token_mapping.Token_definitions_unified.ParamKeyword -> ParamKeyword"
        ],
        "start_line": 107,
        "end_line": 116,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "905d7cd4dc86ac26ec4fdfa1aaee030c",
        "text": "| Token_mapping.Token_definitions_unified.RefKeyword -> RefKeyword\n| Token_mapping.Token_definitions_unified.IncludeKeyword -> IncludeKeyword\n| Token_mapping.Token_definitions_unified.FunctorKeyword -> FunctorKeyword\n| Token_mapping.Token_definitions_unified.SigKeyword -> SigKeyword\n| Token_mapping.Token_definitions_unified.EndKeyword -> EndKeyword\n| Token_mapping.Token_definitions_unified.MacroKeyword -> MacroKeyword\n| Token_mapping.Token_definitions_unified.ExpandKeyword -> ExpandKeyword\n| Token_mapping.Token_definitions_unified.TypeKeyword -> TypeKeyword\n| Token_mapping.Token_definitions_unified.PrivateKeyword -> PrivateKeyword\n| Token_mapping.Token_definitions_unified.ParamKeyword -> ParamKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.RefKeyword -> RefKeyword",
          "| Token_mapping.Token_definitions_unified.IncludeKeyword -> IncludeKeyword",
          "| Token_mapping.Token_definitions_unified.FunctorKeyword -> FunctorKeyword",
          "| Token_mapping.Token_definitions_unified.SigKeyword -> SigKeyword",
          "| Token_mapping.Token_definitions_unified.EndKeyword -> EndKeyword",
          "| Token_mapping.Token_definitions_unified.MacroKeyword -> MacroKeyword",
          "| Token_mapping.Token_definitions_unified.ExpandKeyword -> ExpandKeyword",
          "| Token_mapping.Token_definitions_unified.TypeKeyword -> TypeKeyword",
          "| Token_mapping.Token_definitions_unified.PrivateKeyword -> PrivateKeyword",
          "| Token_mapping.Token_definitions_unified.ParamKeyword -> ParamKeyword"
        ],
        "start_line": 50,
        "end_line": 59,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_keywords.ml"
      }
    ],
    "5d8c23de3c1f101e1104ac44bf5d874f": [
      {
        "hash": "5d8c23de3c1f101e1104ac44bf5d874f",
        "text": "let convert_natural_language_keywords = function\n| Token_mapping.Token_definitions_unified.DefineKeyword -> DefineKeyword\n| Token_mapping.Token_definitions_unified.AcceptKeyword -> AcceptKeyword\n| Token_mapping.Token_definitions_unified.ReturnWhenKeyword -> ReturnWhenKeyword\n| Token_mapping.Token_definitions_unified.ElseReturnKeyword -> ElseReturnKeyword\n| Token_mapping.Token_definitions_unified.MultiplyKeyword -> MultiplyKeyword\n| Token_mapping.Token_definitions_unified.DivideKeyword -> DivideKeyword\n| Token_mapping.Token_definitions_unified.AddToKeyword -> AddToKeyword\n| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword\n| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword",
        "lines": [
          "let convert_natural_language_keywords = function",
          "| Token_mapping.Token_definitions_unified.DefineKeyword -> DefineKeyword",
          "| Token_mapping.Token_definitions_unified.AcceptKeyword -> AcceptKeyword",
          "| Token_mapping.Token_definitions_unified.ReturnWhenKeyword -> ReturnWhenKeyword",
          "| Token_mapping.Token_definitions_unified.ElseReturnKeyword -> ElseReturnKeyword",
          "| Token_mapping.Token_definitions_unified.MultiplyKeyword -> MultiplyKeyword",
          "| Token_mapping.Token_definitions_unified.DivideKeyword -> DivideKeyword",
          "| Token_mapping.Token_definitions_unified.AddToKeyword -> AddToKeyword",
          "| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword",
          "| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword"
        ],
        "start_line": 122,
        "end_line": 131,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "5d8c23de3c1f101e1104ac44bf5d874f",
        "text": "let convert_natural_language_keywords = function\n| Token_mapping.Token_definitions_unified.DefineKeyword -> DefineKeyword\n| Token_mapping.Token_definitions_unified.AcceptKeyword -> AcceptKeyword\n| Token_mapping.Token_definitions_unified.ReturnWhenKeyword -> ReturnWhenKeyword\n| Token_mapping.Token_definitions_unified.ElseReturnKeyword -> ElseReturnKeyword\n| Token_mapping.Token_definitions_unified.MultiplyKeyword -> MultiplyKeyword\n| Token_mapping.Token_definitions_unified.DivideKeyword -> DivideKeyword\n| Token_mapping.Token_definitions_unified.AddToKeyword -> AddToKeyword\n| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword\n| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword",
        "lines": [
          "let convert_natural_language_keywords = function",
          "| Token_mapping.Token_definitions_unified.DefineKeyword -> DefineKeyword",
          "| Token_mapping.Token_definitions_unified.AcceptKeyword -> AcceptKeyword",
          "| Token_mapping.Token_definitions_unified.ReturnWhenKeyword -> ReturnWhenKeyword",
          "| Token_mapping.Token_definitions_unified.ElseReturnKeyword -> ElseReturnKeyword",
          "| Token_mapping.Token_definitions_unified.MultiplyKeyword -> MultiplyKeyword",
          "| Token_mapping.Token_definitions_unified.DivideKeyword -> DivideKeyword",
          "| Token_mapping.Token_definitions_unified.AddToKeyword -> AddToKeyword",
          "| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword",
          "| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword"
        ],
        "start_line": 66,
        "end_line": 75,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_basic_keywords.ml"
      }
    ],
    "afe35db04e1afa25bfd9d5c48b23461d": [
      {
        "hash": "afe35db04e1afa25bfd9d5c48b23461d",
        "text": "| Token_mapping.Token_definitions_unified.DefineKeyword -> DefineKeyword\n| Token_mapping.Token_definitions_unified.AcceptKeyword -> AcceptKeyword\n| Token_mapping.Token_definitions_unified.ReturnWhenKeyword -> ReturnWhenKeyword\n| Token_mapping.Token_definitions_unified.ElseReturnKeyword -> ElseReturnKeyword\n| Token_mapping.Token_definitions_unified.MultiplyKeyword -> MultiplyKeyword\n| Token_mapping.Token_definitions_unified.DivideKeyword -> DivideKeyword\n| Token_mapping.Token_definitions_unified.AddToKeyword -> AddToKeyword\n| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword\n| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword\n| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.DefineKeyword -> DefineKeyword",
          "| Token_mapping.Token_definitions_unified.AcceptKeyword -> AcceptKeyword",
          "| Token_mapping.Token_definitions_unified.ReturnWhenKeyword -> ReturnWhenKeyword",
          "| Token_mapping.Token_definitions_unified.ElseReturnKeyword -> ElseReturnKeyword",
          "| Token_mapping.Token_definitions_unified.MultiplyKeyword -> MultiplyKeyword",
          "| Token_mapping.Token_definitions_unified.DivideKeyword -> DivideKeyword",
          "| Token_mapping.Token_definitions_unified.AddToKeyword -> AddToKeyword",
          "| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword",
          "| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword",
          "| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword"
        ],
        "start_line": 123,
        "end_line": 132,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "afe35db04e1afa25bfd9d5c48b23461d",
        "text": "| Token_mapping.Token_definitions_unified.DefineKeyword -> DefineKeyword\n| Token_mapping.Token_definitions_unified.AcceptKeyword -> AcceptKeyword\n| Token_mapping.Token_definitions_unified.ReturnWhenKeyword -> ReturnWhenKeyword\n| Token_mapping.Token_definitions_unified.ElseReturnKeyword -> ElseReturnKeyword\n| Token_mapping.Token_definitions_unified.MultiplyKeyword -> MultiplyKeyword\n| Token_mapping.Token_definitions_unified.DivideKeyword -> DivideKeyword\n| Token_mapping.Token_definitions_unified.AddToKeyword -> AddToKeyword\n| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword\n| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword\n| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.DefineKeyword -> DefineKeyword",
          "| Token_mapping.Token_definitions_unified.AcceptKeyword -> AcceptKeyword",
          "| Token_mapping.Token_definitions_unified.ReturnWhenKeyword -> ReturnWhenKeyword",
          "| Token_mapping.Token_definitions_unified.ElseReturnKeyword -> ElseReturnKeyword",
          "| Token_mapping.Token_definitions_unified.MultiplyKeyword -> MultiplyKeyword",
          "| Token_mapping.Token_definitions_unified.DivideKeyword -> DivideKeyword",
          "| Token_mapping.Token_definitions_unified.AddToKeyword -> AddToKeyword",
          "| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword",
          "| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword",
          "| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword"
        ],
        "start_line": 303,
        "end_line": 312,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "afe35db04e1afa25bfd9d5c48b23461d",
        "text": "| Token_mapping.Token_definitions_unified.DefineKeyword -> DefineKeyword\n| Token_mapping.Token_definitions_unified.AcceptKeyword -> AcceptKeyword\n| Token_mapping.Token_definitions_unified.ReturnWhenKeyword -> ReturnWhenKeyword\n| Token_mapping.Token_definitions_unified.ElseReturnKeyword -> ElseReturnKeyword\n| Token_mapping.Token_definitions_unified.MultiplyKeyword -> MultiplyKeyword\n| Token_mapping.Token_definitions_unified.DivideKeyword -> DivideKeyword\n| Token_mapping.Token_definitions_unified.AddToKeyword -> AddToKeyword\n| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword\n| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword\n| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.DefineKeyword -> DefineKeyword",
          "| Token_mapping.Token_definitions_unified.AcceptKeyword -> AcceptKeyword",
          "| Token_mapping.Token_definitions_unified.ReturnWhenKeyword -> ReturnWhenKeyword",
          "| Token_mapping.Token_definitions_unified.ElseReturnKeyword -> ElseReturnKeyword",
          "| Token_mapping.Token_definitions_unified.MultiplyKeyword -> MultiplyKeyword",
          "| Token_mapping.Token_definitions_unified.DivideKeyword -> DivideKeyword",
          "| Token_mapping.Token_definitions_unified.AddToKeyword -> AddToKeyword",
          "| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword",
          "| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword",
          "| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword"
        ],
        "start_line": 32,
        "end_line": 41,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_classical.ml"
      },
      {
        "hash": "afe35db04e1afa25bfd9d5c48b23461d",
        "text": "| Token_mapping.Token_definitions_unified.DefineKeyword -> DefineKeyword\n| Token_mapping.Token_definitions_unified.AcceptKeyword -> AcceptKeyword\n| Token_mapping.Token_definitions_unified.ReturnWhenKeyword -> ReturnWhenKeyword\n| Token_mapping.Token_definitions_unified.ElseReturnKeyword -> ElseReturnKeyword\n| Token_mapping.Token_definitions_unified.MultiplyKeyword -> MultiplyKeyword\n| Token_mapping.Token_definitions_unified.DivideKeyword -> DivideKeyword\n| Token_mapping.Token_definitions_unified.AddToKeyword -> AddToKeyword\n| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword\n| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword\n| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.DefineKeyword -> DefineKeyword",
          "| Token_mapping.Token_definitions_unified.AcceptKeyword -> AcceptKeyword",
          "| Token_mapping.Token_definitions_unified.ReturnWhenKeyword -> ReturnWhenKeyword",
          "| Token_mapping.Token_definitions_unified.ElseReturnKeyword -> ElseReturnKeyword",
          "| Token_mapping.Token_definitions_unified.MultiplyKeyword -> MultiplyKeyword",
          "| Token_mapping.Token_definitions_unified.DivideKeyword -> DivideKeyword",
          "| Token_mapping.Token_definitions_unified.AddToKeyword -> AddToKeyword",
          "| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword",
          "| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword",
          "| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword"
        ],
        "start_line": 39,
        "end_line": 48,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "afe35db04e1afa25bfd9d5c48b23461d",
        "text": "| Token_mapping.Token_definitions_unified.DefineKeyword -> DefineKeyword\n| Token_mapping.Token_definitions_unified.AcceptKeyword -> AcceptKeyword\n| Token_mapping.Token_definitions_unified.ReturnWhenKeyword -> ReturnWhenKeyword\n| Token_mapping.Token_definitions_unified.ElseReturnKeyword -> ElseReturnKeyword\n| Token_mapping.Token_definitions_unified.MultiplyKeyword -> MultiplyKeyword\n| Token_mapping.Token_definitions_unified.DivideKeyword -> DivideKeyword\n| Token_mapping.Token_definitions_unified.AddToKeyword -> AddToKeyword\n| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword\n| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword\n| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.DefineKeyword -> DefineKeyword",
          "| Token_mapping.Token_definitions_unified.AcceptKeyword -> AcceptKeyword",
          "| Token_mapping.Token_definitions_unified.ReturnWhenKeyword -> ReturnWhenKeyword",
          "| Token_mapping.Token_definitions_unified.ElseReturnKeyword -> ElseReturnKeyword",
          "| Token_mapping.Token_definitions_unified.MultiplyKeyword -> MultiplyKeyword",
          "| Token_mapping.Token_definitions_unified.DivideKeyword -> DivideKeyword",
          "| Token_mapping.Token_definitions_unified.AddToKeyword -> AddToKeyword",
          "| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword",
          "| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword",
          "| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword"
        ],
        "start_line": 144,
        "end_line": 153,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "afe35db04e1afa25bfd9d5c48b23461d",
        "text": "| Token_mapping.Token_definitions_unified.DefineKeyword -> DefineKeyword\n| Token_mapping.Token_definitions_unified.AcceptKeyword -> AcceptKeyword\n| Token_mapping.Token_definitions_unified.ReturnWhenKeyword -> ReturnWhenKeyword\n| Token_mapping.Token_definitions_unified.ElseReturnKeyword -> ElseReturnKeyword\n| Token_mapping.Token_definitions_unified.MultiplyKeyword -> MultiplyKeyword\n| Token_mapping.Token_definitions_unified.DivideKeyword -> DivideKeyword\n| Token_mapping.Token_definitions_unified.AddToKeyword -> AddToKeyword\n| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword\n| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword\n| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.DefineKeyword -> DefineKeyword",
          "| Token_mapping.Token_definitions_unified.AcceptKeyword -> AcceptKeyword",
          "| Token_mapping.Token_definitions_unified.ReturnWhenKeyword -> ReturnWhenKeyword",
          "| Token_mapping.Token_definitions_unified.ElseReturnKeyword -> ElseReturnKeyword",
          "| Token_mapping.Token_definitions_unified.MultiplyKeyword -> MultiplyKeyword",
          "| Token_mapping.Token_definitions_unified.DivideKeyword -> DivideKeyword",
          "| Token_mapping.Token_definitions_unified.AddToKeyword -> AddToKeyword",
          "| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword",
          "| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword",
          "| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword"
        ],
        "start_line": 67,
        "end_line": 76,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_basic_keywords.ml"
      },
      {
        "hash": "afe35db04e1afa25bfd9d5c48b23461d",
        "text": "| Token_mapping.Token_definitions_unified.DefineKeyword -> DefineKeyword\n| Token_mapping.Token_definitions_unified.AcceptKeyword -> AcceptKeyword\n| Token_mapping.Token_definitions_unified.ReturnWhenKeyword -> ReturnWhenKeyword\n| Token_mapping.Token_definitions_unified.ElseReturnKeyword -> ElseReturnKeyword\n| Token_mapping.Token_definitions_unified.MultiplyKeyword -> MultiplyKeyword\n| Token_mapping.Token_definitions_unified.DivideKeyword -> DivideKeyword\n| Token_mapping.Token_definitions_unified.AddToKeyword -> AddToKeyword\n| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword\n| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword\n| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.DefineKeyword -> DefineKeyword",
          "| Token_mapping.Token_definitions_unified.AcceptKeyword -> AcceptKeyword",
          "| Token_mapping.Token_definitions_unified.ReturnWhenKeyword -> ReturnWhenKeyword",
          "| Token_mapping.Token_definitions_unified.ElseReturnKeyword -> ElseReturnKeyword",
          "| Token_mapping.Token_definitions_unified.MultiplyKeyword -> MultiplyKeyword",
          "| Token_mapping.Token_definitions_unified.DivideKeyword -> DivideKeyword",
          "| Token_mapping.Token_definitions_unified.AddToKeyword -> AddToKeyword",
          "| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword",
          "| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword",
          "| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword"
        ],
        "start_line": 62,
        "end_line": 71,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_keywords.ml"
      }
    ],
    "57300507173df467fa22448cecff5f89": [
      {
        "hash": "57300507173df467fa22448cecff5f89",
        "text": "| Token_mapping.Token_definitions_unified.AcceptKeyword -> AcceptKeyword\n| Token_mapping.Token_definitions_unified.ReturnWhenKeyword -> ReturnWhenKeyword\n| Token_mapping.Token_definitions_unified.ElseReturnKeyword -> ElseReturnKeyword\n| Token_mapping.Token_definitions_unified.MultiplyKeyword -> MultiplyKeyword\n| Token_mapping.Token_definitions_unified.DivideKeyword -> DivideKeyword\n| Token_mapping.Token_definitions_unified.AddToKeyword -> AddToKeyword\n| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword\n| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword\n| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword\n| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AcceptKeyword -> AcceptKeyword",
          "| Token_mapping.Token_definitions_unified.ReturnWhenKeyword -> ReturnWhenKeyword",
          "| Token_mapping.Token_definitions_unified.ElseReturnKeyword -> ElseReturnKeyword",
          "| Token_mapping.Token_definitions_unified.MultiplyKeyword -> MultiplyKeyword",
          "| Token_mapping.Token_definitions_unified.DivideKeyword -> DivideKeyword",
          "| Token_mapping.Token_definitions_unified.AddToKeyword -> AddToKeyword",
          "| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword",
          "| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword",
          "| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword",
          "| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword"
        ],
        "start_line": 124,
        "end_line": 133,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "57300507173df467fa22448cecff5f89",
        "text": "| Token_mapping.Token_definitions_unified.AcceptKeyword -> AcceptKeyword\n| Token_mapping.Token_definitions_unified.ReturnWhenKeyword -> ReturnWhenKeyword\n| Token_mapping.Token_definitions_unified.ElseReturnKeyword -> ElseReturnKeyword\n| Token_mapping.Token_definitions_unified.MultiplyKeyword -> MultiplyKeyword\n| Token_mapping.Token_definitions_unified.DivideKeyword -> DivideKeyword\n| Token_mapping.Token_definitions_unified.AddToKeyword -> AddToKeyword\n| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword\n| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword\n| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword\n| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AcceptKeyword -> AcceptKeyword",
          "| Token_mapping.Token_definitions_unified.ReturnWhenKeyword -> ReturnWhenKeyword",
          "| Token_mapping.Token_definitions_unified.ElseReturnKeyword -> ElseReturnKeyword",
          "| Token_mapping.Token_definitions_unified.MultiplyKeyword -> MultiplyKeyword",
          "| Token_mapping.Token_definitions_unified.DivideKeyword -> DivideKeyword",
          "| Token_mapping.Token_definitions_unified.AddToKeyword -> AddToKeyword",
          "| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword",
          "| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword",
          "| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword",
          "| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword"
        ],
        "start_line": 304,
        "end_line": 313,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "57300507173df467fa22448cecff5f89",
        "text": "| Token_mapping.Token_definitions_unified.AcceptKeyword -> AcceptKeyword\n| Token_mapping.Token_definitions_unified.ReturnWhenKeyword -> ReturnWhenKeyword\n| Token_mapping.Token_definitions_unified.ElseReturnKeyword -> ElseReturnKeyword\n| Token_mapping.Token_definitions_unified.MultiplyKeyword -> MultiplyKeyword\n| Token_mapping.Token_definitions_unified.DivideKeyword -> DivideKeyword\n| Token_mapping.Token_definitions_unified.AddToKeyword -> AddToKeyword\n| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword\n| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword\n| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword\n| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AcceptKeyword -> AcceptKeyword",
          "| Token_mapping.Token_definitions_unified.ReturnWhenKeyword -> ReturnWhenKeyword",
          "| Token_mapping.Token_definitions_unified.ElseReturnKeyword -> ElseReturnKeyword",
          "| Token_mapping.Token_definitions_unified.MultiplyKeyword -> MultiplyKeyword",
          "| Token_mapping.Token_definitions_unified.DivideKeyword -> DivideKeyword",
          "| Token_mapping.Token_definitions_unified.AddToKeyword -> AddToKeyword",
          "| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword",
          "| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword",
          "| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword",
          "| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword"
        ],
        "start_line": 33,
        "end_line": 42,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_classical.ml"
      },
      {
        "hash": "57300507173df467fa22448cecff5f89",
        "text": "| Token_mapping.Token_definitions_unified.AcceptKeyword -> AcceptKeyword\n| Token_mapping.Token_definitions_unified.ReturnWhenKeyword -> ReturnWhenKeyword\n| Token_mapping.Token_definitions_unified.ElseReturnKeyword -> ElseReturnKeyword\n| Token_mapping.Token_definitions_unified.MultiplyKeyword -> MultiplyKeyword\n| Token_mapping.Token_definitions_unified.DivideKeyword -> DivideKeyword\n| Token_mapping.Token_definitions_unified.AddToKeyword -> AddToKeyword\n| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword\n| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword\n| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword\n| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AcceptKeyword -> AcceptKeyword",
          "| Token_mapping.Token_definitions_unified.ReturnWhenKeyword -> ReturnWhenKeyword",
          "| Token_mapping.Token_definitions_unified.ElseReturnKeyword -> ElseReturnKeyword",
          "| Token_mapping.Token_definitions_unified.MultiplyKeyword -> MultiplyKeyword",
          "| Token_mapping.Token_definitions_unified.DivideKeyword -> DivideKeyword",
          "| Token_mapping.Token_definitions_unified.AddToKeyword -> AddToKeyword",
          "| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword",
          "| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword",
          "| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword",
          "| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword"
        ],
        "start_line": 40,
        "end_line": 49,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "57300507173df467fa22448cecff5f89",
        "text": "| Token_mapping.Token_definitions_unified.AcceptKeyword -> AcceptKeyword\n| Token_mapping.Token_definitions_unified.ReturnWhenKeyword -> ReturnWhenKeyword\n| Token_mapping.Token_definitions_unified.ElseReturnKeyword -> ElseReturnKeyword\n| Token_mapping.Token_definitions_unified.MultiplyKeyword -> MultiplyKeyword\n| Token_mapping.Token_definitions_unified.DivideKeyword -> DivideKeyword\n| Token_mapping.Token_definitions_unified.AddToKeyword -> AddToKeyword\n| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword\n| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword\n| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword\n| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AcceptKeyword -> AcceptKeyword",
          "| Token_mapping.Token_definitions_unified.ReturnWhenKeyword -> ReturnWhenKeyword",
          "| Token_mapping.Token_definitions_unified.ElseReturnKeyword -> ElseReturnKeyword",
          "| Token_mapping.Token_definitions_unified.MultiplyKeyword -> MultiplyKeyword",
          "| Token_mapping.Token_definitions_unified.DivideKeyword -> DivideKeyword",
          "| Token_mapping.Token_definitions_unified.AddToKeyword -> AddToKeyword",
          "| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword",
          "| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword",
          "| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword",
          "| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword"
        ],
        "start_line": 145,
        "end_line": 154,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "57300507173df467fa22448cecff5f89",
        "text": "| Token_mapping.Token_definitions_unified.AcceptKeyword -> AcceptKeyword\n| Token_mapping.Token_definitions_unified.ReturnWhenKeyword -> ReturnWhenKeyword\n| Token_mapping.Token_definitions_unified.ElseReturnKeyword -> ElseReturnKeyword\n| Token_mapping.Token_definitions_unified.MultiplyKeyword -> MultiplyKeyword\n| Token_mapping.Token_definitions_unified.DivideKeyword -> DivideKeyword\n| Token_mapping.Token_definitions_unified.AddToKeyword -> AddToKeyword\n| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword\n| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword\n| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword\n| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AcceptKeyword -> AcceptKeyword",
          "| Token_mapping.Token_definitions_unified.ReturnWhenKeyword -> ReturnWhenKeyword",
          "| Token_mapping.Token_definitions_unified.ElseReturnKeyword -> ElseReturnKeyword",
          "| Token_mapping.Token_definitions_unified.MultiplyKeyword -> MultiplyKeyword",
          "| Token_mapping.Token_definitions_unified.DivideKeyword -> DivideKeyword",
          "| Token_mapping.Token_definitions_unified.AddToKeyword -> AddToKeyword",
          "| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword",
          "| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword",
          "| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword",
          "| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword"
        ],
        "start_line": 68,
        "end_line": 77,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_basic_keywords.ml"
      },
      {
        "hash": "57300507173df467fa22448cecff5f89",
        "text": "| Token_mapping.Token_definitions_unified.AcceptKeyword -> AcceptKeyword\n| Token_mapping.Token_definitions_unified.ReturnWhenKeyword -> ReturnWhenKeyword\n| Token_mapping.Token_definitions_unified.ElseReturnKeyword -> ElseReturnKeyword\n| Token_mapping.Token_definitions_unified.MultiplyKeyword -> MultiplyKeyword\n| Token_mapping.Token_definitions_unified.DivideKeyword -> DivideKeyword\n| Token_mapping.Token_definitions_unified.AddToKeyword -> AddToKeyword\n| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword\n| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword\n| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword\n| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AcceptKeyword -> AcceptKeyword",
          "| Token_mapping.Token_definitions_unified.ReturnWhenKeyword -> ReturnWhenKeyword",
          "| Token_mapping.Token_definitions_unified.ElseReturnKeyword -> ElseReturnKeyword",
          "| Token_mapping.Token_definitions_unified.MultiplyKeyword -> MultiplyKeyword",
          "| Token_mapping.Token_definitions_unified.DivideKeyword -> DivideKeyword",
          "| Token_mapping.Token_definitions_unified.AddToKeyword -> AddToKeyword",
          "| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword",
          "| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword",
          "| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword",
          "| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword"
        ],
        "start_line": 63,
        "end_line": 72,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_keywords.ml"
      }
    ],
    "6d1a6d538b39e7b2c20233270de7cb94": [
      {
        "hash": "6d1a6d538b39e7b2c20233270de7cb94",
        "text": "| Token_mapping.Token_definitions_unified.ReturnWhenKeyword -> ReturnWhenKeyword\n| Token_mapping.Token_definitions_unified.ElseReturnKeyword -> ElseReturnKeyword\n| Token_mapping.Token_definitions_unified.MultiplyKeyword -> MultiplyKeyword\n| Token_mapping.Token_definitions_unified.DivideKeyword -> DivideKeyword\n| Token_mapping.Token_definitions_unified.AddToKeyword -> AddToKeyword\n| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword\n| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword\n| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword\n| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword\n| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.ReturnWhenKeyword -> ReturnWhenKeyword",
          "| Token_mapping.Token_definitions_unified.ElseReturnKeyword -> ElseReturnKeyword",
          "| Token_mapping.Token_definitions_unified.MultiplyKeyword -> MultiplyKeyword",
          "| Token_mapping.Token_definitions_unified.DivideKeyword -> DivideKeyword",
          "| Token_mapping.Token_definitions_unified.AddToKeyword -> AddToKeyword",
          "| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword",
          "| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword",
          "| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword",
          "| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword",
          "| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword"
        ],
        "start_line": 125,
        "end_line": 134,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "6d1a6d538b39e7b2c20233270de7cb94",
        "text": "| Token_mapping.Token_definitions_unified.ReturnWhenKeyword -> ReturnWhenKeyword\n| Token_mapping.Token_definitions_unified.ElseReturnKeyword -> ElseReturnKeyword\n| Token_mapping.Token_definitions_unified.MultiplyKeyword -> MultiplyKeyword\n| Token_mapping.Token_definitions_unified.DivideKeyword -> DivideKeyword\n| Token_mapping.Token_definitions_unified.AddToKeyword -> AddToKeyword\n| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword\n| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword\n| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword\n| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword\n| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.ReturnWhenKeyword -> ReturnWhenKeyword",
          "| Token_mapping.Token_definitions_unified.ElseReturnKeyword -> ElseReturnKeyword",
          "| Token_mapping.Token_definitions_unified.MultiplyKeyword -> MultiplyKeyword",
          "| Token_mapping.Token_definitions_unified.DivideKeyword -> DivideKeyword",
          "| Token_mapping.Token_definitions_unified.AddToKeyword -> AddToKeyword",
          "| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword",
          "| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword",
          "| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword",
          "| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword",
          "| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword"
        ],
        "start_line": 305,
        "end_line": 314,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "6d1a6d538b39e7b2c20233270de7cb94",
        "text": "| Token_mapping.Token_definitions_unified.ReturnWhenKeyword -> ReturnWhenKeyword\n| Token_mapping.Token_definitions_unified.ElseReturnKeyword -> ElseReturnKeyword\n| Token_mapping.Token_definitions_unified.MultiplyKeyword -> MultiplyKeyword\n| Token_mapping.Token_definitions_unified.DivideKeyword -> DivideKeyword\n| Token_mapping.Token_definitions_unified.AddToKeyword -> AddToKeyword\n| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword\n| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword\n| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword\n| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword\n| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.ReturnWhenKeyword -> ReturnWhenKeyword",
          "| Token_mapping.Token_definitions_unified.ElseReturnKeyword -> ElseReturnKeyword",
          "| Token_mapping.Token_definitions_unified.MultiplyKeyword -> MultiplyKeyword",
          "| Token_mapping.Token_definitions_unified.DivideKeyword -> DivideKeyword",
          "| Token_mapping.Token_definitions_unified.AddToKeyword -> AddToKeyword",
          "| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword",
          "| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword",
          "| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword",
          "| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword",
          "| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword"
        ],
        "start_line": 34,
        "end_line": 43,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_classical.ml"
      },
      {
        "hash": "6d1a6d538b39e7b2c20233270de7cb94",
        "text": "| Token_mapping.Token_definitions_unified.ReturnWhenKeyword -> ReturnWhenKeyword\n| Token_mapping.Token_definitions_unified.ElseReturnKeyword -> ElseReturnKeyword\n| Token_mapping.Token_definitions_unified.MultiplyKeyword -> MultiplyKeyword\n| Token_mapping.Token_definitions_unified.DivideKeyword -> DivideKeyword\n| Token_mapping.Token_definitions_unified.AddToKeyword -> AddToKeyword\n| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword\n| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword\n| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword\n| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword\n| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.ReturnWhenKeyword -> ReturnWhenKeyword",
          "| Token_mapping.Token_definitions_unified.ElseReturnKeyword -> ElseReturnKeyword",
          "| Token_mapping.Token_definitions_unified.MultiplyKeyword -> MultiplyKeyword",
          "| Token_mapping.Token_definitions_unified.DivideKeyword -> DivideKeyword",
          "| Token_mapping.Token_definitions_unified.AddToKeyword -> AddToKeyword",
          "| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword",
          "| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword",
          "| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword",
          "| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword",
          "| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword"
        ],
        "start_line": 41,
        "end_line": 50,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "6d1a6d538b39e7b2c20233270de7cb94",
        "text": "| Token_mapping.Token_definitions_unified.ReturnWhenKeyword -> ReturnWhenKeyword\n| Token_mapping.Token_definitions_unified.ElseReturnKeyword -> ElseReturnKeyword\n| Token_mapping.Token_definitions_unified.MultiplyKeyword -> MultiplyKeyword\n| Token_mapping.Token_definitions_unified.DivideKeyword -> DivideKeyword\n| Token_mapping.Token_definitions_unified.AddToKeyword -> AddToKeyword\n| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword\n| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword\n| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword\n| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword\n| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.ReturnWhenKeyword -> ReturnWhenKeyword",
          "| Token_mapping.Token_definitions_unified.ElseReturnKeyword -> ElseReturnKeyword",
          "| Token_mapping.Token_definitions_unified.MultiplyKeyword -> MultiplyKeyword",
          "| Token_mapping.Token_definitions_unified.DivideKeyword -> DivideKeyword",
          "| Token_mapping.Token_definitions_unified.AddToKeyword -> AddToKeyword",
          "| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword",
          "| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword",
          "| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword",
          "| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword",
          "| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword"
        ],
        "start_line": 146,
        "end_line": 155,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "6d1a6d538b39e7b2c20233270de7cb94",
        "text": "| Token_mapping.Token_definitions_unified.ReturnWhenKeyword -> ReturnWhenKeyword\n| Token_mapping.Token_definitions_unified.ElseReturnKeyword -> ElseReturnKeyword\n| Token_mapping.Token_definitions_unified.MultiplyKeyword -> MultiplyKeyword\n| Token_mapping.Token_definitions_unified.DivideKeyword -> DivideKeyword\n| Token_mapping.Token_definitions_unified.AddToKeyword -> AddToKeyword\n| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword\n| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword\n| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword\n| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword\n| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.ReturnWhenKeyword -> ReturnWhenKeyword",
          "| Token_mapping.Token_definitions_unified.ElseReturnKeyword -> ElseReturnKeyword",
          "| Token_mapping.Token_definitions_unified.MultiplyKeyword -> MultiplyKeyword",
          "| Token_mapping.Token_definitions_unified.DivideKeyword -> DivideKeyword",
          "| Token_mapping.Token_definitions_unified.AddToKeyword -> AddToKeyword",
          "| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword",
          "| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword",
          "| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword",
          "| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword",
          "| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword"
        ],
        "start_line": 69,
        "end_line": 78,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_basic_keywords.ml"
      },
      {
        "hash": "6d1a6d538b39e7b2c20233270de7cb94",
        "text": "| Token_mapping.Token_definitions_unified.ReturnWhenKeyword -> ReturnWhenKeyword\n| Token_mapping.Token_definitions_unified.ElseReturnKeyword -> ElseReturnKeyword\n| Token_mapping.Token_definitions_unified.MultiplyKeyword -> MultiplyKeyword\n| Token_mapping.Token_definitions_unified.DivideKeyword -> DivideKeyword\n| Token_mapping.Token_definitions_unified.AddToKeyword -> AddToKeyword\n| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword\n| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword\n| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword\n| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword\n| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.ReturnWhenKeyword -> ReturnWhenKeyword",
          "| Token_mapping.Token_definitions_unified.ElseReturnKeyword -> ElseReturnKeyword",
          "| Token_mapping.Token_definitions_unified.MultiplyKeyword -> MultiplyKeyword",
          "| Token_mapping.Token_definitions_unified.DivideKeyword -> DivideKeyword",
          "| Token_mapping.Token_definitions_unified.AddToKeyword -> AddToKeyword",
          "| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword",
          "| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword",
          "| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword",
          "| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword",
          "| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword"
        ],
        "start_line": 64,
        "end_line": 73,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_keywords.ml"
      }
    ],
    "1897d4159595ea83b597e0b45b63c5c5": [
      {
        "hash": "1897d4159595ea83b597e0b45b63c5c5",
        "text": "| Token_mapping.Token_definitions_unified.ElseReturnKeyword -> ElseReturnKeyword\n| Token_mapping.Token_definitions_unified.MultiplyKeyword -> MultiplyKeyword\n| Token_mapping.Token_definitions_unified.DivideKeyword -> DivideKeyword\n| Token_mapping.Token_definitions_unified.AddToKeyword -> AddToKeyword\n| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword\n| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword\n| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword\n| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword\n| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword\n| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.ElseReturnKeyword -> ElseReturnKeyword",
          "| Token_mapping.Token_definitions_unified.MultiplyKeyword -> MultiplyKeyword",
          "| Token_mapping.Token_definitions_unified.DivideKeyword -> DivideKeyword",
          "| Token_mapping.Token_definitions_unified.AddToKeyword -> AddToKeyword",
          "| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword",
          "| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword",
          "| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword",
          "| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword",
          "| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword",
          "| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword"
        ],
        "start_line": 126,
        "end_line": 135,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "1897d4159595ea83b597e0b45b63c5c5",
        "text": "| Token_mapping.Token_definitions_unified.ElseReturnKeyword -> ElseReturnKeyword\n| Token_mapping.Token_definitions_unified.MultiplyKeyword -> MultiplyKeyword\n| Token_mapping.Token_definitions_unified.DivideKeyword -> DivideKeyword\n| Token_mapping.Token_definitions_unified.AddToKeyword -> AddToKeyword\n| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword\n| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword\n| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword\n| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword\n| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword\n| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.ElseReturnKeyword -> ElseReturnKeyword",
          "| Token_mapping.Token_definitions_unified.MultiplyKeyword -> MultiplyKeyword",
          "| Token_mapping.Token_definitions_unified.DivideKeyword -> DivideKeyword",
          "| Token_mapping.Token_definitions_unified.AddToKeyword -> AddToKeyword",
          "| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword",
          "| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword",
          "| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword",
          "| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword",
          "| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword",
          "| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword"
        ],
        "start_line": 306,
        "end_line": 315,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "1897d4159595ea83b597e0b45b63c5c5",
        "text": "| Token_mapping.Token_definitions_unified.ElseReturnKeyword -> ElseReturnKeyword\n| Token_mapping.Token_definitions_unified.MultiplyKeyword -> MultiplyKeyword\n| Token_mapping.Token_definitions_unified.DivideKeyword -> DivideKeyword\n| Token_mapping.Token_definitions_unified.AddToKeyword -> AddToKeyword\n| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword\n| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword\n| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword\n| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword\n| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword\n| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.ElseReturnKeyword -> ElseReturnKeyword",
          "| Token_mapping.Token_definitions_unified.MultiplyKeyword -> MultiplyKeyword",
          "| Token_mapping.Token_definitions_unified.DivideKeyword -> DivideKeyword",
          "| Token_mapping.Token_definitions_unified.AddToKeyword -> AddToKeyword",
          "| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword",
          "| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword",
          "| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword",
          "| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword",
          "| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword",
          "| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword"
        ],
        "start_line": 35,
        "end_line": 44,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_classical.ml"
      },
      {
        "hash": "1897d4159595ea83b597e0b45b63c5c5",
        "text": "| Token_mapping.Token_definitions_unified.ElseReturnKeyword -> ElseReturnKeyword\n| Token_mapping.Token_definitions_unified.MultiplyKeyword -> MultiplyKeyword\n| Token_mapping.Token_definitions_unified.DivideKeyword -> DivideKeyword\n| Token_mapping.Token_definitions_unified.AddToKeyword -> AddToKeyword\n| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword\n| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword\n| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword\n| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword\n| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword\n| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.ElseReturnKeyword -> ElseReturnKeyword",
          "| Token_mapping.Token_definitions_unified.MultiplyKeyword -> MultiplyKeyword",
          "| Token_mapping.Token_definitions_unified.DivideKeyword -> DivideKeyword",
          "| Token_mapping.Token_definitions_unified.AddToKeyword -> AddToKeyword",
          "| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword",
          "| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword",
          "| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword",
          "| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword",
          "| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword",
          "| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword"
        ],
        "start_line": 42,
        "end_line": 51,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "1897d4159595ea83b597e0b45b63c5c5",
        "text": "| Token_mapping.Token_definitions_unified.ElseReturnKeyword -> ElseReturnKeyword\n| Token_mapping.Token_definitions_unified.MultiplyKeyword -> MultiplyKeyword\n| Token_mapping.Token_definitions_unified.DivideKeyword -> DivideKeyword\n| Token_mapping.Token_definitions_unified.AddToKeyword -> AddToKeyword\n| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword\n| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword\n| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword\n| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword\n| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword\n| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.ElseReturnKeyword -> ElseReturnKeyword",
          "| Token_mapping.Token_definitions_unified.MultiplyKeyword -> MultiplyKeyword",
          "| Token_mapping.Token_definitions_unified.DivideKeyword -> DivideKeyword",
          "| Token_mapping.Token_definitions_unified.AddToKeyword -> AddToKeyword",
          "| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword",
          "| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword",
          "| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword",
          "| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword",
          "| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword",
          "| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword"
        ],
        "start_line": 147,
        "end_line": 156,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "1897d4159595ea83b597e0b45b63c5c5",
        "text": "| Token_mapping.Token_definitions_unified.ElseReturnKeyword -> ElseReturnKeyword\n| Token_mapping.Token_definitions_unified.MultiplyKeyword -> MultiplyKeyword\n| Token_mapping.Token_definitions_unified.DivideKeyword -> DivideKeyword\n| Token_mapping.Token_definitions_unified.AddToKeyword -> AddToKeyword\n| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword\n| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword\n| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword\n| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword\n| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword\n| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.ElseReturnKeyword -> ElseReturnKeyword",
          "| Token_mapping.Token_definitions_unified.MultiplyKeyword -> MultiplyKeyword",
          "| Token_mapping.Token_definitions_unified.DivideKeyword -> DivideKeyword",
          "| Token_mapping.Token_definitions_unified.AddToKeyword -> AddToKeyword",
          "| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword",
          "| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword",
          "| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword",
          "| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword",
          "| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword",
          "| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword"
        ],
        "start_line": 70,
        "end_line": 79,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_basic_keywords.ml"
      },
      {
        "hash": "1897d4159595ea83b597e0b45b63c5c5",
        "text": "| Token_mapping.Token_definitions_unified.ElseReturnKeyword -> ElseReturnKeyword\n| Token_mapping.Token_definitions_unified.MultiplyKeyword -> MultiplyKeyword\n| Token_mapping.Token_definitions_unified.DivideKeyword -> DivideKeyword\n| Token_mapping.Token_definitions_unified.AddToKeyword -> AddToKeyword\n| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword\n| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword\n| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword\n| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword\n| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword\n| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.ElseReturnKeyword -> ElseReturnKeyword",
          "| Token_mapping.Token_definitions_unified.MultiplyKeyword -> MultiplyKeyword",
          "| Token_mapping.Token_definitions_unified.DivideKeyword -> DivideKeyword",
          "| Token_mapping.Token_definitions_unified.AddToKeyword -> AddToKeyword",
          "| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword",
          "| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword",
          "| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword",
          "| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword",
          "| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword",
          "| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword"
        ],
        "start_line": 65,
        "end_line": 74,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_keywords.ml"
      }
    ],
    "be2a7a122554cd1c4a2578bd47ec0063": [
      {
        "hash": "be2a7a122554cd1c4a2578bd47ec0063",
        "text": "| Token_mapping.Token_definitions_unified.MultiplyKeyword -> MultiplyKeyword\n| Token_mapping.Token_definitions_unified.DivideKeyword -> DivideKeyword\n| Token_mapping.Token_definitions_unified.AddToKeyword -> AddToKeyword\n| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword\n| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword\n| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword\n| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword\n| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword\n| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword\n| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.MultiplyKeyword -> MultiplyKeyword",
          "| Token_mapping.Token_definitions_unified.DivideKeyword -> DivideKeyword",
          "| Token_mapping.Token_definitions_unified.AddToKeyword -> AddToKeyword",
          "| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword",
          "| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword",
          "| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword",
          "| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword",
          "| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword",
          "| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword",
          "| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword"
        ],
        "start_line": 127,
        "end_line": 136,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "be2a7a122554cd1c4a2578bd47ec0063",
        "text": "| Token_mapping.Token_definitions_unified.MultiplyKeyword -> MultiplyKeyword\n| Token_mapping.Token_definitions_unified.DivideKeyword -> DivideKeyword\n| Token_mapping.Token_definitions_unified.AddToKeyword -> AddToKeyword\n| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword\n| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword\n| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword\n| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword\n| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword\n| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword\n| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.MultiplyKeyword -> MultiplyKeyword",
          "| Token_mapping.Token_definitions_unified.DivideKeyword -> DivideKeyword",
          "| Token_mapping.Token_definitions_unified.AddToKeyword -> AddToKeyword",
          "| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword",
          "| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword",
          "| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword",
          "| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword",
          "| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword",
          "| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword",
          "| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword"
        ],
        "start_line": 307,
        "end_line": 316,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "be2a7a122554cd1c4a2578bd47ec0063",
        "text": "| Token_mapping.Token_definitions_unified.MultiplyKeyword -> MultiplyKeyword\n| Token_mapping.Token_definitions_unified.DivideKeyword -> DivideKeyword\n| Token_mapping.Token_definitions_unified.AddToKeyword -> AddToKeyword\n| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword\n| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword\n| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword\n| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword\n| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword\n| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword\n| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.MultiplyKeyword -> MultiplyKeyword",
          "| Token_mapping.Token_definitions_unified.DivideKeyword -> DivideKeyword",
          "| Token_mapping.Token_definitions_unified.AddToKeyword -> AddToKeyword",
          "| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword",
          "| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword",
          "| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword",
          "| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword",
          "| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword",
          "| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword",
          "| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword"
        ],
        "start_line": 36,
        "end_line": 45,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_classical.ml"
      },
      {
        "hash": "be2a7a122554cd1c4a2578bd47ec0063",
        "text": "| Token_mapping.Token_definitions_unified.MultiplyKeyword -> MultiplyKeyword\n| Token_mapping.Token_definitions_unified.DivideKeyword -> DivideKeyword\n| Token_mapping.Token_definitions_unified.AddToKeyword -> AddToKeyword\n| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword\n| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword\n| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword\n| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword\n| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword\n| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword\n| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.MultiplyKeyword -> MultiplyKeyword",
          "| Token_mapping.Token_definitions_unified.DivideKeyword -> DivideKeyword",
          "| Token_mapping.Token_definitions_unified.AddToKeyword -> AddToKeyword",
          "| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword",
          "| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword",
          "| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword",
          "| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword",
          "| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword",
          "| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword",
          "| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword"
        ],
        "start_line": 43,
        "end_line": 52,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "be2a7a122554cd1c4a2578bd47ec0063",
        "text": "| Token_mapping.Token_definitions_unified.MultiplyKeyword -> MultiplyKeyword\n| Token_mapping.Token_definitions_unified.DivideKeyword -> DivideKeyword\n| Token_mapping.Token_definitions_unified.AddToKeyword -> AddToKeyword\n| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword\n| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword\n| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword\n| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword\n| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword\n| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword\n| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.MultiplyKeyword -> MultiplyKeyword",
          "| Token_mapping.Token_definitions_unified.DivideKeyword -> DivideKeyword",
          "| Token_mapping.Token_definitions_unified.AddToKeyword -> AddToKeyword",
          "| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword",
          "| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword",
          "| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword",
          "| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword",
          "| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword",
          "| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword",
          "| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword"
        ],
        "start_line": 148,
        "end_line": 157,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "be2a7a122554cd1c4a2578bd47ec0063",
        "text": "| Token_mapping.Token_definitions_unified.MultiplyKeyword -> MultiplyKeyword\n| Token_mapping.Token_definitions_unified.DivideKeyword -> DivideKeyword\n| Token_mapping.Token_definitions_unified.AddToKeyword -> AddToKeyword\n| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword\n| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword\n| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword\n| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword\n| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword\n| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword\n| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.MultiplyKeyword -> MultiplyKeyword",
          "| Token_mapping.Token_definitions_unified.DivideKeyword -> DivideKeyword",
          "| Token_mapping.Token_definitions_unified.AddToKeyword -> AddToKeyword",
          "| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword",
          "| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword",
          "| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword",
          "| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword",
          "| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword",
          "| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword",
          "| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword"
        ],
        "start_line": 71,
        "end_line": 80,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_basic_keywords.ml"
      },
      {
        "hash": "be2a7a122554cd1c4a2578bd47ec0063",
        "text": "| Token_mapping.Token_definitions_unified.MultiplyKeyword -> MultiplyKeyword\n| Token_mapping.Token_definitions_unified.DivideKeyword -> DivideKeyword\n| Token_mapping.Token_definitions_unified.AddToKeyword -> AddToKeyword\n| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword\n| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword\n| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword\n| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword\n| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword\n| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword\n| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.MultiplyKeyword -> MultiplyKeyword",
          "| Token_mapping.Token_definitions_unified.DivideKeyword -> DivideKeyword",
          "| Token_mapping.Token_definitions_unified.AddToKeyword -> AddToKeyword",
          "| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword",
          "| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword",
          "| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword",
          "| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword",
          "| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword",
          "| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword",
          "| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword"
        ],
        "start_line": 66,
        "end_line": 75,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_keywords.ml"
      }
    ],
    "96af048d8f0756db5cb23338b8d3e777": [
      {
        "hash": "96af048d8f0756db5cb23338b8d3e777",
        "text": "| Token_mapping.Token_definitions_unified.DivideKeyword -> DivideKeyword\n| Token_mapping.Token_definitions_unified.AddToKeyword -> AddToKeyword\n| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword\n| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword\n| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword\n| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword\n| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword\n| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword\n| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword\n| Token_mapping.Token_definitions_unified.OfParticle -> OfParticle",
        "lines": [
          "| Token_mapping.Token_definitions_unified.DivideKeyword -> DivideKeyword",
          "| Token_mapping.Token_definitions_unified.AddToKeyword -> AddToKeyword",
          "| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword",
          "| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword",
          "| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword",
          "| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword",
          "| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword",
          "| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword",
          "| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword",
          "| Token_mapping.Token_definitions_unified.OfParticle -> OfParticle"
        ],
        "start_line": 128,
        "end_line": 137,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "96af048d8f0756db5cb23338b8d3e777",
        "text": "| Token_mapping.Token_definitions_unified.DivideKeyword -> DivideKeyword\n| Token_mapping.Token_definitions_unified.AddToKeyword -> AddToKeyword\n| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword\n| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword\n| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword\n| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword\n| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword\n| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword\n| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword\n| Token_mapping.Token_definitions_unified.OfParticle -> OfParticle",
        "lines": [
          "| Token_mapping.Token_definitions_unified.DivideKeyword -> DivideKeyword",
          "| Token_mapping.Token_definitions_unified.AddToKeyword -> AddToKeyword",
          "| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword",
          "| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword",
          "| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword",
          "| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword",
          "| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword",
          "| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword",
          "| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword",
          "| Token_mapping.Token_definitions_unified.OfParticle -> OfParticle"
        ],
        "start_line": 308,
        "end_line": 317,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "96af048d8f0756db5cb23338b8d3e777",
        "text": "| Token_mapping.Token_definitions_unified.DivideKeyword -> DivideKeyword\n| Token_mapping.Token_definitions_unified.AddToKeyword -> AddToKeyword\n| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword\n| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword\n| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword\n| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword\n| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword\n| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword\n| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword\n| Token_mapping.Token_definitions_unified.OfParticle -> OfParticle",
        "lines": [
          "| Token_mapping.Token_definitions_unified.DivideKeyword -> DivideKeyword",
          "| Token_mapping.Token_definitions_unified.AddToKeyword -> AddToKeyword",
          "| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword",
          "| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword",
          "| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword",
          "| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword",
          "| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword",
          "| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword",
          "| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword",
          "| Token_mapping.Token_definitions_unified.OfParticle -> OfParticle"
        ],
        "start_line": 37,
        "end_line": 46,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_classical.ml"
      },
      {
        "hash": "96af048d8f0756db5cb23338b8d3e777",
        "text": "| Token_mapping.Token_definitions_unified.DivideKeyword -> DivideKeyword\n| Token_mapping.Token_definitions_unified.AddToKeyword -> AddToKeyword\n| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword\n| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword\n| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword\n| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword\n| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword\n| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword\n| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword\n| Token_mapping.Token_definitions_unified.OfParticle -> OfParticle",
        "lines": [
          "| Token_mapping.Token_definitions_unified.DivideKeyword -> DivideKeyword",
          "| Token_mapping.Token_definitions_unified.AddToKeyword -> AddToKeyword",
          "| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword",
          "| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword",
          "| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword",
          "| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword",
          "| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword",
          "| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword",
          "| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword",
          "| Token_mapping.Token_definitions_unified.OfParticle -> OfParticle"
        ],
        "start_line": 44,
        "end_line": 53,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "96af048d8f0756db5cb23338b8d3e777",
        "text": "| Token_mapping.Token_definitions_unified.DivideKeyword -> DivideKeyword\n| Token_mapping.Token_definitions_unified.AddToKeyword -> AddToKeyword\n| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword\n| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword\n| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword\n| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword\n| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword\n| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword\n| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword\n| Token_mapping.Token_definitions_unified.OfParticle -> OfParticle",
        "lines": [
          "| Token_mapping.Token_definitions_unified.DivideKeyword -> DivideKeyword",
          "| Token_mapping.Token_definitions_unified.AddToKeyword -> AddToKeyword",
          "| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword",
          "| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword",
          "| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword",
          "| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword",
          "| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword",
          "| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword",
          "| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword",
          "| Token_mapping.Token_definitions_unified.OfParticle -> OfParticle"
        ],
        "start_line": 149,
        "end_line": 158,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "96af048d8f0756db5cb23338b8d3e777",
        "text": "| Token_mapping.Token_definitions_unified.DivideKeyword -> DivideKeyword\n| Token_mapping.Token_definitions_unified.AddToKeyword -> AddToKeyword\n| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword\n| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword\n| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword\n| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword\n| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword\n| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword\n| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword\n| Token_mapping.Token_definitions_unified.OfParticle -> OfParticle",
        "lines": [
          "| Token_mapping.Token_definitions_unified.DivideKeyword -> DivideKeyword",
          "| Token_mapping.Token_definitions_unified.AddToKeyword -> AddToKeyword",
          "| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword",
          "| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword",
          "| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword",
          "| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword",
          "| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword",
          "| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword",
          "| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword",
          "| Token_mapping.Token_definitions_unified.OfParticle -> OfParticle"
        ],
        "start_line": 72,
        "end_line": 81,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_basic_keywords.ml"
      },
      {
        "hash": "96af048d8f0756db5cb23338b8d3e777",
        "text": "| Token_mapping.Token_definitions_unified.DivideKeyword -> DivideKeyword\n| Token_mapping.Token_definitions_unified.AddToKeyword -> AddToKeyword\n| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword\n| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword\n| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword\n| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword\n| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword\n| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword\n| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword\n| Token_mapping.Token_definitions_unified.OfParticle -> OfParticle",
        "lines": [
          "| Token_mapping.Token_definitions_unified.DivideKeyword -> DivideKeyword",
          "| Token_mapping.Token_definitions_unified.AddToKeyword -> AddToKeyword",
          "| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword",
          "| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword",
          "| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword",
          "| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword",
          "| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword",
          "| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword",
          "| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword",
          "| Token_mapping.Token_definitions_unified.OfParticle -> OfParticle"
        ],
        "start_line": 67,
        "end_line": 76,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_keywords.ml"
      }
    ],
    "4c1e31c60291ff2fc4f856aaad333492": [
      {
        "hash": "4c1e31c60291ff2fc4f856aaad333492",
        "text": "| Token_mapping.Token_definitions_unified.AddToKeyword -> AddToKeyword\n| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword\n| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword\n| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword\n| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword\n| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword\n| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword\n| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword\n| Token_mapping.Token_definitions_unified.OfParticle -> OfParticle\n| Token_mapping.Token_definitions_unified.MinusOneKeyword -> MinusOneKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AddToKeyword -> AddToKeyword",
          "| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword",
          "| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword",
          "| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword",
          "| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword",
          "| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword",
          "| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword",
          "| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword",
          "| Token_mapping.Token_definitions_unified.OfParticle -> OfParticle",
          "| Token_mapping.Token_definitions_unified.MinusOneKeyword -> MinusOneKeyword"
        ],
        "start_line": 129,
        "end_line": 138,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "4c1e31c60291ff2fc4f856aaad333492",
        "text": "| Token_mapping.Token_definitions_unified.AddToKeyword -> AddToKeyword\n| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword\n| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword\n| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword\n| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword\n| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword\n| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword\n| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword\n| Token_mapping.Token_definitions_unified.OfParticle -> OfParticle\n| Token_mapping.Token_definitions_unified.MinusOneKeyword -> MinusOneKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AddToKeyword -> AddToKeyword",
          "| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword",
          "| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword",
          "| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword",
          "| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword",
          "| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword",
          "| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword",
          "| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword",
          "| Token_mapping.Token_definitions_unified.OfParticle -> OfParticle",
          "| Token_mapping.Token_definitions_unified.MinusOneKeyword -> MinusOneKeyword"
        ],
        "start_line": 309,
        "end_line": 318,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "4c1e31c60291ff2fc4f856aaad333492",
        "text": "| Token_mapping.Token_definitions_unified.AddToKeyword -> AddToKeyword\n| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword\n| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword\n| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword\n| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword\n| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword\n| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword\n| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword\n| Token_mapping.Token_definitions_unified.OfParticle -> OfParticle\n| Token_mapping.Token_definitions_unified.MinusOneKeyword -> MinusOneKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AddToKeyword -> AddToKeyword",
          "| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword",
          "| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword",
          "| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword",
          "| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword",
          "| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword",
          "| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword",
          "| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword",
          "| Token_mapping.Token_definitions_unified.OfParticle -> OfParticle",
          "| Token_mapping.Token_definitions_unified.MinusOneKeyword -> MinusOneKeyword"
        ],
        "start_line": 38,
        "end_line": 47,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_classical.ml"
      },
      {
        "hash": "4c1e31c60291ff2fc4f856aaad333492",
        "text": "| Token_mapping.Token_definitions_unified.AddToKeyword -> AddToKeyword\n| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword\n| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword\n| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword\n| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword\n| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword\n| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword\n| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword\n| Token_mapping.Token_definitions_unified.OfParticle -> OfParticle\n| Token_mapping.Token_definitions_unified.MinusOneKeyword -> MinusOneKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AddToKeyword -> AddToKeyword",
          "| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword",
          "| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword",
          "| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword",
          "| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword",
          "| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword",
          "| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword",
          "| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword",
          "| Token_mapping.Token_definitions_unified.OfParticle -> OfParticle",
          "| Token_mapping.Token_definitions_unified.MinusOneKeyword -> MinusOneKeyword"
        ],
        "start_line": 45,
        "end_line": 54,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "4c1e31c60291ff2fc4f856aaad333492",
        "text": "| Token_mapping.Token_definitions_unified.AddToKeyword -> AddToKeyword\n| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword\n| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword\n| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword\n| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword\n| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword\n| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword\n| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword\n| Token_mapping.Token_definitions_unified.OfParticle -> OfParticle\n| Token_mapping.Token_definitions_unified.MinusOneKeyword -> MinusOneKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AddToKeyword -> AddToKeyword",
          "| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword",
          "| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword",
          "| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword",
          "| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword",
          "| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword",
          "| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword",
          "| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword",
          "| Token_mapping.Token_definitions_unified.OfParticle -> OfParticle",
          "| Token_mapping.Token_definitions_unified.MinusOneKeyword -> MinusOneKeyword"
        ],
        "start_line": 150,
        "end_line": 159,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "4c1e31c60291ff2fc4f856aaad333492",
        "text": "| Token_mapping.Token_definitions_unified.AddToKeyword -> AddToKeyword\n| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword\n| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword\n| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword\n| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword\n| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword\n| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword\n| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword\n| Token_mapping.Token_definitions_unified.OfParticle -> OfParticle\n| Token_mapping.Token_definitions_unified.MinusOneKeyword -> MinusOneKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AddToKeyword -> AddToKeyword",
          "| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword",
          "| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword",
          "| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword",
          "| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword",
          "| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword",
          "| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword",
          "| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword",
          "| Token_mapping.Token_definitions_unified.OfParticle -> OfParticle",
          "| Token_mapping.Token_definitions_unified.MinusOneKeyword -> MinusOneKeyword"
        ],
        "start_line": 73,
        "end_line": 82,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_basic_keywords.ml"
      },
      {
        "hash": "4c1e31c60291ff2fc4f856aaad333492",
        "text": "| Token_mapping.Token_definitions_unified.AddToKeyword -> AddToKeyword\n| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword\n| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword\n| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword\n| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword\n| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword\n| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword\n| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword\n| Token_mapping.Token_definitions_unified.OfParticle -> OfParticle\n| Token_mapping.Token_definitions_unified.MinusOneKeyword -> MinusOneKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AddToKeyword -> AddToKeyword",
          "| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword",
          "| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword",
          "| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword",
          "| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword",
          "| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword",
          "| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword",
          "| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword",
          "| Token_mapping.Token_definitions_unified.OfParticle -> OfParticle",
          "| Token_mapping.Token_definitions_unified.MinusOneKeyword -> MinusOneKeyword"
        ],
        "start_line": 68,
        "end_line": 77,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_keywords.ml"
      }
    ],
    "d8d3dc478ac5f4e93b149de008b48c9e": [
      {
        "hash": "d8d3dc478ac5f4e93b149de008b48c9e",
        "text": "| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword\n| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword\n| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword\n| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword\n| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword\n| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword\n| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword\n| Token_mapping.Token_definitions_unified.OfParticle -> OfParticle\n| Token_mapping.Token_definitions_unified.MinusOneKeyword -> MinusOneKeyword\n| Token_mapping.Token_definitions_unified.PlusKeyword -> PlusKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword",
          "| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword",
          "| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword",
          "| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword",
          "| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword",
          "| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword",
          "| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword",
          "| Token_mapping.Token_definitions_unified.OfParticle -> OfParticle",
          "| Token_mapping.Token_definitions_unified.MinusOneKeyword -> MinusOneKeyword",
          "| Token_mapping.Token_definitions_unified.PlusKeyword -> PlusKeyword"
        ],
        "start_line": 130,
        "end_line": 139,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "d8d3dc478ac5f4e93b149de008b48c9e",
        "text": "| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword\n| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword\n| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword\n| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword\n| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword\n| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword\n| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword\n| Token_mapping.Token_definitions_unified.OfParticle -> OfParticle\n| Token_mapping.Token_definitions_unified.MinusOneKeyword -> MinusOneKeyword\n| Token_mapping.Token_definitions_unified.PlusKeyword -> PlusKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword",
          "| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword",
          "| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword",
          "| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword",
          "| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword",
          "| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword",
          "| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword",
          "| Token_mapping.Token_definitions_unified.OfParticle -> OfParticle",
          "| Token_mapping.Token_definitions_unified.MinusOneKeyword -> MinusOneKeyword",
          "| Token_mapping.Token_definitions_unified.PlusKeyword -> PlusKeyword"
        ],
        "start_line": 310,
        "end_line": 319,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "d8d3dc478ac5f4e93b149de008b48c9e",
        "text": "| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword\n| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword\n| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword\n| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword\n| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword\n| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword\n| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword\n| Token_mapping.Token_definitions_unified.OfParticle -> OfParticle\n| Token_mapping.Token_definitions_unified.MinusOneKeyword -> MinusOneKeyword\n| Token_mapping.Token_definitions_unified.PlusKeyword -> PlusKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword",
          "| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword",
          "| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword",
          "| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword",
          "| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword",
          "| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword",
          "| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword",
          "| Token_mapping.Token_definitions_unified.OfParticle -> OfParticle",
          "| Token_mapping.Token_definitions_unified.MinusOneKeyword -> MinusOneKeyword",
          "| Token_mapping.Token_definitions_unified.PlusKeyword -> PlusKeyword"
        ],
        "start_line": 39,
        "end_line": 48,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_classical.ml"
      },
      {
        "hash": "d8d3dc478ac5f4e93b149de008b48c9e",
        "text": "| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword\n| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword\n| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword\n| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword\n| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword\n| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword\n| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword\n| Token_mapping.Token_definitions_unified.OfParticle -> OfParticle\n| Token_mapping.Token_definitions_unified.MinusOneKeyword -> MinusOneKeyword\n| Token_mapping.Token_definitions_unified.PlusKeyword -> PlusKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword",
          "| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword",
          "| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword",
          "| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword",
          "| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword",
          "| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword",
          "| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword",
          "| Token_mapping.Token_definitions_unified.OfParticle -> OfParticle",
          "| Token_mapping.Token_definitions_unified.MinusOneKeyword -> MinusOneKeyword",
          "| Token_mapping.Token_definitions_unified.PlusKeyword -> PlusKeyword"
        ],
        "start_line": 46,
        "end_line": 55,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "d8d3dc478ac5f4e93b149de008b48c9e",
        "text": "| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword\n| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword\n| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword\n| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword\n| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword\n| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword\n| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword\n| Token_mapping.Token_definitions_unified.OfParticle -> OfParticle\n| Token_mapping.Token_definitions_unified.MinusOneKeyword -> MinusOneKeyword\n| Token_mapping.Token_definitions_unified.PlusKeyword -> PlusKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword",
          "| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword",
          "| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword",
          "| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword",
          "| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword",
          "| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword",
          "| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword",
          "| Token_mapping.Token_definitions_unified.OfParticle -> OfParticle",
          "| Token_mapping.Token_definitions_unified.MinusOneKeyword -> MinusOneKeyword",
          "| Token_mapping.Token_definitions_unified.PlusKeyword -> PlusKeyword"
        ],
        "start_line": 151,
        "end_line": 160,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "d8d3dc478ac5f4e93b149de008b48c9e",
        "text": "| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword\n| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword\n| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword\n| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword\n| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword\n| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword\n| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword\n| Token_mapping.Token_definitions_unified.OfParticle -> OfParticle\n| Token_mapping.Token_definitions_unified.MinusOneKeyword -> MinusOneKeyword\n| Token_mapping.Token_definitions_unified.PlusKeyword -> PlusKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword",
          "| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword",
          "| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword",
          "| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword",
          "| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword",
          "| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword",
          "| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword",
          "| Token_mapping.Token_definitions_unified.OfParticle -> OfParticle",
          "| Token_mapping.Token_definitions_unified.MinusOneKeyword -> MinusOneKeyword",
          "| Token_mapping.Token_definitions_unified.PlusKeyword -> PlusKeyword"
        ],
        "start_line": 74,
        "end_line": 83,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_basic_keywords.ml"
      },
      {
        "hash": "d8d3dc478ac5f4e93b149de008b48c9e",
        "text": "| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword\n| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword\n| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword\n| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword\n| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword\n| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword\n| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword\n| Token_mapping.Token_definitions_unified.OfParticle -> OfParticle\n| Token_mapping.Token_definitions_unified.MinusOneKeyword -> MinusOneKeyword\n| Token_mapping.Token_definitions_unified.PlusKeyword -> PlusKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword",
          "| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword",
          "| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword",
          "| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword",
          "| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword",
          "| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword",
          "| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword",
          "| Token_mapping.Token_definitions_unified.OfParticle -> OfParticle",
          "| Token_mapping.Token_definitions_unified.MinusOneKeyword -> MinusOneKeyword",
          "| Token_mapping.Token_definitions_unified.PlusKeyword -> PlusKeyword"
        ],
        "start_line": 69,
        "end_line": 78,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_keywords.ml"
      }
    ],
    "16ccd1489a113849406655567d197c47": [
      {
        "hash": "16ccd1489a113849406655567d197c47",
        "text": "| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword\n| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword\n| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword\n| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword\n| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword\n| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword\n| Token_mapping.Token_definitions_unified.OfParticle -> OfParticle\n| Token_mapping.Token_definitions_unified.MinusOneKeyword -> MinusOneKeyword\n| Token_mapping.Token_definitions_unified.PlusKeyword -> PlusKeyword\n| Token_mapping.Token_definitions_unified.WhereKeyword -> WhereKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword",
          "| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword",
          "| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword",
          "| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword",
          "| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword",
          "| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword",
          "| Token_mapping.Token_definitions_unified.OfParticle -> OfParticle",
          "| Token_mapping.Token_definitions_unified.MinusOneKeyword -> MinusOneKeyword",
          "| Token_mapping.Token_definitions_unified.PlusKeyword -> PlusKeyword",
          "| Token_mapping.Token_definitions_unified.WhereKeyword -> WhereKeyword"
        ],
        "start_line": 131,
        "end_line": 140,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "16ccd1489a113849406655567d197c47",
        "text": "| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword\n| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword\n| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword\n| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword\n| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword\n| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword\n| Token_mapping.Token_definitions_unified.OfParticle -> OfParticle\n| Token_mapping.Token_definitions_unified.MinusOneKeyword -> MinusOneKeyword\n| Token_mapping.Token_definitions_unified.PlusKeyword -> PlusKeyword\n| Token_mapping.Token_definitions_unified.WhereKeyword -> WhereKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword",
          "| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword",
          "| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword",
          "| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword",
          "| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword",
          "| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword",
          "| Token_mapping.Token_definitions_unified.OfParticle -> OfParticle",
          "| Token_mapping.Token_definitions_unified.MinusOneKeyword -> MinusOneKeyword",
          "| Token_mapping.Token_definitions_unified.PlusKeyword -> PlusKeyword",
          "| Token_mapping.Token_definitions_unified.WhereKeyword -> WhereKeyword"
        ],
        "start_line": 311,
        "end_line": 320,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "16ccd1489a113849406655567d197c47",
        "text": "| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword\n| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword\n| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword\n| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword\n| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword\n| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword\n| Token_mapping.Token_definitions_unified.OfParticle -> OfParticle\n| Token_mapping.Token_definitions_unified.MinusOneKeyword -> MinusOneKeyword\n| Token_mapping.Token_definitions_unified.PlusKeyword -> PlusKeyword\n| Token_mapping.Token_definitions_unified.WhereKeyword -> WhereKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword",
          "| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword",
          "| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword",
          "| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword",
          "| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword",
          "| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword",
          "| Token_mapping.Token_definitions_unified.OfParticle -> OfParticle",
          "| Token_mapping.Token_definitions_unified.MinusOneKeyword -> MinusOneKeyword",
          "| Token_mapping.Token_definitions_unified.PlusKeyword -> PlusKeyword",
          "| Token_mapping.Token_definitions_unified.WhereKeyword -> WhereKeyword"
        ],
        "start_line": 40,
        "end_line": 49,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_classical.ml"
      },
      {
        "hash": "16ccd1489a113849406655567d197c47",
        "text": "| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword\n| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword\n| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword\n| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword\n| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword\n| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword\n| Token_mapping.Token_definitions_unified.OfParticle -> OfParticle\n| Token_mapping.Token_definitions_unified.MinusOneKeyword -> MinusOneKeyword\n| Token_mapping.Token_definitions_unified.PlusKeyword -> PlusKeyword\n| Token_mapping.Token_definitions_unified.WhereKeyword -> WhereKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword",
          "| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword",
          "| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword",
          "| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword",
          "| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword",
          "| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword",
          "| Token_mapping.Token_definitions_unified.OfParticle -> OfParticle",
          "| Token_mapping.Token_definitions_unified.MinusOneKeyword -> MinusOneKeyword",
          "| Token_mapping.Token_definitions_unified.PlusKeyword -> PlusKeyword",
          "| Token_mapping.Token_definitions_unified.WhereKeyword -> WhereKeyword"
        ],
        "start_line": 47,
        "end_line": 56,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "16ccd1489a113849406655567d197c47",
        "text": "| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword\n| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword\n| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword\n| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword\n| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword\n| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword\n| Token_mapping.Token_definitions_unified.OfParticle -> OfParticle\n| Token_mapping.Token_definitions_unified.MinusOneKeyword -> MinusOneKeyword\n| Token_mapping.Token_definitions_unified.PlusKeyword -> PlusKeyword\n| Token_mapping.Token_definitions_unified.WhereKeyword -> WhereKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword",
          "| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword",
          "| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword",
          "| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword",
          "| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword",
          "| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword",
          "| Token_mapping.Token_definitions_unified.OfParticle -> OfParticle",
          "| Token_mapping.Token_definitions_unified.MinusOneKeyword -> MinusOneKeyword",
          "| Token_mapping.Token_definitions_unified.PlusKeyword -> PlusKeyword",
          "| Token_mapping.Token_definitions_unified.WhereKeyword -> WhereKeyword"
        ],
        "start_line": 152,
        "end_line": 161,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "16ccd1489a113849406655567d197c47",
        "text": "| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword\n| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword\n| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword\n| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword\n| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword\n| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword\n| Token_mapping.Token_definitions_unified.OfParticle -> OfParticle\n| Token_mapping.Token_definitions_unified.MinusOneKeyword -> MinusOneKeyword\n| Token_mapping.Token_definitions_unified.PlusKeyword -> PlusKeyword\n| Token_mapping.Token_definitions_unified.WhereKeyword -> WhereKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword",
          "| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword",
          "| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword",
          "| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword",
          "| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword",
          "| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword",
          "| Token_mapping.Token_definitions_unified.OfParticle -> OfParticle",
          "| Token_mapping.Token_definitions_unified.MinusOneKeyword -> MinusOneKeyword",
          "| Token_mapping.Token_definitions_unified.PlusKeyword -> PlusKeyword",
          "| Token_mapping.Token_definitions_unified.WhereKeyword -> WhereKeyword"
        ],
        "start_line": 75,
        "end_line": 84,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_basic_keywords.ml"
      },
      {
        "hash": "16ccd1489a113849406655567d197c47",
        "text": "| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword\n| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword\n| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword\n| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword\n| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword\n| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword\n| Token_mapping.Token_definitions_unified.OfParticle -> OfParticle\n| Token_mapping.Token_definitions_unified.MinusOneKeyword -> MinusOneKeyword\n| Token_mapping.Token_definitions_unified.PlusKeyword -> PlusKeyword\n| Token_mapping.Token_definitions_unified.WhereKeyword -> WhereKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword",
          "| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword",
          "| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword",
          "| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword",
          "| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword",
          "| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword",
          "| Token_mapping.Token_definitions_unified.OfParticle -> OfParticle",
          "| Token_mapping.Token_definitions_unified.MinusOneKeyword -> MinusOneKeyword",
          "| Token_mapping.Token_definitions_unified.PlusKeyword -> PlusKeyword",
          "| Token_mapping.Token_definitions_unified.WhereKeyword -> WhereKeyword"
        ],
        "start_line": 70,
        "end_line": 79,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_keywords.ml"
      }
    ],
    "112050f91c6bcaac9fe66028d4f0e092": [
      {
        "hash": "112050f91c6bcaac9fe66028d4f0e092",
        "text": "| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword\n| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword\n| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword\n| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword\n| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword\n| Token_mapping.Token_definitions_unified.OfParticle -> OfParticle\n| Token_mapping.Token_definitions_unified.MinusOneKeyword -> MinusOneKeyword\n| Token_mapping.Token_definitions_unified.PlusKeyword -> PlusKeyword\n| Token_mapping.Token_definitions_unified.WhereKeyword -> WhereKeyword\n| Token_mapping.Token_definitions_unified.SmallKeyword -> SmallKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword",
          "| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword",
          "| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword",
          "| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword",
          "| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword",
          "| Token_mapping.Token_definitions_unified.OfParticle -> OfParticle",
          "| Token_mapping.Token_definitions_unified.MinusOneKeyword -> MinusOneKeyword",
          "| Token_mapping.Token_definitions_unified.PlusKeyword -> PlusKeyword",
          "| Token_mapping.Token_definitions_unified.WhereKeyword -> WhereKeyword",
          "| Token_mapping.Token_definitions_unified.SmallKeyword -> SmallKeyword"
        ],
        "start_line": 132,
        "end_line": 141,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "112050f91c6bcaac9fe66028d4f0e092",
        "text": "| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword\n| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword\n| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword\n| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword\n| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword\n| Token_mapping.Token_definitions_unified.OfParticle -> OfParticle\n| Token_mapping.Token_definitions_unified.MinusOneKeyword -> MinusOneKeyword\n| Token_mapping.Token_definitions_unified.PlusKeyword -> PlusKeyword\n| Token_mapping.Token_definitions_unified.WhereKeyword -> WhereKeyword\n| Token_mapping.Token_definitions_unified.SmallKeyword -> SmallKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword",
          "| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword",
          "| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword",
          "| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword",
          "| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword",
          "| Token_mapping.Token_definitions_unified.OfParticle -> OfParticle",
          "| Token_mapping.Token_definitions_unified.MinusOneKeyword -> MinusOneKeyword",
          "| Token_mapping.Token_definitions_unified.PlusKeyword -> PlusKeyword",
          "| Token_mapping.Token_definitions_unified.WhereKeyword -> WhereKeyword",
          "| Token_mapping.Token_definitions_unified.SmallKeyword -> SmallKeyword"
        ],
        "start_line": 312,
        "end_line": 321,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "112050f91c6bcaac9fe66028d4f0e092",
        "text": "| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword\n| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword\n| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword\n| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword\n| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword\n| Token_mapping.Token_definitions_unified.OfParticle -> OfParticle\n| Token_mapping.Token_definitions_unified.MinusOneKeyword -> MinusOneKeyword\n| Token_mapping.Token_definitions_unified.PlusKeyword -> PlusKeyword\n| Token_mapping.Token_definitions_unified.WhereKeyword -> WhereKeyword\n| Token_mapping.Token_definitions_unified.SmallKeyword -> SmallKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword",
          "| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword",
          "| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword",
          "| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword",
          "| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword",
          "| Token_mapping.Token_definitions_unified.OfParticle -> OfParticle",
          "| Token_mapping.Token_definitions_unified.MinusOneKeyword -> MinusOneKeyword",
          "| Token_mapping.Token_definitions_unified.PlusKeyword -> PlusKeyword",
          "| Token_mapping.Token_definitions_unified.WhereKeyword -> WhereKeyword",
          "| Token_mapping.Token_definitions_unified.SmallKeyword -> SmallKeyword"
        ],
        "start_line": 41,
        "end_line": 50,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_classical.ml"
      },
      {
        "hash": "112050f91c6bcaac9fe66028d4f0e092",
        "text": "| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword\n| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword\n| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword\n| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword\n| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword\n| Token_mapping.Token_definitions_unified.OfParticle -> OfParticle\n| Token_mapping.Token_definitions_unified.MinusOneKeyword -> MinusOneKeyword\n| Token_mapping.Token_definitions_unified.PlusKeyword -> PlusKeyword\n| Token_mapping.Token_definitions_unified.WhereKeyword -> WhereKeyword\n| Token_mapping.Token_definitions_unified.SmallKeyword -> SmallKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword",
          "| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword",
          "| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword",
          "| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword",
          "| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword",
          "| Token_mapping.Token_definitions_unified.OfParticle -> OfParticle",
          "| Token_mapping.Token_definitions_unified.MinusOneKeyword -> MinusOneKeyword",
          "| Token_mapping.Token_definitions_unified.PlusKeyword -> PlusKeyword",
          "| Token_mapping.Token_definitions_unified.WhereKeyword -> WhereKeyword",
          "| Token_mapping.Token_definitions_unified.SmallKeyword -> SmallKeyword"
        ],
        "start_line": 48,
        "end_line": 57,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "112050f91c6bcaac9fe66028d4f0e092",
        "text": "| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword\n| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword\n| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword\n| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword\n| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword\n| Token_mapping.Token_definitions_unified.OfParticle -> OfParticle\n| Token_mapping.Token_definitions_unified.MinusOneKeyword -> MinusOneKeyword\n| Token_mapping.Token_definitions_unified.PlusKeyword -> PlusKeyword\n| Token_mapping.Token_definitions_unified.WhereKeyword -> WhereKeyword\n| Token_mapping.Token_definitions_unified.SmallKeyword -> SmallKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword",
          "| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword",
          "| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword",
          "| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword",
          "| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword",
          "| Token_mapping.Token_definitions_unified.OfParticle -> OfParticle",
          "| Token_mapping.Token_definitions_unified.MinusOneKeyword -> MinusOneKeyword",
          "| Token_mapping.Token_definitions_unified.PlusKeyword -> PlusKeyword",
          "| Token_mapping.Token_definitions_unified.WhereKeyword -> WhereKeyword",
          "| Token_mapping.Token_definitions_unified.SmallKeyword -> SmallKeyword"
        ],
        "start_line": 153,
        "end_line": 162,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "112050f91c6bcaac9fe66028d4f0e092",
        "text": "| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword\n| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword\n| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword\n| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword\n| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword\n| Token_mapping.Token_definitions_unified.OfParticle -> OfParticle\n| Token_mapping.Token_definitions_unified.MinusOneKeyword -> MinusOneKeyword\n| Token_mapping.Token_definitions_unified.PlusKeyword -> PlusKeyword\n| Token_mapping.Token_definitions_unified.WhereKeyword -> WhereKeyword\n| Token_mapping.Token_definitions_unified.SmallKeyword -> SmallKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword",
          "| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword",
          "| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword",
          "| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword",
          "| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword",
          "| Token_mapping.Token_definitions_unified.OfParticle -> OfParticle",
          "| Token_mapping.Token_definitions_unified.MinusOneKeyword -> MinusOneKeyword",
          "| Token_mapping.Token_definitions_unified.PlusKeyword -> PlusKeyword",
          "| Token_mapping.Token_definitions_unified.WhereKeyword -> WhereKeyword",
          "| Token_mapping.Token_definitions_unified.SmallKeyword -> SmallKeyword"
        ],
        "start_line": 76,
        "end_line": 85,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_basic_keywords.ml"
      },
      {
        "hash": "112050f91c6bcaac9fe66028d4f0e092",
        "text": "| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword\n| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword\n| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword\n| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword\n| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword\n| Token_mapping.Token_definitions_unified.OfParticle -> OfParticle\n| Token_mapping.Token_definitions_unified.MinusOneKeyword -> MinusOneKeyword\n| Token_mapping.Token_definitions_unified.PlusKeyword -> PlusKeyword\n| Token_mapping.Token_definitions_unified.WhereKeyword -> WhereKeyword\n| Token_mapping.Token_definitions_unified.SmallKeyword -> SmallKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.LessThanEqualToKeyword -> LessThanEqualToKeyword",
          "| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword",
          "| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword",
          "| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword",
          "| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword",
          "| Token_mapping.Token_definitions_unified.OfParticle -> OfParticle",
          "| Token_mapping.Token_definitions_unified.MinusOneKeyword -> MinusOneKeyword",
          "| Token_mapping.Token_definitions_unified.PlusKeyword -> PlusKeyword",
          "| Token_mapping.Token_definitions_unified.WhereKeyword -> WhereKeyword",
          "| Token_mapping.Token_definitions_unified.SmallKeyword -> SmallKeyword"
        ],
        "start_line": 71,
        "end_line": 80,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_keywords.ml"
      }
    ],
    "81a34eb2eee43a4d94757c85453808de": [
      {
        "hash": "81a34eb2eee43a4d94757c85453808de",
        "text": "| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword\n| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword\n| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword\n| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword\n| Token_mapping.Token_definitions_unified.OfParticle -> OfParticle\n| Token_mapping.Token_definitions_unified.MinusOneKeyword -> MinusOneKeyword\n| Token_mapping.Token_definitions_unified.PlusKeyword -> PlusKeyword\n| Token_mapping.Token_definitions_unified.WhereKeyword -> WhereKeyword\n| Token_mapping.Token_definitions_unified.SmallKeyword -> SmallKeyword\n| Token_mapping.Token_definitions_unified.ShouldGetKeyword -> ShouldGetKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword",
          "| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword",
          "| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword",
          "| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword",
          "| Token_mapping.Token_definitions_unified.OfParticle -> OfParticle",
          "| Token_mapping.Token_definitions_unified.MinusOneKeyword -> MinusOneKeyword",
          "| Token_mapping.Token_definitions_unified.PlusKeyword -> PlusKeyword",
          "| Token_mapping.Token_definitions_unified.WhereKeyword -> WhereKeyword",
          "| Token_mapping.Token_definitions_unified.SmallKeyword -> SmallKeyword",
          "| Token_mapping.Token_definitions_unified.ShouldGetKeyword -> ShouldGetKeyword"
        ],
        "start_line": 133,
        "end_line": 142,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "81a34eb2eee43a4d94757c85453808de",
        "text": "| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword\n| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword\n| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword\n| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword\n| Token_mapping.Token_definitions_unified.OfParticle -> OfParticle\n| Token_mapping.Token_definitions_unified.MinusOneKeyword -> MinusOneKeyword\n| Token_mapping.Token_definitions_unified.PlusKeyword -> PlusKeyword\n| Token_mapping.Token_definitions_unified.WhereKeyword -> WhereKeyword\n| Token_mapping.Token_definitions_unified.SmallKeyword -> SmallKeyword\n| Token_mapping.Token_definitions_unified.ShouldGetKeyword -> ShouldGetKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword",
          "| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword",
          "| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword",
          "| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword",
          "| Token_mapping.Token_definitions_unified.OfParticle -> OfParticle",
          "| Token_mapping.Token_definitions_unified.MinusOneKeyword -> MinusOneKeyword",
          "| Token_mapping.Token_definitions_unified.PlusKeyword -> PlusKeyword",
          "| Token_mapping.Token_definitions_unified.WhereKeyword -> WhereKeyword",
          "| Token_mapping.Token_definitions_unified.SmallKeyword -> SmallKeyword",
          "| Token_mapping.Token_definitions_unified.ShouldGetKeyword -> ShouldGetKeyword"
        ],
        "start_line": 313,
        "end_line": 322,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "81a34eb2eee43a4d94757c85453808de",
        "text": "| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword\n| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword\n| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword\n| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword\n| Token_mapping.Token_definitions_unified.OfParticle -> OfParticle\n| Token_mapping.Token_definitions_unified.MinusOneKeyword -> MinusOneKeyword\n| Token_mapping.Token_definitions_unified.PlusKeyword -> PlusKeyword\n| Token_mapping.Token_definitions_unified.WhereKeyword -> WhereKeyword\n| Token_mapping.Token_definitions_unified.SmallKeyword -> SmallKeyword\n| Token_mapping.Token_definitions_unified.ShouldGetKeyword -> ShouldGetKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword",
          "| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword",
          "| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword",
          "| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword",
          "| Token_mapping.Token_definitions_unified.OfParticle -> OfParticle",
          "| Token_mapping.Token_definitions_unified.MinusOneKeyword -> MinusOneKeyword",
          "| Token_mapping.Token_definitions_unified.PlusKeyword -> PlusKeyword",
          "| Token_mapping.Token_definitions_unified.WhereKeyword -> WhereKeyword",
          "| Token_mapping.Token_definitions_unified.SmallKeyword -> SmallKeyword",
          "| Token_mapping.Token_definitions_unified.ShouldGetKeyword -> ShouldGetKeyword"
        ],
        "start_line": 42,
        "end_line": 51,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_classical.ml"
      },
      {
        "hash": "81a34eb2eee43a4d94757c85453808de",
        "text": "| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword\n| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword\n| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword\n| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword\n| Token_mapping.Token_definitions_unified.OfParticle -> OfParticle\n| Token_mapping.Token_definitions_unified.MinusOneKeyword -> MinusOneKeyword\n| Token_mapping.Token_definitions_unified.PlusKeyword -> PlusKeyword\n| Token_mapping.Token_definitions_unified.WhereKeyword -> WhereKeyword\n| Token_mapping.Token_definitions_unified.SmallKeyword -> SmallKeyword\n| Token_mapping.Token_definitions_unified.ShouldGetKeyword -> ShouldGetKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword",
          "| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword",
          "| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword",
          "| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword",
          "| Token_mapping.Token_definitions_unified.OfParticle -> OfParticle",
          "| Token_mapping.Token_definitions_unified.MinusOneKeyword -> MinusOneKeyword",
          "| Token_mapping.Token_definitions_unified.PlusKeyword -> PlusKeyword",
          "| Token_mapping.Token_definitions_unified.WhereKeyword -> WhereKeyword",
          "| Token_mapping.Token_definitions_unified.SmallKeyword -> SmallKeyword",
          "| Token_mapping.Token_definitions_unified.ShouldGetKeyword -> ShouldGetKeyword"
        ],
        "start_line": 49,
        "end_line": 58,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "81a34eb2eee43a4d94757c85453808de",
        "text": "| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword\n| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword\n| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword\n| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword\n| Token_mapping.Token_definitions_unified.OfParticle -> OfParticle\n| Token_mapping.Token_definitions_unified.MinusOneKeyword -> MinusOneKeyword\n| Token_mapping.Token_definitions_unified.PlusKeyword -> PlusKeyword\n| Token_mapping.Token_definitions_unified.WhereKeyword -> WhereKeyword\n| Token_mapping.Token_definitions_unified.SmallKeyword -> SmallKeyword\n| Token_mapping.Token_definitions_unified.ShouldGetKeyword -> ShouldGetKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword",
          "| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword",
          "| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword",
          "| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword",
          "| Token_mapping.Token_definitions_unified.OfParticle -> OfParticle",
          "| Token_mapping.Token_definitions_unified.MinusOneKeyword -> MinusOneKeyword",
          "| Token_mapping.Token_definitions_unified.PlusKeyword -> PlusKeyword",
          "| Token_mapping.Token_definitions_unified.WhereKeyword -> WhereKeyword",
          "| Token_mapping.Token_definitions_unified.SmallKeyword -> SmallKeyword",
          "| Token_mapping.Token_definitions_unified.ShouldGetKeyword -> ShouldGetKeyword"
        ],
        "start_line": 154,
        "end_line": 163,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "81a34eb2eee43a4d94757c85453808de",
        "text": "| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword\n| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword\n| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword\n| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword\n| Token_mapping.Token_definitions_unified.OfParticle -> OfParticle\n| Token_mapping.Token_definitions_unified.MinusOneKeyword -> MinusOneKeyword\n| Token_mapping.Token_definitions_unified.PlusKeyword -> PlusKeyword\n| Token_mapping.Token_definitions_unified.WhereKeyword -> WhereKeyword\n| Token_mapping.Token_definitions_unified.SmallKeyword -> SmallKeyword\n| Token_mapping.Token_definitions_unified.ShouldGetKeyword -> ShouldGetKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword",
          "| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword",
          "| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword",
          "| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword",
          "| Token_mapping.Token_definitions_unified.OfParticle -> OfParticle",
          "| Token_mapping.Token_definitions_unified.MinusOneKeyword -> MinusOneKeyword",
          "| Token_mapping.Token_definitions_unified.PlusKeyword -> PlusKeyword",
          "| Token_mapping.Token_definitions_unified.WhereKeyword -> WhereKeyword",
          "| Token_mapping.Token_definitions_unified.SmallKeyword -> SmallKeyword",
          "| Token_mapping.Token_definitions_unified.ShouldGetKeyword -> ShouldGetKeyword"
        ],
        "start_line": 77,
        "end_line": 86,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_basic_keywords.ml"
      },
      {
        "hash": "81a34eb2eee43a4d94757c85453808de",
        "text": "| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword\n| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword\n| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword\n| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword\n| Token_mapping.Token_definitions_unified.OfParticle -> OfParticle\n| Token_mapping.Token_definitions_unified.MinusOneKeyword -> MinusOneKeyword\n| Token_mapping.Token_definitions_unified.PlusKeyword -> PlusKeyword\n| Token_mapping.Token_definitions_unified.WhereKeyword -> WhereKeyword\n| Token_mapping.Token_definitions_unified.SmallKeyword -> SmallKeyword\n| Token_mapping.Token_definitions_unified.ShouldGetKeyword -> ShouldGetKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.FirstElementKeyword -> FirstElementKeyword",
          "| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword",
          "| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword",
          "| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword",
          "| Token_mapping.Token_definitions_unified.OfParticle -> OfParticle",
          "| Token_mapping.Token_definitions_unified.MinusOneKeyword -> MinusOneKeyword",
          "| Token_mapping.Token_definitions_unified.PlusKeyword -> PlusKeyword",
          "| Token_mapping.Token_definitions_unified.WhereKeyword -> WhereKeyword",
          "| Token_mapping.Token_definitions_unified.SmallKeyword -> SmallKeyword",
          "| Token_mapping.Token_definitions_unified.ShouldGetKeyword -> ShouldGetKeyword"
        ],
        "start_line": 72,
        "end_line": 81,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_keywords.ml"
      }
    ],
    "7077701c7d6cd07b26a497fcaab534f8": [
      {
        "hash": "7077701c7d6cd07b26a497fcaab534f8",
        "text": "let convert_wenyan_keywords = function\n| Token_mapping.Token_definitions_unified.HaveKeyword -> HaveKeyword\n| Token_mapping.Token_definitions_unified.OneKeyword -> OneKeyword\n| Token_mapping.Token_definitions_unified.NameKeyword -> NameKeyword\n| Token_mapping.Token_definitions_unified.SetKeyword -> SetKeyword\n| Token_mapping.Token_definitions_unified.AlsoKeyword -> AlsoKeyword\n| Token_mapping.Token_definitions_unified.ThenGetKeyword -> ThenGetKeyword\n| Token_mapping.Token_definitions_unified.CallKeyword -> CallKeyword\n| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword\n| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword",
        "lines": [
          "let convert_wenyan_keywords = function",
          "| Token_mapping.Token_definitions_unified.HaveKeyword -> HaveKeyword",
          "| Token_mapping.Token_definitions_unified.OneKeyword -> OneKeyword",
          "| Token_mapping.Token_definitions_unified.NameKeyword -> NameKeyword",
          "| Token_mapping.Token_definitions_unified.SetKeyword -> SetKeyword",
          "| Token_mapping.Token_definitions_unified.AlsoKeyword -> AlsoKeyword",
          "| Token_mapping.Token_definitions_unified.ThenGetKeyword -> ThenGetKeyword",
          "| Token_mapping.Token_definitions_unified.CallKeyword -> CallKeyword",
          "| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword",
          "| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword"
        ],
        "start_line": 148,
        "end_line": 157,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "7077701c7d6cd07b26a497fcaab534f8",
        "text": "let convert_wenyan_keywords = function\n| Token_mapping.Token_definitions_unified.HaveKeyword -> HaveKeyword\n| Token_mapping.Token_definitions_unified.OneKeyword -> OneKeyword\n| Token_mapping.Token_definitions_unified.NameKeyword -> NameKeyword\n| Token_mapping.Token_definitions_unified.SetKeyword -> SetKeyword\n| Token_mapping.Token_definitions_unified.AlsoKeyword -> AlsoKeyword\n| Token_mapping.Token_definitions_unified.ThenGetKeyword -> ThenGetKeyword\n| Token_mapping.Token_definitions_unified.CallKeyword -> CallKeyword\n| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword\n| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword",
        "lines": [
          "let convert_wenyan_keywords = function",
          "| Token_mapping.Token_definitions_unified.HaveKeyword -> HaveKeyword",
          "| Token_mapping.Token_definitions_unified.OneKeyword -> OneKeyword",
          "| Token_mapping.Token_definitions_unified.NameKeyword -> NameKeyword",
          "| Token_mapping.Token_definitions_unified.SetKeyword -> SetKeyword",
          "| Token_mapping.Token_definitions_unified.AlsoKeyword -> AlsoKeyword",
          "| Token_mapping.Token_definitions_unified.ThenGetKeyword -> ThenGetKeyword",
          "| Token_mapping.Token_definitions_unified.CallKeyword -> CallKeyword",
          "| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword",
          "| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword"
        ],
        "start_line": 90,
        "end_line": 99,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_basic_keywords.ml"
      }
    ],
    "61319edaad5731b3168f97196133a2f4": [
      {
        "hash": "61319edaad5731b3168f97196133a2f4",
        "text": "| Token_mapping.Token_definitions_unified.HaveKeyword -> HaveKeyword\n| Token_mapping.Token_definitions_unified.OneKeyword -> OneKeyword\n| Token_mapping.Token_definitions_unified.NameKeyword -> NameKeyword\n| Token_mapping.Token_definitions_unified.SetKeyword -> SetKeyword\n| Token_mapping.Token_definitions_unified.AlsoKeyword -> AlsoKeyword\n| Token_mapping.Token_definitions_unified.ThenGetKeyword -> ThenGetKeyword\n| Token_mapping.Token_definitions_unified.CallKeyword -> CallKeyword\n| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword\n| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword\n| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.HaveKeyword -> HaveKeyword",
          "| Token_mapping.Token_definitions_unified.OneKeyword -> OneKeyword",
          "| Token_mapping.Token_definitions_unified.NameKeyword -> NameKeyword",
          "| Token_mapping.Token_definitions_unified.SetKeyword -> SetKeyword",
          "| Token_mapping.Token_definitions_unified.AlsoKeyword -> AlsoKeyword",
          "| Token_mapping.Token_definitions_unified.ThenGetKeyword -> ThenGetKeyword",
          "| Token_mapping.Token_definitions_unified.CallKeyword -> CallKeyword",
          "| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword",
          "| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword",
          "| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword"
        ],
        "start_line": 149,
        "end_line": 158,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "61319edaad5731b3168f97196133a2f4",
        "text": "| Token_mapping.Token_definitions_unified.HaveKeyword -> HaveKeyword\n| Token_mapping.Token_definitions_unified.OneKeyword -> OneKeyword\n| Token_mapping.Token_definitions_unified.NameKeyword -> NameKeyword\n| Token_mapping.Token_definitions_unified.SetKeyword -> SetKeyword\n| Token_mapping.Token_definitions_unified.AlsoKeyword -> AlsoKeyword\n| Token_mapping.Token_definitions_unified.ThenGetKeyword -> ThenGetKeyword\n| Token_mapping.Token_definitions_unified.CallKeyword -> CallKeyword\n| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword\n| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword\n| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.HaveKeyword -> HaveKeyword",
          "| Token_mapping.Token_definitions_unified.OneKeyword -> OneKeyword",
          "| Token_mapping.Token_definitions_unified.NameKeyword -> NameKeyword",
          "| Token_mapping.Token_definitions_unified.SetKeyword -> SetKeyword",
          "| Token_mapping.Token_definitions_unified.AlsoKeyword -> AlsoKeyword",
          "| Token_mapping.Token_definitions_unified.ThenGetKeyword -> ThenGetKeyword",
          "| Token_mapping.Token_definitions_unified.CallKeyword -> CallKeyword",
          "| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword",
          "| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword",
          "| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword"
        ],
        "start_line": 278,
        "end_line": 287,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "61319edaad5731b3168f97196133a2f4",
        "text": "| Token_mapping.Token_definitions_unified.HaveKeyword -> HaveKeyword\n| Token_mapping.Token_definitions_unified.OneKeyword -> OneKeyword\n| Token_mapping.Token_definitions_unified.NameKeyword -> NameKeyword\n| Token_mapping.Token_definitions_unified.SetKeyword -> SetKeyword\n| Token_mapping.Token_definitions_unified.AlsoKeyword -> AlsoKeyword\n| Token_mapping.Token_definitions_unified.ThenGetKeyword -> ThenGetKeyword\n| Token_mapping.Token_definitions_unified.CallKeyword -> CallKeyword\n| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword\n| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword\n| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.HaveKeyword -> HaveKeyword",
          "| Token_mapping.Token_definitions_unified.OneKeyword -> OneKeyword",
          "| Token_mapping.Token_definitions_unified.NameKeyword -> NameKeyword",
          "| Token_mapping.Token_definitions_unified.SetKeyword -> SetKeyword",
          "| Token_mapping.Token_definitions_unified.AlsoKeyword -> AlsoKeyword",
          "| Token_mapping.Token_definitions_unified.ThenGetKeyword -> ThenGetKeyword",
          "| Token_mapping.Token_definitions_unified.CallKeyword -> CallKeyword",
          "| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword",
          "| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword",
          "| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword"
        ],
        "start_line": 7,
        "end_line": 16,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_classical.ml"
      },
      {
        "hash": "61319edaad5731b3168f97196133a2f4",
        "text": "| Token_mapping.Token_definitions_unified.HaveKeyword -> HaveKeyword\n| Token_mapping.Token_definitions_unified.OneKeyword -> OneKeyword\n| Token_mapping.Token_definitions_unified.NameKeyword -> NameKeyword\n| Token_mapping.Token_definitions_unified.SetKeyword -> SetKeyword\n| Token_mapping.Token_definitions_unified.AlsoKeyword -> AlsoKeyword\n| Token_mapping.Token_definitions_unified.ThenGetKeyword -> ThenGetKeyword\n| Token_mapping.Token_definitions_unified.CallKeyword -> CallKeyword\n| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword\n| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword\n| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.HaveKeyword -> HaveKeyword",
          "| Token_mapping.Token_definitions_unified.OneKeyword -> OneKeyword",
          "| Token_mapping.Token_definitions_unified.NameKeyword -> NameKeyword",
          "| Token_mapping.Token_definitions_unified.SetKeyword -> SetKeyword",
          "| Token_mapping.Token_definitions_unified.AlsoKeyword -> AlsoKeyword",
          "| Token_mapping.Token_definitions_unified.ThenGetKeyword -> ThenGetKeyword",
          "| Token_mapping.Token_definitions_unified.CallKeyword -> CallKeyword",
          "| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword",
          "| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword",
          "| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword"
        ],
        "start_line": 18,
        "end_line": 27,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "61319edaad5731b3168f97196133a2f4",
        "text": "| Token_mapping.Token_definitions_unified.HaveKeyword -> HaveKeyword\n| Token_mapping.Token_definitions_unified.OneKeyword -> OneKeyword\n| Token_mapping.Token_definitions_unified.NameKeyword -> NameKeyword\n| Token_mapping.Token_definitions_unified.SetKeyword -> SetKeyword\n| Token_mapping.Token_definitions_unified.AlsoKeyword -> AlsoKeyword\n| Token_mapping.Token_definitions_unified.ThenGetKeyword -> ThenGetKeyword\n| Token_mapping.Token_definitions_unified.CallKeyword -> CallKeyword\n| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword\n| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword\n| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.HaveKeyword -> HaveKeyword",
          "| Token_mapping.Token_definitions_unified.OneKeyword -> OneKeyword",
          "| Token_mapping.Token_definitions_unified.NameKeyword -> NameKeyword",
          "| Token_mapping.Token_definitions_unified.SetKeyword -> SetKeyword",
          "| Token_mapping.Token_definitions_unified.AlsoKeyword -> AlsoKeyword",
          "| Token_mapping.Token_definitions_unified.ThenGetKeyword -> ThenGetKeyword",
          "| Token_mapping.Token_definitions_unified.CallKeyword -> CallKeyword",
          "| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword",
          "| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword",
          "| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword"
        ],
        "start_line": 120,
        "end_line": 129,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "61319edaad5731b3168f97196133a2f4",
        "text": "| Token_mapping.Token_definitions_unified.HaveKeyword -> HaveKeyword\n| Token_mapping.Token_definitions_unified.OneKeyword -> OneKeyword\n| Token_mapping.Token_definitions_unified.NameKeyword -> NameKeyword\n| Token_mapping.Token_definitions_unified.SetKeyword -> SetKeyword\n| Token_mapping.Token_definitions_unified.AlsoKeyword -> AlsoKeyword\n| Token_mapping.Token_definitions_unified.ThenGetKeyword -> ThenGetKeyword\n| Token_mapping.Token_definitions_unified.CallKeyword -> CallKeyword\n| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword\n| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword\n| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.HaveKeyword -> HaveKeyword",
          "| Token_mapping.Token_definitions_unified.OneKeyword -> OneKeyword",
          "| Token_mapping.Token_definitions_unified.NameKeyword -> NameKeyword",
          "| Token_mapping.Token_definitions_unified.SetKeyword -> SetKeyword",
          "| Token_mapping.Token_definitions_unified.AlsoKeyword -> AlsoKeyword",
          "| Token_mapping.Token_definitions_unified.ThenGetKeyword -> ThenGetKeyword",
          "| Token_mapping.Token_definitions_unified.CallKeyword -> CallKeyword",
          "| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword",
          "| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword",
          "| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword"
        ],
        "start_line": 91,
        "end_line": 100,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_basic_keywords.ml"
      },
      {
        "hash": "61319edaad5731b3168f97196133a2f4",
        "text": "| Token_mapping.Token_definitions_unified.HaveKeyword -> HaveKeyword\n| Token_mapping.Token_definitions_unified.OneKeyword -> OneKeyword\n| Token_mapping.Token_definitions_unified.NameKeyword -> NameKeyword\n| Token_mapping.Token_definitions_unified.SetKeyword -> SetKeyword\n| Token_mapping.Token_definitions_unified.AlsoKeyword -> AlsoKeyword\n| Token_mapping.Token_definitions_unified.ThenGetKeyword -> ThenGetKeyword\n| Token_mapping.Token_definitions_unified.CallKeyword -> CallKeyword\n| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword\n| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword\n| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.HaveKeyword -> HaveKeyword",
          "| Token_mapping.Token_definitions_unified.OneKeyword -> OneKeyword",
          "| Token_mapping.Token_definitions_unified.NameKeyword -> NameKeyword",
          "| Token_mapping.Token_definitions_unified.SetKeyword -> SetKeyword",
          "| Token_mapping.Token_definitions_unified.AlsoKeyword -> AlsoKeyword",
          "| Token_mapping.Token_definitions_unified.ThenGetKeyword -> ThenGetKeyword",
          "| Token_mapping.Token_definitions_unified.CallKeyword -> CallKeyword",
          "| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword",
          "| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword",
          "| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword"
        ],
        "start_line": 84,
        "end_line": 93,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_keywords.ml"
      }
    ],
    "e28eb2e232dcbc6e58592c5fba43af49": [
      {
        "hash": "e28eb2e232dcbc6e58592c5fba43af49",
        "text": "| Token_mapping.Token_definitions_unified.OneKeyword -> OneKeyword\n| Token_mapping.Token_definitions_unified.NameKeyword -> NameKeyword\n| Token_mapping.Token_definitions_unified.SetKeyword -> SetKeyword\n| Token_mapping.Token_definitions_unified.AlsoKeyword -> AlsoKeyword\n| Token_mapping.Token_definitions_unified.ThenGetKeyword -> ThenGetKeyword\n| Token_mapping.Token_definitions_unified.CallKeyword -> CallKeyword\n| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword\n| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword\n| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword\n| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.OneKeyword -> OneKeyword",
          "| Token_mapping.Token_definitions_unified.NameKeyword -> NameKeyword",
          "| Token_mapping.Token_definitions_unified.SetKeyword -> SetKeyword",
          "| Token_mapping.Token_definitions_unified.AlsoKeyword -> AlsoKeyword",
          "| Token_mapping.Token_definitions_unified.ThenGetKeyword -> ThenGetKeyword",
          "| Token_mapping.Token_definitions_unified.CallKeyword -> CallKeyword",
          "| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword",
          "| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword",
          "| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword",
          "| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword"
        ],
        "start_line": 150,
        "end_line": 159,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "e28eb2e232dcbc6e58592c5fba43af49",
        "text": "| Token_mapping.Token_definitions_unified.OneKeyword -> OneKeyword\n| Token_mapping.Token_definitions_unified.NameKeyword -> NameKeyword\n| Token_mapping.Token_definitions_unified.SetKeyword -> SetKeyword\n| Token_mapping.Token_definitions_unified.AlsoKeyword -> AlsoKeyword\n| Token_mapping.Token_definitions_unified.ThenGetKeyword -> ThenGetKeyword\n| Token_mapping.Token_definitions_unified.CallKeyword -> CallKeyword\n| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword\n| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword\n| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword\n| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.OneKeyword -> OneKeyword",
          "| Token_mapping.Token_definitions_unified.NameKeyword -> NameKeyword",
          "| Token_mapping.Token_definitions_unified.SetKeyword -> SetKeyword",
          "| Token_mapping.Token_definitions_unified.AlsoKeyword -> AlsoKeyword",
          "| Token_mapping.Token_definitions_unified.ThenGetKeyword -> ThenGetKeyword",
          "| Token_mapping.Token_definitions_unified.CallKeyword -> CallKeyword",
          "| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword",
          "| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword",
          "| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword",
          "| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword"
        ],
        "start_line": 279,
        "end_line": 288,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "e28eb2e232dcbc6e58592c5fba43af49",
        "text": "| Token_mapping.Token_definitions_unified.OneKeyword -> OneKeyword\n| Token_mapping.Token_definitions_unified.NameKeyword -> NameKeyword\n| Token_mapping.Token_definitions_unified.SetKeyword -> SetKeyword\n| Token_mapping.Token_definitions_unified.AlsoKeyword -> AlsoKeyword\n| Token_mapping.Token_definitions_unified.ThenGetKeyword -> ThenGetKeyword\n| Token_mapping.Token_definitions_unified.CallKeyword -> CallKeyword\n| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword\n| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword\n| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword\n| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.OneKeyword -> OneKeyword",
          "| Token_mapping.Token_definitions_unified.NameKeyword -> NameKeyword",
          "| Token_mapping.Token_definitions_unified.SetKeyword -> SetKeyword",
          "| Token_mapping.Token_definitions_unified.AlsoKeyword -> AlsoKeyword",
          "| Token_mapping.Token_definitions_unified.ThenGetKeyword -> ThenGetKeyword",
          "| Token_mapping.Token_definitions_unified.CallKeyword -> CallKeyword",
          "| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword",
          "| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword",
          "| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword",
          "| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword"
        ],
        "start_line": 8,
        "end_line": 17,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_classical.ml"
      },
      {
        "hash": "e28eb2e232dcbc6e58592c5fba43af49",
        "text": "| Token_mapping.Token_definitions_unified.OneKeyword -> OneKeyword\n| Token_mapping.Token_definitions_unified.NameKeyword -> NameKeyword\n| Token_mapping.Token_definitions_unified.SetKeyword -> SetKeyword\n| Token_mapping.Token_definitions_unified.AlsoKeyword -> AlsoKeyword\n| Token_mapping.Token_definitions_unified.ThenGetKeyword -> ThenGetKeyword\n| Token_mapping.Token_definitions_unified.CallKeyword -> CallKeyword\n| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword\n| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword\n| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword\n| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.OneKeyword -> OneKeyword",
          "| Token_mapping.Token_definitions_unified.NameKeyword -> NameKeyword",
          "| Token_mapping.Token_definitions_unified.SetKeyword -> SetKeyword",
          "| Token_mapping.Token_definitions_unified.AlsoKeyword -> AlsoKeyword",
          "| Token_mapping.Token_definitions_unified.ThenGetKeyword -> ThenGetKeyword",
          "| Token_mapping.Token_definitions_unified.CallKeyword -> CallKeyword",
          "| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword",
          "| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword",
          "| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword",
          "| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword"
        ],
        "start_line": 19,
        "end_line": 28,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "e28eb2e232dcbc6e58592c5fba43af49",
        "text": "| Token_mapping.Token_definitions_unified.OneKeyword -> OneKeyword\n| Token_mapping.Token_definitions_unified.NameKeyword -> NameKeyword\n| Token_mapping.Token_definitions_unified.SetKeyword -> SetKeyword\n| Token_mapping.Token_definitions_unified.AlsoKeyword -> AlsoKeyword\n| Token_mapping.Token_definitions_unified.ThenGetKeyword -> ThenGetKeyword\n| Token_mapping.Token_definitions_unified.CallKeyword -> CallKeyword\n| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword\n| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword\n| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword\n| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.OneKeyword -> OneKeyword",
          "| Token_mapping.Token_definitions_unified.NameKeyword -> NameKeyword",
          "| Token_mapping.Token_definitions_unified.SetKeyword -> SetKeyword",
          "| Token_mapping.Token_definitions_unified.AlsoKeyword -> AlsoKeyword",
          "| Token_mapping.Token_definitions_unified.ThenGetKeyword -> ThenGetKeyword",
          "| Token_mapping.Token_definitions_unified.CallKeyword -> CallKeyword",
          "| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword",
          "| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword",
          "| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword",
          "| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword"
        ],
        "start_line": 121,
        "end_line": 130,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "e28eb2e232dcbc6e58592c5fba43af49",
        "text": "| Token_mapping.Token_definitions_unified.OneKeyword -> OneKeyword\n| Token_mapping.Token_definitions_unified.NameKeyword -> NameKeyword\n| Token_mapping.Token_definitions_unified.SetKeyword -> SetKeyword\n| Token_mapping.Token_definitions_unified.AlsoKeyword -> AlsoKeyword\n| Token_mapping.Token_definitions_unified.ThenGetKeyword -> ThenGetKeyword\n| Token_mapping.Token_definitions_unified.CallKeyword -> CallKeyword\n| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword\n| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword\n| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword\n| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.OneKeyword -> OneKeyword",
          "| Token_mapping.Token_definitions_unified.NameKeyword -> NameKeyword",
          "| Token_mapping.Token_definitions_unified.SetKeyword -> SetKeyword",
          "| Token_mapping.Token_definitions_unified.AlsoKeyword -> AlsoKeyword",
          "| Token_mapping.Token_definitions_unified.ThenGetKeyword -> ThenGetKeyword",
          "| Token_mapping.Token_definitions_unified.CallKeyword -> CallKeyword",
          "| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword",
          "| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword",
          "| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword",
          "| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword"
        ],
        "start_line": 92,
        "end_line": 101,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_basic_keywords.ml"
      },
      {
        "hash": "e28eb2e232dcbc6e58592c5fba43af49",
        "text": "| Token_mapping.Token_definitions_unified.OneKeyword -> OneKeyword\n| Token_mapping.Token_definitions_unified.NameKeyword -> NameKeyword\n| Token_mapping.Token_definitions_unified.SetKeyword -> SetKeyword\n| Token_mapping.Token_definitions_unified.AlsoKeyword -> AlsoKeyword\n| Token_mapping.Token_definitions_unified.ThenGetKeyword -> ThenGetKeyword\n| Token_mapping.Token_definitions_unified.CallKeyword -> CallKeyword\n| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword\n| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword\n| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword\n| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.OneKeyword -> OneKeyword",
          "| Token_mapping.Token_definitions_unified.NameKeyword -> NameKeyword",
          "| Token_mapping.Token_definitions_unified.SetKeyword -> SetKeyword",
          "| Token_mapping.Token_definitions_unified.AlsoKeyword -> AlsoKeyword",
          "| Token_mapping.Token_definitions_unified.ThenGetKeyword -> ThenGetKeyword",
          "| Token_mapping.Token_definitions_unified.CallKeyword -> CallKeyword",
          "| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword",
          "| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword",
          "| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword",
          "| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword"
        ],
        "start_line": 85,
        "end_line": 94,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_keywords.ml"
      }
    ],
    "3d3cf8c70ab943afa45213108762d164": [
      {
        "hash": "3d3cf8c70ab943afa45213108762d164",
        "text": "| Token_mapping.Token_definitions_unified.NameKeyword -> NameKeyword\n| Token_mapping.Token_definitions_unified.SetKeyword -> SetKeyword\n| Token_mapping.Token_definitions_unified.AlsoKeyword -> AlsoKeyword\n| Token_mapping.Token_definitions_unified.ThenGetKeyword -> ThenGetKeyword\n| Token_mapping.Token_definitions_unified.CallKeyword -> CallKeyword\n| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword\n| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword\n| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword\n| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword\n| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.NameKeyword -> NameKeyword",
          "| Token_mapping.Token_definitions_unified.SetKeyword -> SetKeyword",
          "| Token_mapping.Token_definitions_unified.AlsoKeyword -> AlsoKeyword",
          "| Token_mapping.Token_definitions_unified.ThenGetKeyword -> ThenGetKeyword",
          "| Token_mapping.Token_definitions_unified.CallKeyword -> CallKeyword",
          "| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword",
          "| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword",
          "| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword",
          "| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword",
          "| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword"
        ],
        "start_line": 151,
        "end_line": 160,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "3d3cf8c70ab943afa45213108762d164",
        "text": "| Token_mapping.Token_definitions_unified.NameKeyword -> NameKeyword\n| Token_mapping.Token_definitions_unified.SetKeyword -> SetKeyword\n| Token_mapping.Token_definitions_unified.AlsoKeyword -> AlsoKeyword\n| Token_mapping.Token_definitions_unified.ThenGetKeyword -> ThenGetKeyword\n| Token_mapping.Token_definitions_unified.CallKeyword -> CallKeyword\n| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword\n| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword\n| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword\n| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword\n| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.NameKeyword -> NameKeyword",
          "| Token_mapping.Token_definitions_unified.SetKeyword -> SetKeyword",
          "| Token_mapping.Token_definitions_unified.AlsoKeyword -> AlsoKeyword",
          "| Token_mapping.Token_definitions_unified.ThenGetKeyword -> ThenGetKeyword",
          "| Token_mapping.Token_definitions_unified.CallKeyword -> CallKeyword",
          "| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword",
          "| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword",
          "| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword",
          "| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword",
          "| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword"
        ],
        "start_line": 280,
        "end_line": 289,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "3d3cf8c70ab943afa45213108762d164",
        "text": "| Token_mapping.Token_definitions_unified.NameKeyword -> NameKeyword\n| Token_mapping.Token_definitions_unified.SetKeyword -> SetKeyword\n| Token_mapping.Token_definitions_unified.AlsoKeyword -> AlsoKeyword\n| Token_mapping.Token_definitions_unified.ThenGetKeyword -> ThenGetKeyword\n| Token_mapping.Token_definitions_unified.CallKeyword -> CallKeyword\n| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword\n| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword\n| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword\n| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword\n| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.NameKeyword -> NameKeyword",
          "| Token_mapping.Token_definitions_unified.SetKeyword -> SetKeyword",
          "| Token_mapping.Token_definitions_unified.AlsoKeyword -> AlsoKeyword",
          "| Token_mapping.Token_definitions_unified.ThenGetKeyword -> ThenGetKeyword",
          "| Token_mapping.Token_definitions_unified.CallKeyword -> CallKeyword",
          "| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword",
          "| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword",
          "| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword",
          "| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword",
          "| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword"
        ],
        "start_line": 9,
        "end_line": 18,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_classical.ml"
      },
      {
        "hash": "3d3cf8c70ab943afa45213108762d164",
        "text": "| Token_mapping.Token_definitions_unified.NameKeyword -> NameKeyword\n| Token_mapping.Token_definitions_unified.SetKeyword -> SetKeyword\n| Token_mapping.Token_definitions_unified.AlsoKeyword -> AlsoKeyword\n| Token_mapping.Token_definitions_unified.ThenGetKeyword -> ThenGetKeyword\n| Token_mapping.Token_definitions_unified.CallKeyword -> CallKeyword\n| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword\n| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword\n| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword\n| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword\n| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.NameKeyword -> NameKeyword",
          "| Token_mapping.Token_definitions_unified.SetKeyword -> SetKeyword",
          "| Token_mapping.Token_definitions_unified.AlsoKeyword -> AlsoKeyword",
          "| Token_mapping.Token_definitions_unified.ThenGetKeyword -> ThenGetKeyword",
          "| Token_mapping.Token_definitions_unified.CallKeyword -> CallKeyword",
          "| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword",
          "| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword",
          "| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword",
          "| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword",
          "| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword"
        ],
        "start_line": 20,
        "end_line": 29,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "3d3cf8c70ab943afa45213108762d164",
        "text": "| Token_mapping.Token_definitions_unified.NameKeyword -> NameKeyword\n| Token_mapping.Token_definitions_unified.SetKeyword -> SetKeyword\n| Token_mapping.Token_definitions_unified.AlsoKeyword -> AlsoKeyword\n| Token_mapping.Token_definitions_unified.ThenGetKeyword -> ThenGetKeyword\n| Token_mapping.Token_definitions_unified.CallKeyword -> CallKeyword\n| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword\n| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword\n| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword\n| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword\n| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.NameKeyword -> NameKeyword",
          "| Token_mapping.Token_definitions_unified.SetKeyword -> SetKeyword",
          "| Token_mapping.Token_definitions_unified.AlsoKeyword -> AlsoKeyword",
          "| Token_mapping.Token_definitions_unified.ThenGetKeyword -> ThenGetKeyword",
          "| Token_mapping.Token_definitions_unified.CallKeyword -> CallKeyword",
          "| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword",
          "| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword",
          "| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword",
          "| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword",
          "| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword"
        ],
        "start_line": 122,
        "end_line": 131,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "3d3cf8c70ab943afa45213108762d164",
        "text": "| Token_mapping.Token_definitions_unified.NameKeyword -> NameKeyword\n| Token_mapping.Token_definitions_unified.SetKeyword -> SetKeyword\n| Token_mapping.Token_definitions_unified.AlsoKeyword -> AlsoKeyword\n| Token_mapping.Token_definitions_unified.ThenGetKeyword -> ThenGetKeyword\n| Token_mapping.Token_definitions_unified.CallKeyword -> CallKeyword\n| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword\n| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword\n| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword\n| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword\n| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.NameKeyword -> NameKeyword",
          "| Token_mapping.Token_definitions_unified.SetKeyword -> SetKeyword",
          "| Token_mapping.Token_definitions_unified.AlsoKeyword -> AlsoKeyword",
          "| Token_mapping.Token_definitions_unified.ThenGetKeyword -> ThenGetKeyword",
          "| Token_mapping.Token_definitions_unified.CallKeyword -> CallKeyword",
          "| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword",
          "| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword",
          "| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword",
          "| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword",
          "| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword"
        ],
        "start_line": 93,
        "end_line": 102,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_basic_keywords.ml"
      },
      {
        "hash": "3d3cf8c70ab943afa45213108762d164",
        "text": "| Token_mapping.Token_definitions_unified.NameKeyword -> NameKeyword\n| Token_mapping.Token_definitions_unified.SetKeyword -> SetKeyword\n| Token_mapping.Token_definitions_unified.AlsoKeyword -> AlsoKeyword\n| Token_mapping.Token_definitions_unified.ThenGetKeyword -> ThenGetKeyword\n| Token_mapping.Token_definitions_unified.CallKeyword -> CallKeyword\n| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword\n| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword\n| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword\n| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword\n| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.NameKeyword -> NameKeyword",
          "| Token_mapping.Token_definitions_unified.SetKeyword -> SetKeyword",
          "| Token_mapping.Token_definitions_unified.AlsoKeyword -> AlsoKeyword",
          "| Token_mapping.Token_definitions_unified.ThenGetKeyword -> ThenGetKeyword",
          "| Token_mapping.Token_definitions_unified.CallKeyword -> CallKeyword",
          "| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword",
          "| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword",
          "| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword",
          "| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword",
          "| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword"
        ],
        "start_line": 86,
        "end_line": 95,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_keywords.ml"
      }
    ],
    "a03955ff492d78aa4e3f3ffe027b2324": [
      {
        "hash": "a03955ff492d78aa4e3f3ffe027b2324",
        "text": "| Token_mapping.Token_definitions_unified.SetKeyword -> SetKeyword\n| Token_mapping.Token_definitions_unified.AlsoKeyword -> AlsoKeyword\n| Token_mapping.Token_definitions_unified.ThenGetKeyword -> ThenGetKeyword\n| Token_mapping.Token_definitions_unified.CallKeyword -> CallKeyword\n| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword\n| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword\n| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword\n| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword\n| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword\n| Token_mapping.Token_definitions_unified.ForThisKeyword -> ForThisKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.SetKeyword -> SetKeyword",
          "| Token_mapping.Token_definitions_unified.AlsoKeyword -> AlsoKeyword",
          "| Token_mapping.Token_definitions_unified.ThenGetKeyword -> ThenGetKeyword",
          "| Token_mapping.Token_definitions_unified.CallKeyword -> CallKeyword",
          "| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword",
          "| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword",
          "| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword",
          "| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword",
          "| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword",
          "| Token_mapping.Token_definitions_unified.ForThisKeyword -> ForThisKeyword"
        ],
        "start_line": 152,
        "end_line": 161,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "a03955ff492d78aa4e3f3ffe027b2324",
        "text": "| Token_mapping.Token_definitions_unified.SetKeyword -> SetKeyword\n| Token_mapping.Token_definitions_unified.AlsoKeyword -> AlsoKeyword\n| Token_mapping.Token_definitions_unified.ThenGetKeyword -> ThenGetKeyword\n| Token_mapping.Token_definitions_unified.CallKeyword -> CallKeyword\n| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword\n| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword\n| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword\n| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword\n| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword\n| Token_mapping.Token_definitions_unified.ForThisKeyword -> ForThisKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.SetKeyword -> SetKeyword",
          "| Token_mapping.Token_definitions_unified.AlsoKeyword -> AlsoKeyword",
          "| Token_mapping.Token_definitions_unified.ThenGetKeyword -> ThenGetKeyword",
          "| Token_mapping.Token_definitions_unified.CallKeyword -> CallKeyword",
          "| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword",
          "| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword",
          "| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword",
          "| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword",
          "| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword",
          "| Token_mapping.Token_definitions_unified.ForThisKeyword -> ForThisKeyword"
        ],
        "start_line": 281,
        "end_line": 290,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "a03955ff492d78aa4e3f3ffe027b2324",
        "text": "| Token_mapping.Token_definitions_unified.SetKeyword -> SetKeyword\n| Token_mapping.Token_definitions_unified.AlsoKeyword -> AlsoKeyword\n| Token_mapping.Token_definitions_unified.ThenGetKeyword -> ThenGetKeyword\n| Token_mapping.Token_definitions_unified.CallKeyword -> CallKeyword\n| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword\n| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword\n| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword\n| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword\n| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword\n| Token_mapping.Token_definitions_unified.ForThisKeyword -> ForThisKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.SetKeyword -> SetKeyword",
          "| Token_mapping.Token_definitions_unified.AlsoKeyword -> AlsoKeyword",
          "| Token_mapping.Token_definitions_unified.ThenGetKeyword -> ThenGetKeyword",
          "| Token_mapping.Token_definitions_unified.CallKeyword -> CallKeyword",
          "| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword",
          "| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword",
          "| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword",
          "| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword",
          "| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword",
          "| Token_mapping.Token_definitions_unified.ForThisKeyword -> ForThisKeyword"
        ],
        "start_line": 10,
        "end_line": 19,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_classical.ml"
      },
      {
        "hash": "a03955ff492d78aa4e3f3ffe027b2324",
        "text": "| Token_mapping.Token_definitions_unified.SetKeyword -> SetKeyword\n| Token_mapping.Token_definitions_unified.AlsoKeyword -> AlsoKeyword\n| Token_mapping.Token_definitions_unified.ThenGetKeyword -> ThenGetKeyword\n| Token_mapping.Token_definitions_unified.CallKeyword -> CallKeyword\n| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword\n| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword\n| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword\n| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword\n| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword\n| Token_mapping.Token_definitions_unified.ForThisKeyword -> ForThisKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.SetKeyword -> SetKeyword",
          "| Token_mapping.Token_definitions_unified.AlsoKeyword -> AlsoKeyword",
          "| Token_mapping.Token_definitions_unified.ThenGetKeyword -> ThenGetKeyword",
          "| Token_mapping.Token_definitions_unified.CallKeyword -> CallKeyword",
          "| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword",
          "| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword",
          "| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword",
          "| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword",
          "| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword",
          "| Token_mapping.Token_definitions_unified.ForThisKeyword -> ForThisKeyword"
        ],
        "start_line": 21,
        "end_line": 30,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "a03955ff492d78aa4e3f3ffe027b2324",
        "text": "| Token_mapping.Token_definitions_unified.SetKeyword -> SetKeyword\n| Token_mapping.Token_definitions_unified.AlsoKeyword -> AlsoKeyword\n| Token_mapping.Token_definitions_unified.ThenGetKeyword -> ThenGetKeyword\n| Token_mapping.Token_definitions_unified.CallKeyword -> CallKeyword\n| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword\n| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword\n| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword\n| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword\n| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword\n| Token_mapping.Token_definitions_unified.ForThisKeyword -> ForThisKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.SetKeyword -> SetKeyword",
          "| Token_mapping.Token_definitions_unified.AlsoKeyword -> AlsoKeyword",
          "| Token_mapping.Token_definitions_unified.ThenGetKeyword -> ThenGetKeyword",
          "| Token_mapping.Token_definitions_unified.CallKeyword -> CallKeyword",
          "| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword",
          "| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword",
          "| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword",
          "| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword",
          "| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword",
          "| Token_mapping.Token_definitions_unified.ForThisKeyword -> ForThisKeyword"
        ],
        "start_line": 123,
        "end_line": 132,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "a03955ff492d78aa4e3f3ffe027b2324",
        "text": "| Token_mapping.Token_definitions_unified.SetKeyword -> SetKeyword\n| Token_mapping.Token_definitions_unified.AlsoKeyword -> AlsoKeyword\n| Token_mapping.Token_definitions_unified.ThenGetKeyword -> ThenGetKeyword\n| Token_mapping.Token_definitions_unified.CallKeyword -> CallKeyword\n| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword\n| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword\n| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword\n| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword\n| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword\n| Token_mapping.Token_definitions_unified.ForThisKeyword -> ForThisKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.SetKeyword -> SetKeyword",
          "| Token_mapping.Token_definitions_unified.AlsoKeyword -> AlsoKeyword",
          "| Token_mapping.Token_definitions_unified.ThenGetKeyword -> ThenGetKeyword",
          "| Token_mapping.Token_definitions_unified.CallKeyword -> CallKeyword",
          "| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword",
          "| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword",
          "| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword",
          "| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword",
          "| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword",
          "| Token_mapping.Token_definitions_unified.ForThisKeyword -> ForThisKeyword"
        ],
        "start_line": 94,
        "end_line": 103,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_basic_keywords.ml"
      },
      {
        "hash": "a03955ff492d78aa4e3f3ffe027b2324",
        "text": "| Token_mapping.Token_definitions_unified.SetKeyword -> SetKeyword\n| Token_mapping.Token_definitions_unified.AlsoKeyword -> AlsoKeyword\n| Token_mapping.Token_definitions_unified.ThenGetKeyword -> ThenGetKeyword\n| Token_mapping.Token_definitions_unified.CallKeyword -> CallKeyword\n| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword\n| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword\n| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword\n| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword\n| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword\n| Token_mapping.Token_definitions_unified.ForThisKeyword -> ForThisKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.SetKeyword -> SetKeyword",
          "| Token_mapping.Token_definitions_unified.AlsoKeyword -> AlsoKeyword",
          "| Token_mapping.Token_definitions_unified.ThenGetKeyword -> ThenGetKeyword",
          "| Token_mapping.Token_definitions_unified.CallKeyword -> CallKeyword",
          "| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword",
          "| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword",
          "| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword",
          "| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword",
          "| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword",
          "| Token_mapping.Token_definitions_unified.ForThisKeyword -> ForThisKeyword"
        ],
        "start_line": 87,
        "end_line": 96,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_keywords.ml"
      }
    ],
    "bb1dd8161357e12802fefab7c4b30c3c": [
      {
        "hash": "bb1dd8161357e12802fefab7c4b30c3c",
        "text": "| Token_mapping.Token_definitions_unified.AlsoKeyword -> AlsoKeyword\n| Token_mapping.Token_definitions_unified.ThenGetKeyword -> ThenGetKeyword\n| Token_mapping.Token_definitions_unified.CallKeyword -> CallKeyword\n| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword\n| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword\n| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword\n| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword\n| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword\n| Token_mapping.Token_definitions_unified.ForThisKeyword -> ForThisKeyword\n| Token_mapping.Token_definitions_unified.TimesKeyword -> TimesKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AlsoKeyword -> AlsoKeyword",
          "| Token_mapping.Token_definitions_unified.ThenGetKeyword -> ThenGetKeyword",
          "| Token_mapping.Token_definitions_unified.CallKeyword -> CallKeyword",
          "| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword",
          "| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword",
          "| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword",
          "| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword",
          "| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword",
          "| Token_mapping.Token_definitions_unified.ForThisKeyword -> ForThisKeyword",
          "| Token_mapping.Token_definitions_unified.TimesKeyword -> TimesKeyword"
        ],
        "start_line": 153,
        "end_line": 162,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "bb1dd8161357e12802fefab7c4b30c3c",
        "text": "| Token_mapping.Token_definitions_unified.AlsoKeyword -> AlsoKeyword\n| Token_mapping.Token_definitions_unified.ThenGetKeyword -> ThenGetKeyword\n| Token_mapping.Token_definitions_unified.CallKeyword -> CallKeyword\n| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword\n| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword\n| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword\n| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword\n| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword\n| Token_mapping.Token_definitions_unified.ForThisKeyword -> ForThisKeyword\n| Token_mapping.Token_definitions_unified.TimesKeyword -> TimesKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AlsoKeyword -> AlsoKeyword",
          "| Token_mapping.Token_definitions_unified.ThenGetKeyword -> ThenGetKeyword",
          "| Token_mapping.Token_definitions_unified.CallKeyword -> CallKeyword",
          "| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword",
          "| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword",
          "| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword",
          "| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword",
          "| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword",
          "| Token_mapping.Token_definitions_unified.ForThisKeyword -> ForThisKeyword",
          "| Token_mapping.Token_definitions_unified.TimesKeyword -> TimesKeyword"
        ],
        "start_line": 282,
        "end_line": 291,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "bb1dd8161357e12802fefab7c4b30c3c",
        "text": "| Token_mapping.Token_definitions_unified.AlsoKeyword -> AlsoKeyword\n| Token_mapping.Token_definitions_unified.ThenGetKeyword -> ThenGetKeyword\n| Token_mapping.Token_definitions_unified.CallKeyword -> CallKeyword\n| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword\n| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword\n| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword\n| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword\n| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword\n| Token_mapping.Token_definitions_unified.ForThisKeyword -> ForThisKeyword\n| Token_mapping.Token_definitions_unified.TimesKeyword -> TimesKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AlsoKeyword -> AlsoKeyword",
          "| Token_mapping.Token_definitions_unified.ThenGetKeyword -> ThenGetKeyword",
          "| Token_mapping.Token_definitions_unified.CallKeyword -> CallKeyword",
          "| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword",
          "| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword",
          "| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword",
          "| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword",
          "| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword",
          "| Token_mapping.Token_definitions_unified.ForThisKeyword -> ForThisKeyword",
          "| Token_mapping.Token_definitions_unified.TimesKeyword -> TimesKeyword"
        ],
        "start_line": 11,
        "end_line": 20,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_classical.ml"
      },
      {
        "hash": "bb1dd8161357e12802fefab7c4b30c3c",
        "text": "| Token_mapping.Token_definitions_unified.AlsoKeyword -> AlsoKeyword\n| Token_mapping.Token_definitions_unified.ThenGetKeyword -> ThenGetKeyword\n| Token_mapping.Token_definitions_unified.CallKeyword -> CallKeyword\n| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword\n| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword\n| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword\n| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword\n| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword\n| Token_mapping.Token_definitions_unified.ForThisKeyword -> ForThisKeyword\n| Token_mapping.Token_definitions_unified.TimesKeyword -> TimesKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AlsoKeyword -> AlsoKeyword",
          "| Token_mapping.Token_definitions_unified.ThenGetKeyword -> ThenGetKeyword",
          "| Token_mapping.Token_definitions_unified.CallKeyword -> CallKeyword",
          "| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword",
          "| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword",
          "| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword",
          "| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword",
          "| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword",
          "| Token_mapping.Token_definitions_unified.ForThisKeyword -> ForThisKeyword",
          "| Token_mapping.Token_definitions_unified.TimesKeyword -> TimesKeyword"
        ],
        "start_line": 22,
        "end_line": 31,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "bb1dd8161357e12802fefab7c4b30c3c",
        "text": "| Token_mapping.Token_definitions_unified.AlsoKeyword -> AlsoKeyword\n| Token_mapping.Token_definitions_unified.ThenGetKeyword -> ThenGetKeyword\n| Token_mapping.Token_definitions_unified.CallKeyword -> CallKeyword\n| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword\n| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword\n| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword\n| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword\n| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword\n| Token_mapping.Token_definitions_unified.ForThisKeyword -> ForThisKeyword\n| Token_mapping.Token_definitions_unified.TimesKeyword -> TimesKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AlsoKeyword -> AlsoKeyword",
          "| Token_mapping.Token_definitions_unified.ThenGetKeyword -> ThenGetKeyword",
          "| Token_mapping.Token_definitions_unified.CallKeyword -> CallKeyword",
          "| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword",
          "| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword",
          "| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword",
          "| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword",
          "| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword",
          "| Token_mapping.Token_definitions_unified.ForThisKeyword -> ForThisKeyword",
          "| Token_mapping.Token_definitions_unified.TimesKeyword -> TimesKeyword"
        ],
        "start_line": 124,
        "end_line": 133,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "bb1dd8161357e12802fefab7c4b30c3c",
        "text": "| Token_mapping.Token_definitions_unified.AlsoKeyword -> AlsoKeyword\n| Token_mapping.Token_definitions_unified.ThenGetKeyword -> ThenGetKeyword\n| Token_mapping.Token_definitions_unified.CallKeyword -> CallKeyword\n| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword\n| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword\n| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword\n| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword\n| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword\n| Token_mapping.Token_definitions_unified.ForThisKeyword -> ForThisKeyword\n| Token_mapping.Token_definitions_unified.TimesKeyword -> TimesKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AlsoKeyword -> AlsoKeyword",
          "| Token_mapping.Token_definitions_unified.ThenGetKeyword -> ThenGetKeyword",
          "| Token_mapping.Token_definitions_unified.CallKeyword -> CallKeyword",
          "| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword",
          "| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword",
          "| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword",
          "| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword",
          "| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword",
          "| Token_mapping.Token_definitions_unified.ForThisKeyword -> ForThisKeyword",
          "| Token_mapping.Token_definitions_unified.TimesKeyword -> TimesKeyword"
        ],
        "start_line": 95,
        "end_line": 104,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_basic_keywords.ml"
      },
      {
        "hash": "bb1dd8161357e12802fefab7c4b30c3c",
        "text": "| Token_mapping.Token_definitions_unified.AlsoKeyword -> AlsoKeyword\n| Token_mapping.Token_definitions_unified.ThenGetKeyword -> ThenGetKeyword\n| Token_mapping.Token_definitions_unified.CallKeyword -> CallKeyword\n| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword\n| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword\n| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword\n| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword\n| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword\n| Token_mapping.Token_definitions_unified.ForThisKeyword -> ForThisKeyword\n| Token_mapping.Token_definitions_unified.TimesKeyword -> TimesKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AlsoKeyword -> AlsoKeyword",
          "| Token_mapping.Token_definitions_unified.ThenGetKeyword -> ThenGetKeyword",
          "| Token_mapping.Token_definitions_unified.CallKeyword -> CallKeyword",
          "| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword",
          "| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword",
          "| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword",
          "| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword",
          "| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword",
          "| Token_mapping.Token_definitions_unified.ForThisKeyword -> ForThisKeyword",
          "| Token_mapping.Token_definitions_unified.TimesKeyword -> TimesKeyword"
        ],
        "start_line": 88,
        "end_line": 97,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_keywords.ml"
      }
    ],
    "3c9e0377764a5bbdf8d7916a29cc2f99": [
      {
        "hash": "3c9e0377764a5bbdf8d7916a29cc2f99",
        "text": "| Token_mapping.Token_definitions_unified.ThenGetKeyword -> ThenGetKeyword\n| Token_mapping.Token_definitions_unified.CallKeyword -> CallKeyword\n| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword\n| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword\n| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword\n| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword\n| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword\n| Token_mapping.Token_definitions_unified.ForThisKeyword -> ForThisKeyword\n| Token_mapping.Token_definitions_unified.TimesKeyword -> TimesKeyword\n| Token_mapping.Token_definitions_unified.EndCloudKeyword -> EndCloudKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.ThenGetKeyword -> ThenGetKeyword",
          "| Token_mapping.Token_definitions_unified.CallKeyword -> CallKeyword",
          "| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword",
          "| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword",
          "| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword",
          "| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword",
          "| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword",
          "| Token_mapping.Token_definitions_unified.ForThisKeyword -> ForThisKeyword",
          "| Token_mapping.Token_definitions_unified.TimesKeyword -> TimesKeyword",
          "| Token_mapping.Token_definitions_unified.EndCloudKeyword -> EndCloudKeyword"
        ],
        "start_line": 154,
        "end_line": 163,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "3c9e0377764a5bbdf8d7916a29cc2f99",
        "text": "| Token_mapping.Token_definitions_unified.ThenGetKeyword -> ThenGetKeyword\n| Token_mapping.Token_definitions_unified.CallKeyword -> CallKeyword\n| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword\n| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword\n| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword\n| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword\n| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword\n| Token_mapping.Token_definitions_unified.ForThisKeyword -> ForThisKeyword\n| Token_mapping.Token_definitions_unified.TimesKeyword -> TimesKeyword\n| Token_mapping.Token_definitions_unified.EndCloudKeyword -> EndCloudKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.ThenGetKeyword -> ThenGetKeyword",
          "| Token_mapping.Token_definitions_unified.CallKeyword -> CallKeyword",
          "| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword",
          "| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword",
          "| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword",
          "| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword",
          "| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword",
          "| Token_mapping.Token_definitions_unified.ForThisKeyword -> ForThisKeyword",
          "| Token_mapping.Token_definitions_unified.TimesKeyword -> TimesKeyword",
          "| Token_mapping.Token_definitions_unified.EndCloudKeyword -> EndCloudKeyword"
        ],
        "start_line": 283,
        "end_line": 292,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "3c9e0377764a5bbdf8d7916a29cc2f99",
        "text": "| Token_mapping.Token_definitions_unified.ThenGetKeyword -> ThenGetKeyword\n| Token_mapping.Token_definitions_unified.CallKeyword -> CallKeyword\n| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword\n| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword\n| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword\n| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword\n| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword\n| Token_mapping.Token_definitions_unified.ForThisKeyword -> ForThisKeyword\n| Token_mapping.Token_definitions_unified.TimesKeyword -> TimesKeyword\n| Token_mapping.Token_definitions_unified.EndCloudKeyword -> EndCloudKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.ThenGetKeyword -> ThenGetKeyword",
          "| Token_mapping.Token_definitions_unified.CallKeyword -> CallKeyword",
          "| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword",
          "| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword",
          "| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword",
          "| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword",
          "| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword",
          "| Token_mapping.Token_definitions_unified.ForThisKeyword -> ForThisKeyword",
          "| Token_mapping.Token_definitions_unified.TimesKeyword -> TimesKeyword",
          "| Token_mapping.Token_definitions_unified.EndCloudKeyword -> EndCloudKeyword"
        ],
        "start_line": 12,
        "end_line": 21,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_classical.ml"
      },
      {
        "hash": "3c9e0377764a5bbdf8d7916a29cc2f99",
        "text": "| Token_mapping.Token_definitions_unified.ThenGetKeyword -> ThenGetKeyword\n| Token_mapping.Token_definitions_unified.CallKeyword -> CallKeyword\n| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword\n| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword\n| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword\n| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword\n| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword\n| Token_mapping.Token_definitions_unified.ForThisKeyword -> ForThisKeyword\n| Token_mapping.Token_definitions_unified.TimesKeyword -> TimesKeyword\n| Token_mapping.Token_definitions_unified.EndCloudKeyword -> EndCloudKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.ThenGetKeyword -> ThenGetKeyword",
          "| Token_mapping.Token_definitions_unified.CallKeyword -> CallKeyword",
          "| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword",
          "| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword",
          "| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword",
          "| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword",
          "| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword",
          "| Token_mapping.Token_definitions_unified.ForThisKeyword -> ForThisKeyword",
          "| Token_mapping.Token_definitions_unified.TimesKeyword -> TimesKeyword",
          "| Token_mapping.Token_definitions_unified.EndCloudKeyword -> EndCloudKeyword"
        ],
        "start_line": 23,
        "end_line": 32,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "3c9e0377764a5bbdf8d7916a29cc2f99",
        "text": "| Token_mapping.Token_definitions_unified.ThenGetKeyword -> ThenGetKeyword\n| Token_mapping.Token_definitions_unified.CallKeyword -> CallKeyword\n| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword\n| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword\n| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword\n| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword\n| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword\n| Token_mapping.Token_definitions_unified.ForThisKeyword -> ForThisKeyword\n| Token_mapping.Token_definitions_unified.TimesKeyword -> TimesKeyword\n| Token_mapping.Token_definitions_unified.EndCloudKeyword -> EndCloudKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.ThenGetKeyword -> ThenGetKeyword",
          "| Token_mapping.Token_definitions_unified.CallKeyword -> CallKeyword",
          "| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword",
          "| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword",
          "| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword",
          "| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword",
          "| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword",
          "| Token_mapping.Token_definitions_unified.ForThisKeyword -> ForThisKeyword",
          "| Token_mapping.Token_definitions_unified.TimesKeyword -> TimesKeyword",
          "| Token_mapping.Token_definitions_unified.EndCloudKeyword -> EndCloudKeyword"
        ],
        "start_line": 125,
        "end_line": 134,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "3c9e0377764a5bbdf8d7916a29cc2f99",
        "text": "| Token_mapping.Token_definitions_unified.ThenGetKeyword -> ThenGetKeyword\n| Token_mapping.Token_definitions_unified.CallKeyword -> CallKeyword\n| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword\n| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword\n| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword\n| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword\n| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword\n| Token_mapping.Token_definitions_unified.ForThisKeyword -> ForThisKeyword\n| Token_mapping.Token_definitions_unified.TimesKeyword -> TimesKeyword\n| Token_mapping.Token_definitions_unified.EndCloudKeyword -> EndCloudKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.ThenGetKeyword -> ThenGetKeyword",
          "| Token_mapping.Token_definitions_unified.CallKeyword -> CallKeyword",
          "| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword",
          "| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword",
          "| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword",
          "| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword",
          "| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword",
          "| Token_mapping.Token_definitions_unified.ForThisKeyword -> ForThisKeyword",
          "| Token_mapping.Token_definitions_unified.TimesKeyword -> TimesKeyword",
          "| Token_mapping.Token_definitions_unified.EndCloudKeyword -> EndCloudKeyword"
        ],
        "start_line": 96,
        "end_line": 105,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_basic_keywords.ml"
      },
      {
        "hash": "3c9e0377764a5bbdf8d7916a29cc2f99",
        "text": "| Token_mapping.Token_definitions_unified.ThenGetKeyword -> ThenGetKeyword\n| Token_mapping.Token_definitions_unified.CallKeyword -> CallKeyword\n| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword\n| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword\n| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword\n| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword\n| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword\n| Token_mapping.Token_definitions_unified.ForThisKeyword -> ForThisKeyword\n| Token_mapping.Token_definitions_unified.TimesKeyword -> TimesKeyword\n| Token_mapping.Token_definitions_unified.EndCloudKeyword -> EndCloudKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.ThenGetKeyword -> ThenGetKeyword",
          "| Token_mapping.Token_definitions_unified.CallKeyword -> CallKeyword",
          "| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword",
          "| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword",
          "| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword",
          "| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword",
          "| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword",
          "| Token_mapping.Token_definitions_unified.ForThisKeyword -> ForThisKeyword",
          "| Token_mapping.Token_definitions_unified.TimesKeyword -> TimesKeyword",
          "| Token_mapping.Token_definitions_unified.EndCloudKeyword -> EndCloudKeyword"
        ],
        "start_line": 89,
        "end_line": 98,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_keywords.ml"
      }
    ],
    "c08afdc469a668e8a2edc3c32281bcfe": [
      {
        "hash": "c08afdc469a668e8a2edc3c32281bcfe",
        "text": "| Token_mapping.Token_definitions_unified.CallKeyword -> CallKeyword\n| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword\n| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword\n| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword\n| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword\n| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword\n| Token_mapping.Token_definitions_unified.ForThisKeyword -> ForThisKeyword\n| Token_mapping.Token_definitions_unified.TimesKeyword -> TimesKeyword\n| Token_mapping.Token_definitions_unified.EndCloudKeyword -> EndCloudKeyword\n| Token_mapping.Token_definitions_unified.IfWenyanKeyword -> IfWenyanKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.CallKeyword -> CallKeyword",
          "| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword",
          "| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword",
          "| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword",
          "| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword",
          "| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword",
          "| Token_mapping.Token_definitions_unified.ForThisKeyword -> ForThisKeyword",
          "| Token_mapping.Token_definitions_unified.TimesKeyword -> TimesKeyword",
          "| Token_mapping.Token_definitions_unified.EndCloudKeyword -> EndCloudKeyword",
          "| Token_mapping.Token_definitions_unified.IfWenyanKeyword -> IfWenyanKeyword"
        ],
        "start_line": 155,
        "end_line": 164,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "c08afdc469a668e8a2edc3c32281bcfe",
        "text": "| Token_mapping.Token_definitions_unified.CallKeyword -> CallKeyword\n| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword\n| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword\n| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword\n| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword\n| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword\n| Token_mapping.Token_definitions_unified.ForThisKeyword -> ForThisKeyword\n| Token_mapping.Token_definitions_unified.TimesKeyword -> TimesKeyword\n| Token_mapping.Token_definitions_unified.EndCloudKeyword -> EndCloudKeyword\n| Token_mapping.Token_definitions_unified.IfWenyanKeyword -> IfWenyanKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.CallKeyword -> CallKeyword",
          "| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword",
          "| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword",
          "| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword",
          "| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword",
          "| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword",
          "| Token_mapping.Token_definitions_unified.ForThisKeyword -> ForThisKeyword",
          "| Token_mapping.Token_definitions_unified.TimesKeyword -> TimesKeyword",
          "| Token_mapping.Token_definitions_unified.EndCloudKeyword -> EndCloudKeyword",
          "| Token_mapping.Token_definitions_unified.IfWenyanKeyword -> IfWenyanKeyword"
        ],
        "start_line": 284,
        "end_line": 293,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "c08afdc469a668e8a2edc3c32281bcfe",
        "text": "| Token_mapping.Token_definitions_unified.CallKeyword -> CallKeyword\n| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword\n| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword\n| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword\n| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword\n| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword\n| Token_mapping.Token_definitions_unified.ForThisKeyword -> ForThisKeyword\n| Token_mapping.Token_definitions_unified.TimesKeyword -> TimesKeyword\n| Token_mapping.Token_definitions_unified.EndCloudKeyword -> EndCloudKeyword\n| Token_mapping.Token_definitions_unified.IfWenyanKeyword -> IfWenyanKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.CallKeyword -> CallKeyword",
          "| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword",
          "| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword",
          "| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword",
          "| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword",
          "| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword",
          "| Token_mapping.Token_definitions_unified.ForThisKeyword -> ForThisKeyword",
          "| Token_mapping.Token_definitions_unified.TimesKeyword -> TimesKeyword",
          "| Token_mapping.Token_definitions_unified.EndCloudKeyword -> EndCloudKeyword",
          "| Token_mapping.Token_definitions_unified.IfWenyanKeyword -> IfWenyanKeyword"
        ],
        "start_line": 13,
        "end_line": 22,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_classical.ml"
      },
      {
        "hash": "c08afdc469a668e8a2edc3c32281bcfe",
        "text": "| Token_mapping.Token_definitions_unified.CallKeyword -> CallKeyword\n| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword\n| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword\n| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword\n| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword\n| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword\n| Token_mapping.Token_definitions_unified.ForThisKeyword -> ForThisKeyword\n| Token_mapping.Token_definitions_unified.TimesKeyword -> TimesKeyword\n| Token_mapping.Token_definitions_unified.EndCloudKeyword -> EndCloudKeyword\n| Token_mapping.Token_definitions_unified.IfWenyanKeyword -> IfWenyanKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.CallKeyword -> CallKeyword",
          "| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword",
          "| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword",
          "| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword",
          "| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword",
          "| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword",
          "| Token_mapping.Token_definitions_unified.ForThisKeyword -> ForThisKeyword",
          "| Token_mapping.Token_definitions_unified.TimesKeyword -> TimesKeyword",
          "| Token_mapping.Token_definitions_unified.EndCloudKeyword -> EndCloudKeyword",
          "| Token_mapping.Token_definitions_unified.IfWenyanKeyword -> IfWenyanKeyword"
        ],
        "start_line": 24,
        "end_line": 33,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "c08afdc469a668e8a2edc3c32281bcfe",
        "text": "| Token_mapping.Token_definitions_unified.CallKeyword -> CallKeyword\n| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword\n| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword\n| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword\n| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword\n| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword\n| Token_mapping.Token_definitions_unified.ForThisKeyword -> ForThisKeyword\n| Token_mapping.Token_definitions_unified.TimesKeyword -> TimesKeyword\n| Token_mapping.Token_definitions_unified.EndCloudKeyword -> EndCloudKeyword\n| Token_mapping.Token_definitions_unified.IfWenyanKeyword -> IfWenyanKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.CallKeyword -> CallKeyword",
          "| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword",
          "| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword",
          "| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword",
          "| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword",
          "| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword",
          "| Token_mapping.Token_definitions_unified.ForThisKeyword -> ForThisKeyword",
          "| Token_mapping.Token_definitions_unified.TimesKeyword -> TimesKeyword",
          "| Token_mapping.Token_definitions_unified.EndCloudKeyword -> EndCloudKeyword",
          "| Token_mapping.Token_definitions_unified.IfWenyanKeyword -> IfWenyanKeyword"
        ],
        "start_line": 126,
        "end_line": 135,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "c08afdc469a668e8a2edc3c32281bcfe",
        "text": "| Token_mapping.Token_definitions_unified.CallKeyword -> CallKeyword\n| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword\n| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword\n| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword\n| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword\n| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword\n| Token_mapping.Token_definitions_unified.ForThisKeyword -> ForThisKeyword\n| Token_mapping.Token_definitions_unified.TimesKeyword -> TimesKeyword\n| Token_mapping.Token_definitions_unified.EndCloudKeyword -> EndCloudKeyword\n| Token_mapping.Token_definitions_unified.IfWenyanKeyword -> IfWenyanKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.CallKeyword -> CallKeyword",
          "| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword",
          "| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword",
          "| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword",
          "| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword",
          "| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword",
          "| Token_mapping.Token_definitions_unified.ForThisKeyword -> ForThisKeyword",
          "| Token_mapping.Token_definitions_unified.TimesKeyword -> TimesKeyword",
          "| Token_mapping.Token_definitions_unified.EndCloudKeyword -> EndCloudKeyword",
          "| Token_mapping.Token_definitions_unified.IfWenyanKeyword -> IfWenyanKeyword"
        ],
        "start_line": 97,
        "end_line": 106,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_basic_keywords.ml"
      }
    ],
    "0878c1f6395161b8677404f3b7ae2908": [
      {
        "hash": "0878c1f6395161b8677404f3b7ae2908",
        "text": "| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword\n| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword\n| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword\n| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword\n| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword\n| Token_mapping.Token_definitions_unified.ForThisKeyword -> ForThisKeyword\n| Token_mapping.Token_definitions_unified.TimesKeyword -> TimesKeyword\n| Token_mapping.Token_definitions_unified.EndCloudKeyword -> EndCloudKeyword\n| Token_mapping.Token_definitions_unified.IfWenyanKeyword -> IfWenyanKeyword\n| Token_mapping.Token_definitions_unified.ThenWenyanKeyword -> ThenWenyanKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword",
          "| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword",
          "| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword",
          "| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword",
          "| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword",
          "| Token_mapping.Token_definitions_unified.ForThisKeyword -> ForThisKeyword",
          "| Token_mapping.Token_definitions_unified.TimesKeyword -> TimesKeyword",
          "| Token_mapping.Token_definitions_unified.EndCloudKeyword -> EndCloudKeyword",
          "| Token_mapping.Token_definitions_unified.IfWenyanKeyword -> IfWenyanKeyword",
          "| Token_mapping.Token_definitions_unified.ThenWenyanKeyword -> ThenWenyanKeyword"
        ],
        "start_line": 156,
        "end_line": 165,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "0878c1f6395161b8677404f3b7ae2908",
        "text": "| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword\n| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword\n| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword\n| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword\n| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword\n| Token_mapping.Token_definitions_unified.ForThisKeyword -> ForThisKeyword\n| Token_mapping.Token_definitions_unified.TimesKeyword -> TimesKeyword\n| Token_mapping.Token_definitions_unified.EndCloudKeyword -> EndCloudKeyword\n| Token_mapping.Token_definitions_unified.IfWenyanKeyword -> IfWenyanKeyword\n| Token_mapping.Token_definitions_unified.ThenWenyanKeyword -> ThenWenyanKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword",
          "| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword",
          "| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword",
          "| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword",
          "| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword",
          "| Token_mapping.Token_definitions_unified.ForThisKeyword -> ForThisKeyword",
          "| Token_mapping.Token_definitions_unified.TimesKeyword -> TimesKeyword",
          "| Token_mapping.Token_definitions_unified.EndCloudKeyword -> EndCloudKeyword",
          "| Token_mapping.Token_definitions_unified.IfWenyanKeyword -> IfWenyanKeyword",
          "| Token_mapping.Token_definitions_unified.ThenWenyanKeyword -> ThenWenyanKeyword"
        ],
        "start_line": 285,
        "end_line": 294,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "0878c1f6395161b8677404f3b7ae2908",
        "text": "| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword\n| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword\n| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword\n| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword\n| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword\n| Token_mapping.Token_definitions_unified.ForThisKeyword -> ForThisKeyword\n| Token_mapping.Token_definitions_unified.TimesKeyword -> TimesKeyword\n| Token_mapping.Token_definitions_unified.EndCloudKeyword -> EndCloudKeyword\n| Token_mapping.Token_definitions_unified.IfWenyanKeyword -> IfWenyanKeyword\n| Token_mapping.Token_definitions_unified.ThenWenyanKeyword -> ThenWenyanKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword",
          "| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword",
          "| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword",
          "| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword",
          "| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword",
          "| Token_mapping.Token_definitions_unified.ForThisKeyword -> ForThisKeyword",
          "| Token_mapping.Token_definitions_unified.TimesKeyword -> TimesKeyword",
          "| Token_mapping.Token_definitions_unified.EndCloudKeyword -> EndCloudKeyword",
          "| Token_mapping.Token_definitions_unified.IfWenyanKeyword -> IfWenyanKeyword",
          "| Token_mapping.Token_definitions_unified.ThenWenyanKeyword -> ThenWenyanKeyword"
        ],
        "start_line": 14,
        "end_line": 23,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_classical.ml"
      },
      {
        "hash": "0878c1f6395161b8677404f3b7ae2908",
        "text": "| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword\n| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword\n| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword\n| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword\n| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword\n| Token_mapping.Token_definitions_unified.ForThisKeyword -> ForThisKeyword\n| Token_mapping.Token_definitions_unified.TimesKeyword -> TimesKeyword\n| Token_mapping.Token_definitions_unified.EndCloudKeyword -> EndCloudKeyword\n| Token_mapping.Token_definitions_unified.IfWenyanKeyword -> IfWenyanKeyword\n| Token_mapping.Token_definitions_unified.ThenWenyanKeyword -> ThenWenyanKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword",
          "| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword",
          "| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword",
          "| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword",
          "| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword",
          "| Token_mapping.Token_definitions_unified.ForThisKeyword -> ForThisKeyword",
          "| Token_mapping.Token_definitions_unified.TimesKeyword -> TimesKeyword",
          "| Token_mapping.Token_definitions_unified.EndCloudKeyword -> EndCloudKeyword",
          "| Token_mapping.Token_definitions_unified.IfWenyanKeyword -> IfWenyanKeyword",
          "| Token_mapping.Token_definitions_unified.ThenWenyanKeyword -> ThenWenyanKeyword"
        ],
        "start_line": 25,
        "end_line": 34,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "0878c1f6395161b8677404f3b7ae2908",
        "text": "| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword\n| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword\n| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword\n| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword\n| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword\n| Token_mapping.Token_definitions_unified.ForThisKeyword -> ForThisKeyword\n| Token_mapping.Token_definitions_unified.TimesKeyword -> TimesKeyword\n| Token_mapping.Token_definitions_unified.EndCloudKeyword -> EndCloudKeyword\n| Token_mapping.Token_definitions_unified.IfWenyanKeyword -> IfWenyanKeyword\n| Token_mapping.Token_definitions_unified.ThenWenyanKeyword -> ThenWenyanKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword",
          "| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword",
          "| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword",
          "| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword",
          "| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword",
          "| Token_mapping.Token_definitions_unified.ForThisKeyword -> ForThisKeyword",
          "| Token_mapping.Token_definitions_unified.TimesKeyword -> TimesKeyword",
          "| Token_mapping.Token_definitions_unified.EndCloudKeyword -> EndCloudKeyword",
          "| Token_mapping.Token_definitions_unified.IfWenyanKeyword -> IfWenyanKeyword",
          "| Token_mapping.Token_definitions_unified.ThenWenyanKeyword -> ThenWenyanKeyword"
        ],
        "start_line": 127,
        "end_line": 136,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "0878c1f6395161b8677404f3b7ae2908",
        "text": "| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword\n| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword\n| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword\n| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword\n| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword\n| Token_mapping.Token_definitions_unified.ForThisKeyword -> ForThisKeyword\n| Token_mapping.Token_definitions_unified.TimesKeyword -> TimesKeyword\n| Token_mapping.Token_definitions_unified.EndCloudKeyword -> EndCloudKeyword\n| Token_mapping.Token_definitions_unified.IfWenyanKeyword -> IfWenyanKeyword\n| Token_mapping.Token_definitions_unified.ThenWenyanKeyword -> ThenWenyanKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword",
          "| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword",
          "| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword",
          "| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword",
          "| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword",
          "| Token_mapping.Token_definitions_unified.ForThisKeyword -> ForThisKeyword",
          "| Token_mapping.Token_definitions_unified.TimesKeyword -> TimesKeyword",
          "| Token_mapping.Token_definitions_unified.EndCloudKeyword -> EndCloudKeyword",
          "| Token_mapping.Token_definitions_unified.IfWenyanKeyword -> IfWenyanKeyword",
          "| Token_mapping.Token_definitions_unified.ThenWenyanKeyword -> ThenWenyanKeyword"
        ],
        "start_line": 98,
        "end_line": 107,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_basic_keywords.ml"
      }
    ],
    "8f80b473f1f0d99355ea909af3a2871d": [
      {
        "hash": "8f80b473f1f0d99355ea909af3a2871d",
        "text": "| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword\n| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword\n| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword\n| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword\n| Token_mapping.Token_definitions_unified.ForThisKeyword -> ForThisKeyword\n| Token_mapping.Token_definitions_unified.TimesKeyword -> TimesKeyword\n| Token_mapping.Token_definitions_unified.EndCloudKeyword -> EndCloudKeyword\n| Token_mapping.Token_definitions_unified.IfWenyanKeyword -> IfWenyanKeyword\n| Token_mapping.Token_definitions_unified.ThenWenyanKeyword -> ThenWenyanKeyword\n| Token_mapping.Token_definitions_unified.GreaterThanWenyan -> GreaterThanWenyan",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword",
          "| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword",
          "| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword",
          "| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword",
          "| Token_mapping.Token_definitions_unified.ForThisKeyword -> ForThisKeyword",
          "| Token_mapping.Token_definitions_unified.TimesKeyword -> TimesKeyword",
          "| Token_mapping.Token_definitions_unified.EndCloudKeyword -> EndCloudKeyword",
          "| Token_mapping.Token_definitions_unified.IfWenyanKeyword -> IfWenyanKeyword",
          "| Token_mapping.Token_definitions_unified.ThenWenyanKeyword -> ThenWenyanKeyword",
          "| Token_mapping.Token_definitions_unified.GreaterThanWenyan -> GreaterThanWenyan"
        ],
        "start_line": 157,
        "end_line": 166,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "8f80b473f1f0d99355ea909af3a2871d",
        "text": "| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword\n| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword\n| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword\n| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword\n| Token_mapping.Token_definitions_unified.ForThisKeyword -> ForThisKeyword\n| Token_mapping.Token_definitions_unified.TimesKeyword -> TimesKeyword\n| Token_mapping.Token_definitions_unified.EndCloudKeyword -> EndCloudKeyword\n| Token_mapping.Token_definitions_unified.IfWenyanKeyword -> IfWenyanKeyword\n| Token_mapping.Token_definitions_unified.ThenWenyanKeyword -> ThenWenyanKeyword\n| Token_mapping.Token_definitions_unified.GreaterThanWenyan -> GreaterThanWenyan",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword",
          "| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword",
          "| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword",
          "| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword",
          "| Token_mapping.Token_definitions_unified.ForThisKeyword -> ForThisKeyword",
          "| Token_mapping.Token_definitions_unified.TimesKeyword -> TimesKeyword",
          "| Token_mapping.Token_definitions_unified.EndCloudKeyword -> EndCloudKeyword",
          "| Token_mapping.Token_definitions_unified.IfWenyanKeyword -> IfWenyanKeyword",
          "| Token_mapping.Token_definitions_unified.ThenWenyanKeyword -> ThenWenyanKeyword",
          "| Token_mapping.Token_definitions_unified.GreaterThanWenyan -> GreaterThanWenyan"
        ],
        "start_line": 286,
        "end_line": 295,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "8f80b473f1f0d99355ea909af3a2871d",
        "text": "| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword\n| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword\n| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword\n| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword\n| Token_mapping.Token_definitions_unified.ForThisKeyword -> ForThisKeyword\n| Token_mapping.Token_definitions_unified.TimesKeyword -> TimesKeyword\n| Token_mapping.Token_definitions_unified.EndCloudKeyword -> EndCloudKeyword\n| Token_mapping.Token_definitions_unified.IfWenyanKeyword -> IfWenyanKeyword\n| Token_mapping.Token_definitions_unified.ThenWenyanKeyword -> ThenWenyanKeyword\n| Token_mapping.Token_definitions_unified.GreaterThanWenyan -> GreaterThanWenyan",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword",
          "| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword",
          "| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword",
          "| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword",
          "| Token_mapping.Token_definitions_unified.ForThisKeyword -> ForThisKeyword",
          "| Token_mapping.Token_definitions_unified.TimesKeyword -> TimesKeyword",
          "| Token_mapping.Token_definitions_unified.EndCloudKeyword -> EndCloudKeyword",
          "| Token_mapping.Token_definitions_unified.IfWenyanKeyword -> IfWenyanKeyword",
          "| Token_mapping.Token_definitions_unified.ThenWenyanKeyword -> ThenWenyanKeyword",
          "| Token_mapping.Token_definitions_unified.GreaterThanWenyan -> GreaterThanWenyan"
        ],
        "start_line": 15,
        "end_line": 24,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_classical.ml"
      },
      {
        "hash": "8f80b473f1f0d99355ea909af3a2871d",
        "text": "| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword\n| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword\n| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword\n| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword\n| Token_mapping.Token_definitions_unified.ForThisKeyword -> ForThisKeyword\n| Token_mapping.Token_definitions_unified.TimesKeyword -> TimesKeyword\n| Token_mapping.Token_definitions_unified.EndCloudKeyword -> EndCloudKeyword\n| Token_mapping.Token_definitions_unified.IfWenyanKeyword -> IfWenyanKeyword\n| Token_mapping.Token_definitions_unified.ThenWenyanKeyword -> ThenWenyanKeyword\n| Token_mapping.Token_definitions_unified.GreaterThanWenyan -> GreaterThanWenyan",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword",
          "| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword",
          "| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword",
          "| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword",
          "| Token_mapping.Token_definitions_unified.ForThisKeyword -> ForThisKeyword",
          "| Token_mapping.Token_definitions_unified.TimesKeyword -> TimesKeyword",
          "| Token_mapping.Token_definitions_unified.EndCloudKeyword -> EndCloudKeyword",
          "| Token_mapping.Token_definitions_unified.IfWenyanKeyword -> IfWenyanKeyword",
          "| Token_mapping.Token_definitions_unified.ThenWenyanKeyword -> ThenWenyanKeyword",
          "| Token_mapping.Token_definitions_unified.GreaterThanWenyan -> GreaterThanWenyan"
        ],
        "start_line": 26,
        "end_line": 35,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "8f80b473f1f0d99355ea909af3a2871d",
        "text": "| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword\n| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword\n| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword\n| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword\n| Token_mapping.Token_definitions_unified.ForThisKeyword -> ForThisKeyword\n| Token_mapping.Token_definitions_unified.TimesKeyword -> TimesKeyword\n| Token_mapping.Token_definitions_unified.EndCloudKeyword -> EndCloudKeyword\n| Token_mapping.Token_definitions_unified.IfWenyanKeyword -> IfWenyanKeyword\n| Token_mapping.Token_definitions_unified.ThenWenyanKeyword -> ThenWenyanKeyword\n| Token_mapping.Token_definitions_unified.GreaterThanWenyan -> GreaterThanWenyan",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword",
          "| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword",
          "| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword",
          "| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword",
          "| Token_mapping.Token_definitions_unified.ForThisKeyword -> ForThisKeyword",
          "| Token_mapping.Token_definitions_unified.TimesKeyword -> TimesKeyword",
          "| Token_mapping.Token_definitions_unified.EndCloudKeyword -> EndCloudKeyword",
          "| Token_mapping.Token_definitions_unified.IfWenyanKeyword -> IfWenyanKeyword",
          "| Token_mapping.Token_definitions_unified.ThenWenyanKeyword -> ThenWenyanKeyword",
          "| Token_mapping.Token_definitions_unified.GreaterThanWenyan -> GreaterThanWenyan"
        ],
        "start_line": 128,
        "end_line": 137,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "8f80b473f1f0d99355ea909af3a2871d",
        "text": "| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword\n| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword\n| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword\n| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword\n| Token_mapping.Token_definitions_unified.ForThisKeyword -> ForThisKeyword\n| Token_mapping.Token_definitions_unified.TimesKeyword -> TimesKeyword\n| Token_mapping.Token_definitions_unified.EndCloudKeyword -> EndCloudKeyword\n| Token_mapping.Token_definitions_unified.IfWenyanKeyword -> IfWenyanKeyword\n| Token_mapping.Token_definitions_unified.ThenWenyanKeyword -> ThenWenyanKeyword\n| Token_mapping.Token_definitions_unified.GreaterThanWenyan -> GreaterThanWenyan",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword",
          "| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword",
          "| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword",
          "| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword",
          "| Token_mapping.Token_definitions_unified.ForThisKeyword -> ForThisKeyword",
          "| Token_mapping.Token_definitions_unified.TimesKeyword -> TimesKeyword",
          "| Token_mapping.Token_definitions_unified.EndCloudKeyword -> EndCloudKeyword",
          "| Token_mapping.Token_definitions_unified.IfWenyanKeyword -> IfWenyanKeyword",
          "| Token_mapping.Token_definitions_unified.ThenWenyanKeyword -> ThenWenyanKeyword",
          "| Token_mapping.Token_definitions_unified.GreaterThanWenyan -> GreaterThanWenyan"
        ],
        "start_line": 99,
        "end_line": 108,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_basic_keywords.ml"
      }
    ],
    "82b6b97f4f1129d153fc16817dddbcc6": [
      {
        "hash": "82b6b97f4f1129d153fc16817dddbcc6",
        "text": "| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword\n| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword\n| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword\n| Token_mapping.Token_definitions_unified.ForThisKeyword -> ForThisKeyword\n| Token_mapping.Token_definitions_unified.TimesKeyword -> TimesKeyword\n| Token_mapping.Token_definitions_unified.EndCloudKeyword -> EndCloudKeyword\n| Token_mapping.Token_definitions_unified.IfWenyanKeyword -> IfWenyanKeyword\n| Token_mapping.Token_definitions_unified.ThenWenyanKeyword -> ThenWenyanKeyword\n| Token_mapping.Token_definitions_unified.GreaterThanWenyan -> GreaterThanWenyan\n| Token_mapping.Token_definitions_unified.LessThanWenyan -> LessThanWenyan",
        "lines": [
          "| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword",
          "| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword",
          "| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword",
          "| Token_mapping.Token_definitions_unified.ForThisKeyword -> ForThisKeyword",
          "| Token_mapping.Token_definitions_unified.TimesKeyword -> TimesKeyword",
          "| Token_mapping.Token_definitions_unified.EndCloudKeyword -> EndCloudKeyword",
          "| Token_mapping.Token_definitions_unified.IfWenyanKeyword -> IfWenyanKeyword",
          "| Token_mapping.Token_definitions_unified.ThenWenyanKeyword -> ThenWenyanKeyword",
          "| Token_mapping.Token_definitions_unified.GreaterThanWenyan -> GreaterThanWenyan",
          "| Token_mapping.Token_definitions_unified.LessThanWenyan -> LessThanWenyan"
        ],
        "start_line": 158,
        "end_line": 167,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "82b6b97f4f1129d153fc16817dddbcc6",
        "text": "| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword\n| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword\n| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword\n| Token_mapping.Token_definitions_unified.ForThisKeyword -> ForThisKeyword\n| Token_mapping.Token_definitions_unified.TimesKeyword -> TimesKeyword\n| Token_mapping.Token_definitions_unified.EndCloudKeyword -> EndCloudKeyword\n| Token_mapping.Token_definitions_unified.IfWenyanKeyword -> IfWenyanKeyword\n| Token_mapping.Token_definitions_unified.ThenWenyanKeyword -> ThenWenyanKeyword\n| Token_mapping.Token_definitions_unified.GreaterThanWenyan -> GreaterThanWenyan\n| Token_mapping.Token_definitions_unified.LessThanWenyan -> LessThanWenyan",
        "lines": [
          "| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword",
          "| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword",
          "| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword",
          "| Token_mapping.Token_definitions_unified.ForThisKeyword -> ForThisKeyword",
          "| Token_mapping.Token_definitions_unified.TimesKeyword -> TimesKeyword",
          "| Token_mapping.Token_definitions_unified.EndCloudKeyword -> EndCloudKeyword",
          "| Token_mapping.Token_definitions_unified.IfWenyanKeyword -> IfWenyanKeyword",
          "| Token_mapping.Token_definitions_unified.ThenWenyanKeyword -> ThenWenyanKeyword",
          "| Token_mapping.Token_definitions_unified.GreaterThanWenyan -> GreaterThanWenyan",
          "| Token_mapping.Token_definitions_unified.LessThanWenyan -> LessThanWenyan"
        ],
        "start_line": 287,
        "end_line": 296,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "82b6b97f4f1129d153fc16817dddbcc6",
        "text": "| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword\n| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword\n| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword\n| Token_mapping.Token_definitions_unified.ForThisKeyword -> ForThisKeyword\n| Token_mapping.Token_definitions_unified.TimesKeyword -> TimesKeyword\n| Token_mapping.Token_definitions_unified.EndCloudKeyword -> EndCloudKeyword\n| Token_mapping.Token_definitions_unified.IfWenyanKeyword -> IfWenyanKeyword\n| Token_mapping.Token_definitions_unified.ThenWenyanKeyword -> ThenWenyanKeyword\n| Token_mapping.Token_definitions_unified.GreaterThanWenyan -> GreaterThanWenyan\n| Token_mapping.Token_definitions_unified.LessThanWenyan -> LessThanWenyan",
        "lines": [
          "| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword",
          "| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword",
          "| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword",
          "| Token_mapping.Token_definitions_unified.ForThisKeyword -> ForThisKeyword",
          "| Token_mapping.Token_definitions_unified.TimesKeyword -> TimesKeyword",
          "| Token_mapping.Token_definitions_unified.EndCloudKeyword -> EndCloudKeyword",
          "| Token_mapping.Token_definitions_unified.IfWenyanKeyword -> IfWenyanKeyword",
          "| Token_mapping.Token_definitions_unified.ThenWenyanKeyword -> ThenWenyanKeyword",
          "| Token_mapping.Token_definitions_unified.GreaterThanWenyan -> GreaterThanWenyan",
          "| Token_mapping.Token_definitions_unified.LessThanWenyan -> LessThanWenyan"
        ],
        "start_line": 16,
        "end_line": 25,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_classical.ml"
      },
      {
        "hash": "82b6b97f4f1129d153fc16817dddbcc6",
        "text": "| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword\n| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword\n| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword\n| Token_mapping.Token_definitions_unified.ForThisKeyword -> ForThisKeyword\n| Token_mapping.Token_definitions_unified.TimesKeyword -> TimesKeyword\n| Token_mapping.Token_definitions_unified.EndCloudKeyword -> EndCloudKeyword\n| Token_mapping.Token_definitions_unified.IfWenyanKeyword -> IfWenyanKeyword\n| Token_mapping.Token_definitions_unified.ThenWenyanKeyword -> ThenWenyanKeyword\n| Token_mapping.Token_definitions_unified.GreaterThanWenyan -> GreaterThanWenyan\n| Token_mapping.Token_definitions_unified.LessThanWenyan -> LessThanWenyan",
        "lines": [
          "| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword",
          "| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword",
          "| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword",
          "| Token_mapping.Token_definitions_unified.ForThisKeyword -> ForThisKeyword",
          "| Token_mapping.Token_definitions_unified.TimesKeyword -> TimesKeyword",
          "| Token_mapping.Token_definitions_unified.EndCloudKeyword -> EndCloudKeyword",
          "| Token_mapping.Token_definitions_unified.IfWenyanKeyword -> IfWenyanKeyword",
          "| Token_mapping.Token_definitions_unified.ThenWenyanKeyword -> ThenWenyanKeyword",
          "| Token_mapping.Token_definitions_unified.GreaterThanWenyan -> GreaterThanWenyan",
          "| Token_mapping.Token_definitions_unified.LessThanWenyan -> LessThanWenyan"
        ],
        "start_line": 27,
        "end_line": 36,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "82b6b97f4f1129d153fc16817dddbcc6",
        "text": "| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword\n| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword\n| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword\n| Token_mapping.Token_definitions_unified.ForThisKeyword -> ForThisKeyword\n| Token_mapping.Token_definitions_unified.TimesKeyword -> TimesKeyword\n| Token_mapping.Token_definitions_unified.EndCloudKeyword -> EndCloudKeyword\n| Token_mapping.Token_definitions_unified.IfWenyanKeyword -> IfWenyanKeyword\n| Token_mapping.Token_definitions_unified.ThenWenyanKeyword -> ThenWenyanKeyword\n| Token_mapping.Token_definitions_unified.GreaterThanWenyan -> GreaterThanWenyan\n| Token_mapping.Token_definitions_unified.LessThanWenyan -> LessThanWenyan",
        "lines": [
          "| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword",
          "| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword",
          "| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword",
          "| Token_mapping.Token_definitions_unified.ForThisKeyword -> ForThisKeyword",
          "| Token_mapping.Token_definitions_unified.TimesKeyword -> TimesKeyword",
          "| Token_mapping.Token_definitions_unified.EndCloudKeyword -> EndCloudKeyword",
          "| Token_mapping.Token_definitions_unified.IfWenyanKeyword -> IfWenyanKeyword",
          "| Token_mapping.Token_definitions_unified.ThenWenyanKeyword -> ThenWenyanKeyword",
          "| Token_mapping.Token_definitions_unified.GreaterThanWenyan -> GreaterThanWenyan",
          "| Token_mapping.Token_definitions_unified.LessThanWenyan -> LessThanWenyan"
        ],
        "start_line": 129,
        "end_line": 138,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "82b6b97f4f1129d153fc16817dddbcc6",
        "text": "| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword\n| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword\n| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword\n| Token_mapping.Token_definitions_unified.ForThisKeyword -> ForThisKeyword\n| Token_mapping.Token_definitions_unified.TimesKeyword -> TimesKeyword\n| Token_mapping.Token_definitions_unified.EndCloudKeyword -> EndCloudKeyword\n| Token_mapping.Token_definitions_unified.IfWenyanKeyword -> IfWenyanKeyword\n| Token_mapping.Token_definitions_unified.ThenWenyanKeyword -> ThenWenyanKeyword\n| Token_mapping.Token_definitions_unified.GreaterThanWenyan -> GreaterThanWenyan\n| Token_mapping.Token_definitions_unified.LessThanWenyan -> LessThanWenyan",
        "lines": [
          "| Token_mapping.Token_definitions_unified.NumberKeyword -> NumberKeyword",
          "| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword",
          "| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword",
          "| Token_mapping.Token_definitions_unified.ForThisKeyword -> ForThisKeyword",
          "| Token_mapping.Token_definitions_unified.TimesKeyword -> TimesKeyword",
          "| Token_mapping.Token_definitions_unified.EndCloudKeyword -> EndCloudKeyword",
          "| Token_mapping.Token_definitions_unified.IfWenyanKeyword -> IfWenyanKeyword",
          "| Token_mapping.Token_definitions_unified.ThenWenyanKeyword -> ThenWenyanKeyword",
          "| Token_mapping.Token_definitions_unified.GreaterThanWenyan -> GreaterThanWenyan",
          "| Token_mapping.Token_definitions_unified.LessThanWenyan -> LessThanWenyan"
        ],
        "start_line": 100,
        "end_line": 109,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_basic_keywords.ml"
      }
    ],
    "5c7f3ef997f707ef08274ec2df6e280a": [
      {
        "hash": "5c7f3ef997f707ef08274ec2df6e280a",
        "text": "let convert_ancient_keywords = function\n| Token_mapping.Token_definitions_unified.AncientDefineKeyword -> AncientDefineKeyword\n| Token_mapping.Token_definitions_unified.AncientEndKeyword -> AncientEndKeyword\n| Token_mapping.Token_definitions_unified.AncientAlgorithmKeyword -> AncientAlgorithmKeyword\n| Token_mapping.Token_definitions_unified.AncientCompleteKeyword -> AncientCompleteKeyword\n| Token_mapping.Token_definitions_unified.AncientObserveKeyword -> AncientObserveKeyword\n| Token_mapping.Token_definitions_unified.AncientNatureKeyword -> AncientNatureKeyword\n| Token_mapping.Token_definitions_unified.AncientThenKeyword -> AncientThenKeyword\n| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword\n| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword",
        "lines": [
          "let convert_ancient_keywords = function",
          "| Token_mapping.Token_definitions_unified.AncientDefineKeyword -> AncientDefineKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEndKeyword -> AncientEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAlgorithmKeyword -> AncientAlgorithmKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCompleteKeyword -> AncientCompleteKeyword",
          "| Token_mapping.Token_definitions_unified.AncientObserveKeyword -> AncientObserveKeyword",
          "| Token_mapping.Token_definitions_unified.AncientNatureKeyword -> AncientNatureKeyword",
          "| Token_mapping.Token_definitions_unified.AncientThenKeyword -> AncientThenKeyword",
          "| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword"
        ],
        "start_line": 173,
        "end_line": 182,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "5c7f3ef997f707ef08274ec2df6e280a",
        "text": "let convert_ancient_keywords = function\n| Token_mapping.Token_definitions_unified.AncientDefineKeyword -> AncientDefineKeyword\n| Token_mapping.Token_definitions_unified.AncientEndKeyword -> AncientEndKeyword\n| Token_mapping.Token_definitions_unified.AncientAlgorithmKeyword -> AncientAlgorithmKeyword\n| Token_mapping.Token_definitions_unified.AncientCompleteKeyword -> AncientCompleteKeyword\n| Token_mapping.Token_definitions_unified.AncientObserveKeyword -> AncientObserveKeyword\n| Token_mapping.Token_definitions_unified.AncientNatureKeyword -> AncientNatureKeyword\n| Token_mapping.Token_definitions_unified.AncientThenKeyword -> AncientThenKeyword\n| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword\n| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword",
        "lines": [
          "let convert_ancient_keywords = function",
          "| Token_mapping.Token_definitions_unified.AncientDefineKeyword -> AncientDefineKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEndKeyword -> AncientEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAlgorithmKeyword -> AncientAlgorithmKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCompleteKeyword -> AncientCompleteKeyword",
          "| Token_mapping.Token_definitions_unified.AncientObserveKeyword -> AncientObserveKeyword",
          "| Token_mapping.Token_definitions_unified.AncientNatureKeyword -> AncientNatureKeyword",
          "| Token_mapping.Token_definitions_unified.AncientThenKeyword -> AncientThenKeyword",
          "| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword"
        ],
        "start_line": 113,
        "end_line": 122,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_basic_keywords.ml"
      }
    ],
    "ae6f21c216d0480b8d8b8b7af8d661e9": [
      {
        "hash": "ae6f21c216d0480b8d8b8b7af8d661e9",
        "text": "| Token_mapping.Token_definitions_unified.AncientDefineKeyword -> AncientDefineKeyword\n| Token_mapping.Token_definitions_unified.AncientEndKeyword -> AncientEndKeyword\n| Token_mapping.Token_definitions_unified.AncientAlgorithmKeyword -> AncientAlgorithmKeyword\n| Token_mapping.Token_definitions_unified.AncientCompleteKeyword -> AncientCompleteKeyword\n| Token_mapping.Token_definitions_unified.AncientObserveKeyword -> AncientObserveKeyword\n| Token_mapping.Token_definitions_unified.AncientNatureKeyword -> AncientNatureKeyword\n| Token_mapping.Token_definitions_unified.AncientThenKeyword -> AncientThenKeyword\n| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword\n| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientDefineKeyword -> AncientDefineKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEndKeyword -> AncientEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAlgorithmKeyword -> AncientAlgorithmKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCompleteKeyword -> AncientCompleteKeyword",
          "| Token_mapping.Token_definitions_unified.AncientObserveKeyword -> AncientObserveKeyword",
          "| Token_mapping.Token_definitions_unified.AncientNatureKeyword -> AncientNatureKeyword",
          "| Token_mapping.Token_definitions_unified.AncientThenKeyword -> AncientThenKeyword",
          "| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword"
        ],
        "start_line": 174,
        "end_line": 183,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "ae6f21c216d0480b8d8b8b7af8d661e9",
        "text": "| Token_mapping.Token_definitions_unified.AncientDefineKeyword -> AncientDefineKeyword\n| Token_mapping.Token_definitions_unified.AncientEndKeyword -> AncientEndKeyword\n| Token_mapping.Token_definitions_unified.AncientAlgorithmKeyword -> AncientAlgorithmKeyword\n| Token_mapping.Token_definitions_unified.AncientCompleteKeyword -> AncientCompleteKeyword\n| Token_mapping.Token_definitions_unified.AncientObserveKeyword -> AncientObserveKeyword\n| Token_mapping.Token_definitions_unified.AncientNatureKeyword -> AncientNatureKeyword\n| Token_mapping.Token_definitions_unified.AncientThenKeyword -> AncientThenKeyword\n| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword\n| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientDefineKeyword -> AncientDefineKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEndKeyword -> AncientEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAlgorithmKeyword -> AncientAlgorithmKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCompleteKeyword -> AncientCompleteKeyword",
          "| Token_mapping.Token_definitions_unified.AncientObserveKeyword -> AncientObserveKeyword",
          "| Token_mapping.Token_definitions_unified.AncientNatureKeyword -> AncientNatureKeyword",
          "| Token_mapping.Token_definitions_unified.AncientThenKeyword -> AncientThenKeyword",
          "| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword"
        ],
        "start_line": 329,
        "end_line": 338,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "ae6f21c216d0480b8d8b8b7af8d661e9",
        "text": "| Token_mapping.Token_definitions_unified.AncientDefineKeyword -> AncientDefineKeyword\n| Token_mapping.Token_definitions_unified.AncientEndKeyword -> AncientEndKeyword\n| Token_mapping.Token_definitions_unified.AncientAlgorithmKeyword -> AncientAlgorithmKeyword\n| Token_mapping.Token_definitions_unified.AncientCompleteKeyword -> AncientCompleteKeyword\n| Token_mapping.Token_definitions_unified.AncientObserveKeyword -> AncientObserveKeyword\n| Token_mapping.Token_definitions_unified.AncientNatureKeyword -> AncientNatureKeyword\n| Token_mapping.Token_definitions_unified.AncientThenKeyword -> AncientThenKeyword\n| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword\n| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientDefineKeyword -> AncientDefineKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEndKeyword -> AncientEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAlgorithmKeyword -> AncientAlgorithmKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCompleteKeyword -> AncientCompleteKeyword",
          "| Token_mapping.Token_definitions_unified.AncientObserveKeyword -> AncientObserveKeyword",
          "| Token_mapping.Token_definitions_unified.AncientNatureKeyword -> AncientNatureKeyword",
          "| Token_mapping.Token_definitions_unified.AncientThenKeyword -> AncientThenKeyword",
          "| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword"
        ],
        "start_line": 58,
        "end_line": 67,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_classical.ml"
      },
      {
        "hash": "ae6f21c216d0480b8d8b8b7af8d661e9",
        "text": "| Token_mapping.Token_definitions_unified.AncientDefineKeyword -> AncientDefineKeyword\n| Token_mapping.Token_definitions_unified.AncientEndKeyword -> AncientEndKeyword\n| Token_mapping.Token_definitions_unified.AncientAlgorithmKeyword -> AncientAlgorithmKeyword\n| Token_mapping.Token_definitions_unified.AncientCompleteKeyword -> AncientCompleteKeyword\n| Token_mapping.Token_definitions_unified.AncientObserveKeyword -> AncientObserveKeyword\n| Token_mapping.Token_definitions_unified.AncientNatureKeyword -> AncientNatureKeyword\n| Token_mapping.Token_definitions_unified.AncientThenKeyword -> AncientThenKeyword\n| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword\n| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientDefineKeyword -> AncientDefineKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEndKeyword -> AncientEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAlgorithmKeyword -> AncientAlgorithmKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCompleteKeyword -> AncientCompleteKeyword",
          "| Token_mapping.Token_definitions_unified.AncientObserveKeyword -> AncientObserveKeyword",
          "| Token_mapping.Token_definitions_unified.AncientNatureKeyword -> AncientNatureKeyword",
          "| Token_mapping.Token_definitions_unified.AncientThenKeyword -> AncientThenKeyword",
          "| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword"
        ],
        "start_line": 61,
        "end_line": 70,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "ae6f21c216d0480b8d8b8b7af8d661e9",
        "text": "| Token_mapping.Token_definitions_unified.AncientDefineKeyword -> AncientDefineKeyword\n| Token_mapping.Token_definitions_unified.AncientEndKeyword -> AncientEndKeyword\n| Token_mapping.Token_definitions_unified.AncientAlgorithmKeyword -> AncientAlgorithmKeyword\n| Token_mapping.Token_definitions_unified.AncientCompleteKeyword -> AncientCompleteKeyword\n| Token_mapping.Token_definitions_unified.AncientObserveKeyword -> AncientObserveKeyword\n| Token_mapping.Token_definitions_unified.AncientNatureKeyword -> AncientNatureKeyword\n| Token_mapping.Token_definitions_unified.AncientThenKeyword -> AncientThenKeyword\n| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword\n| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientDefineKeyword -> AncientDefineKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEndKeyword -> AncientEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAlgorithmKeyword -> AncientAlgorithmKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCompleteKeyword -> AncientCompleteKeyword",
          "| Token_mapping.Token_definitions_unified.AncientObserveKeyword -> AncientObserveKeyword",
          "| Token_mapping.Token_definitions_unified.AncientNatureKeyword -> AncientNatureKeyword",
          "| Token_mapping.Token_definitions_unified.AncientThenKeyword -> AncientThenKeyword",
          "| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword"
        ],
        "start_line": 169,
        "end_line": 178,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "ae6f21c216d0480b8d8b8b7af8d661e9",
        "text": "| Token_mapping.Token_definitions_unified.AncientDefineKeyword -> AncientDefineKeyword\n| Token_mapping.Token_definitions_unified.AncientEndKeyword -> AncientEndKeyword\n| Token_mapping.Token_definitions_unified.AncientAlgorithmKeyword -> AncientAlgorithmKeyword\n| Token_mapping.Token_definitions_unified.AncientCompleteKeyword -> AncientCompleteKeyword\n| Token_mapping.Token_definitions_unified.AncientObserveKeyword -> AncientObserveKeyword\n| Token_mapping.Token_definitions_unified.AncientNatureKeyword -> AncientNatureKeyword\n| Token_mapping.Token_definitions_unified.AncientThenKeyword -> AncientThenKeyword\n| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword\n| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientDefineKeyword -> AncientDefineKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEndKeyword -> AncientEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAlgorithmKeyword -> AncientAlgorithmKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCompleteKeyword -> AncientCompleteKeyword",
          "| Token_mapping.Token_definitions_unified.AncientObserveKeyword -> AncientObserveKeyword",
          "| Token_mapping.Token_definitions_unified.AncientNatureKeyword -> AncientNatureKeyword",
          "| Token_mapping.Token_definitions_unified.AncientThenKeyword -> AncientThenKeyword",
          "| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword"
        ],
        "start_line": 114,
        "end_line": 123,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_basic_keywords.ml"
      },
      {
        "hash": "ae6f21c216d0480b8d8b8b7af8d661e9",
        "text": "| Token_mapping.Token_definitions_unified.AncientDefineKeyword -> AncientDefineKeyword\n| Token_mapping.Token_definitions_unified.AncientEndKeyword -> AncientEndKeyword\n| Token_mapping.Token_definitions_unified.AncientAlgorithmKeyword -> AncientAlgorithmKeyword\n| Token_mapping.Token_definitions_unified.AncientCompleteKeyword -> AncientCompleteKeyword\n| Token_mapping.Token_definitions_unified.AncientObserveKeyword -> AncientObserveKeyword\n| Token_mapping.Token_definitions_unified.AncientNatureKeyword -> AncientNatureKeyword\n| Token_mapping.Token_definitions_unified.AncientThenKeyword -> AncientThenKeyword\n| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword\n| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientDefineKeyword -> AncientDefineKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEndKeyword -> AncientEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAlgorithmKeyword -> AncientAlgorithmKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCompleteKeyword -> AncientCompleteKeyword",
          "| Token_mapping.Token_definitions_unified.AncientObserveKeyword -> AncientObserveKeyword",
          "| Token_mapping.Token_definitions_unified.AncientNatureKeyword -> AncientNatureKeyword",
          "| Token_mapping.Token_definitions_unified.AncientThenKeyword -> AncientThenKeyword",
          "| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword"
        ],
        "start_line": 105,
        "end_line": 114,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_keywords.ml"
      }
    ],
    "8b41865a2bf1e20dfc816a57936beda1": [
      {
        "hash": "8b41865a2bf1e20dfc816a57936beda1",
        "text": "| Token_mapping.Token_definitions_unified.AncientEndKeyword -> AncientEndKeyword\n| Token_mapping.Token_definitions_unified.AncientAlgorithmKeyword -> AncientAlgorithmKeyword\n| Token_mapping.Token_definitions_unified.AncientCompleteKeyword -> AncientCompleteKeyword\n| Token_mapping.Token_definitions_unified.AncientObserveKeyword -> AncientObserveKeyword\n| Token_mapping.Token_definitions_unified.AncientNatureKeyword -> AncientNatureKeyword\n| Token_mapping.Token_definitions_unified.AncientThenKeyword -> AncientThenKeyword\n| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword\n| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword\n| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientEndKeyword -> AncientEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAlgorithmKeyword -> AncientAlgorithmKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCompleteKeyword -> AncientCompleteKeyword",
          "| Token_mapping.Token_definitions_unified.AncientObserveKeyword -> AncientObserveKeyword",
          "| Token_mapping.Token_definitions_unified.AncientNatureKeyword -> AncientNatureKeyword",
          "| Token_mapping.Token_definitions_unified.AncientThenKeyword -> AncientThenKeyword",
          "| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword"
        ],
        "start_line": 175,
        "end_line": 184,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "8b41865a2bf1e20dfc816a57936beda1",
        "text": "| Token_mapping.Token_definitions_unified.AncientEndKeyword -> AncientEndKeyword\n| Token_mapping.Token_definitions_unified.AncientAlgorithmKeyword -> AncientAlgorithmKeyword\n| Token_mapping.Token_definitions_unified.AncientCompleteKeyword -> AncientCompleteKeyword\n| Token_mapping.Token_definitions_unified.AncientObserveKeyword -> AncientObserveKeyword\n| Token_mapping.Token_definitions_unified.AncientNatureKeyword -> AncientNatureKeyword\n| Token_mapping.Token_definitions_unified.AncientThenKeyword -> AncientThenKeyword\n| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword\n| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword\n| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientEndKeyword -> AncientEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAlgorithmKeyword -> AncientAlgorithmKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCompleteKeyword -> AncientCompleteKeyword",
          "| Token_mapping.Token_definitions_unified.AncientObserveKeyword -> AncientObserveKeyword",
          "| Token_mapping.Token_definitions_unified.AncientNatureKeyword -> AncientNatureKeyword",
          "| Token_mapping.Token_definitions_unified.AncientThenKeyword -> AncientThenKeyword",
          "| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword"
        ],
        "start_line": 330,
        "end_line": 339,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "8b41865a2bf1e20dfc816a57936beda1",
        "text": "| Token_mapping.Token_definitions_unified.AncientEndKeyword -> AncientEndKeyword\n| Token_mapping.Token_definitions_unified.AncientAlgorithmKeyword -> AncientAlgorithmKeyword\n| Token_mapping.Token_definitions_unified.AncientCompleteKeyword -> AncientCompleteKeyword\n| Token_mapping.Token_definitions_unified.AncientObserveKeyword -> AncientObserveKeyword\n| Token_mapping.Token_definitions_unified.AncientNatureKeyword -> AncientNatureKeyword\n| Token_mapping.Token_definitions_unified.AncientThenKeyword -> AncientThenKeyword\n| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword\n| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword\n| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientEndKeyword -> AncientEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAlgorithmKeyword -> AncientAlgorithmKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCompleteKeyword -> AncientCompleteKeyword",
          "| Token_mapping.Token_definitions_unified.AncientObserveKeyword -> AncientObserveKeyword",
          "| Token_mapping.Token_definitions_unified.AncientNatureKeyword -> AncientNatureKeyword",
          "| Token_mapping.Token_definitions_unified.AncientThenKeyword -> AncientThenKeyword",
          "| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword"
        ],
        "start_line": 59,
        "end_line": 68,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_classical.ml"
      },
      {
        "hash": "8b41865a2bf1e20dfc816a57936beda1",
        "text": "| Token_mapping.Token_definitions_unified.AncientEndKeyword -> AncientEndKeyword\n| Token_mapping.Token_definitions_unified.AncientAlgorithmKeyword -> AncientAlgorithmKeyword\n| Token_mapping.Token_definitions_unified.AncientCompleteKeyword -> AncientCompleteKeyword\n| Token_mapping.Token_definitions_unified.AncientObserveKeyword -> AncientObserveKeyword\n| Token_mapping.Token_definitions_unified.AncientNatureKeyword -> AncientNatureKeyword\n| Token_mapping.Token_definitions_unified.AncientThenKeyword -> AncientThenKeyword\n| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword\n| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword\n| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientEndKeyword -> AncientEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAlgorithmKeyword -> AncientAlgorithmKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCompleteKeyword -> AncientCompleteKeyword",
          "| Token_mapping.Token_definitions_unified.AncientObserveKeyword -> AncientObserveKeyword",
          "| Token_mapping.Token_definitions_unified.AncientNatureKeyword -> AncientNatureKeyword",
          "| Token_mapping.Token_definitions_unified.AncientThenKeyword -> AncientThenKeyword",
          "| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword"
        ],
        "start_line": 62,
        "end_line": 71,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "8b41865a2bf1e20dfc816a57936beda1",
        "text": "| Token_mapping.Token_definitions_unified.AncientEndKeyword -> AncientEndKeyword\n| Token_mapping.Token_definitions_unified.AncientAlgorithmKeyword -> AncientAlgorithmKeyword\n| Token_mapping.Token_definitions_unified.AncientCompleteKeyword -> AncientCompleteKeyword\n| Token_mapping.Token_definitions_unified.AncientObserveKeyword -> AncientObserveKeyword\n| Token_mapping.Token_definitions_unified.AncientNatureKeyword -> AncientNatureKeyword\n| Token_mapping.Token_definitions_unified.AncientThenKeyword -> AncientThenKeyword\n| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword\n| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword\n| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientEndKeyword -> AncientEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAlgorithmKeyword -> AncientAlgorithmKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCompleteKeyword -> AncientCompleteKeyword",
          "| Token_mapping.Token_definitions_unified.AncientObserveKeyword -> AncientObserveKeyword",
          "| Token_mapping.Token_definitions_unified.AncientNatureKeyword -> AncientNatureKeyword",
          "| Token_mapping.Token_definitions_unified.AncientThenKeyword -> AncientThenKeyword",
          "| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword"
        ],
        "start_line": 170,
        "end_line": 179,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "8b41865a2bf1e20dfc816a57936beda1",
        "text": "| Token_mapping.Token_definitions_unified.AncientEndKeyword -> AncientEndKeyword\n| Token_mapping.Token_definitions_unified.AncientAlgorithmKeyword -> AncientAlgorithmKeyword\n| Token_mapping.Token_definitions_unified.AncientCompleteKeyword -> AncientCompleteKeyword\n| Token_mapping.Token_definitions_unified.AncientObserveKeyword -> AncientObserveKeyword\n| Token_mapping.Token_definitions_unified.AncientNatureKeyword -> AncientNatureKeyword\n| Token_mapping.Token_definitions_unified.AncientThenKeyword -> AncientThenKeyword\n| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword\n| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword\n| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientEndKeyword -> AncientEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAlgorithmKeyword -> AncientAlgorithmKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCompleteKeyword -> AncientCompleteKeyword",
          "| Token_mapping.Token_definitions_unified.AncientObserveKeyword -> AncientObserveKeyword",
          "| Token_mapping.Token_definitions_unified.AncientNatureKeyword -> AncientNatureKeyword",
          "| Token_mapping.Token_definitions_unified.AncientThenKeyword -> AncientThenKeyword",
          "| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword"
        ],
        "start_line": 115,
        "end_line": 124,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_basic_keywords.ml"
      },
      {
        "hash": "8b41865a2bf1e20dfc816a57936beda1",
        "text": "| Token_mapping.Token_definitions_unified.AncientEndKeyword -> AncientEndKeyword\n| Token_mapping.Token_definitions_unified.AncientAlgorithmKeyword -> AncientAlgorithmKeyword\n| Token_mapping.Token_definitions_unified.AncientCompleteKeyword -> AncientCompleteKeyword\n| Token_mapping.Token_definitions_unified.AncientObserveKeyword -> AncientObserveKeyword\n| Token_mapping.Token_definitions_unified.AncientNatureKeyword -> AncientNatureKeyword\n| Token_mapping.Token_definitions_unified.AncientThenKeyword -> AncientThenKeyword\n| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword\n| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword\n| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientEndKeyword -> AncientEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAlgorithmKeyword -> AncientAlgorithmKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCompleteKeyword -> AncientCompleteKeyword",
          "| Token_mapping.Token_definitions_unified.AncientObserveKeyword -> AncientObserveKeyword",
          "| Token_mapping.Token_definitions_unified.AncientNatureKeyword -> AncientNatureKeyword",
          "| Token_mapping.Token_definitions_unified.AncientThenKeyword -> AncientThenKeyword",
          "| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword"
        ],
        "start_line": 106,
        "end_line": 115,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_keywords.ml"
      }
    ],
    "26c639c9de8f54505e3fdeed42be1371": [
      {
        "hash": "26c639c9de8f54505e3fdeed42be1371",
        "text": "| Token_mapping.Token_definitions_unified.AncientAlgorithmKeyword -> AncientAlgorithmKeyword\n| Token_mapping.Token_definitions_unified.AncientCompleteKeyword -> AncientCompleteKeyword\n| Token_mapping.Token_definitions_unified.AncientObserveKeyword -> AncientObserveKeyword\n| Token_mapping.Token_definitions_unified.AncientNatureKeyword -> AncientNatureKeyword\n| Token_mapping.Token_definitions_unified.AncientThenKeyword -> AncientThenKeyword\n| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword\n| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword\n| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword\n| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientAlgorithmKeyword -> AncientAlgorithmKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCompleteKeyword -> AncientCompleteKeyword",
          "| Token_mapping.Token_definitions_unified.AncientObserveKeyword -> AncientObserveKeyword",
          "| Token_mapping.Token_definitions_unified.AncientNatureKeyword -> AncientNatureKeyword",
          "| Token_mapping.Token_definitions_unified.AncientThenKeyword -> AncientThenKeyword",
          "| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword"
        ],
        "start_line": 176,
        "end_line": 185,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "26c639c9de8f54505e3fdeed42be1371",
        "text": "| Token_mapping.Token_definitions_unified.AncientAlgorithmKeyword -> AncientAlgorithmKeyword\n| Token_mapping.Token_definitions_unified.AncientCompleteKeyword -> AncientCompleteKeyword\n| Token_mapping.Token_definitions_unified.AncientObserveKeyword -> AncientObserveKeyword\n| Token_mapping.Token_definitions_unified.AncientNatureKeyword -> AncientNatureKeyword\n| Token_mapping.Token_definitions_unified.AncientThenKeyword -> AncientThenKeyword\n| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword\n| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword\n| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword\n| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientAlgorithmKeyword -> AncientAlgorithmKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCompleteKeyword -> AncientCompleteKeyword",
          "| Token_mapping.Token_definitions_unified.AncientObserveKeyword -> AncientObserveKeyword",
          "| Token_mapping.Token_definitions_unified.AncientNatureKeyword -> AncientNatureKeyword",
          "| Token_mapping.Token_definitions_unified.AncientThenKeyword -> AncientThenKeyword",
          "| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword"
        ],
        "start_line": 331,
        "end_line": 340,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "26c639c9de8f54505e3fdeed42be1371",
        "text": "| Token_mapping.Token_definitions_unified.AncientAlgorithmKeyword -> AncientAlgorithmKeyword\n| Token_mapping.Token_definitions_unified.AncientCompleteKeyword -> AncientCompleteKeyword\n| Token_mapping.Token_definitions_unified.AncientObserveKeyword -> AncientObserveKeyword\n| Token_mapping.Token_definitions_unified.AncientNatureKeyword -> AncientNatureKeyword\n| Token_mapping.Token_definitions_unified.AncientThenKeyword -> AncientThenKeyword\n| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword\n| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword\n| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword\n| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientAlgorithmKeyword -> AncientAlgorithmKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCompleteKeyword -> AncientCompleteKeyword",
          "| Token_mapping.Token_definitions_unified.AncientObserveKeyword -> AncientObserveKeyword",
          "| Token_mapping.Token_definitions_unified.AncientNatureKeyword -> AncientNatureKeyword",
          "| Token_mapping.Token_definitions_unified.AncientThenKeyword -> AncientThenKeyword",
          "| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword"
        ],
        "start_line": 60,
        "end_line": 69,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_classical.ml"
      },
      {
        "hash": "26c639c9de8f54505e3fdeed42be1371",
        "text": "| Token_mapping.Token_definitions_unified.AncientAlgorithmKeyword -> AncientAlgorithmKeyword\n| Token_mapping.Token_definitions_unified.AncientCompleteKeyword -> AncientCompleteKeyword\n| Token_mapping.Token_definitions_unified.AncientObserveKeyword -> AncientObserveKeyword\n| Token_mapping.Token_definitions_unified.AncientNatureKeyword -> AncientNatureKeyword\n| Token_mapping.Token_definitions_unified.AncientThenKeyword -> AncientThenKeyword\n| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword\n| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword\n| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword\n| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientAlgorithmKeyword -> AncientAlgorithmKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCompleteKeyword -> AncientCompleteKeyword",
          "| Token_mapping.Token_definitions_unified.AncientObserveKeyword -> AncientObserveKeyword",
          "| Token_mapping.Token_definitions_unified.AncientNatureKeyword -> AncientNatureKeyword",
          "| Token_mapping.Token_definitions_unified.AncientThenKeyword -> AncientThenKeyword",
          "| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword"
        ],
        "start_line": 63,
        "end_line": 72,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "26c639c9de8f54505e3fdeed42be1371",
        "text": "| Token_mapping.Token_definitions_unified.AncientAlgorithmKeyword -> AncientAlgorithmKeyword\n| Token_mapping.Token_definitions_unified.AncientCompleteKeyword -> AncientCompleteKeyword\n| Token_mapping.Token_definitions_unified.AncientObserveKeyword -> AncientObserveKeyword\n| Token_mapping.Token_definitions_unified.AncientNatureKeyword -> AncientNatureKeyword\n| Token_mapping.Token_definitions_unified.AncientThenKeyword -> AncientThenKeyword\n| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword\n| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword\n| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword\n| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientAlgorithmKeyword -> AncientAlgorithmKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCompleteKeyword -> AncientCompleteKeyword",
          "| Token_mapping.Token_definitions_unified.AncientObserveKeyword -> AncientObserveKeyword",
          "| Token_mapping.Token_definitions_unified.AncientNatureKeyword -> AncientNatureKeyword",
          "| Token_mapping.Token_definitions_unified.AncientThenKeyword -> AncientThenKeyword",
          "| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword"
        ],
        "start_line": 171,
        "end_line": 180,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "26c639c9de8f54505e3fdeed42be1371",
        "text": "| Token_mapping.Token_definitions_unified.AncientAlgorithmKeyword -> AncientAlgorithmKeyword\n| Token_mapping.Token_definitions_unified.AncientCompleteKeyword -> AncientCompleteKeyword\n| Token_mapping.Token_definitions_unified.AncientObserveKeyword -> AncientObserveKeyword\n| Token_mapping.Token_definitions_unified.AncientNatureKeyword -> AncientNatureKeyword\n| Token_mapping.Token_definitions_unified.AncientThenKeyword -> AncientThenKeyword\n| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword\n| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword\n| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword\n| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientAlgorithmKeyword -> AncientAlgorithmKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCompleteKeyword -> AncientCompleteKeyword",
          "| Token_mapping.Token_definitions_unified.AncientObserveKeyword -> AncientObserveKeyword",
          "| Token_mapping.Token_definitions_unified.AncientNatureKeyword -> AncientNatureKeyword",
          "| Token_mapping.Token_definitions_unified.AncientThenKeyword -> AncientThenKeyword",
          "| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword"
        ],
        "start_line": 116,
        "end_line": 125,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_basic_keywords.ml"
      },
      {
        "hash": "26c639c9de8f54505e3fdeed42be1371",
        "text": "| Token_mapping.Token_definitions_unified.AncientAlgorithmKeyword -> AncientAlgorithmKeyword\n| Token_mapping.Token_definitions_unified.AncientCompleteKeyword -> AncientCompleteKeyword\n| Token_mapping.Token_definitions_unified.AncientObserveKeyword -> AncientObserveKeyword\n| Token_mapping.Token_definitions_unified.AncientNatureKeyword -> AncientNatureKeyword\n| Token_mapping.Token_definitions_unified.AncientThenKeyword -> AncientThenKeyword\n| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword\n| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword\n| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword\n| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientAlgorithmKeyword -> AncientAlgorithmKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCompleteKeyword -> AncientCompleteKeyword",
          "| Token_mapping.Token_definitions_unified.AncientObserveKeyword -> AncientObserveKeyword",
          "| Token_mapping.Token_definitions_unified.AncientNatureKeyword -> AncientNatureKeyword",
          "| Token_mapping.Token_definitions_unified.AncientThenKeyword -> AncientThenKeyword",
          "| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword"
        ],
        "start_line": 107,
        "end_line": 116,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_keywords.ml"
      }
    ],
    "54f664c400a584498e0a0c7c159af37a": [
      {
        "hash": "54f664c400a584498e0a0c7c159af37a",
        "text": "| Token_mapping.Token_definitions_unified.AncientCompleteKeyword -> AncientCompleteKeyword\n| Token_mapping.Token_definitions_unified.AncientObserveKeyword -> AncientObserveKeyword\n| Token_mapping.Token_definitions_unified.AncientNatureKeyword -> AncientNatureKeyword\n| Token_mapping.Token_definitions_unified.AncientThenKeyword -> AncientThenKeyword\n| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword\n| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword\n| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword\n| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword\n| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientCompleteKeyword -> AncientCompleteKeyword",
          "| Token_mapping.Token_definitions_unified.AncientObserveKeyword -> AncientObserveKeyword",
          "| Token_mapping.Token_definitions_unified.AncientNatureKeyword -> AncientNatureKeyword",
          "| Token_mapping.Token_definitions_unified.AncientThenKeyword -> AncientThenKeyword",
          "| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword",
          "| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword"
        ],
        "start_line": 177,
        "end_line": 186,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "54f664c400a584498e0a0c7c159af37a",
        "text": "| Token_mapping.Token_definitions_unified.AncientCompleteKeyword -> AncientCompleteKeyword\n| Token_mapping.Token_definitions_unified.AncientObserveKeyword -> AncientObserveKeyword\n| Token_mapping.Token_definitions_unified.AncientNatureKeyword -> AncientNatureKeyword\n| Token_mapping.Token_definitions_unified.AncientThenKeyword -> AncientThenKeyword\n| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword\n| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword\n| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword\n| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword\n| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientCompleteKeyword -> AncientCompleteKeyword",
          "| Token_mapping.Token_definitions_unified.AncientObserveKeyword -> AncientObserveKeyword",
          "| Token_mapping.Token_definitions_unified.AncientNatureKeyword -> AncientNatureKeyword",
          "| Token_mapping.Token_definitions_unified.AncientThenKeyword -> AncientThenKeyword",
          "| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword",
          "| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword"
        ],
        "start_line": 332,
        "end_line": 341,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "54f664c400a584498e0a0c7c159af37a",
        "text": "| Token_mapping.Token_definitions_unified.AncientCompleteKeyword -> AncientCompleteKeyword\n| Token_mapping.Token_definitions_unified.AncientObserveKeyword -> AncientObserveKeyword\n| Token_mapping.Token_definitions_unified.AncientNatureKeyword -> AncientNatureKeyword\n| Token_mapping.Token_definitions_unified.AncientThenKeyword -> AncientThenKeyword\n| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword\n| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword\n| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword\n| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword\n| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientCompleteKeyword -> AncientCompleteKeyword",
          "| Token_mapping.Token_definitions_unified.AncientObserveKeyword -> AncientObserveKeyword",
          "| Token_mapping.Token_definitions_unified.AncientNatureKeyword -> AncientNatureKeyword",
          "| Token_mapping.Token_definitions_unified.AncientThenKeyword -> AncientThenKeyword",
          "| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword",
          "| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword"
        ],
        "start_line": 61,
        "end_line": 70,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_classical.ml"
      },
      {
        "hash": "54f664c400a584498e0a0c7c159af37a",
        "text": "| Token_mapping.Token_definitions_unified.AncientCompleteKeyword -> AncientCompleteKeyword\n| Token_mapping.Token_definitions_unified.AncientObserveKeyword -> AncientObserveKeyword\n| Token_mapping.Token_definitions_unified.AncientNatureKeyword -> AncientNatureKeyword\n| Token_mapping.Token_definitions_unified.AncientThenKeyword -> AncientThenKeyword\n| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword\n| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword\n| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword\n| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword\n| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientCompleteKeyword -> AncientCompleteKeyword",
          "| Token_mapping.Token_definitions_unified.AncientObserveKeyword -> AncientObserveKeyword",
          "| Token_mapping.Token_definitions_unified.AncientNatureKeyword -> AncientNatureKeyword",
          "| Token_mapping.Token_definitions_unified.AncientThenKeyword -> AncientThenKeyword",
          "| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword",
          "| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword"
        ],
        "start_line": 64,
        "end_line": 73,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "54f664c400a584498e0a0c7c159af37a",
        "text": "| Token_mapping.Token_definitions_unified.AncientCompleteKeyword -> AncientCompleteKeyword\n| Token_mapping.Token_definitions_unified.AncientObserveKeyword -> AncientObserveKeyword\n| Token_mapping.Token_definitions_unified.AncientNatureKeyword -> AncientNatureKeyword\n| Token_mapping.Token_definitions_unified.AncientThenKeyword -> AncientThenKeyword\n| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword\n| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword\n| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword\n| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword\n| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientCompleteKeyword -> AncientCompleteKeyword",
          "| Token_mapping.Token_definitions_unified.AncientObserveKeyword -> AncientObserveKeyword",
          "| Token_mapping.Token_definitions_unified.AncientNatureKeyword -> AncientNatureKeyword",
          "| Token_mapping.Token_definitions_unified.AncientThenKeyword -> AncientThenKeyword",
          "| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword",
          "| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword"
        ],
        "start_line": 172,
        "end_line": 181,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "54f664c400a584498e0a0c7c159af37a",
        "text": "| Token_mapping.Token_definitions_unified.AncientCompleteKeyword -> AncientCompleteKeyword\n| Token_mapping.Token_definitions_unified.AncientObserveKeyword -> AncientObserveKeyword\n| Token_mapping.Token_definitions_unified.AncientNatureKeyword -> AncientNatureKeyword\n| Token_mapping.Token_definitions_unified.AncientThenKeyword -> AncientThenKeyword\n| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword\n| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword\n| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword\n| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword\n| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientCompleteKeyword -> AncientCompleteKeyword",
          "| Token_mapping.Token_definitions_unified.AncientObserveKeyword -> AncientObserveKeyword",
          "| Token_mapping.Token_definitions_unified.AncientNatureKeyword -> AncientNatureKeyword",
          "| Token_mapping.Token_definitions_unified.AncientThenKeyword -> AncientThenKeyword",
          "| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword",
          "| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword"
        ],
        "start_line": 117,
        "end_line": 126,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_basic_keywords.ml"
      },
      {
        "hash": "54f664c400a584498e0a0c7c159af37a",
        "text": "| Token_mapping.Token_definitions_unified.AncientCompleteKeyword -> AncientCompleteKeyword\n| Token_mapping.Token_definitions_unified.AncientObserveKeyword -> AncientObserveKeyword\n| Token_mapping.Token_definitions_unified.AncientNatureKeyword -> AncientNatureKeyword\n| Token_mapping.Token_definitions_unified.AncientThenKeyword -> AncientThenKeyword\n| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword\n| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword\n| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword\n| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword\n| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientCompleteKeyword -> AncientCompleteKeyword",
          "| Token_mapping.Token_definitions_unified.AncientObserveKeyword -> AncientObserveKeyword",
          "| Token_mapping.Token_definitions_unified.AncientNatureKeyword -> AncientNatureKeyword",
          "| Token_mapping.Token_definitions_unified.AncientThenKeyword -> AncientThenKeyword",
          "| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword",
          "| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword"
        ],
        "start_line": 108,
        "end_line": 117,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_keywords.ml"
      }
    ],
    "f3b737fac834fa7afc08bd4e7271989b": [
      {
        "hash": "f3b737fac834fa7afc08bd4e7271989b",
        "text": "| Token_mapping.Token_definitions_unified.AncientObserveKeyword -> AncientObserveKeyword\n| Token_mapping.Token_definitions_unified.AncientNatureKeyword -> AncientNatureKeyword\n| Token_mapping.Token_definitions_unified.AncientThenKeyword -> AncientThenKeyword\n| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword\n| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword\n| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword\n| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword\n| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword\n| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientObserveKeyword -> AncientObserveKeyword",
          "| Token_mapping.Token_definitions_unified.AncientNatureKeyword -> AncientNatureKeyword",
          "| Token_mapping.Token_definitions_unified.AncientThenKeyword -> AncientThenKeyword",
          "| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword",
          "| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword",
          "| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe"
        ],
        "start_line": 178,
        "end_line": 187,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "f3b737fac834fa7afc08bd4e7271989b",
        "text": "| Token_mapping.Token_definitions_unified.AncientObserveKeyword -> AncientObserveKeyword\n| Token_mapping.Token_definitions_unified.AncientNatureKeyword -> AncientNatureKeyword\n| Token_mapping.Token_definitions_unified.AncientThenKeyword -> AncientThenKeyword\n| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword\n| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword\n| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword\n| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword\n| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword\n| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientObserveKeyword -> AncientObserveKeyword",
          "| Token_mapping.Token_definitions_unified.AncientNatureKeyword -> AncientNatureKeyword",
          "| Token_mapping.Token_definitions_unified.AncientThenKeyword -> AncientThenKeyword",
          "| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword",
          "| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword",
          "| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe"
        ],
        "start_line": 333,
        "end_line": 342,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "f3b737fac834fa7afc08bd4e7271989b",
        "text": "| Token_mapping.Token_definitions_unified.AncientObserveKeyword -> AncientObserveKeyword\n| Token_mapping.Token_definitions_unified.AncientNatureKeyword -> AncientNatureKeyword\n| Token_mapping.Token_definitions_unified.AncientThenKeyword -> AncientThenKeyword\n| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword\n| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword\n| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword\n| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword\n| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword\n| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientObserveKeyword -> AncientObserveKeyword",
          "| Token_mapping.Token_definitions_unified.AncientNatureKeyword -> AncientNatureKeyword",
          "| Token_mapping.Token_definitions_unified.AncientThenKeyword -> AncientThenKeyword",
          "| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword",
          "| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword",
          "| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe"
        ],
        "start_line": 62,
        "end_line": 71,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_classical.ml"
      },
      {
        "hash": "f3b737fac834fa7afc08bd4e7271989b",
        "text": "| Token_mapping.Token_definitions_unified.AncientObserveKeyword -> AncientObserveKeyword\n| Token_mapping.Token_definitions_unified.AncientNatureKeyword -> AncientNatureKeyword\n| Token_mapping.Token_definitions_unified.AncientThenKeyword -> AncientThenKeyword\n| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword\n| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword\n| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword\n| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword\n| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword\n| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientObserveKeyword -> AncientObserveKeyword",
          "| Token_mapping.Token_definitions_unified.AncientNatureKeyword -> AncientNatureKeyword",
          "| Token_mapping.Token_definitions_unified.AncientThenKeyword -> AncientThenKeyword",
          "| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword",
          "| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword",
          "| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe"
        ],
        "start_line": 65,
        "end_line": 74,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "f3b737fac834fa7afc08bd4e7271989b",
        "text": "| Token_mapping.Token_definitions_unified.AncientObserveKeyword -> AncientObserveKeyword\n| Token_mapping.Token_definitions_unified.AncientNatureKeyword -> AncientNatureKeyword\n| Token_mapping.Token_definitions_unified.AncientThenKeyword -> AncientThenKeyword\n| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword\n| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword\n| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword\n| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword\n| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword\n| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientObserveKeyword -> AncientObserveKeyword",
          "| Token_mapping.Token_definitions_unified.AncientNatureKeyword -> AncientNatureKeyword",
          "| Token_mapping.Token_definitions_unified.AncientThenKeyword -> AncientThenKeyword",
          "| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword",
          "| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword",
          "| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe"
        ],
        "start_line": 173,
        "end_line": 182,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "f3b737fac834fa7afc08bd4e7271989b",
        "text": "| Token_mapping.Token_definitions_unified.AncientObserveKeyword -> AncientObserveKeyword\n| Token_mapping.Token_definitions_unified.AncientNatureKeyword -> AncientNatureKeyword\n| Token_mapping.Token_definitions_unified.AncientThenKeyword -> AncientThenKeyword\n| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword\n| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword\n| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword\n| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword\n| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword\n| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientObserveKeyword -> AncientObserveKeyword",
          "| Token_mapping.Token_definitions_unified.AncientNatureKeyword -> AncientNatureKeyword",
          "| Token_mapping.Token_definitions_unified.AncientThenKeyword -> AncientThenKeyword",
          "| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword",
          "| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword",
          "| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe"
        ],
        "start_line": 118,
        "end_line": 127,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_basic_keywords.ml"
      },
      {
        "hash": "f3b737fac834fa7afc08bd4e7271989b",
        "text": "| Token_mapping.Token_definitions_unified.AncientObserveKeyword -> AncientObserveKeyword\n| Token_mapping.Token_definitions_unified.AncientNatureKeyword -> AncientNatureKeyword\n| Token_mapping.Token_definitions_unified.AncientThenKeyword -> AncientThenKeyword\n| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword\n| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword\n| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword\n| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword\n| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword\n| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientObserveKeyword -> AncientObserveKeyword",
          "| Token_mapping.Token_definitions_unified.AncientNatureKeyword -> AncientNatureKeyword",
          "| Token_mapping.Token_definitions_unified.AncientThenKeyword -> AncientThenKeyword",
          "| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword",
          "| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword",
          "| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe"
        ],
        "start_line": 109,
        "end_line": 118,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_keywords.ml"
      }
    ],
    "fbdf554a1ac17dcac37b8cf41c29c906": [
      {
        "hash": "fbdf554a1ac17dcac37b8cf41c29c906",
        "text": "| Token_mapping.Token_definitions_unified.AncientNatureKeyword -> AncientNatureKeyword\n| Token_mapping.Token_definitions_unified.AncientThenKeyword -> AncientThenKeyword\n| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword\n| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword\n| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword\n| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword\n| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword\n| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe\n| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientNatureKeyword -> AncientNatureKeyword",
          "| Token_mapping.Token_definitions_unified.AncientThenKeyword -> AncientThenKeyword",
          "| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword",
          "| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword",
          "| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe",
          "| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun"
        ],
        "start_line": 179,
        "end_line": 188,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "fbdf554a1ac17dcac37b8cf41c29c906",
        "text": "| Token_mapping.Token_definitions_unified.AncientNatureKeyword -> AncientNatureKeyword\n| Token_mapping.Token_definitions_unified.AncientThenKeyword -> AncientThenKeyword\n| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword\n| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword\n| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword\n| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword\n| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword\n| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe\n| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientNatureKeyword -> AncientNatureKeyword",
          "| Token_mapping.Token_definitions_unified.AncientThenKeyword -> AncientThenKeyword",
          "| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword",
          "| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword",
          "| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe",
          "| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun"
        ],
        "start_line": 334,
        "end_line": 343,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "fbdf554a1ac17dcac37b8cf41c29c906",
        "text": "| Token_mapping.Token_definitions_unified.AncientNatureKeyword -> AncientNatureKeyword\n| Token_mapping.Token_definitions_unified.AncientThenKeyword -> AncientThenKeyword\n| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword\n| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword\n| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword\n| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword\n| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword\n| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe\n| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientNatureKeyword -> AncientNatureKeyword",
          "| Token_mapping.Token_definitions_unified.AncientThenKeyword -> AncientThenKeyword",
          "| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword",
          "| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword",
          "| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe",
          "| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun"
        ],
        "start_line": 63,
        "end_line": 72,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_classical.ml"
      },
      {
        "hash": "fbdf554a1ac17dcac37b8cf41c29c906",
        "text": "| Token_mapping.Token_definitions_unified.AncientNatureKeyword -> AncientNatureKeyword\n| Token_mapping.Token_definitions_unified.AncientThenKeyword -> AncientThenKeyword\n| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword\n| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword\n| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword\n| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword\n| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword\n| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe\n| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientNatureKeyword -> AncientNatureKeyword",
          "| Token_mapping.Token_definitions_unified.AncientThenKeyword -> AncientThenKeyword",
          "| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword",
          "| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword",
          "| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe",
          "| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun"
        ],
        "start_line": 66,
        "end_line": 75,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "fbdf554a1ac17dcac37b8cf41c29c906",
        "text": "| Token_mapping.Token_definitions_unified.AncientNatureKeyword -> AncientNatureKeyword\n| Token_mapping.Token_definitions_unified.AncientThenKeyword -> AncientThenKeyword\n| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword\n| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword\n| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword\n| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword\n| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword\n| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe\n| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientNatureKeyword -> AncientNatureKeyword",
          "| Token_mapping.Token_definitions_unified.AncientThenKeyword -> AncientThenKeyword",
          "| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword",
          "| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword",
          "| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe",
          "| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun"
        ],
        "start_line": 174,
        "end_line": 183,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "fbdf554a1ac17dcac37b8cf41c29c906",
        "text": "| Token_mapping.Token_definitions_unified.AncientNatureKeyword -> AncientNatureKeyword\n| Token_mapping.Token_definitions_unified.AncientThenKeyword -> AncientThenKeyword\n| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword\n| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword\n| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword\n| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword\n| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword\n| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe\n| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientNatureKeyword -> AncientNatureKeyword",
          "| Token_mapping.Token_definitions_unified.AncientThenKeyword -> AncientThenKeyword",
          "| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword",
          "| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword",
          "| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe",
          "| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun"
        ],
        "start_line": 119,
        "end_line": 128,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_basic_keywords.ml"
      },
      {
        "hash": "fbdf554a1ac17dcac37b8cf41c29c906",
        "text": "| Token_mapping.Token_definitions_unified.AncientNatureKeyword -> AncientNatureKeyword\n| Token_mapping.Token_definitions_unified.AncientThenKeyword -> AncientThenKeyword\n| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword\n| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword\n| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword\n| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword\n| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword\n| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe\n| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientNatureKeyword -> AncientNatureKeyword",
          "| Token_mapping.Token_definitions_unified.AncientThenKeyword -> AncientThenKeyword",
          "| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword",
          "| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword",
          "| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe",
          "| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun"
        ],
        "start_line": 110,
        "end_line": 119,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_keywords.ml"
      }
    ],
    "a7d7f2857fab2e9cef554406be303380": [
      {
        "hash": "a7d7f2857fab2e9cef554406be303380",
        "text": "| Token_mapping.Token_definitions_unified.AncientThenKeyword -> AncientThenKeyword\n| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword\n| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword\n| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword\n| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword\n| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword\n| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe\n| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun\n| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientThenKeyword -> AncientThenKeyword",
          "| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword",
          "| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword",
          "| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe",
          "| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun",
          "| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword"
        ],
        "start_line": 180,
        "end_line": 189,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "a7d7f2857fab2e9cef554406be303380",
        "text": "| Token_mapping.Token_definitions_unified.AncientThenKeyword -> AncientThenKeyword\n| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword\n| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword\n| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword\n| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword\n| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword\n| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe\n| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun\n| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientThenKeyword -> AncientThenKeyword",
          "| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword",
          "| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword",
          "| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe",
          "| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun",
          "| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword"
        ],
        "start_line": 335,
        "end_line": 344,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "a7d7f2857fab2e9cef554406be303380",
        "text": "| Token_mapping.Token_definitions_unified.AncientThenKeyword -> AncientThenKeyword\n| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword\n| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword\n| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword\n| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword\n| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword\n| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe\n| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun\n| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientThenKeyword -> AncientThenKeyword",
          "| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword",
          "| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword",
          "| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe",
          "| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun",
          "| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword"
        ],
        "start_line": 64,
        "end_line": 73,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_classical.ml"
      },
      {
        "hash": "a7d7f2857fab2e9cef554406be303380",
        "text": "| Token_mapping.Token_definitions_unified.AncientThenKeyword -> AncientThenKeyword\n| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword\n| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword\n| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword\n| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword\n| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword\n| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe\n| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun\n| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientThenKeyword -> AncientThenKeyword",
          "| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword",
          "| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword",
          "| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe",
          "| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun",
          "| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword"
        ],
        "start_line": 67,
        "end_line": 76,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "a7d7f2857fab2e9cef554406be303380",
        "text": "| Token_mapping.Token_definitions_unified.AncientThenKeyword -> AncientThenKeyword\n| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword\n| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword\n| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword\n| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword\n| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword\n| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe\n| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun\n| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientThenKeyword -> AncientThenKeyword",
          "| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword",
          "| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword",
          "| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe",
          "| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun",
          "| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword"
        ],
        "start_line": 175,
        "end_line": 184,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "a7d7f2857fab2e9cef554406be303380",
        "text": "| Token_mapping.Token_definitions_unified.AncientThenKeyword -> AncientThenKeyword\n| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword\n| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword\n| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword\n| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword\n| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword\n| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe\n| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun\n| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientThenKeyword -> AncientThenKeyword",
          "| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword",
          "| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword",
          "| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe",
          "| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun",
          "| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword"
        ],
        "start_line": 120,
        "end_line": 129,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_basic_keywords.ml"
      },
      {
        "hash": "a7d7f2857fab2e9cef554406be303380",
        "text": "| Token_mapping.Token_definitions_unified.AncientThenKeyword -> AncientThenKeyword\n| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword\n| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword\n| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword\n| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword\n| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword\n| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe\n| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun\n| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientThenKeyword -> AncientThenKeyword",
          "| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword",
          "| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword",
          "| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe",
          "| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun",
          "| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword"
        ],
        "start_line": 111,
        "end_line": 120,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_keywords.ml"
      }
    ],
    "45d24555ed73103a90c50406ed189ecd": [
      {
        "hash": "45d24555ed73103a90c50406ed189ecd",
        "text": "| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword\n| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword\n| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword\n| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword\n| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword\n| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe\n| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun\n| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword\n| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword",
          "| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword",
          "| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe",
          "| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun",
          "| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword"
        ],
        "start_line": 181,
        "end_line": 190,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "45d24555ed73103a90c50406ed189ecd",
        "text": "| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword\n| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword\n| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword\n| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword\n| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword\n| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe\n| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun\n| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword\n| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword",
          "| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword",
          "| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe",
          "| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun",
          "| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword"
        ],
        "start_line": 336,
        "end_line": 345,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "45d24555ed73103a90c50406ed189ecd",
        "text": "| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword\n| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword\n| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword\n| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword\n| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword\n| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe\n| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun\n| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword\n| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword",
          "| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword",
          "| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe",
          "| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun",
          "| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword"
        ],
        "start_line": 65,
        "end_line": 74,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_classical.ml"
      },
      {
        "hash": "45d24555ed73103a90c50406ed189ecd",
        "text": "| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword\n| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword\n| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword\n| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword\n| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword\n| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe\n| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun\n| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword\n| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword",
          "| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword",
          "| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe",
          "| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun",
          "| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword"
        ],
        "start_line": 68,
        "end_line": 77,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "45d24555ed73103a90c50406ed189ecd",
        "text": "| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword\n| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword\n| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword\n| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword\n| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword\n| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe\n| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun\n| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword\n| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword",
          "| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword",
          "| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe",
          "| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun",
          "| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword"
        ],
        "start_line": 176,
        "end_line": 185,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "45d24555ed73103a90c50406ed189ecd",
        "text": "| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword\n| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword\n| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword\n| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword\n| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword\n| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe\n| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun\n| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword\n| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword",
          "| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword",
          "| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe",
          "| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun",
          "| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword"
        ],
        "start_line": 121,
        "end_line": 130,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_basic_keywords.ml"
      },
      {
        "hash": "45d24555ed73103a90c50406ed189ecd",
        "text": "| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword\n| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword\n| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword\n| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword\n| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword\n| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe\n| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun\n| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword\n| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword",
          "| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword",
          "| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe",
          "| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun",
          "| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword"
        ],
        "start_line": 112,
        "end_line": 121,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_keywords.ml"
      }
    ],
    "c18a556563f851dc8a98ae6b1f66d00e": [
      {
        "hash": "c18a556563f851dc8a98ae6b1f66d00e",
        "text": "| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword\n| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword\n| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword\n| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword\n| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe\n| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun\n| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword\n| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword\n| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword",
          "| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword",
          "| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe",
          "| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun",
          "| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword"
        ],
        "start_line": 182,
        "end_line": 191,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "c18a556563f851dc8a98ae6b1f66d00e",
        "text": "| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword\n| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword\n| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword\n| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword\n| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe\n| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun\n| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword\n| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword\n| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword",
          "| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword",
          "| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe",
          "| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun",
          "| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword"
        ],
        "start_line": 337,
        "end_line": 346,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "c18a556563f851dc8a98ae6b1f66d00e",
        "text": "| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword\n| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword\n| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword\n| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword\n| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe\n| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun\n| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword\n| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword\n| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword",
          "| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword",
          "| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe",
          "| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun",
          "| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword"
        ],
        "start_line": 66,
        "end_line": 75,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_classical.ml"
      },
      {
        "hash": "c18a556563f851dc8a98ae6b1f66d00e",
        "text": "| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword\n| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword\n| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword\n| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword\n| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe\n| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun\n| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword\n| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword\n| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword",
          "| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword",
          "| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe",
          "| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun",
          "| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword"
        ],
        "start_line": 69,
        "end_line": 78,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "c18a556563f851dc8a98ae6b1f66d00e",
        "text": "| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword\n| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword\n| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword\n| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword\n| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe\n| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun\n| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword\n| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword\n| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword",
          "| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword",
          "| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe",
          "| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun",
          "| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword"
        ],
        "start_line": 177,
        "end_line": 186,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "c18a556563f851dc8a98ae6b1f66d00e",
        "text": "| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword\n| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword\n| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword\n| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword\n| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe\n| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun\n| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword\n| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword\n| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword",
          "| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword",
          "| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe",
          "| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun",
          "| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword"
        ],
        "start_line": 122,
        "end_line": 131,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_basic_keywords.ml"
      },
      {
        "hash": "c18a556563f851dc8a98ae6b1f66d00e",
        "text": "| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword\n| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword\n| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword\n| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword\n| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe\n| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun\n| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword\n| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword\n| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword",
          "| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword",
          "| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe",
          "| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun",
          "| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword"
        ],
        "start_line": 113,
        "end_line": 122,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_keywords.ml"
      }
    ],
    "1dec0b41debf07ab77831934220731c9": [
      {
        "hash": "1dec0b41debf07ab77831934220731c9",
        "text": "| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword\n| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword\n| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword\n| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword\n| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe\n| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun\n| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword\n| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword\n| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword\n| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword",
          "| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword",
          "| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe",
          "| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun",
          "| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword"
        ],
        "start_line": 183,
        "end_line": 192,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "1dec0b41debf07ab77831934220731c9",
        "text": "| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword\n| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword\n| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword\n| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword\n| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe\n| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun\n| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword\n| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword\n| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword\n| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword",
          "| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword",
          "| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe",
          "| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun",
          "| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword"
        ],
        "start_line": 338,
        "end_line": 347,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "1dec0b41debf07ab77831934220731c9",
        "text": "| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword\n| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword\n| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword\n| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword\n| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe\n| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun\n| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword\n| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword\n| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword\n| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword",
          "| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword",
          "| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe",
          "| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun",
          "| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword"
        ],
        "start_line": 67,
        "end_line": 76,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_classical.ml"
      },
      {
        "hash": "1dec0b41debf07ab77831934220731c9",
        "text": "| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword\n| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword\n| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword\n| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword\n| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe\n| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun\n| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword\n| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword\n| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword\n| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword",
          "| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword",
          "| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe",
          "| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun",
          "| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword"
        ],
        "start_line": 70,
        "end_line": 79,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "1dec0b41debf07ab77831934220731c9",
        "text": "| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword\n| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword\n| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword\n| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword\n| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe\n| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun\n| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword\n| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword\n| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword\n| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword",
          "| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword",
          "| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe",
          "| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun",
          "| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword"
        ],
        "start_line": 178,
        "end_line": 187,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "1dec0b41debf07ab77831934220731c9",
        "text": "| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword\n| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword\n| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword\n| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword\n| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe\n| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun\n| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword\n| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword\n| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword\n| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword",
          "| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword",
          "| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe",
          "| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun",
          "| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword"
        ],
        "start_line": 123,
        "end_line": 132,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_basic_keywords.ml"
      },
      {
        "hash": "1dec0b41debf07ab77831934220731c9",
        "text": "| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword\n| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword\n| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword\n| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword\n| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe\n| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun\n| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword\n| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword\n| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword\n| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientCombineKeyword -> AncientCombineKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword",
          "| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword",
          "| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe",
          "| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun",
          "| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword"
        ],
        "start_line": 114,
        "end_line": 123,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_keywords.ml"
      }
    ],
    "91b59e3360f74dffb7f21b0a9a2c13fe": [
      {
        "hash": "91b59e3360f74dffb7f21b0a9a2c13fe",
        "text": "| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword\n| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword\n| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword\n| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe\n| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun\n| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword\n| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword\n| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword\n| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword\n| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword",
          "| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword",
          "| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe",
          "| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun",
          "| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword"
        ],
        "start_line": 184,
        "end_line": 193,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "91b59e3360f74dffb7f21b0a9a2c13fe",
        "text": "| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword\n| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword\n| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword\n| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe\n| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun\n| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword\n| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword\n| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword\n| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword\n| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword",
          "| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword",
          "| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe",
          "| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun",
          "| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword"
        ],
        "start_line": 339,
        "end_line": 348,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "91b59e3360f74dffb7f21b0a9a2c13fe",
        "text": "| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword\n| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword\n| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword\n| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe\n| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun\n| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword\n| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword\n| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword\n| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword\n| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword",
          "| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword",
          "| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe",
          "| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun",
          "| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword"
        ],
        "start_line": 68,
        "end_line": 77,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_classical.ml"
      },
      {
        "hash": "91b59e3360f74dffb7f21b0a9a2c13fe",
        "text": "| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword\n| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword\n| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword\n| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe\n| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun\n| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword\n| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword\n| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword\n| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword\n| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword",
          "| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword",
          "| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe",
          "| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun",
          "| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword"
        ],
        "start_line": 71,
        "end_line": 80,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "91b59e3360f74dffb7f21b0a9a2c13fe",
        "text": "| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword\n| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword\n| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword\n| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe\n| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun\n| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword\n| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword\n| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword\n| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword\n| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword",
          "| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword",
          "| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe",
          "| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun",
          "| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword"
        ],
        "start_line": 179,
        "end_line": 188,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "91b59e3360f74dffb7f21b0a9a2c13fe",
        "text": "| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword\n| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword\n| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword\n| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe\n| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun\n| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword\n| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword\n| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword\n| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword\n| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword",
          "| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword",
          "| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe",
          "| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun",
          "| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword"
        ],
        "start_line": 124,
        "end_line": 133,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_basic_keywords.ml"
      },
      {
        "hash": "91b59e3360f74dffb7f21b0a9a2c13fe",
        "text": "| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword\n| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword\n| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword\n| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe\n| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun\n| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword\n| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword\n| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword\n| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword\n| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientAsOneKeyword -> AncientAsOneKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword",
          "| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword",
          "| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe",
          "| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun",
          "| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword"
        ],
        "start_line": 115,
        "end_line": 124,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_keywords.ml"
      }
    ],
    "95d0be03606716ed6379c2ea70443817": [
      {
        "hash": "95d0be03606716ed6379c2ea70443817",
        "text": "| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword\n| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword\n| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe\n| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun\n| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword\n| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword\n| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword\n| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword\n| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword\n| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword",
          "| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword",
          "| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe",
          "| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun",
          "| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword"
        ],
        "start_line": 185,
        "end_line": 194,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "95d0be03606716ed6379c2ea70443817",
        "text": "| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword\n| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword\n| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe\n| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun\n| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword\n| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword\n| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword\n| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword\n| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword\n| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword",
          "| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword",
          "| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe",
          "| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun",
          "| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword"
        ],
        "start_line": 340,
        "end_line": 349,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "95d0be03606716ed6379c2ea70443817",
        "text": "| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword\n| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword\n| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe\n| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun\n| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword\n| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword\n| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword\n| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword\n| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword\n| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword",
          "| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword",
          "| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe",
          "| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun",
          "| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword"
        ],
        "start_line": 69,
        "end_line": 78,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_classical.ml"
      },
      {
        "hash": "95d0be03606716ed6379c2ea70443817",
        "text": "| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword\n| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword\n| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe\n| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun\n| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword\n| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword\n| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword\n| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword\n| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword\n| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword",
          "| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword",
          "| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe",
          "| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun",
          "| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword"
        ],
        "start_line": 72,
        "end_line": 81,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "95d0be03606716ed6379c2ea70443817",
        "text": "| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword\n| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword\n| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe\n| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun\n| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword\n| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword\n| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword\n| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword\n| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword\n| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword",
          "| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword",
          "| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe",
          "| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun",
          "| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword"
        ],
        "start_line": 180,
        "end_line": 189,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "95d0be03606716ed6379c2ea70443817",
        "text": "| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword\n| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword\n| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe\n| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun\n| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword\n| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword\n| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword\n| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword\n| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword\n| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword",
          "| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword",
          "| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe",
          "| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun",
          "| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword"
        ],
        "start_line": 125,
        "end_line": 134,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_basic_keywords.ml"
      },
      {
        "hash": "95d0be03606716ed6379c2ea70443817",
        "text": "| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword\n| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword\n| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe\n| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun\n| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword\n| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword\n| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword\n| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword\n| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword\n| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientTakeKeyword -> AncientTakeKeyword",
          "| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword",
          "| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe",
          "| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun",
          "| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword"
        ],
        "start_line": 116,
        "end_line": 125,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_keywords.ml"
      }
    ],
    "d5a6057b0e0e654c1fe9866b7eb6b264": [
      {
        "hash": "d5a6057b0e0e654c1fe9866b7eb6b264",
        "text": "| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword\n| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe\n| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun\n| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword\n| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword\n| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword\n| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword\n| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword\n| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword\n| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword",
          "| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe",
          "| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun",
          "| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword"
        ],
        "start_line": 186,
        "end_line": 195,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "d5a6057b0e0e654c1fe9866b7eb6b264",
        "text": "| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword\n| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe\n| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun\n| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword\n| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword\n| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword\n| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword\n| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword\n| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword\n| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword",
          "| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe",
          "| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun",
          "| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword"
        ],
        "start_line": 341,
        "end_line": 350,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "d5a6057b0e0e654c1fe9866b7eb6b264",
        "text": "| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword\n| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe\n| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun\n| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword\n| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword\n| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword\n| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword\n| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword\n| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword\n| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword",
          "| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe",
          "| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun",
          "| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword"
        ],
        "start_line": 70,
        "end_line": 79,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_classical.ml"
      },
      {
        "hash": "d5a6057b0e0e654c1fe9866b7eb6b264",
        "text": "| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword\n| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe\n| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun\n| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword\n| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword\n| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword\n| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword\n| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword\n| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword\n| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword",
          "| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe",
          "| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun",
          "| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword"
        ],
        "start_line": 73,
        "end_line": 82,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "d5a6057b0e0e654c1fe9866b7eb6b264",
        "text": "| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword\n| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe\n| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun\n| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword\n| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword\n| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword\n| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword\n| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword\n| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword\n| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword",
          "| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe",
          "| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun",
          "| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword"
        ],
        "start_line": 181,
        "end_line": 190,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "d5a6057b0e0e654c1fe9866b7eb6b264",
        "text": "| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword\n| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe\n| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun\n| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword\n| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword\n| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword\n| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword\n| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword\n| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword\n| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword",
          "| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe",
          "| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun",
          "| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword"
        ],
        "start_line": 126,
        "end_line": 135,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_basic_keywords.ml"
      },
      {
        "hash": "d5a6057b0e0e654c1fe9866b7eb6b264",
        "text": "| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword\n| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe\n| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun\n| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword\n| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword\n| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword\n| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword\n| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword\n| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword\n| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientReceiveKeyword -> AncientReceiveKeyword",
          "| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe",
          "| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun",
          "| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword"
        ],
        "start_line": 117,
        "end_line": 126,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_keywords.ml"
      }
    ],
    "22f12c2ba14d17ba517fcc72476a0111": [
      {
        "hash": "22f12c2ba14d17ba517fcc72476a0111",
        "text": "| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe\n| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun\n| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword\n| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword\n| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword\n| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword\n| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword\n| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword\n| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword\n| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe",
          "| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun",
          "| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword"
        ],
        "start_line": 187,
        "end_line": 196,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "22f12c2ba14d17ba517fcc72476a0111",
        "text": "| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe\n| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun\n| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword\n| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword\n| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword\n| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword\n| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword\n| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword\n| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword\n| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe",
          "| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun",
          "| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword"
        ],
        "start_line": 342,
        "end_line": 351,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "22f12c2ba14d17ba517fcc72476a0111",
        "text": "| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe\n| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun\n| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword\n| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword\n| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword\n| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword\n| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword\n| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword\n| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword\n| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe",
          "| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun",
          "| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword"
        ],
        "start_line": 71,
        "end_line": 80,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_classical.ml"
      },
      {
        "hash": "22f12c2ba14d17ba517fcc72476a0111",
        "text": "| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe\n| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun\n| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword\n| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword\n| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword\n| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword\n| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword\n| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword\n| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword\n| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe",
          "| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun",
          "| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword"
        ],
        "start_line": 74,
        "end_line": 83,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "22f12c2ba14d17ba517fcc72476a0111",
        "text": "| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe\n| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun\n| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword\n| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword\n| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword\n| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword\n| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword\n| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword\n| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword\n| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe",
          "| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun",
          "| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword"
        ],
        "start_line": 182,
        "end_line": 191,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "22f12c2ba14d17ba517fcc72476a0111",
        "text": "| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe\n| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun\n| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword\n| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword\n| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword\n| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword\n| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword\n| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword\n| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword\n| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe",
          "| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun",
          "| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword"
        ],
        "start_line": 127,
        "end_line": 136,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_basic_keywords.ml"
      },
      {
        "hash": "22f12c2ba14d17ba517fcc72476a0111",
        "text": "| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe\n| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun\n| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword\n| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword\n| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword\n| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword\n| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword\n| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword\n| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword\n| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientParticleThe -> AncientParticleThe",
          "| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun",
          "| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword"
        ],
        "start_line": 118,
        "end_line": 127,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_keywords.ml"
      }
    ],
    "f476bc4eb84eba0b9b55066d9cc1dff1": [
      {
        "hash": "f476bc4eb84eba0b9b55066d9cc1dff1",
        "text": "| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun\n| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword\n| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword\n| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword\n| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword\n| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword\n| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword\n| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword\n| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword\n| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun",
          "| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword"
        ],
        "start_line": 188,
        "end_line": 197,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "f476bc4eb84eba0b9b55066d9cc1dff1",
        "text": "| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun\n| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword\n| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword\n| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword\n| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword\n| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword\n| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword\n| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword\n| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword\n| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun",
          "| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword"
        ],
        "start_line": 343,
        "end_line": 352,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "f476bc4eb84eba0b9b55066d9cc1dff1",
        "text": "| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun\n| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword\n| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword\n| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword\n| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword\n| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword\n| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword\n| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword\n| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword\n| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun",
          "| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword"
        ],
        "start_line": 72,
        "end_line": 81,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_classical.ml"
      },
      {
        "hash": "f476bc4eb84eba0b9b55066d9cc1dff1",
        "text": "| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun\n| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword\n| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword\n| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword\n| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword\n| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword\n| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword\n| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword\n| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword\n| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun",
          "| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword"
        ],
        "start_line": 75,
        "end_line": 84,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "f476bc4eb84eba0b9b55066d9cc1dff1",
        "text": "| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun\n| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword\n| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword\n| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword\n| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword\n| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword\n| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword\n| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword\n| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword\n| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun",
          "| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword"
        ],
        "start_line": 183,
        "end_line": 192,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "f476bc4eb84eba0b9b55066d9cc1dff1",
        "text": "| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun\n| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword\n| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword\n| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword\n| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword\n| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword\n| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword\n| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword\n| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword\n| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun",
          "| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword"
        ],
        "start_line": 128,
        "end_line": 137,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_basic_keywords.ml"
      },
      {
        "hash": "f476bc4eb84eba0b9b55066d9cc1dff1",
        "text": "| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun\n| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword\n| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword\n| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword\n| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword\n| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword\n| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword\n| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword\n| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword\n| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientParticleFun -> AncientParticleFun",
          "| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword"
        ],
        "start_line": 119,
        "end_line": 128,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_keywords.ml"
      }
    ],
    "e6e63aa5738f796c3a65ec5c103fe09b": [
      {
        "hash": "e6e63aa5738f796c3a65ec5c103fe09b",
        "text": "| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword\n| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword\n| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword\n| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword\n| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword\n| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword\n| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword\n| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword\n| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword\n| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword"
        ],
        "start_line": 189,
        "end_line": 198,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "e6e63aa5738f796c3a65ec5c103fe09b",
        "text": "| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword\n| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword\n| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword\n| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword\n| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword\n| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword\n| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword\n| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword\n| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword\n| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword"
        ],
        "start_line": 344,
        "end_line": 353,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "e6e63aa5738f796c3a65ec5c103fe09b",
        "text": "| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword\n| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword\n| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword\n| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword\n| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword\n| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword\n| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword\n| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword\n| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword\n| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword"
        ],
        "start_line": 73,
        "end_line": 82,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_classical.ml"
      },
      {
        "hash": "e6e63aa5738f796c3a65ec5c103fe09b",
        "text": "| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword\n| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword\n| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword\n| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword\n| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword\n| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword\n| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword\n| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword\n| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword\n| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword"
        ],
        "start_line": 76,
        "end_line": 85,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "e6e63aa5738f796c3a65ec5c103fe09b",
        "text": "| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword\n| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword\n| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword\n| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword\n| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword\n| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword\n| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword\n| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword\n| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword\n| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword"
        ],
        "start_line": 184,
        "end_line": 193,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "e6e63aa5738f796c3a65ec5c103fe09b",
        "text": "| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword\n| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword\n| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword\n| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword\n| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword\n| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword\n| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword\n| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword\n| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword\n| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword"
        ],
        "start_line": 129,
        "end_line": 138,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_basic_keywords.ml"
      },
      {
        "hash": "e6e63aa5738f796c3a65ec5c103fe09b",
        "text": "| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword\n| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword\n| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword\n| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword\n| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword\n| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword\n| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword\n| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword\n| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword\n| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientCallItKeyword -> AncientCallItKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword"
        ],
        "start_line": 120,
        "end_line": 129,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_keywords.ml"
      }
    ],
    "63d1184cddd2fa3a2a65f5aa33a521c4": [
      {
        "hash": "63d1184cddd2fa3a2a65f5aa33a521c4",
        "text": "| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword\n| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword\n| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword\n| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword\n| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword\n| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword\n| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword\n| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword\n| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword\n| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword"
        ],
        "start_line": 190,
        "end_line": 199,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "63d1184cddd2fa3a2a65f5aa33a521c4",
        "text": "| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword\n| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword\n| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword\n| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword\n| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword\n| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword\n| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword\n| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword\n| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword\n| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword"
        ],
        "start_line": 345,
        "end_line": 354,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "63d1184cddd2fa3a2a65f5aa33a521c4",
        "text": "| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword\n| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword\n| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword\n| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword\n| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword\n| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword\n| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword\n| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword\n| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword\n| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword"
        ],
        "start_line": 74,
        "end_line": 83,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_classical.ml"
      },
      {
        "hash": "63d1184cddd2fa3a2a65f5aa33a521c4",
        "text": "| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword\n| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword\n| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword\n| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword\n| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword\n| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword\n| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword\n| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword\n| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword\n| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword"
        ],
        "start_line": 77,
        "end_line": 86,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "63d1184cddd2fa3a2a65f5aa33a521c4",
        "text": "| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword\n| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword\n| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword\n| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword\n| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword\n| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword\n| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword\n| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword\n| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword\n| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword"
        ],
        "start_line": 185,
        "end_line": 194,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "63d1184cddd2fa3a2a65f5aa33a521c4",
        "text": "| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword\n| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword\n| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword\n| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword\n| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword\n| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword\n| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword\n| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword\n| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword\n| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword"
        ],
        "start_line": 130,
        "end_line": 139,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_basic_keywords.ml"
      },
      {
        "hash": "63d1184cddd2fa3a2a65f5aa33a521c4",
        "text": "| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword\n| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword\n| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword\n| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword\n| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword\n| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword\n| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword\n| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword\n| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword\n| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientListStartKeyword -> AncientListStartKeyword",
          "| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword"
        ],
        "start_line": 121,
        "end_line": 130,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_keywords.ml"
      }
    ],
    "2da16903f9eb08869f63cddaee354eac": [
      {
        "hash": "2da16903f9eb08869f63cddaee354eac",
        "text": "| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword\n| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword\n| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword\n| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword\n| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword\n| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword\n| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword\n| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword\n| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword"
        ],
        "start_line": 191,
        "end_line": 200,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "2da16903f9eb08869f63cddaee354eac",
        "text": "| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword\n| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword\n| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword\n| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword\n| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword\n| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword\n| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword\n| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword\n| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword"
        ],
        "start_line": 346,
        "end_line": 355,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "2da16903f9eb08869f63cddaee354eac",
        "text": "| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword\n| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword\n| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword\n| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword\n| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword\n| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword\n| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword\n| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword\n| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword"
        ],
        "start_line": 75,
        "end_line": 84,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_classical.ml"
      },
      {
        "hash": "2da16903f9eb08869f63cddaee354eac",
        "text": "| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword\n| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword\n| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword\n| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword\n| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword\n| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword\n| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword\n| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword\n| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword"
        ],
        "start_line": 78,
        "end_line": 87,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "2da16903f9eb08869f63cddaee354eac",
        "text": "| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword\n| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword\n| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword\n| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword\n| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword\n| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword\n| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword\n| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword\n| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword"
        ],
        "start_line": 186,
        "end_line": 195,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "2da16903f9eb08869f63cddaee354eac",
        "text": "| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword\n| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword\n| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword\n| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword\n| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword\n| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword\n| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword\n| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword\n| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword"
        ],
        "start_line": 131,
        "end_line": 140,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_basic_keywords.ml"
      },
      {
        "hash": "2da16903f9eb08869f63cddaee354eac",
        "text": "| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword\n| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword\n| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword\n| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword\n| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword\n| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword\n| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword\n| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword\n| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientListEndKeyword -> AncientListEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword"
        ],
        "start_line": 122,
        "end_line": 131,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_keywords.ml"
      }
    ],
    "3c8d6a4e2654dade9590754491c225cf": [
      {
        "hash": "3c8d6a4e2654dade9590754491c225cf",
        "text": "| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword\n| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword\n| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword\n| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword\n| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword\n| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword\n| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword\n| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword\n| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword",
          "| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword"
        ],
        "start_line": 192,
        "end_line": 201,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "3c8d6a4e2654dade9590754491c225cf",
        "text": "| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword\n| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword\n| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword\n| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword\n| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword\n| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword\n| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword\n| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword\n| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword",
          "| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword"
        ],
        "start_line": 347,
        "end_line": 356,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "3c8d6a4e2654dade9590754491c225cf",
        "text": "| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword\n| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword\n| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword\n| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword\n| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword\n| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword\n| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword\n| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword\n| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword",
          "| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword"
        ],
        "start_line": 76,
        "end_line": 85,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_classical.ml"
      },
      {
        "hash": "3c8d6a4e2654dade9590754491c225cf",
        "text": "| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword\n| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword\n| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword\n| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword\n| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword\n| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword\n| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword\n| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword\n| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword",
          "| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword"
        ],
        "start_line": 79,
        "end_line": 88,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "3c8d6a4e2654dade9590754491c225cf",
        "text": "| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword\n| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword\n| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword\n| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword\n| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword\n| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword\n| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword\n| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword\n| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword",
          "| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword"
        ],
        "start_line": 187,
        "end_line": 196,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "3c8d6a4e2654dade9590754491c225cf",
        "text": "| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword\n| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword\n| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword\n| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword\n| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword\n| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword\n| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword\n| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword\n| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword",
          "| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword"
        ],
        "start_line": 132,
        "end_line": 141,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_basic_keywords.ml"
      },
      {
        "hash": "3c8d6a4e2654dade9590754491c225cf",
        "text": "| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword\n| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword\n| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword\n| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword\n| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword\n| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword\n| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword\n| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword\n| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientItsFirstKeyword -> AncientItsFirstKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword",
          "| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword"
        ],
        "start_line": 123,
        "end_line": 132,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_keywords.ml"
      }
    ],
    "107333688cb2bbbf8f39ec5539ec0a83": [
      {
        "hash": "107333688cb2bbbf8f39ec5539ec0a83",
        "text": "| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword\n| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword\n| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword\n| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword\n| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword\n| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword\n| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword\n| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword\n| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword",
          "| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword"
        ],
        "start_line": 193,
        "end_line": 202,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "107333688cb2bbbf8f39ec5539ec0a83",
        "text": "| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword\n| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword\n| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword\n| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword\n| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword\n| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword\n| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword\n| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword\n| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword",
          "| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword"
        ],
        "start_line": 348,
        "end_line": 357,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "107333688cb2bbbf8f39ec5539ec0a83",
        "text": "| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword\n| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword\n| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword\n| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword\n| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword\n| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword\n| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword\n| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword\n| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword",
          "| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword"
        ],
        "start_line": 77,
        "end_line": 86,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_classical.ml"
      },
      {
        "hash": "107333688cb2bbbf8f39ec5539ec0a83",
        "text": "| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword\n| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword\n| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword\n| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword\n| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword\n| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword\n| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword\n| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword\n| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword",
          "| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword"
        ],
        "start_line": 80,
        "end_line": 89,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "107333688cb2bbbf8f39ec5539ec0a83",
        "text": "| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword\n| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword\n| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword\n| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword\n| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword\n| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword\n| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword\n| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword\n| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword",
          "| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword"
        ],
        "start_line": 188,
        "end_line": 197,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "107333688cb2bbbf8f39ec5539ec0a83",
        "text": "| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword\n| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword\n| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword\n| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword\n| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword\n| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword\n| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword\n| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword\n| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword",
          "| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword"
        ],
        "start_line": 133,
        "end_line": 142,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_basic_keywords.ml"
      },
      {
        "hash": "107333688cb2bbbf8f39ec5539ec0a83",
        "text": "| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword\n| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword\n| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword\n| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword\n| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword\n| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword\n| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword\n| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword\n| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientItsSecondKeyword -> AncientItsSecondKeyword",
          "| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword",
          "| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword"
        ],
        "start_line": 124,
        "end_line": 133,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_keywords.ml"
      }
    ],
    "b90e3a6ecd8a7d5affa4617eb2a0721c": [
      {
        "hash": "b90e3a6ecd8a7d5affa4617eb2a0721c",
        "text": "| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword\n| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword\n| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword\n| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword\n| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword\n| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword\n| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword\n| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword\n| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword",
          "| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword"
        ],
        "start_line": 194,
        "end_line": 203,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "b90e3a6ecd8a7d5affa4617eb2a0721c",
        "text": "| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword\n| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword\n| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword\n| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword\n| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword\n| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword\n| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword\n| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword\n| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword",
          "| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword"
        ],
        "start_line": 349,
        "end_line": 358,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "b90e3a6ecd8a7d5affa4617eb2a0721c",
        "text": "| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword\n| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword\n| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword\n| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword\n| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword\n| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword\n| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword\n| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword\n| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword",
          "| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword"
        ],
        "start_line": 78,
        "end_line": 87,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_classical.ml"
      },
      {
        "hash": "b90e3a6ecd8a7d5affa4617eb2a0721c",
        "text": "| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword\n| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword\n| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword\n| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword\n| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword\n| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword\n| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword\n| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword\n| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword",
          "| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword"
        ],
        "start_line": 81,
        "end_line": 90,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "b90e3a6ecd8a7d5affa4617eb2a0721c",
        "text": "| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword\n| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword\n| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword\n| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword\n| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword\n| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword\n| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword\n| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword\n| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword",
          "| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword"
        ],
        "start_line": 189,
        "end_line": 198,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "b90e3a6ecd8a7d5affa4617eb2a0721c",
        "text": "| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword\n| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword\n| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword\n| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword\n| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword\n| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword\n| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword\n| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword\n| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword",
          "| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword"
        ],
        "start_line": 134,
        "end_line": 143,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_basic_keywords.ml"
      },
      {
        "hash": "b90e3a6ecd8a7d5affa4617eb2a0721c",
        "text": "| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword\n| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword\n| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword\n| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword\n| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword\n| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword\n| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword\n| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword\n| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientItsThirdKeyword -> AncientItsThirdKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword",
          "| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword"
        ],
        "start_line": 125,
        "end_line": 134,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_keywords.ml"
      }
    ],
    "acc3bd0d4d875e01741ac57ad5d01bd7": [
      {
        "hash": "acc3bd0d4d875e01741ac57ad5d01bd7",
        "text": "| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword\n| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword\n| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword\n| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword\n| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword\n| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword\n| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword\n| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword\n| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword",
          "| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword",
          "| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword"
        ],
        "start_line": 195,
        "end_line": 204,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "acc3bd0d4d875e01741ac57ad5d01bd7",
        "text": "| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword\n| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword\n| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword\n| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword\n| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword\n| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword\n| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword\n| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword\n| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword",
          "| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword",
          "| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword"
        ],
        "start_line": 350,
        "end_line": 359,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "acc3bd0d4d875e01741ac57ad5d01bd7",
        "text": "| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword\n| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword\n| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword\n| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword\n| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword\n| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword\n| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword\n| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword\n| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword",
          "| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword",
          "| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword"
        ],
        "start_line": 79,
        "end_line": 88,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_classical.ml"
      },
      {
        "hash": "acc3bd0d4d875e01741ac57ad5d01bd7",
        "text": "| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword\n| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword\n| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword\n| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword\n| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword\n| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword\n| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword\n| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword\n| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword",
          "| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword",
          "| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword"
        ],
        "start_line": 82,
        "end_line": 91,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "acc3bd0d4d875e01741ac57ad5d01bd7",
        "text": "| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword\n| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword\n| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword\n| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword\n| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword\n| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword\n| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword\n| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword\n| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword",
          "| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword",
          "| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword"
        ],
        "start_line": 190,
        "end_line": 199,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "acc3bd0d4d875e01741ac57ad5d01bd7",
        "text": "| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword\n| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword\n| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword\n| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword\n| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword\n| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword\n| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword\n| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword\n| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientEmptyKeyword -> AncientEmptyKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword",
          "| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword",
          "| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword"
        ],
        "start_line": 135,
        "end_line": 144,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_basic_keywords.ml"
      }
    ],
    "151404d82f93851e088daddf98a38e58": [
      {
        "hash": "151404d82f93851e088daddf98a38e58",
        "text": "| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword\n| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword\n| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword\n| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword\n| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword\n| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword\n| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword\n| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword\n| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword",
          "| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword",
          "| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword",
          "| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword"
        ],
        "start_line": 196,
        "end_line": 205,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "151404d82f93851e088daddf98a38e58",
        "text": "| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword\n| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword\n| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword\n| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword\n| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword\n| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword\n| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword\n| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword\n| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword",
          "| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword",
          "| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword",
          "| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword"
        ],
        "start_line": 351,
        "end_line": 360,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "151404d82f93851e088daddf98a38e58",
        "text": "| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword\n| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword\n| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword\n| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword\n| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword\n| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword\n| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword\n| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword\n| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword",
          "| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword",
          "| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword",
          "| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword"
        ],
        "start_line": 80,
        "end_line": 89,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_classical.ml"
      },
      {
        "hash": "151404d82f93851e088daddf98a38e58",
        "text": "| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword\n| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword\n| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword\n| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword\n| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword\n| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword\n| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword\n| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword\n| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword",
          "| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword",
          "| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword",
          "| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword"
        ],
        "start_line": 83,
        "end_line": 92,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "151404d82f93851e088daddf98a38e58",
        "text": "| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword\n| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword\n| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword\n| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword\n| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword\n| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword\n| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword\n| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword\n| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword",
          "| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword",
          "| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword",
          "| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword"
        ],
        "start_line": 191,
        "end_line": 200,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "151404d82f93851e088daddf98a38e58",
        "text": "| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword\n| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword\n| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword\n| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword\n| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword\n| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword\n| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword\n| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword\n| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword",
          "| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword",
          "| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword",
          "| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword",
          "| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword"
        ],
        "start_line": 136,
        "end_line": 145,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_basic_keywords.ml"
      }
    ],
    "5339b2bbc3e84500d67cc29a3950fa8f": [
      {
        "hash": "5339b2bbc3e84500d67cc29a3950fa8f",
        "text": "| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword\n| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword\n| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword\n| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword\n| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword\n| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword\n| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword\n| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword\n| Token_mapping.Token_definitions_unified.AncientWhenKeyword -> AncientWhenKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword",
          "| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword",
          "| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword",
          "| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword",
          "| Token_mapping.Token_definitions_unified.AncientWhenKeyword -> AncientWhenKeyword"
        ],
        "start_line": 197,
        "end_line": 206,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "5339b2bbc3e84500d67cc29a3950fa8f",
        "text": "| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword\n| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword\n| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword\n| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword\n| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword\n| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword\n| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword\n| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword\n| Token_mapping.Token_definitions_unified.AncientWhenKeyword -> AncientWhenKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword",
          "| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword",
          "| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword",
          "| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword",
          "| Token_mapping.Token_definitions_unified.AncientWhenKeyword -> AncientWhenKeyword"
        ],
        "start_line": 352,
        "end_line": 361,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "5339b2bbc3e84500d67cc29a3950fa8f",
        "text": "| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword\n| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword\n| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword\n| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword\n| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword\n| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword\n| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword\n| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword\n| Token_mapping.Token_definitions_unified.AncientWhenKeyword -> AncientWhenKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword",
          "| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword",
          "| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword",
          "| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword",
          "| Token_mapping.Token_definitions_unified.AncientWhenKeyword -> AncientWhenKeyword"
        ],
        "start_line": 81,
        "end_line": 90,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_classical.ml"
      },
      {
        "hash": "5339b2bbc3e84500d67cc29a3950fa8f",
        "text": "| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword\n| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword\n| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword\n| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword\n| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword\n| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword\n| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword\n| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword\n| Token_mapping.Token_definitions_unified.AncientWhenKeyword -> AncientWhenKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword",
          "| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword",
          "| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword",
          "| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword",
          "| Token_mapping.Token_definitions_unified.AncientWhenKeyword -> AncientWhenKeyword"
        ],
        "start_line": 84,
        "end_line": 93,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "5339b2bbc3e84500d67cc29a3950fa8f",
        "text": "| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword\n| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword\n| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword\n| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword\n| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword\n| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword\n| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword\n| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword\n| Token_mapping.Token_definitions_unified.AncientWhenKeyword -> AncientWhenKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword",
          "| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword",
          "| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword",
          "| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword",
          "| Token_mapping.Token_definitions_unified.AncientWhenKeyword -> AncientWhenKeyword"
        ],
        "start_line": 192,
        "end_line": 201,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "5339b2bbc3e84500d67cc29a3950fa8f",
        "text": "| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword\n| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword\n| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword\n| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword\n| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword\n| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword\n| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword\n| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword\n| Token_mapping.Token_definitions_unified.AncientWhenKeyword -> AncientWhenKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientHeadNameKeyword -> AncientHeadNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword",
          "| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword",
          "| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword",
          "| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword",
          "| Token_mapping.Token_definitions_unified.AncientWhenKeyword -> AncientWhenKeyword"
        ],
        "start_line": 137,
        "end_line": 146,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_basic_keywords.ml"
      }
    ],
    "ebcdfa438f5cee461e3e89c41ad1026a": [
      {
        "hash": "ebcdfa438f5cee461e3e89c41ad1026a",
        "text": "| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword\n| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword\n| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword\n| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword\n| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword\n| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword\n| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword\n| Token_mapping.Token_definitions_unified.AncientWhenKeyword -> AncientWhenKeyword\n| Token_mapping.Token_definitions_unified.AncientCommaKeyword -> AncientCommaKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword",
          "| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword",
          "| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword",
          "| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword",
          "| Token_mapping.Token_definitions_unified.AncientWhenKeyword -> AncientWhenKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCommaKeyword -> AncientCommaKeyword"
        ],
        "start_line": 198,
        "end_line": 207,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "ebcdfa438f5cee461e3e89c41ad1026a",
        "text": "| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword\n| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword\n| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword\n| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword\n| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword\n| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword\n| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword\n| Token_mapping.Token_definitions_unified.AncientWhenKeyword -> AncientWhenKeyword\n| Token_mapping.Token_definitions_unified.AncientCommaKeyword -> AncientCommaKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword",
          "| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword",
          "| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword",
          "| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword",
          "| Token_mapping.Token_definitions_unified.AncientWhenKeyword -> AncientWhenKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCommaKeyword -> AncientCommaKeyword"
        ],
        "start_line": 353,
        "end_line": 362,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "ebcdfa438f5cee461e3e89c41ad1026a",
        "text": "| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword\n| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword\n| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword\n| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword\n| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword\n| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword\n| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword\n| Token_mapping.Token_definitions_unified.AncientWhenKeyword -> AncientWhenKeyword\n| Token_mapping.Token_definitions_unified.AncientCommaKeyword -> AncientCommaKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword",
          "| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword",
          "| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword",
          "| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword",
          "| Token_mapping.Token_definitions_unified.AncientWhenKeyword -> AncientWhenKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCommaKeyword -> AncientCommaKeyword"
        ],
        "start_line": 82,
        "end_line": 91,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_classical.ml"
      },
      {
        "hash": "ebcdfa438f5cee461e3e89c41ad1026a",
        "text": "| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword\n| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword\n| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword\n| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword\n| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword\n| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword\n| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword\n| Token_mapping.Token_definitions_unified.AncientWhenKeyword -> AncientWhenKeyword\n| Token_mapping.Token_definitions_unified.AncientCommaKeyword -> AncientCommaKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword",
          "| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword",
          "| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword",
          "| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword",
          "| Token_mapping.Token_definitions_unified.AncientWhenKeyword -> AncientWhenKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCommaKeyword -> AncientCommaKeyword"
        ],
        "start_line": 85,
        "end_line": 94,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "ebcdfa438f5cee461e3e89c41ad1026a",
        "text": "| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword\n| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword\n| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword\n| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword\n| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword\n| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword\n| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword\n| Token_mapping.Token_definitions_unified.AncientWhenKeyword -> AncientWhenKeyword\n| Token_mapping.Token_definitions_unified.AncientCommaKeyword -> AncientCommaKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword",
          "| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword",
          "| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword",
          "| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword",
          "| Token_mapping.Token_definitions_unified.AncientWhenKeyword -> AncientWhenKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCommaKeyword -> AncientCommaKeyword"
        ],
        "start_line": 193,
        "end_line": 202,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "ebcdfa438f5cee461e3e89c41ad1026a",
        "text": "| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword\n| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword\n| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword\n| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword\n| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword\n| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword\n| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword\n| Token_mapping.Token_definitions_unified.AncientWhenKeyword -> AncientWhenKeyword\n| Token_mapping.Token_definitions_unified.AncientCommaKeyword -> AncientCommaKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientTailNameKeyword -> AncientTailNameKeyword",
          "| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword",
          "| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword",
          "| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword",
          "| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword",
          "| Token_mapping.Token_definitions_unified.AncientWhenKeyword -> AncientWhenKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCommaKeyword -> AncientCommaKeyword"
        ],
        "start_line": 138,
        "end_line": 147,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_basic_keywords.ml"
      }
    ],
    "3ad9bf523b290b02e6e828e3b0f06f51": [
      {
        "hash": "3ad9bf523b290b02e6e828e3b0f06f51",
        "text": "| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword\n| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword\n| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword\n| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword\n| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword\n| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword\n| Token_mapping.Token_definitions_unified.AncientWhenKeyword -> AncientWhenKeyword\n| Token_mapping.Token_definitions_unified.AncientCommaKeyword -> AncientCommaKeyword\n| Token_mapping.Token_definitions_unified.AfterThatKeyword -> AfterThatKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword",
          "| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword",
          "| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword",
          "| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword",
          "| Token_mapping.Token_definitions_unified.AncientWhenKeyword -> AncientWhenKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCommaKeyword -> AncientCommaKeyword",
          "| Token_mapping.Token_definitions_unified.AfterThatKeyword -> AfterThatKeyword"
        ],
        "start_line": 199,
        "end_line": 208,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "3ad9bf523b290b02e6e828e3b0f06f51",
        "text": "| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword\n| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword\n| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword\n| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword\n| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword\n| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword\n| Token_mapping.Token_definitions_unified.AncientWhenKeyword -> AncientWhenKeyword\n| Token_mapping.Token_definitions_unified.AncientCommaKeyword -> AncientCommaKeyword\n| Token_mapping.Token_definitions_unified.AfterThatKeyword -> AfterThatKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword",
          "| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword",
          "| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword",
          "| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword",
          "| Token_mapping.Token_definitions_unified.AncientWhenKeyword -> AncientWhenKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCommaKeyword -> AncientCommaKeyword",
          "| Token_mapping.Token_definitions_unified.AfterThatKeyword -> AfterThatKeyword"
        ],
        "start_line": 354,
        "end_line": 363,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "3ad9bf523b290b02e6e828e3b0f06f51",
        "text": "| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword\n| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword\n| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword\n| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword\n| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword\n| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword\n| Token_mapping.Token_definitions_unified.AncientWhenKeyword -> AncientWhenKeyword\n| Token_mapping.Token_definitions_unified.AncientCommaKeyword -> AncientCommaKeyword\n| Token_mapping.Token_definitions_unified.AfterThatKeyword -> AfterThatKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword",
          "| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword",
          "| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword",
          "| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword",
          "| Token_mapping.Token_definitions_unified.AncientWhenKeyword -> AncientWhenKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCommaKeyword -> AncientCommaKeyword",
          "| Token_mapping.Token_definitions_unified.AfterThatKeyword -> AfterThatKeyword"
        ],
        "start_line": 83,
        "end_line": 92,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_classical.ml"
      },
      {
        "hash": "3ad9bf523b290b02e6e828e3b0f06f51",
        "text": "| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword\n| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword\n| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword\n| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword\n| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword\n| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword\n| Token_mapping.Token_definitions_unified.AncientWhenKeyword -> AncientWhenKeyword\n| Token_mapping.Token_definitions_unified.AncientCommaKeyword -> AncientCommaKeyword\n| Token_mapping.Token_definitions_unified.AfterThatKeyword -> AfterThatKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword",
          "| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword",
          "| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword",
          "| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword",
          "| Token_mapping.Token_definitions_unified.AncientWhenKeyword -> AncientWhenKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCommaKeyword -> AncientCommaKeyword",
          "| Token_mapping.Token_definitions_unified.AfterThatKeyword -> AfterThatKeyword"
        ],
        "start_line": 86,
        "end_line": 95,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "3ad9bf523b290b02e6e828e3b0f06f51",
        "text": "| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword\n| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword\n| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword\n| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword\n| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword\n| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword\n| Token_mapping.Token_definitions_unified.AncientWhenKeyword -> AncientWhenKeyword\n| Token_mapping.Token_definitions_unified.AncientCommaKeyword -> AncientCommaKeyword\n| Token_mapping.Token_definitions_unified.AfterThatKeyword -> AfterThatKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword",
          "| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword",
          "| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword",
          "| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword",
          "| Token_mapping.Token_definitions_unified.AncientWhenKeyword -> AncientWhenKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCommaKeyword -> AncientCommaKeyword",
          "| Token_mapping.Token_definitions_unified.AfterThatKeyword -> AfterThatKeyword"
        ],
        "start_line": 194,
        "end_line": 203,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "3ad9bf523b290b02e6e828e3b0f06f51",
        "text": "| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword\n| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword\n| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword\n| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword\n| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword\n| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword\n| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword\n| Token_mapping.Token_definitions_unified.AncientWhenKeyword -> AncientWhenKeyword\n| Token_mapping.Token_definitions_unified.AncientCommaKeyword -> AncientCommaKeyword\n| Token_mapping.Token_definitions_unified.AfterThatKeyword -> AfterThatKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientThusAnswerKeyword -> AncientThusAnswerKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword",
          "| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword",
          "| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword",
          "| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword",
          "| Token_mapping.Token_definitions_unified.AncientWhenKeyword -> AncientWhenKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCommaKeyword -> AncientCommaKeyword",
          "| Token_mapping.Token_definitions_unified.AfterThatKeyword -> AfterThatKeyword"
        ],
        "start_line": 139,
        "end_line": 148,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_basic_keywords.ml"
      }
    ],
    "191aa97981437f1cfc7601e8b7010855": [
      {
        "hash": "191aa97981437f1cfc7601e8b7010855",
        "text": "| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword\n| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword\n| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword\n| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword\n| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword\n| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword\n| Token_mapping.Token_definitions_unified.AncientWhenKeyword -> AncientWhenKeyword\n| Token_mapping.Token_definitions_unified.AncientCommaKeyword -> AncientCommaKeyword\n| Token_mapping.Token_definitions_unified.AfterThatKeyword -> AfterThatKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordStartKeyword -> AncientRecordStartKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword",
          "| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword",
          "| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword",
          "| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword",
          "| Token_mapping.Token_definitions_unified.AncientWhenKeyword -> AncientWhenKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCommaKeyword -> AncientCommaKeyword",
          "| Token_mapping.Token_definitions_unified.AfterThatKeyword -> AfterThatKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordStartKeyword -> AncientRecordStartKeyword"
        ],
        "start_line": 200,
        "end_line": 209,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "191aa97981437f1cfc7601e8b7010855",
        "text": "| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword\n| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword\n| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword\n| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword\n| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword\n| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword\n| Token_mapping.Token_definitions_unified.AncientWhenKeyword -> AncientWhenKeyword\n| Token_mapping.Token_definitions_unified.AncientCommaKeyword -> AncientCommaKeyword\n| Token_mapping.Token_definitions_unified.AfterThatKeyword -> AfterThatKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordStartKeyword -> AncientRecordStartKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword",
          "| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword",
          "| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword",
          "| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword",
          "| Token_mapping.Token_definitions_unified.AncientWhenKeyword -> AncientWhenKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCommaKeyword -> AncientCommaKeyword",
          "| Token_mapping.Token_definitions_unified.AfterThatKeyword -> AfterThatKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordStartKeyword -> AncientRecordStartKeyword"
        ],
        "start_line": 355,
        "end_line": 364,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "191aa97981437f1cfc7601e8b7010855",
        "text": "| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword\n| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword\n| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword\n| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword\n| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword\n| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword\n| Token_mapping.Token_definitions_unified.AncientWhenKeyword -> AncientWhenKeyword\n| Token_mapping.Token_definitions_unified.AncientCommaKeyword -> AncientCommaKeyword\n| Token_mapping.Token_definitions_unified.AfterThatKeyword -> AfterThatKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordStartKeyword -> AncientRecordStartKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword",
          "| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword",
          "| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword",
          "| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword",
          "| Token_mapping.Token_definitions_unified.AncientWhenKeyword -> AncientWhenKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCommaKeyword -> AncientCommaKeyword",
          "| Token_mapping.Token_definitions_unified.AfterThatKeyword -> AfterThatKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordStartKeyword -> AncientRecordStartKeyword"
        ],
        "start_line": 84,
        "end_line": 93,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_classical.ml"
      },
      {
        "hash": "191aa97981437f1cfc7601e8b7010855",
        "text": "| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword\n| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword\n| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword\n| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword\n| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword\n| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword\n| Token_mapping.Token_definitions_unified.AncientWhenKeyword -> AncientWhenKeyword\n| Token_mapping.Token_definitions_unified.AncientCommaKeyword -> AncientCommaKeyword\n| Token_mapping.Token_definitions_unified.AfterThatKeyword -> AfterThatKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordStartKeyword -> AncientRecordStartKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword",
          "| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword",
          "| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword",
          "| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword",
          "| Token_mapping.Token_definitions_unified.AncientWhenKeyword -> AncientWhenKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCommaKeyword -> AncientCommaKeyword",
          "| Token_mapping.Token_definitions_unified.AfterThatKeyword -> AfterThatKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordStartKeyword -> AncientRecordStartKeyword"
        ],
        "start_line": 87,
        "end_line": 96,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "191aa97981437f1cfc7601e8b7010855",
        "text": "| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword\n| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword\n| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword\n| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword\n| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword\n| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword\n| Token_mapping.Token_definitions_unified.AncientWhenKeyword -> AncientWhenKeyword\n| Token_mapping.Token_definitions_unified.AncientCommaKeyword -> AncientCommaKeyword\n| Token_mapping.Token_definitions_unified.AfterThatKeyword -> AfterThatKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordStartKeyword -> AncientRecordStartKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword",
          "| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword",
          "| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword",
          "| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword",
          "| Token_mapping.Token_definitions_unified.AncientWhenKeyword -> AncientWhenKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCommaKeyword -> AncientCommaKeyword",
          "| Token_mapping.Token_definitions_unified.AfterThatKeyword -> AfterThatKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordStartKeyword -> AncientRecordStartKeyword"
        ],
        "start_line": 195,
        "end_line": 204,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "191aa97981437f1cfc7601e8b7010855",
        "text": "| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword\n| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword\n| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword\n| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword\n| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword\n| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword\n| Token_mapping.Token_definitions_unified.AncientWhenKeyword -> AncientWhenKeyword\n| Token_mapping.Token_definitions_unified.AncientCommaKeyword -> AncientCommaKeyword\n| Token_mapping.Token_definitions_unified.AfterThatKeyword -> AfterThatKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordStartKeyword -> AncientRecordStartKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientAddToKeyword -> AncientAddToKeyword",
          "| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword",
          "| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword",
          "| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword",
          "| Token_mapping.Token_definitions_unified.AncientWhenKeyword -> AncientWhenKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCommaKeyword -> AncientCommaKeyword",
          "| Token_mapping.Token_definitions_unified.AfterThatKeyword -> AfterThatKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordStartKeyword -> AncientRecordStartKeyword"
        ],
        "start_line": 140,
        "end_line": 149,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_basic_keywords.ml"
      }
    ],
    "453a7fa5a59407ce4b27477537c06759": [
      {
        "hash": "453a7fa5a59407ce4b27477537c06759",
        "text": "| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword\n| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword\n| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword\n| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword\n| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword\n| Token_mapping.Token_definitions_unified.AncientWhenKeyword -> AncientWhenKeyword\n| Token_mapping.Token_definitions_unified.AncientCommaKeyword -> AncientCommaKeyword\n| Token_mapping.Token_definitions_unified.AfterThatKeyword -> AfterThatKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordStartKeyword -> AncientRecordStartKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordEndKeyword -> AncientRecordEndKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword",
          "| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword",
          "| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword",
          "| Token_mapping.Token_definitions_unified.AncientWhenKeyword -> AncientWhenKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCommaKeyword -> AncientCommaKeyword",
          "| Token_mapping.Token_definitions_unified.AfterThatKeyword -> AfterThatKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordStartKeyword -> AncientRecordStartKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordEndKeyword -> AncientRecordEndKeyword"
        ],
        "start_line": 201,
        "end_line": 210,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "453a7fa5a59407ce4b27477537c06759",
        "text": "| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword\n| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword\n| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword\n| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword\n| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword\n| Token_mapping.Token_definitions_unified.AncientWhenKeyword -> AncientWhenKeyword\n| Token_mapping.Token_definitions_unified.AncientCommaKeyword -> AncientCommaKeyword\n| Token_mapping.Token_definitions_unified.AfterThatKeyword -> AfterThatKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordStartKeyword -> AncientRecordStartKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordEndKeyword -> AncientRecordEndKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword",
          "| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword",
          "| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword",
          "| Token_mapping.Token_definitions_unified.AncientWhenKeyword -> AncientWhenKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCommaKeyword -> AncientCommaKeyword",
          "| Token_mapping.Token_definitions_unified.AfterThatKeyword -> AfterThatKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordStartKeyword -> AncientRecordStartKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordEndKeyword -> AncientRecordEndKeyword"
        ],
        "start_line": 356,
        "end_line": 365,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "453a7fa5a59407ce4b27477537c06759",
        "text": "| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword\n| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword\n| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword\n| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword\n| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword\n| Token_mapping.Token_definitions_unified.AncientWhenKeyword -> AncientWhenKeyword\n| Token_mapping.Token_definitions_unified.AncientCommaKeyword -> AncientCommaKeyword\n| Token_mapping.Token_definitions_unified.AfterThatKeyword -> AfterThatKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordStartKeyword -> AncientRecordStartKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordEndKeyword -> AncientRecordEndKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword",
          "| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword",
          "| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword",
          "| Token_mapping.Token_definitions_unified.AncientWhenKeyword -> AncientWhenKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCommaKeyword -> AncientCommaKeyword",
          "| Token_mapping.Token_definitions_unified.AfterThatKeyword -> AfterThatKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordStartKeyword -> AncientRecordStartKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordEndKeyword -> AncientRecordEndKeyword"
        ],
        "start_line": 85,
        "end_line": 94,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_classical.ml"
      },
      {
        "hash": "453a7fa5a59407ce4b27477537c06759",
        "text": "| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword\n| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword\n| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword\n| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword\n| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword\n| Token_mapping.Token_definitions_unified.AncientWhenKeyword -> AncientWhenKeyword\n| Token_mapping.Token_definitions_unified.AncientCommaKeyword -> AncientCommaKeyword\n| Token_mapping.Token_definitions_unified.AfterThatKeyword -> AfterThatKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordStartKeyword -> AncientRecordStartKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordEndKeyword -> AncientRecordEndKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword",
          "| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword",
          "| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword",
          "| Token_mapping.Token_definitions_unified.AncientWhenKeyword -> AncientWhenKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCommaKeyword -> AncientCommaKeyword",
          "| Token_mapping.Token_definitions_unified.AfterThatKeyword -> AfterThatKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordStartKeyword -> AncientRecordStartKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordEndKeyword -> AncientRecordEndKeyword"
        ],
        "start_line": 88,
        "end_line": 97,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "453a7fa5a59407ce4b27477537c06759",
        "text": "| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword\n| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword\n| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword\n| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword\n| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword\n| Token_mapping.Token_definitions_unified.AncientWhenKeyword -> AncientWhenKeyword\n| Token_mapping.Token_definitions_unified.AncientCommaKeyword -> AncientCommaKeyword\n| Token_mapping.Token_definitions_unified.AfterThatKeyword -> AfterThatKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordStartKeyword -> AncientRecordStartKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordEndKeyword -> AncientRecordEndKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword",
          "| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword",
          "| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword",
          "| Token_mapping.Token_definitions_unified.AncientWhenKeyword -> AncientWhenKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCommaKeyword -> AncientCommaKeyword",
          "| Token_mapping.Token_definitions_unified.AfterThatKeyword -> AfterThatKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordStartKeyword -> AncientRecordStartKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordEndKeyword -> AncientRecordEndKeyword"
        ],
        "start_line": 196,
        "end_line": 205,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "453a7fa5a59407ce4b27477537c06759",
        "text": "| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword\n| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword\n| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword\n| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword\n| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword\n| Token_mapping.Token_definitions_unified.AncientWhenKeyword -> AncientWhenKeyword\n| Token_mapping.Token_definitions_unified.AncientCommaKeyword -> AncientCommaKeyword\n| Token_mapping.Token_definitions_unified.AfterThatKeyword -> AfterThatKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordStartKeyword -> AncientRecordStartKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordEndKeyword -> AncientRecordEndKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientObserveEndKeyword -> AncientObserveEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword",
          "| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword",
          "| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword",
          "| Token_mapping.Token_definitions_unified.AncientWhenKeyword -> AncientWhenKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCommaKeyword -> AncientCommaKeyword",
          "| Token_mapping.Token_definitions_unified.AfterThatKeyword -> AfterThatKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordStartKeyword -> AncientRecordStartKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordEndKeyword -> AncientRecordEndKeyword"
        ],
        "start_line": 141,
        "end_line": 150,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_basic_keywords.ml"
      }
    ],
    "ca32617c993fecb6d825f29ee041068a": [
      {
        "hash": "ca32617c993fecb6d825f29ee041068a",
        "text": "| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword\n| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword\n| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword\n| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword\n| Token_mapping.Token_definitions_unified.AncientWhenKeyword -> AncientWhenKeyword\n| Token_mapping.Token_definitions_unified.AncientCommaKeyword -> AncientCommaKeyword\n| Token_mapping.Token_definitions_unified.AfterThatKeyword -> AfterThatKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordStartKeyword -> AncientRecordStartKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordEndKeyword -> AncientRecordEndKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordEmptyKeyword -> AncientRecordEmptyKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword",
          "| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword",
          "| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword",
          "| Token_mapping.Token_definitions_unified.AncientWhenKeyword -> AncientWhenKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCommaKeyword -> AncientCommaKeyword",
          "| Token_mapping.Token_definitions_unified.AfterThatKeyword -> AfterThatKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordStartKeyword -> AncientRecordStartKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordEndKeyword -> AncientRecordEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordEmptyKeyword -> AncientRecordEmptyKeyword"
        ],
        "start_line": 202,
        "end_line": 211,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "ca32617c993fecb6d825f29ee041068a",
        "text": "| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword\n| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword\n| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword\n| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword\n| Token_mapping.Token_definitions_unified.AncientWhenKeyword -> AncientWhenKeyword\n| Token_mapping.Token_definitions_unified.AncientCommaKeyword -> AncientCommaKeyword\n| Token_mapping.Token_definitions_unified.AfterThatKeyword -> AfterThatKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordStartKeyword -> AncientRecordStartKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordEndKeyword -> AncientRecordEndKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordEmptyKeyword -> AncientRecordEmptyKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword",
          "| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword",
          "| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword",
          "| Token_mapping.Token_definitions_unified.AncientWhenKeyword -> AncientWhenKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCommaKeyword -> AncientCommaKeyword",
          "| Token_mapping.Token_definitions_unified.AfterThatKeyword -> AfterThatKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordStartKeyword -> AncientRecordStartKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordEndKeyword -> AncientRecordEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordEmptyKeyword -> AncientRecordEmptyKeyword"
        ],
        "start_line": 357,
        "end_line": 366,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "ca32617c993fecb6d825f29ee041068a",
        "text": "| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword\n| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword\n| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword\n| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword\n| Token_mapping.Token_definitions_unified.AncientWhenKeyword -> AncientWhenKeyword\n| Token_mapping.Token_definitions_unified.AncientCommaKeyword -> AncientCommaKeyword\n| Token_mapping.Token_definitions_unified.AfterThatKeyword -> AfterThatKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordStartKeyword -> AncientRecordStartKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordEndKeyword -> AncientRecordEndKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordEmptyKeyword -> AncientRecordEmptyKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword",
          "| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword",
          "| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword",
          "| Token_mapping.Token_definitions_unified.AncientWhenKeyword -> AncientWhenKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCommaKeyword -> AncientCommaKeyword",
          "| Token_mapping.Token_definitions_unified.AfterThatKeyword -> AfterThatKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordStartKeyword -> AncientRecordStartKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordEndKeyword -> AncientRecordEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordEmptyKeyword -> AncientRecordEmptyKeyword"
        ],
        "start_line": 86,
        "end_line": 95,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_classical.ml"
      },
      {
        "hash": "ca32617c993fecb6d825f29ee041068a",
        "text": "| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword\n| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword\n| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword\n| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword\n| Token_mapping.Token_definitions_unified.AncientWhenKeyword -> AncientWhenKeyword\n| Token_mapping.Token_definitions_unified.AncientCommaKeyword -> AncientCommaKeyword\n| Token_mapping.Token_definitions_unified.AfterThatKeyword -> AfterThatKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordStartKeyword -> AncientRecordStartKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordEndKeyword -> AncientRecordEndKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordEmptyKeyword -> AncientRecordEmptyKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword",
          "| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword",
          "| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword",
          "| Token_mapping.Token_definitions_unified.AncientWhenKeyword -> AncientWhenKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCommaKeyword -> AncientCommaKeyword",
          "| Token_mapping.Token_definitions_unified.AfterThatKeyword -> AfterThatKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordStartKeyword -> AncientRecordStartKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordEndKeyword -> AncientRecordEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordEmptyKeyword -> AncientRecordEmptyKeyword"
        ],
        "start_line": 89,
        "end_line": 98,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "ca32617c993fecb6d825f29ee041068a",
        "text": "| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword\n| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword\n| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword\n| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword\n| Token_mapping.Token_definitions_unified.AncientWhenKeyword -> AncientWhenKeyword\n| Token_mapping.Token_definitions_unified.AncientCommaKeyword -> AncientCommaKeyword\n| Token_mapping.Token_definitions_unified.AfterThatKeyword -> AfterThatKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordStartKeyword -> AncientRecordStartKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordEndKeyword -> AncientRecordEndKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordEmptyKeyword -> AncientRecordEmptyKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword",
          "| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword",
          "| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword",
          "| Token_mapping.Token_definitions_unified.AncientWhenKeyword -> AncientWhenKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCommaKeyword -> AncientCommaKeyword",
          "| Token_mapping.Token_definitions_unified.AfterThatKeyword -> AfterThatKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordStartKeyword -> AncientRecordStartKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordEndKeyword -> AncientRecordEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordEmptyKeyword -> AncientRecordEmptyKeyword"
        ],
        "start_line": 197,
        "end_line": 206,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "ca32617c993fecb6d825f29ee041068a",
        "text": "| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword\n| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword\n| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword\n| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword\n| Token_mapping.Token_definitions_unified.AncientWhenKeyword -> AncientWhenKeyword\n| Token_mapping.Token_definitions_unified.AncientCommaKeyword -> AncientCommaKeyword\n| Token_mapping.Token_definitions_unified.AfterThatKeyword -> AfterThatKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordStartKeyword -> AncientRecordStartKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordEndKeyword -> AncientRecordEndKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordEmptyKeyword -> AncientRecordEmptyKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientBeginKeyword -> AncientBeginKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword",
          "| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword",
          "| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword",
          "| Token_mapping.Token_definitions_unified.AncientWhenKeyword -> AncientWhenKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCommaKeyword -> AncientCommaKeyword",
          "| Token_mapping.Token_definitions_unified.AfterThatKeyword -> AfterThatKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordStartKeyword -> AncientRecordStartKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordEndKeyword -> AncientRecordEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordEmptyKeyword -> AncientRecordEmptyKeyword"
        ],
        "start_line": 142,
        "end_line": 151,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_basic_keywords.ml"
      }
    ],
    "5eeab7f664ea1dc243645c6ad36e95be": [
      {
        "hash": "5eeab7f664ea1dc243645c6ad36e95be",
        "text": "| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword\n| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword\n| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword\n| Token_mapping.Token_definitions_unified.AncientWhenKeyword -> AncientWhenKeyword\n| Token_mapping.Token_definitions_unified.AncientCommaKeyword -> AncientCommaKeyword\n| Token_mapping.Token_definitions_unified.AfterThatKeyword -> AfterThatKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordStartKeyword -> AncientRecordStartKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordEndKeyword -> AncientRecordEndKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordEmptyKeyword -> AncientRecordEmptyKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordUpdateKeyword -> AncientRecordUpdateKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword",
          "| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword",
          "| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword",
          "| Token_mapping.Token_definitions_unified.AncientWhenKeyword -> AncientWhenKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCommaKeyword -> AncientCommaKeyword",
          "| Token_mapping.Token_definitions_unified.AfterThatKeyword -> AfterThatKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordStartKeyword -> AncientRecordStartKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordEndKeyword -> AncientRecordEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordEmptyKeyword -> AncientRecordEmptyKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordUpdateKeyword -> AncientRecordUpdateKeyword"
        ],
        "start_line": 203,
        "end_line": 212,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "5eeab7f664ea1dc243645c6ad36e95be",
        "text": "| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword\n| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword\n| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword\n| Token_mapping.Token_definitions_unified.AncientWhenKeyword -> AncientWhenKeyword\n| Token_mapping.Token_definitions_unified.AncientCommaKeyword -> AncientCommaKeyword\n| Token_mapping.Token_definitions_unified.AfterThatKeyword -> AfterThatKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordStartKeyword -> AncientRecordStartKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordEndKeyword -> AncientRecordEndKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordEmptyKeyword -> AncientRecordEmptyKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordUpdateKeyword -> AncientRecordUpdateKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword",
          "| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword",
          "| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword",
          "| Token_mapping.Token_definitions_unified.AncientWhenKeyword -> AncientWhenKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCommaKeyword -> AncientCommaKeyword",
          "| Token_mapping.Token_definitions_unified.AfterThatKeyword -> AfterThatKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordStartKeyword -> AncientRecordStartKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordEndKeyword -> AncientRecordEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordEmptyKeyword -> AncientRecordEmptyKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordUpdateKeyword -> AncientRecordUpdateKeyword"
        ],
        "start_line": 358,
        "end_line": 367,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "5eeab7f664ea1dc243645c6ad36e95be",
        "text": "| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword\n| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword\n| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword\n| Token_mapping.Token_definitions_unified.AncientWhenKeyword -> AncientWhenKeyword\n| Token_mapping.Token_definitions_unified.AncientCommaKeyword -> AncientCommaKeyword\n| Token_mapping.Token_definitions_unified.AfterThatKeyword -> AfterThatKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordStartKeyword -> AncientRecordStartKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordEndKeyword -> AncientRecordEndKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordEmptyKeyword -> AncientRecordEmptyKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordUpdateKeyword -> AncientRecordUpdateKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword",
          "| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword",
          "| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword",
          "| Token_mapping.Token_definitions_unified.AncientWhenKeyword -> AncientWhenKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCommaKeyword -> AncientCommaKeyword",
          "| Token_mapping.Token_definitions_unified.AfterThatKeyword -> AfterThatKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordStartKeyword -> AncientRecordStartKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordEndKeyword -> AncientRecordEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordEmptyKeyword -> AncientRecordEmptyKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordUpdateKeyword -> AncientRecordUpdateKeyword"
        ],
        "start_line": 87,
        "end_line": 96,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_classical.ml"
      },
      {
        "hash": "5eeab7f664ea1dc243645c6ad36e95be",
        "text": "| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword\n| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword\n| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword\n| Token_mapping.Token_definitions_unified.AncientWhenKeyword -> AncientWhenKeyword\n| Token_mapping.Token_definitions_unified.AncientCommaKeyword -> AncientCommaKeyword\n| Token_mapping.Token_definitions_unified.AfterThatKeyword -> AfterThatKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordStartKeyword -> AncientRecordStartKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordEndKeyword -> AncientRecordEndKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordEmptyKeyword -> AncientRecordEmptyKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordUpdateKeyword -> AncientRecordUpdateKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword",
          "| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword",
          "| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword",
          "| Token_mapping.Token_definitions_unified.AncientWhenKeyword -> AncientWhenKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCommaKeyword -> AncientCommaKeyword",
          "| Token_mapping.Token_definitions_unified.AfterThatKeyword -> AfterThatKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordStartKeyword -> AncientRecordStartKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordEndKeyword -> AncientRecordEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordEmptyKeyword -> AncientRecordEmptyKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordUpdateKeyword -> AncientRecordUpdateKeyword"
        ],
        "start_line": 90,
        "end_line": 99,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "5eeab7f664ea1dc243645c6ad36e95be",
        "text": "| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword\n| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword\n| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword\n| Token_mapping.Token_definitions_unified.AncientWhenKeyword -> AncientWhenKeyword\n| Token_mapping.Token_definitions_unified.AncientCommaKeyword -> AncientCommaKeyword\n| Token_mapping.Token_definitions_unified.AfterThatKeyword -> AfterThatKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordStartKeyword -> AncientRecordStartKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordEndKeyword -> AncientRecordEndKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordEmptyKeyword -> AncientRecordEmptyKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordUpdateKeyword -> AncientRecordUpdateKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword",
          "| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword",
          "| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword",
          "| Token_mapping.Token_definitions_unified.AncientWhenKeyword -> AncientWhenKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCommaKeyword -> AncientCommaKeyword",
          "| Token_mapping.Token_definitions_unified.AfterThatKeyword -> AfterThatKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordStartKeyword -> AncientRecordStartKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordEndKeyword -> AncientRecordEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordEmptyKeyword -> AncientRecordEmptyKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordUpdateKeyword -> AncientRecordUpdateKeyword"
        ],
        "start_line": 198,
        "end_line": 207,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "5eeab7f664ea1dc243645c6ad36e95be",
        "text": "| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword\n| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword\n| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword\n| Token_mapping.Token_definitions_unified.AncientWhenKeyword -> AncientWhenKeyword\n| Token_mapping.Token_definitions_unified.AncientCommaKeyword -> AncientCommaKeyword\n| Token_mapping.Token_definitions_unified.AfterThatKeyword -> AfterThatKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordStartKeyword -> AncientRecordStartKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordEndKeyword -> AncientRecordEndKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordEmptyKeyword -> AncientRecordEmptyKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordUpdateKeyword -> AncientRecordUpdateKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientEndCompleteKeyword -> AncientEndCompleteKeyword",
          "| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword",
          "| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword",
          "| Token_mapping.Token_definitions_unified.AncientWhenKeyword -> AncientWhenKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCommaKeyword -> AncientCommaKeyword",
          "| Token_mapping.Token_definitions_unified.AfterThatKeyword -> AfterThatKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordStartKeyword -> AncientRecordStartKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordEndKeyword -> AncientRecordEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordEmptyKeyword -> AncientRecordEmptyKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordUpdateKeyword -> AncientRecordUpdateKeyword"
        ],
        "start_line": 143,
        "end_line": 152,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_basic_keywords.ml"
      }
    ],
    "741214c1efdf225e247bf7ce3c7b645f": [
      {
        "hash": "741214c1efdf225e247bf7ce3c7b645f",
        "text": "| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword\n| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword\n| Token_mapping.Token_definitions_unified.AncientWhenKeyword -> AncientWhenKeyword\n| Token_mapping.Token_definitions_unified.AncientCommaKeyword -> AncientCommaKeyword\n| Token_mapping.Token_definitions_unified.AfterThatKeyword -> AfterThatKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordStartKeyword -> AncientRecordStartKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordEndKeyword -> AncientRecordEndKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordEmptyKeyword -> AncientRecordEmptyKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordUpdateKeyword -> AncientRecordUpdateKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordFinishKeyword -> AncientRecordFinishKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword",
          "| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword",
          "| Token_mapping.Token_definitions_unified.AncientWhenKeyword -> AncientWhenKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCommaKeyword -> AncientCommaKeyword",
          "| Token_mapping.Token_definitions_unified.AfterThatKeyword -> AfterThatKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordStartKeyword -> AncientRecordStartKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordEndKeyword -> AncientRecordEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordEmptyKeyword -> AncientRecordEmptyKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordUpdateKeyword -> AncientRecordUpdateKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordFinishKeyword -> AncientRecordFinishKeyword"
        ],
        "start_line": 204,
        "end_line": 213,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "741214c1efdf225e247bf7ce3c7b645f",
        "text": "| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword\n| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword\n| Token_mapping.Token_definitions_unified.AncientWhenKeyword -> AncientWhenKeyword\n| Token_mapping.Token_definitions_unified.AncientCommaKeyword -> AncientCommaKeyword\n| Token_mapping.Token_definitions_unified.AfterThatKeyword -> AfterThatKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordStartKeyword -> AncientRecordStartKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordEndKeyword -> AncientRecordEndKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordEmptyKeyword -> AncientRecordEmptyKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordUpdateKeyword -> AncientRecordUpdateKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordFinishKeyword -> AncientRecordFinishKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword",
          "| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword",
          "| Token_mapping.Token_definitions_unified.AncientWhenKeyword -> AncientWhenKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCommaKeyword -> AncientCommaKeyword",
          "| Token_mapping.Token_definitions_unified.AfterThatKeyword -> AfterThatKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordStartKeyword -> AncientRecordStartKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordEndKeyword -> AncientRecordEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordEmptyKeyword -> AncientRecordEmptyKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordUpdateKeyword -> AncientRecordUpdateKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordFinishKeyword -> AncientRecordFinishKeyword"
        ],
        "start_line": 359,
        "end_line": 368,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "741214c1efdf225e247bf7ce3c7b645f",
        "text": "| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword\n| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword\n| Token_mapping.Token_definitions_unified.AncientWhenKeyword -> AncientWhenKeyword\n| Token_mapping.Token_definitions_unified.AncientCommaKeyword -> AncientCommaKeyword\n| Token_mapping.Token_definitions_unified.AfterThatKeyword -> AfterThatKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordStartKeyword -> AncientRecordStartKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordEndKeyword -> AncientRecordEndKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordEmptyKeyword -> AncientRecordEmptyKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordUpdateKeyword -> AncientRecordUpdateKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordFinishKeyword -> AncientRecordFinishKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword",
          "| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword",
          "| Token_mapping.Token_definitions_unified.AncientWhenKeyword -> AncientWhenKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCommaKeyword -> AncientCommaKeyword",
          "| Token_mapping.Token_definitions_unified.AfterThatKeyword -> AfterThatKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordStartKeyword -> AncientRecordStartKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordEndKeyword -> AncientRecordEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordEmptyKeyword -> AncientRecordEmptyKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordUpdateKeyword -> AncientRecordUpdateKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordFinishKeyword -> AncientRecordFinishKeyword"
        ],
        "start_line": 88,
        "end_line": 97,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_classical.ml"
      },
      {
        "hash": "741214c1efdf225e247bf7ce3c7b645f",
        "text": "| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword\n| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword\n| Token_mapping.Token_definitions_unified.AncientWhenKeyword -> AncientWhenKeyword\n| Token_mapping.Token_definitions_unified.AncientCommaKeyword -> AncientCommaKeyword\n| Token_mapping.Token_definitions_unified.AfterThatKeyword -> AfterThatKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordStartKeyword -> AncientRecordStartKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordEndKeyword -> AncientRecordEndKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordEmptyKeyword -> AncientRecordEmptyKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordUpdateKeyword -> AncientRecordUpdateKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordFinishKeyword -> AncientRecordFinishKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword",
          "| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword",
          "| Token_mapping.Token_definitions_unified.AncientWhenKeyword -> AncientWhenKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCommaKeyword -> AncientCommaKeyword",
          "| Token_mapping.Token_definitions_unified.AfterThatKeyword -> AfterThatKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordStartKeyword -> AncientRecordStartKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordEndKeyword -> AncientRecordEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordEmptyKeyword -> AncientRecordEmptyKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordUpdateKeyword -> AncientRecordUpdateKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordFinishKeyword -> AncientRecordFinishKeyword"
        ],
        "start_line": 91,
        "end_line": 100,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "741214c1efdf225e247bf7ce3c7b645f",
        "text": "| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword\n| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword\n| Token_mapping.Token_definitions_unified.AncientWhenKeyword -> AncientWhenKeyword\n| Token_mapping.Token_definitions_unified.AncientCommaKeyword -> AncientCommaKeyword\n| Token_mapping.Token_definitions_unified.AfterThatKeyword -> AfterThatKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordStartKeyword -> AncientRecordStartKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordEndKeyword -> AncientRecordEndKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordEmptyKeyword -> AncientRecordEmptyKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordUpdateKeyword -> AncientRecordUpdateKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordFinishKeyword -> AncientRecordFinishKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword",
          "| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword",
          "| Token_mapping.Token_definitions_unified.AncientWhenKeyword -> AncientWhenKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCommaKeyword -> AncientCommaKeyword",
          "| Token_mapping.Token_definitions_unified.AfterThatKeyword -> AfterThatKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordStartKeyword -> AncientRecordStartKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordEndKeyword -> AncientRecordEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordEmptyKeyword -> AncientRecordEmptyKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordUpdateKeyword -> AncientRecordUpdateKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordFinishKeyword -> AncientRecordFinishKeyword"
        ],
        "start_line": 199,
        "end_line": 208,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "741214c1efdf225e247bf7ce3c7b645f",
        "text": "| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword\n| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword\n| Token_mapping.Token_definitions_unified.AncientWhenKeyword -> AncientWhenKeyword\n| Token_mapping.Token_definitions_unified.AncientCommaKeyword -> AncientCommaKeyword\n| Token_mapping.Token_definitions_unified.AfterThatKeyword -> AfterThatKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordStartKeyword -> AncientRecordStartKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordEndKeyword -> AncientRecordEndKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordEmptyKeyword -> AncientRecordEmptyKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordUpdateKeyword -> AncientRecordUpdateKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordFinishKeyword -> AncientRecordFinishKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientIsKeyword -> AncientIsKeyword",
          "| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword",
          "| Token_mapping.Token_definitions_unified.AncientWhenKeyword -> AncientWhenKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCommaKeyword -> AncientCommaKeyword",
          "| Token_mapping.Token_definitions_unified.AfterThatKeyword -> AfterThatKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordStartKeyword -> AncientRecordStartKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordEndKeyword -> AncientRecordEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordEmptyKeyword -> AncientRecordEmptyKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordUpdateKeyword -> AncientRecordUpdateKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordFinishKeyword -> AncientRecordFinishKeyword"
        ],
        "start_line": 144,
        "end_line": 153,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_basic_keywords.ml"
      }
    ],
    "d9d6bddf1bffb586731e4f05e5a22346": [
      {
        "hash": "d9d6bddf1bffb586731e4f05e5a22346",
        "text": "| Token_mapping.Token_definitions_unified.TypeKeyword -> TypeKeyword\n| Token_mapping.Token_definitions_unified.PrivateKeyword -> PrivateKeyword\n| Token_mapping.Token_definitions_unified.InputKeyword -> InputKeyword\n| Token_mapping.Token_definitions_unified.OutputKeyword -> OutputKeyword\n| Token_mapping.Token_definitions_unified.IntTypeKeyword -> IntTypeKeyword\n| Token_mapping.Token_definitions_unified.FloatTypeKeyword -> FloatTypeKeyword\n| Token_mapping.Token_definitions_unified.StringTypeKeyword -> StringTypeKeyword\n| Token_mapping.Token_definitions_unified.BoolTypeKeyword -> BoolTypeKeyword\n| Token_mapping.Token_definitions_unified.UnitTypeKeyword -> UnitTypeKeyword\n| Token_mapping.Token_definitions_unified.ListTypeKeyword -> ListTypeKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.TypeKeyword -> TypeKeyword",
          "| Token_mapping.Token_definitions_unified.PrivateKeyword -> PrivateKeyword",
          "| Token_mapping.Token_definitions_unified.InputKeyword -> InputKeyword",
          "| Token_mapping.Token_definitions_unified.OutputKeyword -> OutputKeyword",
          "| Token_mapping.Token_definitions_unified.IntTypeKeyword -> IntTypeKeyword",
          "| Token_mapping.Token_definitions_unified.FloatTypeKeyword -> FloatTypeKeyword",
          "| Token_mapping.Token_definitions_unified.StringTypeKeyword -> StringTypeKeyword",
          "| Token_mapping.Token_definitions_unified.BoolTypeKeyword -> BoolTypeKeyword",
          "| Token_mapping.Token_definitions_unified.UnitTypeKeyword -> UnitTypeKeyword",
          "| Token_mapping.Token_definitions_unified.ListTypeKeyword -> ListTypeKeyword"
        ],
        "start_line": 255,
        "end_line": 264,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "d9d6bddf1bffb586731e4f05e5a22346",
        "text": "| Token_mapping.Token_definitions_unified.TypeKeyword -> TypeKeyword\n| Token_mapping.Token_definitions_unified.PrivateKeyword -> PrivateKeyword\n| Token_mapping.Token_definitions_unified.InputKeyword -> InputKeyword\n| Token_mapping.Token_definitions_unified.OutputKeyword -> OutputKeyword\n| Token_mapping.Token_definitions_unified.IntTypeKeyword -> IntTypeKeyword\n| Token_mapping.Token_definitions_unified.FloatTypeKeyword -> FloatTypeKeyword\n| Token_mapping.Token_definitions_unified.StringTypeKeyword -> StringTypeKeyword\n| Token_mapping.Token_definitions_unified.BoolTypeKeyword -> BoolTypeKeyword\n| Token_mapping.Token_definitions_unified.UnitTypeKeyword -> UnitTypeKeyword\n| Token_mapping.Token_definitions_unified.ListTypeKeyword -> ListTypeKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.TypeKeyword -> TypeKeyword",
          "| Token_mapping.Token_definitions_unified.PrivateKeyword -> PrivateKeyword",
          "| Token_mapping.Token_definitions_unified.InputKeyword -> InputKeyword",
          "| Token_mapping.Token_definitions_unified.OutputKeyword -> OutputKeyword",
          "| Token_mapping.Token_definitions_unified.IntTypeKeyword -> IntTypeKeyword",
          "| Token_mapping.Token_definitions_unified.FloatTypeKeyword -> FloatTypeKeyword",
          "| Token_mapping.Token_definitions_unified.StringTypeKeyword -> StringTypeKeyword",
          "| Token_mapping.Token_definitions_unified.BoolTypeKeyword -> BoolTypeKeyword",
          "| Token_mapping.Token_definitions_unified.UnitTypeKeyword -> UnitTypeKeyword",
          "| Token_mapping.Token_definitions_unified.ListTypeKeyword -> ListTypeKeyword"
        ],
        "start_line": 8,
        "end_line": 17,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_type_keywords.ml"
      },
      {
        "hash": "d9d6bddf1bffb586731e4f05e5a22346",
        "text": "| Token_mapping.Token_definitions_unified.TypeKeyword -> TypeKeyword\n| Token_mapping.Token_definitions_unified.PrivateKeyword -> PrivateKeyword\n| Token_mapping.Token_definitions_unified.InputKeyword -> InputKeyword\n| Token_mapping.Token_definitions_unified.OutputKeyword -> OutputKeyword\n| Token_mapping.Token_definitions_unified.IntTypeKeyword -> IntTypeKeyword\n| Token_mapping.Token_definitions_unified.FloatTypeKeyword -> FloatTypeKeyword\n| Token_mapping.Token_definitions_unified.StringTypeKeyword -> StringTypeKeyword\n| Token_mapping.Token_definitions_unified.BoolTypeKeyword -> BoolTypeKeyword\n| Token_mapping.Token_definitions_unified.UnitTypeKeyword -> UnitTypeKeyword\n| Token_mapping.Token_definitions_unified.ListTypeKeyword -> ListTypeKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.TypeKeyword -> TypeKeyword",
          "| Token_mapping.Token_definitions_unified.PrivateKeyword -> PrivateKeyword",
          "| Token_mapping.Token_definitions_unified.InputKeyword -> InputKeyword",
          "| Token_mapping.Token_definitions_unified.OutputKeyword -> OutputKeyword",
          "| Token_mapping.Token_definitions_unified.IntTypeKeyword -> IntTypeKeyword",
          "| Token_mapping.Token_definitions_unified.FloatTypeKeyword -> FloatTypeKeyword",
          "| Token_mapping.Token_definitions_unified.StringTypeKeyword -> StringTypeKeyword",
          "| Token_mapping.Token_definitions_unified.BoolTypeKeyword -> BoolTypeKeyword",
          "| Token_mapping.Token_definitions_unified.UnitTypeKeyword -> UnitTypeKeyword",
          "| Token_mapping.Token_definitions_unified.ListTypeKeyword -> ListTypeKeyword"
        ],
        "start_line": 18,
        "end_line": 27,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_types.ml"
      }
    ],
    "1c821f4c483a9781563581865f354a36": [
      {
        "hash": "1c821f4c483a9781563581865f354a36",
        "text": "| Token_mapping.Token_definitions_unified.PrivateKeyword -> PrivateKeyword\n| Token_mapping.Token_definitions_unified.InputKeyword -> InputKeyword\n| Token_mapping.Token_definitions_unified.OutputKeyword -> OutputKeyword\n| Token_mapping.Token_definitions_unified.IntTypeKeyword -> IntTypeKeyword\n| Token_mapping.Token_definitions_unified.FloatTypeKeyword -> FloatTypeKeyword\n| Token_mapping.Token_definitions_unified.StringTypeKeyword -> StringTypeKeyword\n| Token_mapping.Token_definitions_unified.BoolTypeKeyword -> BoolTypeKeyword\n| Token_mapping.Token_definitions_unified.UnitTypeKeyword -> UnitTypeKeyword\n| Token_mapping.Token_definitions_unified.ListTypeKeyword -> ListTypeKeyword\n| Token_mapping.Token_definitions_unified.ArrayTypeKeyword -> ArrayTypeKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.PrivateKeyword -> PrivateKeyword",
          "| Token_mapping.Token_definitions_unified.InputKeyword -> InputKeyword",
          "| Token_mapping.Token_definitions_unified.OutputKeyword -> OutputKeyword",
          "| Token_mapping.Token_definitions_unified.IntTypeKeyword -> IntTypeKeyword",
          "| Token_mapping.Token_definitions_unified.FloatTypeKeyword -> FloatTypeKeyword",
          "| Token_mapping.Token_definitions_unified.StringTypeKeyword -> StringTypeKeyword",
          "| Token_mapping.Token_definitions_unified.BoolTypeKeyword -> BoolTypeKeyword",
          "| Token_mapping.Token_definitions_unified.UnitTypeKeyword -> UnitTypeKeyword",
          "| Token_mapping.Token_definitions_unified.ListTypeKeyword -> ListTypeKeyword",
          "| Token_mapping.Token_definitions_unified.ArrayTypeKeyword -> ArrayTypeKeyword"
        ],
        "start_line": 256,
        "end_line": 265,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "1c821f4c483a9781563581865f354a36",
        "text": "| Token_mapping.Token_definitions_unified.PrivateKeyword -> PrivateKeyword\n| Token_mapping.Token_definitions_unified.InputKeyword -> InputKeyword\n| Token_mapping.Token_definitions_unified.OutputKeyword -> OutputKeyword\n| Token_mapping.Token_definitions_unified.IntTypeKeyword -> IntTypeKeyword\n| Token_mapping.Token_definitions_unified.FloatTypeKeyword -> FloatTypeKeyword\n| Token_mapping.Token_definitions_unified.StringTypeKeyword -> StringTypeKeyword\n| Token_mapping.Token_definitions_unified.BoolTypeKeyword -> BoolTypeKeyword\n| Token_mapping.Token_definitions_unified.UnitTypeKeyword -> UnitTypeKeyword\n| Token_mapping.Token_definitions_unified.ListTypeKeyword -> ListTypeKeyword\n| Token_mapping.Token_definitions_unified.ArrayTypeKeyword -> ArrayTypeKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.PrivateKeyword -> PrivateKeyword",
          "| Token_mapping.Token_definitions_unified.InputKeyword -> InputKeyword",
          "| Token_mapping.Token_definitions_unified.OutputKeyword -> OutputKeyword",
          "| Token_mapping.Token_definitions_unified.IntTypeKeyword -> IntTypeKeyword",
          "| Token_mapping.Token_definitions_unified.FloatTypeKeyword -> FloatTypeKeyword",
          "| Token_mapping.Token_definitions_unified.StringTypeKeyword -> StringTypeKeyword",
          "| Token_mapping.Token_definitions_unified.BoolTypeKeyword -> BoolTypeKeyword",
          "| Token_mapping.Token_definitions_unified.UnitTypeKeyword -> UnitTypeKeyword",
          "| Token_mapping.Token_definitions_unified.ListTypeKeyword -> ListTypeKeyword",
          "| Token_mapping.Token_definitions_unified.ArrayTypeKeyword -> ArrayTypeKeyword"
        ],
        "start_line": 9,
        "end_line": 18,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_type_keywords.ml"
      },
      {
        "hash": "1c821f4c483a9781563581865f354a36",
        "text": "| Token_mapping.Token_definitions_unified.PrivateKeyword -> PrivateKeyword\n| Token_mapping.Token_definitions_unified.InputKeyword -> InputKeyword\n| Token_mapping.Token_definitions_unified.OutputKeyword -> OutputKeyword\n| Token_mapping.Token_definitions_unified.IntTypeKeyword -> IntTypeKeyword\n| Token_mapping.Token_definitions_unified.FloatTypeKeyword -> FloatTypeKeyword\n| Token_mapping.Token_definitions_unified.StringTypeKeyword -> StringTypeKeyword\n| Token_mapping.Token_definitions_unified.BoolTypeKeyword -> BoolTypeKeyword\n| Token_mapping.Token_definitions_unified.UnitTypeKeyword -> UnitTypeKeyword\n| Token_mapping.Token_definitions_unified.ListTypeKeyword -> ListTypeKeyword\n| Token_mapping.Token_definitions_unified.ArrayTypeKeyword -> ArrayTypeKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.PrivateKeyword -> PrivateKeyword",
          "| Token_mapping.Token_definitions_unified.InputKeyword -> InputKeyword",
          "| Token_mapping.Token_definitions_unified.OutputKeyword -> OutputKeyword",
          "| Token_mapping.Token_definitions_unified.IntTypeKeyword -> IntTypeKeyword",
          "| Token_mapping.Token_definitions_unified.FloatTypeKeyword -> FloatTypeKeyword",
          "| Token_mapping.Token_definitions_unified.StringTypeKeyword -> StringTypeKeyword",
          "| Token_mapping.Token_definitions_unified.BoolTypeKeyword -> BoolTypeKeyword",
          "| Token_mapping.Token_definitions_unified.UnitTypeKeyword -> UnitTypeKeyword",
          "| Token_mapping.Token_definitions_unified.ListTypeKeyword -> ListTypeKeyword",
          "| Token_mapping.Token_definitions_unified.ArrayTypeKeyword -> ArrayTypeKeyword"
        ],
        "start_line": 19,
        "end_line": 28,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_types.ml"
      }
    ],
    "660a3a4faf193497c3d1441c3b77e334": [
      {
        "hash": "660a3a4faf193497c3d1441c3b77e334",
        "text": "| Token_mapping.Token_definitions_unified.InputKeyword -> InputKeyword\n| Token_mapping.Token_definitions_unified.OutputKeyword -> OutputKeyword\n| Token_mapping.Token_definitions_unified.IntTypeKeyword -> IntTypeKeyword\n| Token_mapping.Token_definitions_unified.FloatTypeKeyword -> FloatTypeKeyword\n| Token_mapping.Token_definitions_unified.StringTypeKeyword -> StringTypeKeyword\n| Token_mapping.Token_definitions_unified.BoolTypeKeyword -> BoolTypeKeyword\n| Token_mapping.Token_definitions_unified.UnitTypeKeyword -> UnitTypeKeyword\n| Token_mapping.Token_definitions_unified.ListTypeKeyword -> ListTypeKeyword\n| Token_mapping.Token_definitions_unified.ArrayTypeKeyword -> ArrayTypeKeyword\n| Token_mapping.Token_definitions_unified.VariantKeyword -> VariantKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.InputKeyword -> InputKeyword",
          "| Token_mapping.Token_definitions_unified.OutputKeyword -> OutputKeyword",
          "| Token_mapping.Token_definitions_unified.IntTypeKeyword -> IntTypeKeyword",
          "| Token_mapping.Token_definitions_unified.FloatTypeKeyword -> FloatTypeKeyword",
          "| Token_mapping.Token_definitions_unified.StringTypeKeyword -> StringTypeKeyword",
          "| Token_mapping.Token_definitions_unified.BoolTypeKeyword -> BoolTypeKeyword",
          "| Token_mapping.Token_definitions_unified.UnitTypeKeyword -> UnitTypeKeyword",
          "| Token_mapping.Token_definitions_unified.ListTypeKeyword -> ListTypeKeyword",
          "| Token_mapping.Token_definitions_unified.ArrayTypeKeyword -> ArrayTypeKeyword",
          "| Token_mapping.Token_definitions_unified.VariantKeyword -> VariantKeyword"
        ],
        "start_line": 257,
        "end_line": 266,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "660a3a4faf193497c3d1441c3b77e334",
        "text": "| Token_mapping.Token_definitions_unified.InputKeyword -> InputKeyword\n| Token_mapping.Token_definitions_unified.OutputKeyword -> OutputKeyword\n| Token_mapping.Token_definitions_unified.IntTypeKeyword -> IntTypeKeyword\n| Token_mapping.Token_definitions_unified.FloatTypeKeyword -> FloatTypeKeyword\n| Token_mapping.Token_definitions_unified.StringTypeKeyword -> StringTypeKeyword\n| Token_mapping.Token_definitions_unified.BoolTypeKeyword -> BoolTypeKeyword\n| Token_mapping.Token_definitions_unified.UnitTypeKeyword -> UnitTypeKeyword\n| Token_mapping.Token_definitions_unified.ListTypeKeyword -> ListTypeKeyword\n| Token_mapping.Token_definitions_unified.ArrayTypeKeyword -> ArrayTypeKeyword\n| Token_mapping.Token_definitions_unified.VariantKeyword -> VariantKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.InputKeyword -> InputKeyword",
          "| Token_mapping.Token_definitions_unified.OutputKeyword -> OutputKeyword",
          "| Token_mapping.Token_definitions_unified.IntTypeKeyword -> IntTypeKeyword",
          "| Token_mapping.Token_definitions_unified.FloatTypeKeyword -> FloatTypeKeyword",
          "| Token_mapping.Token_definitions_unified.StringTypeKeyword -> StringTypeKeyword",
          "| Token_mapping.Token_definitions_unified.BoolTypeKeyword -> BoolTypeKeyword",
          "| Token_mapping.Token_definitions_unified.UnitTypeKeyword -> UnitTypeKeyword",
          "| Token_mapping.Token_definitions_unified.ListTypeKeyword -> ListTypeKeyword",
          "| Token_mapping.Token_definitions_unified.ArrayTypeKeyword -> ArrayTypeKeyword",
          "| Token_mapping.Token_definitions_unified.VariantKeyword -> VariantKeyword"
        ],
        "start_line": 10,
        "end_line": 19,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_type_keywords.ml"
      },
      {
        "hash": "660a3a4faf193497c3d1441c3b77e334",
        "text": "| Token_mapping.Token_definitions_unified.InputKeyword -> InputKeyword\n| Token_mapping.Token_definitions_unified.OutputKeyword -> OutputKeyword\n| Token_mapping.Token_definitions_unified.IntTypeKeyword -> IntTypeKeyword\n| Token_mapping.Token_definitions_unified.FloatTypeKeyword -> FloatTypeKeyword\n| Token_mapping.Token_definitions_unified.StringTypeKeyword -> StringTypeKeyword\n| Token_mapping.Token_definitions_unified.BoolTypeKeyword -> BoolTypeKeyword\n| Token_mapping.Token_definitions_unified.UnitTypeKeyword -> UnitTypeKeyword\n| Token_mapping.Token_definitions_unified.ListTypeKeyword -> ListTypeKeyword\n| Token_mapping.Token_definitions_unified.ArrayTypeKeyword -> ArrayTypeKeyword\n| Token_mapping.Token_definitions_unified.VariantKeyword -> VariantKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.InputKeyword -> InputKeyword",
          "| Token_mapping.Token_definitions_unified.OutputKeyword -> OutputKeyword",
          "| Token_mapping.Token_definitions_unified.IntTypeKeyword -> IntTypeKeyword",
          "| Token_mapping.Token_definitions_unified.FloatTypeKeyword -> FloatTypeKeyword",
          "| Token_mapping.Token_definitions_unified.StringTypeKeyword -> StringTypeKeyword",
          "| Token_mapping.Token_definitions_unified.BoolTypeKeyword -> BoolTypeKeyword",
          "| Token_mapping.Token_definitions_unified.UnitTypeKeyword -> UnitTypeKeyword",
          "| Token_mapping.Token_definitions_unified.ListTypeKeyword -> ListTypeKeyword",
          "| Token_mapping.Token_definitions_unified.ArrayTypeKeyword -> ArrayTypeKeyword",
          "| Token_mapping.Token_definitions_unified.VariantKeyword -> VariantKeyword"
        ],
        "start_line": 20,
        "end_line": 29,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_types.ml"
      }
    ],
    "a169b26a1cfdca32b1226dfa7153bb94": [
      {
        "hash": "a169b26a1cfdca32b1226dfa7153bb94",
        "text": "| Token_mapping.Token_definitions_unified.OutputKeyword -> OutputKeyword\n| Token_mapping.Token_definitions_unified.IntTypeKeyword -> IntTypeKeyword\n| Token_mapping.Token_definitions_unified.FloatTypeKeyword -> FloatTypeKeyword\n| Token_mapping.Token_definitions_unified.StringTypeKeyword -> StringTypeKeyword\n| Token_mapping.Token_definitions_unified.BoolTypeKeyword -> BoolTypeKeyword\n| Token_mapping.Token_definitions_unified.UnitTypeKeyword -> UnitTypeKeyword\n| Token_mapping.Token_definitions_unified.ListTypeKeyword -> ListTypeKeyword\n| Token_mapping.Token_definitions_unified.ArrayTypeKeyword -> ArrayTypeKeyword\n| Token_mapping.Token_definitions_unified.VariantKeyword -> VariantKeyword\n| Token_mapping.Token_definitions_unified.TagKeyword -> TagKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.OutputKeyword -> OutputKeyword",
          "| Token_mapping.Token_definitions_unified.IntTypeKeyword -> IntTypeKeyword",
          "| Token_mapping.Token_definitions_unified.FloatTypeKeyword -> FloatTypeKeyword",
          "| Token_mapping.Token_definitions_unified.StringTypeKeyword -> StringTypeKeyword",
          "| Token_mapping.Token_definitions_unified.BoolTypeKeyword -> BoolTypeKeyword",
          "| Token_mapping.Token_definitions_unified.UnitTypeKeyword -> UnitTypeKeyword",
          "| Token_mapping.Token_definitions_unified.ListTypeKeyword -> ListTypeKeyword",
          "| Token_mapping.Token_definitions_unified.ArrayTypeKeyword -> ArrayTypeKeyword",
          "| Token_mapping.Token_definitions_unified.VariantKeyword -> VariantKeyword",
          "| Token_mapping.Token_definitions_unified.TagKeyword -> TagKeyword"
        ],
        "start_line": 258,
        "end_line": 267,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "a169b26a1cfdca32b1226dfa7153bb94",
        "text": "| Token_mapping.Token_definitions_unified.OutputKeyword -> OutputKeyword\n| Token_mapping.Token_definitions_unified.IntTypeKeyword -> IntTypeKeyword\n| Token_mapping.Token_definitions_unified.FloatTypeKeyword -> FloatTypeKeyword\n| Token_mapping.Token_definitions_unified.StringTypeKeyword -> StringTypeKeyword\n| Token_mapping.Token_definitions_unified.BoolTypeKeyword -> BoolTypeKeyword\n| Token_mapping.Token_definitions_unified.UnitTypeKeyword -> UnitTypeKeyword\n| Token_mapping.Token_definitions_unified.ListTypeKeyword -> ListTypeKeyword\n| Token_mapping.Token_definitions_unified.ArrayTypeKeyword -> ArrayTypeKeyword\n| Token_mapping.Token_definitions_unified.VariantKeyword -> VariantKeyword\n| Token_mapping.Token_definitions_unified.TagKeyword -> TagKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.OutputKeyword -> OutputKeyword",
          "| Token_mapping.Token_definitions_unified.IntTypeKeyword -> IntTypeKeyword",
          "| Token_mapping.Token_definitions_unified.FloatTypeKeyword -> FloatTypeKeyword",
          "| Token_mapping.Token_definitions_unified.StringTypeKeyword -> StringTypeKeyword",
          "| Token_mapping.Token_definitions_unified.BoolTypeKeyword -> BoolTypeKeyword",
          "| Token_mapping.Token_definitions_unified.UnitTypeKeyword -> UnitTypeKeyword",
          "| Token_mapping.Token_definitions_unified.ListTypeKeyword -> ListTypeKeyword",
          "| Token_mapping.Token_definitions_unified.ArrayTypeKeyword -> ArrayTypeKeyword",
          "| Token_mapping.Token_definitions_unified.VariantKeyword -> VariantKeyword",
          "| Token_mapping.Token_definitions_unified.TagKeyword -> TagKeyword"
        ],
        "start_line": 11,
        "end_line": 20,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_type_keywords.ml"
      },
      {
        "hash": "a169b26a1cfdca32b1226dfa7153bb94",
        "text": "| Token_mapping.Token_definitions_unified.OutputKeyword -> OutputKeyword\n| Token_mapping.Token_definitions_unified.IntTypeKeyword -> IntTypeKeyword\n| Token_mapping.Token_definitions_unified.FloatTypeKeyword -> FloatTypeKeyword\n| Token_mapping.Token_definitions_unified.StringTypeKeyword -> StringTypeKeyword\n| Token_mapping.Token_definitions_unified.BoolTypeKeyword -> BoolTypeKeyword\n| Token_mapping.Token_definitions_unified.UnitTypeKeyword -> UnitTypeKeyword\n| Token_mapping.Token_definitions_unified.ListTypeKeyword -> ListTypeKeyword\n| Token_mapping.Token_definitions_unified.ArrayTypeKeyword -> ArrayTypeKeyword\n| Token_mapping.Token_definitions_unified.VariantKeyword -> VariantKeyword\n| Token_mapping.Token_definitions_unified.TagKeyword -> TagKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.OutputKeyword -> OutputKeyword",
          "| Token_mapping.Token_definitions_unified.IntTypeKeyword -> IntTypeKeyword",
          "| Token_mapping.Token_definitions_unified.FloatTypeKeyword -> FloatTypeKeyword",
          "| Token_mapping.Token_definitions_unified.StringTypeKeyword -> StringTypeKeyword",
          "| Token_mapping.Token_definitions_unified.BoolTypeKeyword -> BoolTypeKeyword",
          "| Token_mapping.Token_definitions_unified.UnitTypeKeyword -> UnitTypeKeyword",
          "| Token_mapping.Token_definitions_unified.ListTypeKeyword -> ListTypeKeyword",
          "| Token_mapping.Token_definitions_unified.ArrayTypeKeyword -> ArrayTypeKeyword",
          "| Token_mapping.Token_definitions_unified.VariantKeyword -> VariantKeyword",
          "| Token_mapping.Token_definitions_unified.TagKeyword -> TagKeyword"
        ],
        "start_line": 21,
        "end_line": 30,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_types.ml"
      }
    ],
    "9bdabb5023a260c1c35fceb2ce16d0e3": [
      {
        "hash": "9bdabb5023a260c1c35fceb2ce16d0e3",
        "text": "let convert_wenyan_token = function\n| Token_mapping.Token_definitions_unified.HaveKeyword -> HaveKeyword\n| Token_mapping.Token_definitions_unified.OneKeyword -> OneKeyword\n| Token_mapping.Token_definitions_unified.NameKeyword -> NameKeyword\n| Token_mapping.Token_definitions_unified.SetKeyword -> SetKeyword\n| Token_mapping.Token_definitions_unified.AlsoKeyword -> AlsoKeyword\n| Token_mapping.Token_definitions_unified.ThenGetKeyword -> ThenGetKeyword\n| Token_mapping.Token_definitions_unified.CallKeyword -> CallKeyword\n| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword\n| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword",
        "lines": [
          "let convert_wenyan_token = function",
          "| Token_mapping.Token_definitions_unified.HaveKeyword -> HaveKeyword",
          "| Token_mapping.Token_definitions_unified.OneKeyword -> OneKeyword",
          "| Token_mapping.Token_definitions_unified.NameKeyword -> NameKeyword",
          "| Token_mapping.Token_definitions_unified.SetKeyword -> SetKeyword",
          "| Token_mapping.Token_definitions_unified.AlsoKeyword -> AlsoKeyword",
          "| Token_mapping.Token_definitions_unified.ThenGetKeyword -> ThenGetKeyword",
          "| Token_mapping.Token_definitions_unified.CallKeyword -> CallKeyword",
          "| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword",
          "| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword"
        ],
        "start_line": 277,
        "end_line": 286,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "9bdabb5023a260c1c35fceb2ce16d0e3",
        "text": "let convert_wenyan_token = function\n| Token_mapping.Token_definitions_unified.HaveKeyword -> HaveKeyword\n| Token_mapping.Token_definitions_unified.OneKeyword -> OneKeyword\n| Token_mapping.Token_definitions_unified.NameKeyword -> NameKeyword\n| Token_mapping.Token_definitions_unified.SetKeyword -> SetKeyword\n| Token_mapping.Token_definitions_unified.AlsoKeyword -> AlsoKeyword\n| Token_mapping.Token_definitions_unified.ThenGetKeyword -> ThenGetKeyword\n| Token_mapping.Token_definitions_unified.CallKeyword -> CallKeyword\n| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword\n| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword",
        "lines": [
          "let convert_wenyan_token = function",
          "| Token_mapping.Token_definitions_unified.HaveKeyword -> HaveKeyword",
          "| Token_mapping.Token_definitions_unified.OneKeyword -> OneKeyword",
          "| Token_mapping.Token_definitions_unified.NameKeyword -> NameKeyword",
          "| Token_mapping.Token_definitions_unified.SetKeyword -> SetKeyword",
          "| Token_mapping.Token_definitions_unified.AlsoKeyword -> AlsoKeyword",
          "| Token_mapping.Token_definitions_unified.ThenGetKeyword -> ThenGetKeyword",
          "| Token_mapping.Token_definitions_unified.CallKeyword -> CallKeyword",
          "| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword",
          "| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword"
        ],
        "start_line": 6,
        "end_line": 15,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_classical.ml"
      },
      {
        "hash": "9bdabb5023a260c1c35fceb2ce16d0e3",
        "text": "let convert_wenyan_token = function\n| Token_mapping.Token_definitions_unified.HaveKeyword -> HaveKeyword\n| Token_mapping.Token_definitions_unified.OneKeyword -> OneKeyword\n| Token_mapping.Token_definitions_unified.NameKeyword -> NameKeyword\n| Token_mapping.Token_definitions_unified.SetKeyword -> SetKeyword\n| Token_mapping.Token_definitions_unified.AlsoKeyword -> AlsoKeyword\n| Token_mapping.Token_definitions_unified.ThenGetKeyword -> ThenGetKeyword\n| Token_mapping.Token_definitions_unified.CallKeyword -> CallKeyword\n| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword\n| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword",
        "lines": [
          "let convert_wenyan_token = function",
          "| Token_mapping.Token_definitions_unified.HaveKeyword -> HaveKeyword",
          "| Token_mapping.Token_definitions_unified.OneKeyword -> OneKeyword",
          "| Token_mapping.Token_definitions_unified.NameKeyword -> NameKeyword",
          "| Token_mapping.Token_definitions_unified.SetKeyword -> SetKeyword",
          "| Token_mapping.Token_definitions_unified.AlsoKeyword -> AlsoKeyword",
          "| Token_mapping.Token_definitions_unified.ThenGetKeyword -> ThenGetKeyword",
          "| Token_mapping.Token_definitions_unified.CallKeyword -> CallKeyword",
          "| Token_mapping.Token_definitions_unified.ValueKeyword -> ValueKeyword",
          "| Token_mapping.Token_definitions_unified.AsForKeyword -> AsForKeyword"
        ],
        "start_line": 119,
        "end_line": 128,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      }
    ],
    "580d3dd4fe382958fb0e43bbf2c241cd": [
      {
        "hash": "580d3dd4fe382958fb0e43bbf2c241cd",
        "text": "| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword\n| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword\n| Token_mapping.Token_definitions_unified.ForThisKeyword -> ForThisKeyword\n| Token_mapping.Token_definitions_unified.TimesKeyword -> TimesKeyword\n| Token_mapping.Token_definitions_unified.EndCloudKeyword -> EndCloudKeyword\n| Token_mapping.Token_definitions_unified.IfWenyanKeyword -> IfWenyanKeyword\n| Token_mapping.Token_definitions_unified.ThenWenyanKeyword -> ThenWenyanKeyword\n| Token_mapping.Token_definitions_unified.GreaterThanWenyan -> GreaterThanWenyan\n| Token_mapping.Token_definitions_unified.LessThanWenyan -> LessThanWenyan\n| _ ->",
        "lines": [
          "| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword",
          "| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword",
          "| Token_mapping.Token_definitions_unified.ForThisKeyword -> ForThisKeyword",
          "| Token_mapping.Token_definitions_unified.TimesKeyword -> TimesKeyword",
          "| Token_mapping.Token_definitions_unified.EndCloudKeyword -> EndCloudKeyword",
          "| Token_mapping.Token_definitions_unified.IfWenyanKeyword -> IfWenyanKeyword",
          "| Token_mapping.Token_definitions_unified.ThenWenyanKeyword -> ThenWenyanKeyword",
          "| Token_mapping.Token_definitions_unified.GreaterThanWenyan -> GreaterThanWenyan",
          "| Token_mapping.Token_definitions_unified.LessThanWenyan -> LessThanWenyan",
          "| _ ->"
        ],
        "start_line": 288,
        "end_line": 297,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "580d3dd4fe382958fb0e43bbf2c241cd",
        "text": "| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword\n| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword\n| Token_mapping.Token_definitions_unified.ForThisKeyword -> ForThisKeyword\n| Token_mapping.Token_definitions_unified.TimesKeyword -> TimesKeyword\n| Token_mapping.Token_definitions_unified.EndCloudKeyword -> EndCloudKeyword\n| Token_mapping.Token_definitions_unified.IfWenyanKeyword -> IfWenyanKeyword\n| Token_mapping.Token_definitions_unified.ThenWenyanKeyword -> ThenWenyanKeyword\n| Token_mapping.Token_definitions_unified.GreaterThanWenyan -> GreaterThanWenyan\n| Token_mapping.Token_definitions_unified.LessThanWenyan -> LessThanWenyan\n| _ ->",
        "lines": [
          "| Token_mapping.Token_definitions_unified.WantExecuteKeyword -> WantExecuteKeyword",
          "| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword",
          "| Token_mapping.Token_definitions_unified.ForThisKeyword -> ForThisKeyword",
          "| Token_mapping.Token_definitions_unified.TimesKeyword -> TimesKeyword",
          "| Token_mapping.Token_definitions_unified.EndCloudKeyword -> EndCloudKeyword",
          "| Token_mapping.Token_definitions_unified.IfWenyanKeyword -> IfWenyanKeyword",
          "| Token_mapping.Token_definitions_unified.ThenWenyanKeyword -> ThenWenyanKeyword",
          "| Token_mapping.Token_definitions_unified.GreaterThanWenyan -> GreaterThanWenyan",
          "| Token_mapping.Token_definitions_unified.LessThanWenyan -> LessThanWenyan",
          "| _ ->"
        ],
        "start_line": 17,
        "end_line": 26,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_classical.ml"
      }
    ],
    "45a41e0d9414c0c2688549ccbffceb47": [
      {
        "hash": "45a41e0d9414c0c2688549ccbffceb47",
        "text": "| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword\n| Token_mapping.Token_definitions_unified.ForThisKeyword -> ForThisKeyword\n| Token_mapping.Token_definitions_unified.TimesKeyword -> TimesKeyword\n| Token_mapping.Token_definitions_unified.EndCloudKeyword -> EndCloudKeyword\n| Token_mapping.Token_definitions_unified.IfWenyanKeyword -> IfWenyanKeyword\n| Token_mapping.Token_definitions_unified.ThenWenyanKeyword -> ThenWenyanKeyword\n| Token_mapping.Token_definitions_unified.GreaterThanWenyan -> GreaterThanWenyan\n| Token_mapping.Token_definitions_unified.LessThanWenyan -> LessThanWenyan\n| _ ->\nlet error_msg = \"未知的文言文token\" in",
        "lines": [
          "| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword",
          "| Token_mapping.Token_definitions_unified.ForThisKeyword -> ForThisKeyword",
          "| Token_mapping.Token_definitions_unified.TimesKeyword -> TimesKeyword",
          "| Token_mapping.Token_definitions_unified.EndCloudKeyword -> EndCloudKeyword",
          "| Token_mapping.Token_definitions_unified.IfWenyanKeyword -> IfWenyanKeyword",
          "| Token_mapping.Token_definitions_unified.ThenWenyanKeyword -> ThenWenyanKeyword",
          "| Token_mapping.Token_definitions_unified.GreaterThanWenyan -> GreaterThanWenyan",
          "| Token_mapping.Token_definitions_unified.LessThanWenyan -> LessThanWenyan",
          "| _ ->",
          "let error_msg = \"未知的文言文token\" in"
        ],
        "start_line": 289,
        "end_line": 298,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "45a41e0d9414c0c2688549ccbffceb47",
        "text": "| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword\n| Token_mapping.Token_definitions_unified.ForThisKeyword -> ForThisKeyword\n| Token_mapping.Token_definitions_unified.TimesKeyword -> TimesKeyword\n| Token_mapping.Token_definitions_unified.EndCloudKeyword -> EndCloudKeyword\n| Token_mapping.Token_definitions_unified.IfWenyanKeyword -> IfWenyanKeyword\n| Token_mapping.Token_definitions_unified.ThenWenyanKeyword -> ThenWenyanKeyword\n| Token_mapping.Token_definitions_unified.GreaterThanWenyan -> GreaterThanWenyan\n| Token_mapping.Token_definitions_unified.LessThanWenyan -> LessThanWenyan\n| _ ->\nlet error_msg = \"未知的文言文token\" in",
        "lines": [
          "| Token_mapping.Token_definitions_unified.MustFirstGetKeyword -> MustFirstGetKeyword",
          "| Token_mapping.Token_definitions_unified.ForThisKeyword -> ForThisKeyword",
          "| Token_mapping.Token_definitions_unified.TimesKeyword -> TimesKeyword",
          "| Token_mapping.Token_definitions_unified.EndCloudKeyword -> EndCloudKeyword",
          "| Token_mapping.Token_definitions_unified.IfWenyanKeyword -> IfWenyanKeyword",
          "| Token_mapping.Token_definitions_unified.ThenWenyanKeyword -> ThenWenyanKeyword",
          "| Token_mapping.Token_definitions_unified.GreaterThanWenyan -> GreaterThanWenyan",
          "| Token_mapping.Token_definitions_unified.LessThanWenyan -> LessThanWenyan",
          "| _ ->",
          "let error_msg = \"未知的文言文token\" in"
        ],
        "start_line": 18,
        "end_line": 27,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_classical.ml"
      }
    ],
    "50ef1eb39aa08c4a9f8a8d22fa7ede75": [
      {
        "hash": "50ef1eb39aa08c4a9f8a8d22fa7ede75",
        "text": "let convert_natural_language_token = function\n| Token_mapping.Token_definitions_unified.DefineKeyword -> DefineKeyword\n| Token_mapping.Token_definitions_unified.AcceptKeyword -> AcceptKeyword\n| Token_mapping.Token_definitions_unified.ReturnWhenKeyword -> ReturnWhenKeyword\n| Token_mapping.Token_definitions_unified.ElseReturnKeyword -> ElseReturnKeyword\n| Token_mapping.Token_definitions_unified.MultiplyKeyword -> MultiplyKeyword\n| Token_mapping.Token_definitions_unified.DivideKeyword -> DivideKeyword\n| Token_mapping.Token_definitions_unified.AddToKeyword -> AddToKeyword\n| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword\n| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword",
        "lines": [
          "let convert_natural_language_token = function",
          "| Token_mapping.Token_definitions_unified.DefineKeyword -> DefineKeyword",
          "| Token_mapping.Token_definitions_unified.AcceptKeyword -> AcceptKeyword",
          "| Token_mapping.Token_definitions_unified.ReturnWhenKeyword -> ReturnWhenKeyword",
          "| Token_mapping.Token_definitions_unified.ElseReturnKeyword -> ElseReturnKeyword",
          "| Token_mapping.Token_definitions_unified.MultiplyKeyword -> MultiplyKeyword",
          "| Token_mapping.Token_definitions_unified.DivideKeyword -> DivideKeyword",
          "| Token_mapping.Token_definitions_unified.AddToKeyword -> AddToKeyword",
          "| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword",
          "| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword"
        ],
        "start_line": 302,
        "end_line": 311,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "50ef1eb39aa08c4a9f8a8d22fa7ede75",
        "text": "let convert_natural_language_token = function\n| Token_mapping.Token_definitions_unified.DefineKeyword -> DefineKeyword\n| Token_mapping.Token_definitions_unified.AcceptKeyword -> AcceptKeyword\n| Token_mapping.Token_definitions_unified.ReturnWhenKeyword -> ReturnWhenKeyword\n| Token_mapping.Token_definitions_unified.ElseReturnKeyword -> ElseReturnKeyword\n| Token_mapping.Token_definitions_unified.MultiplyKeyword -> MultiplyKeyword\n| Token_mapping.Token_definitions_unified.DivideKeyword -> DivideKeyword\n| Token_mapping.Token_definitions_unified.AddToKeyword -> AddToKeyword\n| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword\n| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword",
        "lines": [
          "let convert_natural_language_token = function",
          "| Token_mapping.Token_definitions_unified.DefineKeyword -> DefineKeyword",
          "| Token_mapping.Token_definitions_unified.AcceptKeyword -> AcceptKeyword",
          "| Token_mapping.Token_definitions_unified.ReturnWhenKeyword -> ReturnWhenKeyword",
          "| Token_mapping.Token_definitions_unified.ElseReturnKeyword -> ElseReturnKeyword",
          "| Token_mapping.Token_definitions_unified.MultiplyKeyword -> MultiplyKeyword",
          "| Token_mapping.Token_definitions_unified.DivideKeyword -> DivideKeyword",
          "| Token_mapping.Token_definitions_unified.AddToKeyword -> AddToKeyword",
          "| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword",
          "| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword"
        ],
        "start_line": 31,
        "end_line": 40,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_classical.ml"
      },
      {
        "hash": "50ef1eb39aa08c4a9f8a8d22fa7ede75",
        "text": "let convert_natural_language_token = function\n| Token_mapping.Token_definitions_unified.DefineKeyword -> DefineKeyword\n| Token_mapping.Token_definitions_unified.AcceptKeyword -> AcceptKeyword\n| Token_mapping.Token_definitions_unified.ReturnWhenKeyword -> ReturnWhenKeyword\n| Token_mapping.Token_definitions_unified.ElseReturnKeyword -> ElseReturnKeyword\n| Token_mapping.Token_definitions_unified.MultiplyKeyword -> MultiplyKeyword\n| Token_mapping.Token_definitions_unified.DivideKeyword -> DivideKeyword\n| Token_mapping.Token_definitions_unified.AddToKeyword -> AddToKeyword\n| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword\n| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword",
        "lines": [
          "let convert_natural_language_token = function",
          "| Token_mapping.Token_definitions_unified.DefineKeyword -> DefineKeyword",
          "| Token_mapping.Token_definitions_unified.AcceptKeyword -> AcceptKeyword",
          "| Token_mapping.Token_definitions_unified.ReturnWhenKeyword -> ReturnWhenKeyword",
          "| Token_mapping.Token_definitions_unified.ElseReturnKeyword -> ElseReturnKeyword",
          "| Token_mapping.Token_definitions_unified.MultiplyKeyword -> MultiplyKeyword",
          "| Token_mapping.Token_definitions_unified.DivideKeyword -> DivideKeyword",
          "| Token_mapping.Token_definitions_unified.AddToKeyword -> AddToKeyword",
          "| Token_mapping.Token_definitions_unified.SubtractKeyword -> SubtractKeyword",
          "| Token_mapping.Token_definitions_unified.EqualToKeyword -> EqualToKeyword"
        ],
        "start_line": 143,
        "end_line": 152,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      }
    ],
    "1622f102bae1174f0f222413a1095041": [
      {
        "hash": "1622f102bae1174f0f222413a1095041",
        "text": "| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword\n| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword\n| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword\n| Token_mapping.Token_definitions_unified.OfParticle -> OfParticle\n| Token_mapping.Token_definitions_unified.MinusOneKeyword -> MinusOneKeyword\n| Token_mapping.Token_definitions_unified.PlusKeyword -> PlusKeyword\n| Token_mapping.Token_definitions_unified.WhereKeyword -> WhereKeyword\n| Token_mapping.Token_definitions_unified.SmallKeyword -> SmallKeyword\n| Token_mapping.Token_definitions_unified.ShouldGetKeyword -> ShouldGetKeyword\n| _ ->",
        "lines": [
          "| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword",
          "| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword",
          "| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword",
          "| Token_mapping.Token_definitions_unified.OfParticle -> OfParticle",
          "| Token_mapping.Token_definitions_unified.MinusOneKeyword -> MinusOneKeyword",
          "| Token_mapping.Token_definitions_unified.PlusKeyword -> PlusKeyword",
          "| Token_mapping.Token_definitions_unified.WhereKeyword -> WhereKeyword",
          "| Token_mapping.Token_definitions_unified.SmallKeyword -> SmallKeyword",
          "| Token_mapping.Token_definitions_unified.ShouldGetKeyword -> ShouldGetKeyword",
          "| _ ->"
        ],
        "start_line": 314,
        "end_line": 323,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "1622f102bae1174f0f222413a1095041",
        "text": "| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword\n| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword\n| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword\n| Token_mapping.Token_definitions_unified.OfParticle -> OfParticle\n| Token_mapping.Token_definitions_unified.MinusOneKeyword -> MinusOneKeyword\n| Token_mapping.Token_definitions_unified.PlusKeyword -> PlusKeyword\n| Token_mapping.Token_definitions_unified.WhereKeyword -> WhereKeyword\n| Token_mapping.Token_definitions_unified.SmallKeyword -> SmallKeyword\n| Token_mapping.Token_definitions_unified.ShouldGetKeyword -> ShouldGetKeyword\n| _ ->",
        "lines": [
          "| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword",
          "| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword",
          "| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword",
          "| Token_mapping.Token_definitions_unified.OfParticle -> OfParticle",
          "| Token_mapping.Token_definitions_unified.MinusOneKeyword -> MinusOneKeyword",
          "| Token_mapping.Token_definitions_unified.PlusKeyword -> PlusKeyword",
          "| Token_mapping.Token_definitions_unified.WhereKeyword -> WhereKeyword",
          "| Token_mapping.Token_definitions_unified.SmallKeyword -> SmallKeyword",
          "| Token_mapping.Token_definitions_unified.ShouldGetKeyword -> ShouldGetKeyword",
          "| _ ->"
        ],
        "start_line": 43,
        "end_line": 52,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_classical.ml"
      }
    ],
    "c3de1ad9238cc88c45084a5a709a52df": [
      {
        "hash": "c3de1ad9238cc88c45084a5a709a52df",
        "text": "| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword\n| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword\n| Token_mapping.Token_definitions_unified.OfParticle -> OfParticle\n| Token_mapping.Token_definitions_unified.MinusOneKeyword -> MinusOneKeyword\n| Token_mapping.Token_definitions_unified.PlusKeyword -> PlusKeyword\n| Token_mapping.Token_definitions_unified.WhereKeyword -> WhereKeyword\n| Token_mapping.Token_definitions_unified.SmallKeyword -> SmallKeyword\n| Token_mapping.Token_definitions_unified.ShouldGetKeyword -> ShouldGetKeyword\n| _ ->\nlet error_msg = \"未知的自然语言token\" in",
        "lines": [
          "| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword",
          "| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword",
          "| Token_mapping.Token_definitions_unified.OfParticle -> OfParticle",
          "| Token_mapping.Token_definitions_unified.MinusOneKeyword -> MinusOneKeyword",
          "| Token_mapping.Token_definitions_unified.PlusKeyword -> PlusKeyword",
          "| Token_mapping.Token_definitions_unified.WhereKeyword -> WhereKeyword",
          "| Token_mapping.Token_definitions_unified.SmallKeyword -> SmallKeyword",
          "| Token_mapping.Token_definitions_unified.ShouldGetKeyword -> ShouldGetKeyword",
          "| _ ->",
          "let error_msg = \"未知的自然语言token\" in"
        ],
        "start_line": 315,
        "end_line": 324,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "c3de1ad9238cc88c45084a5a709a52df",
        "text": "| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword\n| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword\n| Token_mapping.Token_definitions_unified.OfParticle -> OfParticle\n| Token_mapping.Token_definitions_unified.MinusOneKeyword -> MinusOneKeyword\n| Token_mapping.Token_definitions_unified.PlusKeyword -> PlusKeyword\n| Token_mapping.Token_definitions_unified.WhereKeyword -> WhereKeyword\n| Token_mapping.Token_definitions_unified.SmallKeyword -> SmallKeyword\n| Token_mapping.Token_definitions_unified.ShouldGetKeyword -> ShouldGetKeyword\n| _ ->\nlet error_msg = \"未知的自然语言token\" in",
        "lines": [
          "| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword",
          "| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword",
          "| Token_mapping.Token_definitions_unified.OfParticle -> OfParticle",
          "| Token_mapping.Token_definitions_unified.MinusOneKeyword -> MinusOneKeyword",
          "| Token_mapping.Token_definitions_unified.PlusKeyword -> PlusKeyword",
          "| Token_mapping.Token_definitions_unified.WhereKeyword -> WhereKeyword",
          "| Token_mapping.Token_definitions_unified.SmallKeyword -> SmallKeyword",
          "| Token_mapping.Token_definitions_unified.ShouldGetKeyword -> ShouldGetKeyword",
          "| _ ->",
          "let error_msg = \"未知的自然语言token\" in"
        ],
        "start_line": 44,
        "end_line": 53,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_classical.ml"
      }
    ],
    "6c13a7e8059b763060003c493bef80da": [
      {
        "hash": "6c13a7e8059b763060003c493bef80da",
        "text": "let convert_ancient_token = function\n| Token_mapping.Token_definitions_unified.AncientDefineKeyword -> AncientDefineKeyword\n| Token_mapping.Token_definitions_unified.AncientEndKeyword -> AncientEndKeyword\n| Token_mapping.Token_definitions_unified.AncientAlgorithmKeyword -> AncientAlgorithmKeyword\n| Token_mapping.Token_definitions_unified.AncientCompleteKeyword -> AncientCompleteKeyword\n| Token_mapping.Token_definitions_unified.AncientObserveKeyword -> AncientObserveKeyword\n| Token_mapping.Token_definitions_unified.AncientNatureKeyword -> AncientNatureKeyword\n| Token_mapping.Token_definitions_unified.AncientThenKeyword -> AncientThenKeyword\n| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword\n| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword",
        "lines": [
          "let convert_ancient_token = function",
          "| Token_mapping.Token_definitions_unified.AncientDefineKeyword -> AncientDefineKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEndKeyword -> AncientEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAlgorithmKeyword -> AncientAlgorithmKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCompleteKeyword -> AncientCompleteKeyword",
          "| Token_mapping.Token_definitions_unified.AncientObserveKeyword -> AncientObserveKeyword",
          "| Token_mapping.Token_definitions_unified.AncientNatureKeyword -> AncientNatureKeyword",
          "| Token_mapping.Token_definitions_unified.AncientThenKeyword -> AncientThenKeyword",
          "| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword"
        ],
        "start_line": 328,
        "end_line": 337,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "6c13a7e8059b763060003c493bef80da",
        "text": "let convert_ancient_token = function\n| Token_mapping.Token_definitions_unified.AncientDefineKeyword -> AncientDefineKeyword\n| Token_mapping.Token_definitions_unified.AncientEndKeyword -> AncientEndKeyword\n| Token_mapping.Token_definitions_unified.AncientAlgorithmKeyword -> AncientAlgorithmKeyword\n| Token_mapping.Token_definitions_unified.AncientCompleteKeyword -> AncientCompleteKeyword\n| Token_mapping.Token_definitions_unified.AncientObserveKeyword -> AncientObserveKeyword\n| Token_mapping.Token_definitions_unified.AncientNatureKeyword -> AncientNatureKeyword\n| Token_mapping.Token_definitions_unified.AncientThenKeyword -> AncientThenKeyword\n| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword\n| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword",
        "lines": [
          "let convert_ancient_token = function",
          "| Token_mapping.Token_definitions_unified.AncientDefineKeyword -> AncientDefineKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEndKeyword -> AncientEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAlgorithmKeyword -> AncientAlgorithmKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCompleteKeyword -> AncientCompleteKeyword",
          "| Token_mapping.Token_definitions_unified.AncientObserveKeyword -> AncientObserveKeyword",
          "| Token_mapping.Token_definitions_unified.AncientNatureKeyword -> AncientNatureKeyword",
          "| Token_mapping.Token_definitions_unified.AncientThenKeyword -> AncientThenKeyword",
          "| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword"
        ],
        "start_line": 57,
        "end_line": 66,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_classical.ml"
      },
      {
        "hash": "6c13a7e8059b763060003c493bef80da",
        "text": "let convert_ancient_token = function\n| Token_mapping.Token_definitions_unified.AncientDefineKeyword -> AncientDefineKeyword\n| Token_mapping.Token_definitions_unified.AncientEndKeyword -> AncientEndKeyword\n| Token_mapping.Token_definitions_unified.AncientAlgorithmKeyword -> AncientAlgorithmKeyword\n| Token_mapping.Token_definitions_unified.AncientCompleteKeyword -> AncientCompleteKeyword\n| Token_mapping.Token_definitions_unified.AncientObserveKeyword -> AncientObserveKeyword\n| Token_mapping.Token_definitions_unified.AncientNatureKeyword -> AncientNatureKeyword\n| Token_mapping.Token_definitions_unified.AncientThenKeyword -> AncientThenKeyword\n| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword\n| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword",
        "lines": [
          "let convert_ancient_token = function",
          "| Token_mapping.Token_definitions_unified.AncientDefineKeyword -> AncientDefineKeyword",
          "| Token_mapping.Token_definitions_unified.AncientEndKeyword -> AncientEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAlgorithmKeyword -> AncientAlgorithmKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCompleteKeyword -> AncientCompleteKeyword",
          "| Token_mapping.Token_definitions_unified.AncientObserveKeyword -> AncientObserveKeyword",
          "| Token_mapping.Token_definitions_unified.AncientNatureKeyword -> AncientNatureKeyword",
          "| Token_mapping.Token_definitions_unified.AncientThenKeyword -> AncientThenKeyword",
          "| Token_mapping.Token_definitions_unified.AncientOtherwiseKeyword -> AncientOtherwiseKeyword",
          "| Token_mapping.Token_definitions_unified.AncientAnswerKeyword -> AncientAnswerKeyword"
        ],
        "start_line": 168,
        "end_line": 177,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      }
    ],
    "58f168283c3467dd287cb242848ffd88": [
      {
        "hash": "58f168283c3467dd287cb242848ffd88",
        "text": "| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword\n| Token_mapping.Token_definitions_unified.AncientWhenKeyword -> AncientWhenKeyword\n| Token_mapping.Token_definitions_unified.AncientCommaKeyword -> AncientCommaKeyword\n| Token_mapping.Token_definitions_unified.AfterThatKeyword -> AfterThatKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordStartKeyword -> AncientRecordStartKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordEndKeyword -> AncientRecordEndKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordEmptyKeyword -> AncientRecordEmptyKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordUpdateKeyword -> AncientRecordUpdateKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordFinishKeyword -> AncientRecordFinishKeyword\n| _ ->",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword",
          "| Token_mapping.Token_definitions_unified.AncientWhenKeyword -> AncientWhenKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCommaKeyword -> AncientCommaKeyword",
          "| Token_mapping.Token_definitions_unified.AfterThatKeyword -> AfterThatKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordStartKeyword -> AncientRecordStartKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordEndKeyword -> AncientRecordEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordEmptyKeyword -> AncientRecordEmptyKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordUpdateKeyword -> AncientRecordUpdateKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordFinishKeyword -> AncientRecordFinishKeyword",
          "| _ ->"
        ],
        "start_line": 360,
        "end_line": 369,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "58f168283c3467dd287cb242848ffd88",
        "text": "| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword\n| Token_mapping.Token_definitions_unified.AncientWhenKeyword -> AncientWhenKeyword\n| Token_mapping.Token_definitions_unified.AncientCommaKeyword -> AncientCommaKeyword\n| Token_mapping.Token_definitions_unified.AfterThatKeyword -> AfterThatKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordStartKeyword -> AncientRecordStartKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordEndKeyword -> AncientRecordEndKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordEmptyKeyword -> AncientRecordEmptyKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordUpdateKeyword -> AncientRecordUpdateKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordFinishKeyword -> AncientRecordFinishKeyword\n| _ ->",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientArrowKeyword -> AncientArrowKeyword",
          "| Token_mapping.Token_definitions_unified.AncientWhenKeyword -> AncientWhenKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCommaKeyword -> AncientCommaKeyword",
          "| Token_mapping.Token_definitions_unified.AfterThatKeyword -> AfterThatKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordStartKeyword -> AncientRecordStartKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordEndKeyword -> AncientRecordEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordEmptyKeyword -> AncientRecordEmptyKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordUpdateKeyword -> AncientRecordUpdateKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordFinishKeyword -> AncientRecordFinishKeyword",
          "| _ ->"
        ],
        "start_line": 89,
        "end_line": 98,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_classical.ml"
      }
    ],
    "085e66f4fc18a7459db74396dcabf46c": [
      {
        "hash": "085e66f4fc18a7459db74396dcabf46c",
        "text": "| Token_mapping.Token_definitions_unified.AncientWhenKeyword -> AncientWhenKeyword\n| Token_mapping.Token_definitions_unified.AncientCommaKeyword -> AncientCommaKeyword\n| Token_mapping.Token_definitions_unified.AfterThatKeyword -> AfterThatKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordStartKeyword -> AncientRecordStartKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordEndKeyword -> AncientRecordEndKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordEmptyKeyword -> AncientRecordEmptyKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordUpdateKeyword -> AncientRecordUpdateKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordFinishKeyword -> AncientRecordFinishKeyword\n| _ ->\nlet error_msg = \"未知的古雅体token\" in",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientWhenKeyword -> AncientWhenKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCommaKeyword -> AncientCommaKeyword",
          "| Token_mapping.Token_definitions_unified.AfterThatKeyword -> AfterThatKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordStartKeyword -> AncientRecordStartKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordEndKeyword -> AncientRecordEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordEmptyKeyword -> AncientRecordEmptyKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordUpdateKeyword -> AncientRecordUpdateKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordFinishKeyword -> AncientRecordFinishKeyword",
          "| _ ->",
          "let error_msg = \"未知的古雅体token\" in"
        ],
        "start_line": 361,
        "end_line": 370,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_core.ml"
      },
      {
        "hash": "085e66f4fc18a7459db74396dcabf46c",
        "text": "| Token_mapping.Token_definitions_unified.AncientWhenKeyword -> AncientWhenKeyword\n| Token_mapping.Token_definitions_unified.AncientCommaKeyword -> AncientCommaKeyword\n| Token_mapping.Token_definitions_unified.AfterThatKeyword -> AfterThatKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordStartKeyword -> AncientRecordStartKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordEndKeyword -> AncientRecordEndKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordEmptyKeyword -> AncientRecordEmptyKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordUpdateKeyword -> AncientRecordUpdateKeyword\n| Token_mapping.Token_definitions_unified.AncientRecordFinishKeyword -> AncientRecordFinishKeyword\n| _ ->\nlet error_msg = \"未知的古雅体token\" in",
        "lines": [
          "| Token_mapping.Token_definitions_unified.AncientWhenKeyword -> AncientWhenKeyword",
          "| Token_mapping.Token_definitions_unified.AncientCommaKeyword -> AncientCommaKeyword",
          "| Token_mapping.Token_definitions_unified.AfterThatKeyword -> AfterThatKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordStartKeyword -> AncientRecordStartKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordEndKeyword -> AncientRecordEndKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordEmptyKeyword -> AncientRecordEmptyKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordUpdateKeyword -> AncientRecordUpdateKeyword",
          "| Token_mapping.Token_definitions_unified.AncientRecordFinishKeyword -> AncientRecordFinishKeyword",
          "| _ ->",
          "let error_msg = \"未知的古雅体token\" in"
        ],
        "start_line": 90,
        "end_line": 99,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_token_conversion_classical.ml"
      }
    ],
    "79286da8413b16747bb63309d90fa3cc": [
      {
        "hash": "79286da8413b16747bb63309d90fa3cc",
        "text": "open Value_types\nopen Error_recovery\nopen Utils.Base_formatter",
        "lines": [
          "open Value_types",
          "open Error_recovery",
          "open Utils.Base_formatter"
        ],
        "start_line": 3,
        "end_line": 5,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_basic_ops.ml"
      },
      {
        "hash": "79286da8413b16747bb63309d90fa3cc",
        "text": "open Value_types\nopen Error_recovery\nopen Utils.Base_formatter",
        "lines": [
          "open Value_types",
          "open Error_recovery",
          "open Utils.Base_formatter"
        ],
        "start_line": 17,
        "end_line": 19,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_operations_env.ml"
      }
    ],
    "2a854ca64a9b82eb4f0a24f1ec70395a": [
      {
        "hash": "2a854ca64a9b82eb4f0a24f1ec70395a",
        "text": "let rec lookup_var env name =\nmatch String.split_on_char '.' name with\n| [] -> raise (RuntimeError \"空变量名\")\n| [ var ] -> (\ntry List.assoc var env\nwith Not_found ->\nif",
        "lines": [
          "let rec lookup_var env name =",
          "match String.split_on_char '.' name with",
          "| [] -> raise (RuntimeError \"空变量名\")",
          "| [ var ] -> (",
          "try List.assoc var env",
          "with Not_found ->",
          "if"
        ],
        "start_line": 8,
        "end_line": 14,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_basic_ops.ml"
      },
      {
        "hash": "2a854ca64a9b82eb4f0a24f1ec70395a",
        "text": "let rec lookup_var env name =\nmatch String.split_on_char '.' name with\n| [] -> raise (RuntimeError \"空变量名\")\n| [ var ] -> (\ntry List.assoc var env\nwith Not_found ->\nif",
        "lines": [
          "let rec lookup_var env name =",
          "match String.split_on_char '.' name with",
          "| [] -> raise (RuntimeError \"空变量名\")",
          "| [ var ] -> (",
          "try List.assoc var env",
          "with Not_found ->",
          "if"
        ],
        "start_line": 29,
        "end_line": 35,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_operations_env.ml"
      }
    ],
    "c71ff023743d008c8ab5dca84878b316": [
      {
        "hash": "c71ff023743d008c8ab5dca84878b316",
        "text": "match String.split_on_char '.' name with\n| [] -> raise (RuntimeError \"空变量名\")\n| [ var ] -> (\ntry List.assoc var env\nwith Not_found ->\nif",
        "lines": [
          "match String.split_on_char '.' name with",
          "| [] -> raise (RuntimeError \"空变量名\")",
          "| [ var ] -> (",
          "try List.assoc var env",
          "with Not_found ->",
          "if"
        ],
        "start_line": 9,
        "end_line": 14,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_basic_ops.ml"
      },
      {
        "hash": "c71ff023743d008c8ab5dca84878b316",
        "text": "match String.split_on_char '.' name with\n| [] -> raise (RuntimeError \"空变量名\")\n| [ var ] -> (\ntry List.assoc var env\nwith Not_found ->\nif",
        "lines": [
          "match String.split_on_char '.' name with",
          "| [] -> raise (RuntimeError \"空变量名\")",
          "| [ var ] -> (",
          "try List.assoc var env",
          "with Not_found ->",
          "if"
        ],
        "start_line": 30,
        "end_line": 35,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_operations_env.ml"
      }
    ],
    "fe115aeeb78779a2580923af2c21bd91": [
      {
        "hash": "fe115aeeb78779a2580923af2c21bd91",
        "text": "| [] -> raise (RuntimeError \"空变量名\")\n| [ var ] -> (\ntry List.assoc var env\nwith Not_found ->\nif",
        "lines": [
          "| [] -> raise (RuntimeError \"空变量名\")",
          "| [ var ] -> (",
          "try List.assoc var env",
          "with Not_found ->",
          "if"
        ],
        "start_line": 10,
        "end_line": 14,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_basic_ops.ml"
      },
      {
        "hash": "fe115aeeb78779a2580923af2c21bd91",
        "text": "| [] -> raise (RuntimeError \"空变量名\")\n| [ var ] -> (\ntry List.assoc var env\nwith Not_found ->\nif",
        "lines": [
          "| [] -> raise (RuntimeError \"空变量名\")",
          "| [ var ] -> (",
          "try List.assoc var env",
          "with Not_found ->",
          "if"
        ],
        "start_line": 31,
        "end_line": 35,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_operations_env.ml"
      }
    ],
    "b1c816d01e0444bd616527e25bddcd5f": [
      {
        "hash": "b1c816d01e0444bd616527e25bddcd5f",
        "text": "| [ var ] -> (\ntry List.assoc var env\nwith Not_found ->\nif",
        "lines": [
          "| [ var ] -> (",
          "try List.assoc var env",
          "with Not_found ->",
          "if"
        ],
        "start_line": 11,
        "end_line": 14,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_basic_ops.ml"
      },
      {
        "hash": "b1c816d01e0444bd616527e25bddcd5f",
        "text": "| [ var ] -> (\ntry List.assoc var env\nwith Not_found ->\nif",
        "lines": [
          "| [ var ] -> (",
          "try List.assoc var env",
          "with Not_found ->",
          "if"
        ],
        "start_line": 32,
        "end_line": 35,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_operations_env.ml"
      }
    ],
    "a58359d211d1b965f17330cc44fb5606": [
      {
        "hash": "a58359d211d1b965f17330cc44fb5606",
        "text": "try List.assoc var env\nwith Not_found ->\nif",
        "lines": [
          "try List.assoc var env",
          "with Not_found ->",
          "if"
        ],
        "start_line": 12,
        "end_line": 14,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_basic_ops.ml"
      },
      {
        "hash": "a58359d211d1b965f17330cc44fb5606",
        "text": "try List.assoc var env\nwith Not_found ->\nif",
        "lines": [
          "try List.assoc var env",
          "with Not_found ->",
          "if"
        ],
        "start_line": 33,
        "end_line": 35,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_operations_env.ml"
      }
    ],
    "077d6a397d82a2c2e5bdeee3a9067665": [
      {
        "hash": "077d6a397d82a2c2e5bdeee3a9067665",
        "text": "match List.assoc_opt member_name module_bindings with\n| Some value -> value\n| None -> raise (RuntimeError (\"模块中未找到成员: \" ^ member_name)))\n| _ ->",
        "lines": [
          "match List.assoc_opt member_name module_bindings with",
          "| Some value -> value",
          "| None -> raise (RuntimeError (\"模块中未找到成员: \" ^ member_name)))",
          "| _ ->"
        ],
        "start_line": 40,
        "end_line": 43,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_basic_ops.ml"
      },
      {
        "hash": "077d6a397d82a2c2e5bdeee3a9067665",
        "text": "match List.assoc_opt member_name module_bindings with\n| Some value -> value\n| None -> raise (RuntimeError (\"模块中未找到成员: \" ^ member_name)))\n| _ ->",
        "lines": [
          "match List.assoc_opt member_name module_bindings with",
          "| Some value -> value",
          "| None -> raise (RuntimeError (\"模块中未找到成员: \" ^ member_name)))",
          "| _ ->"
        ],
        "start_line": 61,
        "end_line": 64,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_operations_env.ml"
      }
    ],
    "51d0519e6408f8036579070b39709a54": [
      {
        "hash": "51d0519e6408f8036579070b39709a54",
        "text": "| Some value -> value\n| None -> raise (RuntimeError (\"模块中未找到成员: \" ^ member_name)))\n| _ ->",
        "lines": [
          "| Some value -> value",
          "| None -> raise (RuntimeError (\"模块中未找到成员: \" ^ member_name)))",
          "| _ ->"
        ],
        "start_line": 41,
        "end_line": 43,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_basic_ops.ml"
      },
      {
        "hash": "51d0519e6408f8036579070b39709a54",
        "text": "| Some value -> value\n| None -> raise (RuntimeError (\"模块中未找到成员: \" ^ member_name)))\n| _ ->",
        "lines": [
          "| Some value -> value",
          "| None -> raise (RuntimeError (\"模块中未找到成员: \" ^ member_name)))",
          "| _ ->"
        ],
        "start_line": 62,
        "end_line": 64,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_operations_env.ml"
      }
    ],
    "ea5a6dce88cafeb2a6eb2d4bc40369a5": [
      {
        "hash": "ea5a6dce88cafeb2a6eb2d4bc40369a5",
        "text": "lookup_var module_bindings (String.concat \".\" member_path))\n| Some _ -> raise (RuntimeError (mod_name ^ \" 不是模块类型\"))\n| None -> raise (RuntimeError (\"未定义的模块: \" ^ mod_name)))",
        "lines": [
          "lookup_var module_bindings (String.concat \".\" member_path))",
          "| Some _ -> raise (RuntimeError (mod_name ^ \" 不是模块类型\"))",
          "| None -> raise (RuntimeError (\"未定义的模块: \" ^ mod_name)))"
        ],
        "start_line": 45,
        "end_line": 47,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_basic_ops.ml"
      },
      {
        "hash": "ea5a6dce88cafeb2a6eb2d4bc40369a5",
        "text": "lookup_var module_bindings (String.concat \".\" member_path))\n| Some _ -> raise (RuntimeError (mod_name ^ \" 不是模块类型\"))\n| None -> raise (RuntimeError (\"未定义的模块: \" ^ mod_name)))",
        "lines": [
          "lookup_var module_bindings (String.concat \".\" member_path))",
          "| Some _ -> raise (RuntimeError (mod_name ^ \" 不是模块类型\"))",
          "| None -> raise (RuntimeError (\"未定义的模块: \" ^ mod_name)))"
        ],
        "start_line": 66,
        "end_line": 68,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_operations_env.ml"
      }
    ],
    "386cb34bc03b653b05b9e50b81367e18": [
      {
        "hash": "386cb34bc03b653b05b9e50b81367e18",
        "text": "let basic_value_to_string value =\nmatch value with\n| IntValue n -> string_of_int n\n| FloatValue f -> string_of_float f\n| StringValue s -> s\n| BoolValue b -> if b then \"真\" else \"假\"\n| UnitValue -> \"()\"\n| _ -> \"basic_value_to_string: 不是基础类型\"",
        "lines": [
          "let basic_value_to_string value =",
          "match value with",
          "| IntValue n -> string_of_int n",
          "| FloatValue f -> string_of_float f",
          "| StringValue s -> s",
          "| BoolValue b -> if b then \"真\" else \"假\"",
          "| UnitValue -> \"()\"",
          "| _ -> \"basic_value_to_string: 不是基础类型\""
        ],
        "start_line": 54,
        "end_line": 61,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_basic_ops.ml"
      },
      {
        "hash": "386cb34bc03b653b05b9e50b81367e18",
        "text": "let basic_value_to_string value =\nmatch value with\n| IntValue n -> string_of_int n\n| FloatValue f -> string_of_float f\n| StringValue s -> s\n| BoolValue b -> if b then \"真\" else \"假\"\n| UnitValue -> \"()\"\n| _ -> \"basic_value_to_string: 不是基础类型\"",
        "lines": [
          "let basic_value_to_string value =",
          "match value with",
          "| IntValue n -> string_of_int n",
          "| FloatValue f -> string_of_float f",
          "| StringValue s -> s",
          "| BoolValue b -> if b then \"真\" else \"假\"",
          "| UnitValue -> \"()\"",
          "| _ -> \"basic_value_to_string: 不是基础类型\""
        ],
        "start_line": 26,
        "end_line": 33,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_operations_conversion.ml"
      }
    ],
    "7d1d6055fba4562a58cd287cc8e09341": [
      {
        "hash": "7d1d6055fba4562a58cd287cc8e09341",
        "text": "match value with\n| IntValue n -> string_of_int n\n| FloatValue f -> string_of_float f\n| StringValue s -> s\n| BoolValue b -> if b then \"真\" else \"假\"\n| UnitValue -> \"()\"\n| _ -> \"basic_value_to_string: 不是基础类型\"",
        "lines": [
          "match value with",
          "| IntValue n -> string_of_int n",
          "| FloatValue f -> string_of_float f",
          "| StringValue s -> s",
          "| BoolValue b -> if b then \"真\" else \"假\"",
          "| UnitValue -> \"()\"",
          "| _ -> \"basic_value_to_string: 不是基础类型\""
        ],
        "start_line": 55,
        "end_line": 61,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_basic_ops.ml"
      },
      {
        "hash": "7d1d6055fba4562a58cd287cc8e09341",
        "text": "match value with\n| IntValue n -> string_of_int n\n| FloatValue f -> string_of_float f\n| StringValue s -> s\n| BoolValue b -> if b then \"真\" else \"假\"\n| UnitValue -> \"()\"\n| _ -> \"basic_value_to_string: 不是基础类型\"",
        "lines": [
          "match value with",
          "| IntValue n -> string_of_int n",
          "| FloatValue f -> string_of_float f",
          "| StringValue s -> s",
          "| BoolValue b -> if b then \"真\" else \"假\"",
          "| UnitValue -> \"()\"",
          "| _ -> \"basic_value_to_string: 不是基础类型\""
        ],
        "start_line": 27,
        "end_line": 33,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_operations_conversion.ml"
      }
    ],
    "7230338c0d29c14da60a7c6252d286bb": [
      {
        "hash": "7230338c0d29c14da60a7c6252d286bb",
        "text": "| IntValue n -> string_of_int n\n| FloatValue f -> string_of_float f\n| StringValue s -> s\n| BoolValue b -> if b then \"真\" else \"假\"\n| UnitValue -> \"()\"\n| _ -> \"basic_value_to_string: 不是基础类型\"",
        "lines": [
          "| IntValue n -> string_of_int n",
          "| FloatValue f -> string_of_float f",
          "| StringValue s -> s",
          "| BoolValue b -> if b then \"真\" else \"假\"",
          "| UnitValue -> \"()\"",
          "| _ -> \"basic_value_to_string: 不是基础类型\""
        ],
        "start_line": 56,
        "end_line": 61,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_basic_ops.ml"
      },
      {
        "hash": "7230338c0d29c14da60a7c6252d286bb",
        "text": "| IntValue n -> string_of_int n\n| FloatValue f -> string_of_float f\n| StringValue s -> s\n| BoolValue b -> if b then \"真\" else \"假\"\n| UnitValue -> \"()\"\n| _ -> \"basic_value_to_string: 不是基础类型\"",
        "lines": [
          "| IntValue n -> string_of_int n",
          "| FloatValue f -> string_of_float f",
          "| StringValue s -> s",
          "| BoolValue b -> if b then \"真\" else \"假\"",
          "| UnitValue -> \"()\"",
          "| _ -> \"basic_value_to_string: 不是基础类型\""
        ],
        "start_line": 28,
        "end_line": 33,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_operations_conversion.ml"
      }
    ],
    "2984a766c3f033410feea63299d72e81": [
      {
        "hash": "2984a766c3f033410feea63299d72e81",
        "text": "| FloatValue f -> string_of_float f\n| StringValue s -> s\n| BoolValue b -> if b then \"真\" else \"假\"\n| UnitValue -> \"()\"\n| _ -> \"basic_value_to_string: 不是基础类型\"",
        "lines": [
          "| FloatValue f -> string_of_float f",
          "| StringValue s -> s",
          "| BoolValue b -> if b then \"真\" else \"假\"",
          "| UnitValue -> \"()\"",
          "| _ -> \"basic_value_to_string: 不是基础类型\""
        ],
        "start_line": 57,
        "end_line": 61,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_basic_ops.ml"
      },
      {
        "hash": "2984a766c3f033410feea63299d72e81",
        "text": "| FloatValue f -> string_of_float f\n| StringValue s -> s\n| BoolValue b -> if b then \"真\" else \"假\"\n| UnitValue -> \"()\"\n| _ -> \"basic_value_to_string: 不是基础类型\"",
        "lines": [
          "| FloatValue f -> string_of_float f",
          "| StringValue s -> s",
          "| BoolValue b -> if b then \"真\" else \"假\"",
          "| UnitValue -> \"()\"",
          "| _ -> \"basic_value_to_string: 不是基础类型\""
        ],
        "start_line": 29,
        "end_line": 33,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_operations_conversion.ml"
      }
    ],
    "8321a8cf9b404ea423a1a8e9e2a31675": [
      {
        "hash": "8321a8cf9b404ea423a1a8e9e2a31675",
        "text": "| StringValue s -> s\n| BoolValue b -> if b then \"真\" else \"假\"\n| UnitValue -> \"()\"\n| _ -> \"basic_value_to_string: 不是基础类型\"",
        "lines": [
          "| StringValue s -> s",
          "| BoolValue b -> if b then \"真\" else \"假\"",
          "| UnitValue -> \"()\"",
          "| _ -> \"basic_value_to_string: 不是基础类型\""
        ],
        "start_line": 58,
        "end_line": 61,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_basic_ops.ml"
      },
      {
        "hash": "8321a8cf9b404ea423a1a8e9e2a31675",
        "text": "| StringValue s -> s\n| BoolValue b -> if b then \"真\" else \"假\"\n| UnitValue -> \"()\"\n| _ -> \"basic_value_to_string: 不是基础类型\"",
        "lines": [
          "| StringValue s -> s",
          "| BoolValue b -> if b then \"真\" else \"假\"",
          "| UnitValue -> \"()\"",
          "| _ -> \"basic_value_to_string: 不是基础类型\""
        ],
        "start_line": 30,
        "end_line": 33,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_operations_conversion.ml"
      }
    ],
    "1fe1ee7fffb3ccbc1968a81de107fc17": [
      {
        "hash": "1fe1ee7fffb3ccbc1968a81de107fc17",
        "text": "| BoolValue b -> if b then \"真\" else \"假\"\n| UnitValue -> \"()\"\n| _ -> \"basic_value_to_string: 不是基础类型\"",
        "lines": [
          "| BoolValue b -> if b then \"真\" else \"假\"",
          "| UnitValue -> \"()\"",
          "| _ -> \"basic_value_to_string: 不是基础类型\""
        ],
        "start_line": 59,
        "end_line": 61,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_basic_ops.ml"
      },
      {
        "hash": "1fe1ee7fffb3ccbc1968a81de107fc17",
        "text": "| BoolValue b -> if b then \"真\" else \"假\"\n| UnitValue -> \"()\"\n| _ -> \"basic_value_to_string: 不是基础类型\"",
        "lines": [
          "| BoolValue b -> if b then \"真\" else \"假\"",
          "| UnitValue -> \"()\"",
          "| _ -> \"basic_value_to_string: 不是基础类型\""
        ],
        "start_line": 31,
        "end_line": 33,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_operations_conversion.ml"
      }
    ],
    "5f8f3a642708dd3c6bf878cfd0928227": [
      {
        "hash": "5f8f3a642708dd3c6bf878cfd0928227",
        "text": "let value_to_bool value =\nmatch value with\n| BoolValue b -> b\n| IntValue 0 -> false\n| IntValue _ -> true\n| StringValue \"\" -> false\n| StringValue _ -> true\n| UnitValue -> false\n| _ -> true",
        "lines": [
          "let value_to_bool value =",
          "match value with",
          "| BoolValue b -> b",
          "| IntValue 0 -> false",
          "| IntValue _ -> true",
          "| StringValue \"\" -> false",
          "| StringValue _ -> true",
          "| UnitValue -> false",
          "| _ -> true"
        ],
        "start_line": 64,
        "end_line": 72,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_basic_ops.ml"
      },
      {
        "hash": "5f8f3a642708dd3c6bf878cfd0928227",
        "text": "let value_to_bool value =\nmatch value with\n| BoolValue b -> b\n| IntValue 0 -> false\n| IntValue _ -> true\n| StringValue \"\" -> false\n| StringValue _ -> true\n| UnitValue -> false\n| _ -> true",
        "lines": [
          "let value_to_bool value =",
          "match value with",
          "| BoolValue b -> b",
          "| IntValue 0 -> false",
          "| IntValue _ -> true",
          "| StringValue \"\" -> false",
          "| StringValue _ -> true",
          "| UnitValue -> false",
          "| _ -> true"
        ],
        "start_line": 120,
        "end_line": 128,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_operations_conversion.ml"
      }
    ],
    "68b6987b15a747744fd867fb60eb52f5": [
      {
        "hash": "68b6987b15a747744fd867fb60eb52f5",
        "text": "match value with\n| BoolValue b -> b\n| IntValue 0 -> false\n| IntValue _ -> true\n| StringValue \"\" -> false\n| StringValue _ -> true\n| UnitValue -> false\n| _ -> true",
        "lines": [
          "match value with",
          "| BoolValue b -> b",
          "| IntValue 0 -> false",
          "| IntValue _ -> true",
          "| StringValue \"\" -> false",
          "| StringValue _ -> true",
          "| UnitValue -> false",
          "| _ -> true"
        ],
        "start_line": 65,
        "end_line": 72,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_basic_ops.ml"
      },
      {
        "hash": "68b6987b15a747744fd867fb60eb52f5",
        "text": "match value with\n| BoolValue b -> b\n| IntValue 0 -> false\n| IntValue _ -> true\n| StringValue \"\" -> false\n| StringValue _ -> true\n| UnitValue -> false\n| _ -> true",
        "lines": [
          "match value with",
          "| BoolValue b -> b",
          "| IntValue 0 -> false",
          "| IntValue _ -> true",
          "| StringValue \"\" -> false",
          "| StringValue _ -> true",
          "| UnitValue -> false",
          "| _ -> true"
        ],
        "start_line": 121,
        "end_line": 128,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_operations_conversion.ml"
      }
    ],
    "69cc30475d419c28f9c4a53789af3bf5": [
      {
        "hash": "69cc30475d419c28f9c4a53789af3bf5",
        "text": "| BoolValue b -> b\n| IntValue 0 -> false\n| IntValue _ -> true\n| StringValue \"\" -> false\n| StringValue _ -> true\n| UnitValue -> false\n| _ -> true",
        "lines": [
          "| BoolValue b -> b",
          "| IntValue 0 -> false",
          "| IntValue _ -> true",
          "| StringValue \"\" -> false",
          "| StringValue _ -> true",
          "| UnitValue -> false",
          "| _ -> true"
        ],
        "start_line": 66,
        "end_line": 72,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_basic_ops.ml"
      },
      {
        "hash": "69cc30475d419c28f9c4a53789af3bf5",
        "text": "| BoolValue b -> b\n| IntValue 0 -> false\n| IntValue _ -> true\n| StringValue \"\" -> false\n| StringValue _ -> true\n| UnitValue -> false\n| _ -> true",
        "lines": [
          "| BoolValue b -> b",
          "| IntValue 0 -> false",
          "| IntValue _ -> true",
          "| StringValue \"\" -> false",
          "| StringValue _ -> true",
          "| UnitValue -> false",
          "| _ -> true"
        ],
        "start_line": 122,
        "end_line": 128,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_operations_conversion.ml"
      }
    ],
    "3a216b163fa2ed6bdd3d7baa67639ae7": [
      {
        "hash": "3a216b163fa2ed6bdd3d7baa67639ae7",
        "text": "| IntValue 0 -> false\n| IntValue _ -> true\n| StringValue \"\" -> false\n| StringValue _ -> true\n| UnitValue -> false\n| _ -> true",
        "lines": [
          "| IntValue 0 -> false",
          "| IntValue _ -> true",
          "| StringValue \"\" -> false",
          "| StringValue _ -> true",
          "| UnitValue -> false",
          "| _ -> true"
        ],
        "start_line": 67,
        "end_line": 72,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_basic_ops.ml"
      },
      {
        "hash": "3a216b163fa2ed6bdd3d7baa67639ae7",
        "text": "| IntValue 0 -> false\n| IntValue _ -> true\n| StringValue \"\" -> false\n| StringValue _ -> true\n| UnitValue -> false\n| _ -> true",
        "lines": [
          "| IntValue 0 -> false",
          "| IntValue _ -> true",
          "| StringValue \"\" -> false",
          "| StringValue _ -> true",
          "| UnitValue -> false",
          "| _ -> true"
        ],
        "start_line": 123,
        "end_line": 128,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_operations_conversion.ml"
      }
    ],
    "dc77d3849c2e84904daf46cbd8907f87": [
      {
        "hash": "dc77d3849c2e84904daf46cbd8907f87",
        "text": "| IntValue _ -> true\n| StringValue \"\" -> false\n| StringValue _ -> true\n| UnitValue -> false\n| _ -> true",
        "lines": [
          "| IntValue _ -> true",
          "| StringValue \"\" -> false",
          "| StringValue _ -> true",
          "| UnitValue -> false",
          "| _ -> true"
        ],
        "start_line": 68,
        "end_line": 72,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_basic_ops.ml"
      },
      {
        "hash": "dc77d3849c2e84904daf46cbd8907f87",
        "text": "| IntValue _ -> true\n| StringValue \"\" -> false\n| StringValue _ -> true\n| UnitValue -> false\n| _ -> true",
        "lines": [
          "| IntValue _ -> true",
          "| StringValue \"\" -> false",
          "| StringValue _ -> true",
          "| UnitValue -> false",
          "| _ -> true"
        ],
        "start_line": 124,
        "end_line": 128,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_operations_conversion.ml"
      }
    ],
    "fad715f224e45162a1440b04f37bae0d": [
      {
        "hash": "fad715f224e45162a1440b04f37bae0d",
        "text": "| StringValue \"\" -> false\n| StringValue _ -> true\n| UnitValue -> false\n| _ -> true",
        "lines": [
          "| StringValue \"\" -> false",
          "| StringValue _ -> true",
          "| UnitValue -> false",
          "| _ -> true"
        ],
        "start_line": 69,
        "end_line": 72,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_basic_ops.ml"
      },
      {
        "hash": "fad715f224e45162a1440b04f37bae0d",
        "text": "| StringValue \"\" -> false\n| StringValue _ -> true\n| UnitValue -> false\n| _ -> true",
        "lines": [
          "| StringValue \"\" -> false",
          "| StringValue _ -> true",
          "| UnitValue -> false",
          "| _ -> true"
        ],
        "start_line": 125,
        "end_line": 128,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_operations_conversion.ml"
      }
    ],
    "d05f480918f544ae0c6fc662882513b0": [
      {
        "hash": "d05f480918f544ae0c6fc662882513b0",
        "text": "| StringValue _ -> true\n| UnitValue -> false\n| _ -> true",
        "lines": [
          "| StringValue _ -> true",
          "| UnitValue -> false",
          "| _ -> true"
        ],
        "start_line": 70,
        "end_line": 72,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_basic_ops.ml"
      },
      {
        "hash": "d05f480918f544ae0c6fc662882513b0",
        "text": "| StringValue _ -> true\n| UnitValue -> false\n| _ -> true",
        "lines": [
          "| StringValue _ -> true",
          "| UnitValue -> false",
          "| _ -> true"
        ],
        "start_line": 126,
        "end_line": 128,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_operations_conversion.ml"
      }
    ],
    "a97d87e457081e7db924f88c1d6005b6": [
      {
        "hash": "a97d87e457081e7db924f88c1d6005b6",
        "text": "let try_to_int value =\nmatch value with\n| IntValue n -> Some n\n| FloatValue f ->\nlet int_val = int_of_float f in\nlog_recovery_type \"type_conversion\" (float_to_int_conversion_pattern f int_val);\nSome int_val\n| StringValue s -> (\ntry\nlet n = int_of_string s in",
        "lines": [
          "let try_to_int value =",
          "match value with",
          "| IntValue n -> Some n",
          "| FloatValue f ->",
          "let int_val = int_of_float f in",
          "log_recovery_type \"type_conversion\" (float_to_int_conversion_pattern f int_val);",
          "Some int_val",
          "| StringValue s -> (",
          "try",
          "let n = int_of_string s in"
        ],
        "start_line": 75,
        "end_line": 84,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_basic_ops.ml"
      },
      {
        "hash": "a97d87e457081e7db924f88c1d6005b6",
        "text": "let try_to_int value =\nmatch value with\n| IntValue n -> Some n\n| FloatValue f ->\nlet int_val = int_of_float f in\nlog_recovery_type \"type_conversion\" (float_to_int_conversion_pattern f int_val);\nSome int_val\n| StringValue s -> (\ntry\nlet n = int_of_string s in",
        "lines": [
          "let try_to_int value =",
          "match value with",
          "| IntValue n -> Some n",
          "| FloatValue f ->",
          "let int_val = int_of_float f in",
          "log_recovery_type \"type_conversion\" (float_to_int_conversion_pattern f int_val);",
          "Some int_val",
          "| StringValue s -> (",
          "try",
          "let n = int_of_string s in"
        ],
        "start_line": 131,
        "end_line": 140,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_operations_conversion.ml"
      }
    ],
    "44c735577ec66484c30a2265e37d43e1": [
      {
        "hash": "44c735577ec66484c30a2265e37d43e1",
        "text": "match value with\n| IntValue n -> Some n\n| FloatValue f ->\nlet int_val = int_of_float f in\nlog_recovery_type \"type_conversion\" (float_to_int_conversion_pattern f int_val);\nSome int_val\n| StringValue s -> (\ntry\nlet n = int_of_string s in\nlog_recovery_type \"type_conversion\" (string_to_int_conversion_pattern s n);",
        "lines": [
          "match value with",
          "| IntValue n -> Some n",
          "| FloatValue f ->",
          "let int_val = int_of_float f in",
          "log_recovery_type \"type_conversion\" (float_to_int_conversion_pattern f int_val);",
          "Some int_val",
          "| StringValue s -> (",
          "try",
          "let n = int_of_string s in",
          "log_recovery_type \"type_conversion\" (string_to_int_conversion_pattern s n);"
        ],
        "start_line": 76,
        "end_line": 85,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_basic_ops.ml"
      },
      {
        "hash": "44c735577ec66484c30a2265e37d43e1",
        "text": "match value with\n| IntValue n -> Some n\n| FloatValue f ->\nlet int_val = int_of_float f in\nlog_recovery_type \"type_conversion\" (float_to_int_conversion_pattern f int_val);\nSome int_val\n| StringValue s -> (\ntry\nlet n = int_of_string s in\nlog_recovery_type \"type_conversion\" (string_to_int_conversion_pattern s n);",
        "lines": [
          "match value with",
          "| IntValue n -> Some n",
          "| FloatValue f ->",
          "let int_val = int_of_float f in",
          "log_recovery_type \"type_conversion\" (float_to_int_conversion_pattern f int_val);",
          "Some int_val",
          "| StringValue s -> (",
          "try",
          "let n = int_of_string s in",
          "log_recovery_type \"type_conversion\" (string_to_int_conversion_pattern s n);"
        ],
        "start_line": 132,
        "end_line": 141,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_operations_conversion.ml"
      }
    ],
    "67cee10e7771eefdca5fb3265237259a": [
      {
        "hash": "67cee10e7771eefdca5fb3265237259a",
        "text": "| IntValue n -> Some n\n| FloatValue f ->\nlet int_val = int_of_float f in\nlog_recovery_type \"type_conversion\" (float_to_int_conversion_pattern f int_val);\nSome int_val\n| StringValue s -> (\ntry\nlet n = int_of_string s in\nlog_recovery_type \"type_conversion\" (string_to_int_conversion_pattern s n);\nSome n",
        "lines": [
          "| IntValue n -> Some n",
          "| FloatValue f ->",
          "let int_val = int_of_float f in",
          "log_recovery_type \"type_conversion\" (float_to_int_conversion_pattern f int_val);",
          "Some int_val",
          "| StringValue s -> (",
          "try",
          "let n = int_of_string s in",
          "log_recovery_type \"type_conversion\" (string_to_int_conversion_pattern s n);",
          "Some n"
        ],
        "start_line": 77,
        "end_line": 86,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_basic_ops.ml"
      },
      {
        "hash": "67cee10e7771eefdca5fb3265237259a",
        "text": "| IntValue n -> Some n\n| FloatValue f ->\nlet int_val = int_of_float f in\nlog_recovery_type \"type_conversion\" (float_to_int_conversion_pattern f int_val);\nSome int_val\n| StringValue s -> (\ntry\nlet n = int_of_string s in\nlog_recovery_type \"type_conversion\" (string_to_int_conversion_pattern s n);\nSome n",
        "lines": [
          "| IntValue n -> Some n",
          "| FloatValue f ->",
          "let int_val = int_of_float f in",
          "log_recovery_type \"type_conversion\" (float_to_int_conversion_pattern f int_val);",
          "Some int_val",
          "| StringValue s -> (",
          "try",
          "let n = int_of_string s in",
          "log_recovery_type \"type_conversion\" (string_to_int_conversion_pattern s n);",
          "Some n"
        ],
        "start_line": 133,
        "end_line": 142,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_operations_conversion.ml"
      }
    ],
    "29238e003411e6b3ab5cd220ec15f566": [
      {
        "hash": "29238e003411e6b3ab5cd220ec15f566",
        "text": "| FloatValue f ->\nlet int_val = int_of_float f in\nlog_recovery_type \"type_conversion\" (float_to_int_conversion_pattern f int_val);\nSome int_val\n| StringValue s -> (\ntry\nlet n = int_of_string s in\nlog_recovery_type \"type_conversion\" (string_to_int_conversion_pattern s n);\nSome n\nwith _ -> None)",
        "lines": [
          "| FloatValue f ->",
          "let int_val = int_of_float f in",
          "log_recovery_type \"type_conversion\" (float_to_int_conversion_pattern f int_val);",
          "Some int_val",
          "| StringValue s -> (",
          "try",
          "let n = int_of_string s in",
          "log_recovery_type \"type_conversion\" (string_to_int_conversion_pattern s n);",
          "Some n",
          "with _ -> None)"
        ],
        "start_line": 78,
        "end_line": 87,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_basic_ops.ml"
      },
      {
        "hash": "29238e003411e6b3ab5cd220ec15f566",
        "text": "| FloatValue f ->\nlet int_val = int_of_float f in\nlog_recovery_type \"type_conversion\" (float_to_int_conversion_pattern f int_val);\nSome int_val\n| StringValue s -> (\ntry\nlet n = int_of_string s in\nlog_recovery_type \"type_conversion\" (string_to_int_conversion_pattern s n);\nSome n\nwith _ -> None)",
        "lines": [
          "| FloatValue f ->",
          "let int_val = int_of_float f in",
          "log_recovery_type \"type_conversion\" (float_to_int_conversion_pattern f int_val);",
          "Some int_val",
          "| StringValue s -> (",
          "try",
          "let n = int_of_string s in",
          "log_recovery_type \"type_conversion\" (string_to_int_conversion_pattern s n);",
          "Some n",
          "with _ -> None)"
        ],
        "start_line": 134,
        "end_line": 143,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_operations_conversion.ml"
      }
    ],
    "7c194ff3202ba59c0c784b8488acadb6": [
      {
        "hash": "7c194ff3202ba59c0c784b8488acadb6",
        "text": "let int_val = int_of_float f in\nlog_recovery_type \"type_conversion\" (float_to_int_conversion_pattern f int_val);\nSome int_val\n| StringValue s -> (\ntry\nlet n = int_of_string s in\nlog_recovery_type \"type_conversion\" (string_to_int_conversion_pattern s n);\nSome n\nwith _ -> None)\n| BoolValue b ->",
        "lines": [
          "let int_val = int_of_float f in",
          "log_recovery_type \"type_conversion\" (float_to_int_conversion_pattern f int_val);",
          "Some int_val",
          "| StringValue s -> (",
          "try",
          "let n = int_of_string s in",
          "log_recovery_type \"type_conversion\" (string_to_int_conversion_pattern s n);",
          "Some n",
          "with _ -> None)",
          "| BoolValue b ->"
        ],
        "start_line": 79,
        "end_line": 88,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_basic_ops.ml"
      },
      {
        "hash": "7c194ff3202ba59c0c784b8488acadb6",
        "text": "let int_val = int_of_float f in\nlog_recovery_type \"type_conversion\" (float_to_int_conversion_pattern f int_val);\nSome int_val\n| StringValue s -> (\ntry\nlet n = int_of_string s in\nlog_recovery_type \"type_conversion\" (string_to_int_conversion_pattern s n);\nSome n\nwith _ -> None)\n| BoolValue b ->",
        "lines": [
          "let int_val = int_of_float f in",
          "log_recovery_type \"type_conversion\" (float_to_int_conversion_pattern f int_val);",
          "Some int_val",
          "| StringValue s -> (",
          "try",
          "let n = int_of_string s in",
          "log_recovery_type \"type_conversion\" (string_to_int_conversion_pattern s n);",
          "Some n",
          "with _ -> None)",
          "| BoolValue b ->"
        ],
        "start_line": 135,
        "end_line": 144,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_operations_conversion.ml"
      }
    ],
    "88ffa4159f1da30e54f012708c46b125": [
      {
        "hash": "88ffa4159f1da30e54f012708c46b125",
        "text": "log_recovery_type \"type_conversion\" (float_to_int_conversion_pattern f int_val);\nSome int_val\n| StringValue s -> (\ntry\nlet n = int_of_string s in\nlog_recovery_type \"type_conversion\" (string_to_int_conversion_pattern s n);\nSome n\nwith _ -> None)\n| BoolValue b ->\nlet n = if b then 1 else 0 in",
        "lines": [
          "log_recovery_type \"type_conversion\" (float_to_int_conversion_pattern f int_val);",
          "Some int_val",
          "| StringValue s -> (",
          "try",
          "let n = int_of_string s in",
          "log_recovery_type \"type_conversion\" (string_to_int_conversion_pattern s n);",
          "Some n",
          "with _ -> None)",
          "| BoolValue b ->",
          "let n = if b then 1 else 0 in"
        ],
        "start_line": 80,
        "end_line": 89,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_basic_ops.ml"
      },
      {
        "hash": "88ffa4159f1da30e54f012708c46b125",
        "text": "log_recovery_type \"type_conversion\" (float_to_int_conversion_pattern f int_val);\nSome int_val\n| StringValue s -> (\ntry\nlet n = int_of_string s in\nlog_recovery_type \"type_conversion\" (string_to_int_conversion_pattern s n);\nSome n\nwith _ -> None)\n| BoolValue b ->\nlet n = if b then 1 else 0 in",
        "lines": [
          "log_recovery_type \"type_conversion\" (float_to_int_conversion_pattern f int_val);",
          "Some int_val",
          "| StringValue s -> (",
          "try",
          "let n = int_of_string s in",
          "log_recovery_type \"type_conversion\" (string_to_int_conversion_pattern s n);",
          "Some n",
          "with _ -> None)",
          "| BoolValue b ->",
          "let n = if b then 1 else 0 in"
        ],
        "start_line": 136,
        "end_line": 145,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_operations_conversion.ml"
      }
    ],
    "319a3a8eeadd9c30ed4e312ca80b963d": [
      {
        "hash": "319a3a8eeadd9c30ed4e312ca80b963d",
        "text": "Some int_val\n| StringValue s -> (\ntry\nlet n = int_of_string s in\nlog_recovery_type \"type_conversion\" (string_to_int_conversion_pattern s n);\nSome n\nwith _ -> None)\n| BoolValue b ->\nlet n = if b then 1 else 0 in\nlog_recovery_type \"type_conversion\" (bool_to_int_conversion_pattern b n);",
        "lines": [
          "Some int_val",
          "| StringValue s -> (",
          "try",
          "let n = int_of_string s in",
          "log_recovery_type \"type_conversion\" (string_to_int_conversion_pattern s n);",
          "Some n",
          "with _ -> None)",
          "| BoolValue b ->",
          "let n = if b then 1 else 0 in",
          "log_recovery_type \"type_conversion\" (bool_to_int_conversion_pattern b n);"
        ],
        "start_line": 81,
        "end_line": 90,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_basic_ops.ml"
      },
      {
        "hash": "319a3a8eeadd9c30ed4e312ca80b963d",
        "text": "Some int_val\n| StringValue s -> (\ntry\nlet n = int_of_string s in\nlog_recovery_type \"type_conversion\" (string_to_int_conversion_pattern s n);\nSome n\nwith _ -> None)\n| BoolValue b ->\nlet n = if b then 1 else 0 in\nlog_recovery_type \"type_conversion\" (bool_to_int_conversion_pattern b n);",
        "lines": [
          "Some int_val",
          "| StringValue s -> (",
          "try",
          "let n = int_of_string s in",
          "log_recovery_type \"type_conversion\" (string_to_int_conversion_pattern s n);",
          "Some n",
          "with _ -> None)",
          "| BoolValue b ->",
          "let n = if b then 1 else 0 in",
          "log_recovery_type \"type_conversion\" (bool_to_int_conversion_pattern b n);"
        ],
        "start_line": 137,
        "end_line": 146,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_operations_conversion.ml"
      }
    ],
    "f0832bede9b5525b5e0abd264a244101": [
      {
        "hash": "f0832bede9b5525b5e0abd264a244101",
        "text": "| StringValue s -> (\ntry\nlet n = int_of_string s in\nlog_recovery_type \"type_conversion\" (string_to_int_conversion_pattern s n);\nSome n\nwith _ -> None)\n| BoolValue b ->\nlet n = if b then 1 else 0 in\nlog_recovery_type \"type_conversion\" (bool_to_int_conversion_pattern b n);\nSome n",
        "lines": [
          "| StringValue s -> (",
          "try",
          "let n = int_of_string s in",
          "log_recovery_type \"type_conversion\" (string_to_int_conversion_pattern s n);",
          "Some n",
          "with _ -> None)",
          "| BoolValue b ->",
          "let n = if b then 1 else 0 in",
          "log_recovery_type \"type_conversion\" (bool_to_int_conversion_pattern b n);",
          "Some n"
        ],
        "start_line": 82,
        "end_line": 91,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_basic_ops.ml"
      },
      {
        "hash": "f0832bede9b5525b5e0abd264a244101",
        "text": "| StringValue s -> (\ntry\nlet n = int_of_string s in\nlog_recovery_type \"type_conversion\" (string_to_int_conversion_pattern s n);\nSome n\nwith _ -> None)\n| BoolValue b ->\nlet n = if b then 1 else 0 in\nlog_recovery_type \"type_conversion\" (bool_to_int_conversion_pattern b n);\nSome n",
        "lines": [
          "| StringValue s -> (",
          "try",
          "let n = int_of_string s in",
          "log_recovery_type \"type_conversion\" (string_to_int_conversion_pattern s n);",
          "Some n",
          "with _ -> None)",
          "| BoolValue b ->",
          "let n = if b then 1 else 0 in",
          "log_recovery_type \"type_conversion\" (bool_to_int_conversion_pattern b n);",
          "Some n"
        ],
        "start_line": 138,
        "end_line": 147,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_operations_conversion.ml"
      }
    ],
    "d57949b326f42ab60bdc41f54bef3be5": [
      {
        "hash": "d57949b326f42ab60bdc41f54bef3be5",
        "text": "try\nlet n = int_of_string s in\nlog_recovery_type \"type_conversion\" (string_to_int_conversion_pattern s n);\nSome n\nwith _ -> None)\n| BoolValue b ->\nlet n = if b then 1 else 0 in\nlog_recovery_type \"type_conversion\" (bool_to_int_conversion_pattern b n);\nSome n\n| _ -> None",
        "lines": [
          "try",
          "let n = int_of_string s in",
          "log_recovery_type \"type_conversion\" (string_to_int_conversion_pattern s n);",
          "Some n",
          "with _ -> None)",
          "| BoolValue b ->",
          "let n = if b then 1 else 0 in",
          "log_recovery_type \"type_conversion\" (bool_to_int_conversion_pattern b n);",
          "Some n",
          "| _ -> None"
        ],
        "start_line": 83,
        "end_line": 92,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_basic_ops.ml"
      },
      {
        "hash": "d57949b326f42ab60bdc41f54bef3be5",
        "text": "try\nlet n = int_of_string s in\nlog_recovery_type \"type_conversion\" (string_to_int_conversion_pattern s n);\nSome n\nwith _ -> None)\n| BoolValue b ->\nlet n = if b then 1 else 0 in\nlog_recovery_type \"type_conversion\" (bool_to_int_conversion_pattern b n);\nSome n\n| _ -> None",
        "lines": [
          "try",
          "let n = int_of_string s in",
          "log_recovery_type \"type_conversion\" (string_to_int_conversion_pattern s n);",
          "Some n",
          "with _ -> None)",
          "| BoolValue b ->",
          "let n = if b then 1 else 0 in",
          "log_recovery_type \"type_conversion\" (bool_to_int_conversion_pattern b n);",
          "Some n",
          "| _ -> None"
        ],
        "start_line": 139,
        "end_line": 148,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_operations_conversion.ml"
      }
    ],
    "d51dfd22a7657260be566595628164a7": [
      {
        "hash": "d51dfd22a7657260be566595628164a7",
        "text": "let n = int_of_string s in\nlog_recovery_type \"type_conversion\" (string_to_int_conversion_pattern s n);\nSome n\nwith _ -> None)\n| BoolValue b ->\nlet n = if b then 1 else 0 in\nlog_recovery_type \"type_conversion\" (bool_to_int_conversion_pattern b n);\nSome n\n| _ -> None",
        "lines": [
          "let n = int_of_string s in",
          "log_recovery_type \"type_conversion\" (string_to_int_conversion_pattern s n);",
          "Some n",
          "with _ -> None)",
          "| BoolValue b ->",
          "let n = if b then 1 else 0 in",
          "log_recovery_type \"type_conversion\" (bool_to_int_conversion_pattern b n);",
          "Some n",
          "| _ -> None"
        ],
        "start_line": 84,
        "end_line": 92,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_basic_ops.ml"
      },
      {
        "hash": "d51dfd22a7657260be566595628164a7",
        "text": "let n = int_of_string s in\nlog_recovery_type \"type_conversion\" (string_to_int_conversion_pattern s n);\nSome n\nwith _ -> None)\n| BoolValue b ->\nlet n = if b then 1 else 0 in\nlog_recovery_type \"type_conversion\" (bool_to_int_conversion_pattern b n);\nSome n\n| _ -> None",
        "lines": [
          "let n = int_of_string s in",
          "log_recovery_type \"type_conversion\" (string_to_int_conversion_pattern s n);",
          "Some n",
          "with _ -> None)",
          "| BoolValue b ->",
          "let n = if b then 1 else 0 in",
          "log_recovery_type \"type_conversion\" (bool_to_int_conversion_pattern b n);",
          "Some n",
          "| _ -> None"
        ],
        "start_line": 140,
        "end_line": 148,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_operations_conversion.ml"
      }
    ],
    "ee5ea5d210bb46bca7fc91b67dcb604a": [
      {
        "hash": "ee5ea5d210bb46bca7fc91b67dcb604a",
        "text": "log_recovery_type \"type_conversion\" (string_to_int_conversion_pattern s n);\nSome n\nwith _ -> None)\n| BoolValue b ->\nlet n = if b then 1 else 0 in\nlog_recovery_type \"type_conversion\" (bool_to_int_conversion_pattern b n);\nSome n\n| _ -> None",
        "lines": [
          "log_recovery_type \"type_conversion\" (string_to_int_conversion_pattern s n);",
          "Some n",
          "with _ -> None)",
          "| BoolValue b ->",
          "let n = if b then 1 else 0 in",
          "log_recovery_type \"type_conversion\" (bool_to_int_conversion_pattern b n);",
          "Some n",
          "| _ -> None"
        ],
        "start_line": 85,
        "end_line": 92,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_basic_ops.ml"
      },
      {
        "hash": "ee5ea5d210bb46bca7fc91b67dcb604a",
        "text": "log_recovery_type \"type_conversion\" (string_to_int_conversion_pattern s n);\nSome n\nwith _ -> None)\n| BoolValue b ->\nlet n = if b then 1 else 0 in\nlog_recovery_type \"type_conversion\" (bool_to_int_conversion_pattern b n);\nSome n\n| _ -> None",
        "lines": [
          "log_recovery_type \"type_conversion\" (string_to_int_conversion_pattern s n);",
          "Some n",
          "with _ -> None)",
          "| BoolValue b ->",
          "let n = if b then 1 else 0 in",
          "log_recovery_type \"type_conversion\" (bool_to_int_conversion_pattern b n);",
          "Some n",
          "| _ -> None"
        ],
        "start_line": 141,
        "end_line": 148,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_operations_conversion.ml"
      }
    ],
    "5a02ff152a13ab17591b4dbcffc244fd": [
      {
        "hash": "5a02ff152a13ab17591b4dbcffc244fd",
        "text": "Some n\nwith _ -> None)\n| BoolValue b ->\nlet n = if b then 1 else 0 in\nlog_recovery_type \"type_conversion\" (bool_to_int_conversion_pattern b n);\nSome n\n| _ -> None",
        "lines": [
          "Some n",
          "with _ -> None)",
          "| BoolValue b ->",
          "let n = if b then 1 else 0 in",
          "log_recovery_type \"type_conversion\" (bool_to_int_conversion_pattern b n);",
          "Some n",
          "| _ -> None"
        ],
        "start_line": 86,
        "end_line": 92,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_basic_ops.ml"
      },
      {
        "hash": "5a02ff152a13ab17591b4dbcffc244fd",
        "text": "Some n\nwith _ -> None)\n| BoolValue b ->\nlet n = if b then 1 else 0 in\nlog_recovery_type \"type_conversion\" (bool_to_int_conversion_pattern b n);\nSome n\n| _ -> None",
        "lines": [
          "Some n",
          "with _ -> None)",
          "| BoolValue b ->",
          "let n = if b then 1 else 0 in",
          "log_recovery_type \"type_conversion\" (bool_to_int_conversion_pattern b n);",
          "Some n",
          "| _ -> None"
        ],
        "start_line": 142,
        "end_line": 148,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_operations_conversion.ml"
      }
    ],
    "33ec98a96bf78bcf7b4b97390f4b6f59": [
      {
        "hash": "33ec98a96bf78bcf7b4b97390f4b6f59",
        "text": "with _ -> None)\n| BoolValue b ->\nlet n = if b then 1 else 0 in\nlog_recovery_type \"type_conversion\" (bool_to_int_conversion_pattern b n);\nSome n\n| _ -> None",
        "lines": [
          "with _ -> None)",
          "| BoolValue b ->",
          "let n = if b then 1 else 0 in",
          "log_recovery_type \"type_conversion\" (bool_to_int_conversion_pattern b n);",
          "Some n",
          "| _ -> None"
        ],
        "start_line": 87,
        "end_line": 92,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_basic_ops.ml"
      },
      {
        "hash": "33ec98a96bf78bcf7b4b97390f4b6f59",
        "text": "with _ -> None)\n| BoolValue b ->\nlet n = if b then 1 else 0 in\nlog_recovery_type \"type_conversion\" (bool_to_int_conversion_pattern b n);\nSome n\n| _ -> None",
        "lines": [
          "with _ -> None)",
          "| BoolValue b ->",
          "let n = if b then 1 else 0 in",
          "log_recovery_type \"type_conversion\" (bool_to_int_conversion_pattern b n);",
          "Some n",
          "| _ -> None"
        ],
        "start_line": 143,
        "end_line": 148,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_operations_conversion.ml"
      }
    ],
    "81a3a5ed1a6c6276620b4a85ded8c6ca": [
      {
        "hash": "81a3a5ed1a6c6276620b4a85ded8c6ca",
        "text": "| BoolValue b ->\nlet n = if b then 1 else 0 in\nlog_recovery_type \"type_conversion\" (bool_to_int_conversion_pattern b n);\nSome n\n| _ -> None",
        "lines": [
          "| BoolValue b ->",
          "let n = if b then 1 else 0 in",
          "log_recovery_type \"type_conversion\" (bool_to_int_conversion_pattern b n);",
          "Some n",
          "| _ -> None"
        ],
        "start_line": 88,
        "end_line": 92,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_basic_ops.ml"
      },
      {
        "hash": "81a3a5ed1a6c6276620b4a85ded8c6ca",
        "text": "| BoolValue b ->\nlet n = if b then 1 else 0 in\nlog_recovery_type \"type_conversion\" (bool_to_int_conversion_pattern b n);\nSome n\n| _ -> None",
        "lines": [
          "| BoolValue b ->",
          "let n = if b then 1 else 0 in",
          "log_recovery_type \"type_conversion\" (bool_to_int_conversion_pattern b n);",
          "Some n",
          "| _ -> None"
        ],
        "start_line": 144,
        "end_line": 148,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_operations_conversion.ml"
      }
    ],
    "d6aad08f413edbfd480f23ec9d7bcba0": [
      {
        "hash": "d6aad08f413edbfd480f23ec9d7bcba0",
        "text": "let n = if b then 1 else 0 in\nlog_recovery_type \"type_conversion\" (bool_to_int_conversion_pattern b n);\nSome n\n| _ -> None",
        "lines": [
          "let n = if b then 1 else 0 in",
          "log_recovery_type \"type_conversion\" (bool_to_int_conversion_pattern b n);",
          "Some n",
          "| _ -> None"
        ],
        "start_line": 89,
        "end_line": 92,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_basic_ops.ml"
      },
      {
        "hash": "d6aad08f413edbfd480f23ec9d7bcba0",
        "text": "let n = if b then 1 else 0 in\nlog_recovery_type \"type_conversion\" (bool_to_int_conversion_pattern b n);\nSome n\n| _ -> None",
        "lines": [
          "let n = if b then 1 else 0 in",
          "log_recovery_type \"type_conversion\" (bool_to_int_conversion_pattern b n);",
          "Some n",
          "| _ -> None"
        ],
        "start_line": 145,
        "end_line": 148,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_operations_conversion.ml"
      }
    ],
    "d3e9cf8504b9e7fa18219ad0fd613628": [
      {
        "hash": "d3e9cf8504b9e7fa18219ad0fd613628",
        "text": "log_recovery_type \"type_conversion\" (bool_to_int_conversion_pattern b n);\nSome n\n| _ -> None",
        "lines": [
          "log_recovery_type \"type_conversion\" (bool_to_int_conversion_pattern b n);",
          "Some n",
          "| _ -> None"
        ],
        "start_line": 90,
        "end_line": 92,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_basic_ops.ml"
      },
      {
        "hash": "d3e9cf8504b9e7fa18219ad0fd613628",
        "text": "log_recovery_type \"type_conversion\" (bool_to_int_conversion_pattern b n);\nSome n\n| _ -> None",
        "lines": [
          "log_recovery_type \"type_conversion\" (bool_to_int_conversion_pattern b n);",
          "Some n",
          "| _ -> None"
        ],
        "start_line": 146,
        "end_line": 148,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_operations_conversion.ml"
      }
    ],
    "1f38680dfaf40969a536cf7df8e22e14": [
      {
        "hash": "1f38680dfaf40969a536cf7df8e22e14",
        "text": "let try_to_float value =\nmatch value with\n| FloatValue f -> Some f\n| IntValue n ->\nlet f = float_of_int n in\nlog_recovery_type \"type_conversion\" (int_to_float_conversion_pattern n f);\nSome f\n| StringValue s -> (\ntry\nlet f = float_of_string s in",
        "lines": [
          "let try_to_float value =",
          "match value with",
          "| FloatValue f -> Some f",
          "| IntValue n ->",
          "let f = float_of_int n in",
          "log_recovery_type \"type_conversion\" (int_to_float_conversion_pattern n f);",
          "Some f",
          "| StringValue s -> (",
          "try",
          "let f = float_of_string s in"
        ],
        "start_line": 95,
        "end_line": 104,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_basic_ops.ml"
      },
      {
        "hash": "1f38680dfaf40969a536cf7df8e22e14",
        "text": "let try_to_float value =\nmatch value with\n| FloatValue f -> Some f\n| IntValue n ->\nlet f = float_of_int n in\nlog_recovery_type \"type_conversion\" (int_to_float_conversion_pattern n f);\nSome f\n| StringValue s -> (\ntry\nlet f = float_of_string s in",
        "lines": [
          "let try_to_float value =",
          "match value with",
          "| FloatValue f -> Some f",
          "| IntValue n ->",
          "let f = float_of_int n in",
          "log_recovery_type \"type_conversion\" (int_to_float_conversion_pattern n f);",
          "Some f",
          "| StringValue s -> (",
          "try",
          "let f = float_of_string s in"
        ],
        "start_line": 151,
        "end_line": 160,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_operations_conversion.ml"
      }
    ],
    "1d1c7c5004a03dbb6ec225de3ecb0508": [
      {
        "hash": "1d1c7c5004a03dbb6ec225de3ecb0508",
        "text": "match value with\n| FloatValue f -> Some f\n| IntValue n ->\nlet f = float_of_int n in\nlog_recovery_type \"type_conversion\" (int_to_float_conversion_pattern n f);\nSome f\n| StringValue s -> (\ntry\nlet f = float_of_string s in\nlog_recovery_type \"type_conversion\" (string_to_float_conversion_pattern s f);",
        "lines": [
          "match value with",
          "| FloatValue f -> Some f",
          "| IntValue n ->",
          "let f = float_of_int n in",
          "log_recovery_type \"type_conversion\" (int_to_float_conversion_pattern n f);",
          "Some f",
          "| StringValue s -> (",
          "try",
          "let f = float_of_string s in",
          "log_recovery_type \"type_conversion\" (string_to_float_conversion_pattern s f);"
        ],
        "start_line": 96,
        "end_line": 105,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_basic_ops.ml"
      },
      {
        "hash": "1d1c7c5004a03dbb6ec225de3ecb0508",
        "text": "match value with\n| FloatValue f -> Some f\n| IntValue n ->\nlet f = float_of_int n in\nlog_recovery_type \"type_conversion\" (int_to_float_conversion_pattern n f);\nSome f\n| StringValue s -> (\ntry\nlet f = float_of_string s in\nlog_recovery_type \"type_conversion\" (string_to_float_conversion_pattern s f);",
        "lines": [
          "match value with",
          "| FloatValue f -> Some f",
          "| IntValue n ->",
          "let f = float_of_int n in",
          "log_recovery_type \"type_conversion\" (int_to_float_conversion_pattern n f);",
          "Some f",
          "| StringValue s -> (",
          "try",
          "let f = float_of_string s in",
          "log_recovery_type \"type_conversion\" (string_to_float_conversion_pattern s f);"
        ],
        "start_line": 152,
        "end_line": 161,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_operations_conversion.ml"
      }
    ],
    "013a100b747ca942fcc1fb1c668a3520": [
      {
        "hash": "013a100b747ca942fcc1fb1c668a3520",
        "text": "| FloatValue f -> Some f\n| IntValue n ->\nlet f = float_of_int n in\nlog_recovery_type \"type_conversion\" (int_to_float_conversion_pattern n f);\nSome f\n| StringValue s -> (\ntry\nlet f = float_of_string s in\nlog_recovery_type \"type_conversion\" (string_to_float_conversion_pattern s f);\nSome f",
        "lines": [
          "| FloatValue f -> Some f",
          "| IntValue n ->",
          "let f = float_of_int n in",
          "log_recovery_type \"type_conversion\" (int_to_float_conversion_pattern n f);",
          "Some f",
          "| StringValue s -> (",
          "try",
          "let f = float_of_string s in",
          "log_recovery_type \"type_conversion\" (string_to_float_conversion_pattern s f);",
          "Some f"
        ],
        "start_line": 97,
        "end_line": 106,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_basic_ops.ml"
      },
      {
        "hash": "013a100b747ca942fcc1fb1c668a3520",
        "text": "| FloatValue f -> Some f\n| IntValue n ->\nlet f = float_of_int n in\nlog_recovery_type \"type_conversion\" (int_to_float_conversion_pattern n f);\nSome f\n| StringValue s -> (\ntry\nlet f = float_of_string s in\nlog_recovery_type \"type_conversion\" (string_to_float_conversion_pattern s f);\nSome f",
        "lines": [
          "| FloatValue f -> Some f",
          "| IntValue n ->",
          "let f = float_of_int n in",
          "log_recovery_type \"type_conversion\" (int_to_float_conversion_pattern n f);",
          "Some f",
          "| StringValue s -> (",
          "try",
          "let f = float_of_string s in",
          "log_recovery_type \"type_conversion\" (string_to_float_conversion_pattern s f);",
          "Some f"
        ],
        "start_line": 153,
        "end_line": 162,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_operations_conversion.ml"
      }
    ],
    "c3f2c32121e91afbb32b084cbaf0286d": [
      {
        "hash": "c3f2c32121e91afbb32b084cbaf0286d",
        "text": "| IntValue n ->\nlet f = float_of_int n in\nlog_recovery_type \"type_conversion\" (int_to_float_conversion_pattern n f);\nSome f\n| StringValue s -> (\ntry\nlet f = float_of_string s in\nlog_recovery_type \"type_conversion\" (string_to_float_conversion_pattern s f);\nSome f\nwith _ -> None)",
        "lines": [
          "| IntValue n ->",
          "let f = float_of_int n in",
          "log_recovery_type \"type_conversion\" (int_to_float_conversion_pattern n f);",
          "Some f",
          "| StringValue s -> (",
          "try",
          "let f = float_of_string s in",
          "log_recovery_type \"type_conversion\" (string_to_float_conversion_pattern s f);",
          "Some f",
          "with _ -> None)"
        ],
        "start_line": 98,
        "end_line": 107,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_basic_ops.ml"
      },
      {
        "hash": "c3f2c32121e91afbb32b084cbaf0286d",
        "text": "| IntValue n ->\nlet f = float_of_int n in\nlog_recovery_type \"type_conversion\" (int_to_float_conversion_pattern n f);\nSome f\n| StringValue s -> (\ntry\nlet f = float_of_string s in\nlog_recovery_type \"type_conversion\" (string_to_float_conversion_pattern s f);\nSome f\nwith _ -> None)",
        "lines": [
          "| IntValue n ->",
          "let f = float_of_int n in",
          "log_recovery_type \"type_conversion\" (int_to_float_conversion_pattern n f);",
          "Some f",
          "| StringValue s -> (",
          "try",
          "let f = float_of_string s in",
          "log_recovery_type \"type_conversion\" (string_to_float_conversion_pattern s f);",
          "Some f",
          "with _ -> None)"
        ],
        "start_line": 154,
        "end_line": 163,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_operations_conversion.ml"
      }
    ],
    "2366463f99616bf2573ec635b3c3812c": [
      {
        "hash": "2366463f99616bf2573ec635b3c3812c",
        "text": "let f = float_of_int n in\nlog_recovery_type \"type_conversion\" (int_to_float_conversion_pattern n f);\nSome f\n| StringValue s -> (\ntry\nlet f = float_of_string s in\nlog_recovery_type \"type_conversion\" (string_to_float_conversion_pattern s f);\nSome f\nwith _ -> None)\n| _ -> None",
        "lines": [
          "let f = float_of_int n in",
          "log_recovery_type \"type_conversion\" (int_to_float_conversion_pattern n f);",
          "Some f",
          "| StringValue s -> (",
          "try",
          "let f = float_of_string s in",
          "log_recovery_type \"type_conversion\" (string_to_float_conversion_pattern s f);",
          "Some f",
          "with _ -> None)",
          "| _ -> None"
        ],
        "start_line": 99,
        "end_line": 108,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_basic_ops.ml"
      },
      {
        "hash": "2366463f99616bf2573ec635b3c3812c",
        "text": "let f = float_of_int n in\nlog_recovery_type \"type_conversion\" (int_to_float_conversion_pattern n f);\nSome f\n| StringValue s -> (\ntry\nlet f = float_of_string s in\nlog_recovery_type \"type_conversion\" (string_to_float_conversion_pattern s f);\nSome f\nwith _ -> None)\n| _ -> None",
        "lines": [
          "let f = float_of_int n in",
          "log_recovery_type \"type_conversion\" (int_to_float_conversion_pattern n f);",
          "Some f",
          "| StringValue s -> (",
          "try",
          "let f = float_of_string s in",
          "log_recovery_type \"type_conversion\" (string_to_float_conversion_pattern s f);",
          "Some f",
          "with _ -> None)",
          "| _ -> None"
        ],
        "start_line": 155,
        "end_line": 164,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_operations_conversion.ml"
      }
    ],
    "5868eda45ab64212dc2391b7ae3f2f9a": [
      {
        "hash": "5868eda45ab64212dc2391b7ae3f2f9a",
        "text": "log_recovery_type \"type_conversion\" (int_to_float_conversion_pattern n f);\nSome f\n| StringValue s -> (\ntry\nlet f = float_of_string s in\nlog_recovery_type \"type_conversion\" (string_to_float_conversion_pattern s f);\nSome f\nwith _ -> None)\n| _ -> None",
        "lines": [
          "log_recovery_type \"type_conversion\" (int_to_float_conversion_pattern n f);",
          "Some f",
          "| StringValue s -> (",
          "try",
          "let f = float_of_string s in",
          "log_recovery_type \"type_conversion\" (string_to_float_conversion_pattern s f);",
          "Some f",
          "with _ -> None)",
          "| _ -> None"
        ],
        "start_line": 100,
        "end_line": 108,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_basic_ops.ml"
      },
      {
        "hash": "5868eda45ab64212dc2391b7ae3f2f9a",
        "text": "log_recovery_type \"type_conversion\" (int_to_float_conversion_pattern n f);\nSome f\n| StringValue s -> (\ntry\nlet f = float_of_string s in\nlog_recovery_type \"type_conversion\" (string_to_float_conversion_pattern s f);\nSome f\nwith _ -> None)\n| _ -> None",
        "lines": [
          "log_recovery_type \"type_conversion\" (int_to_float_conversion_pattern n f);",
          "Some f",
          "| StringValue s -> (",
          "try",
          "let f = float_of_string s in",
          "log_recovery_type \"type_conversion\" (string_to_float_conversion_pattern s f);",
          "Some f",
          "with _ -> None)",
          "| _ -> None"
        ],
        "start_line": 156,
        "end_line": 164,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_operations_conversion.ml"
      }
    ],
    "9b635c6bcf460810f56a660f44af069a": [
      {
        "hash": "9b635c6bcf460810f56a660f44af069a",
        "text": "Some f\n| StringValue s -> (\ntry\nlet f = float_of_string s in\nlog_recovery_type \"type_conversion\" (string_to_float_conversion_pattern s f);\nSome f\nwith _ -> None)\n| _ -> None",
        "lines": [
          "Some f",
          "| StringValue s -> (",
          "try",
          "let f = float_of_string s in",
          "log_recovery_type \"type_conversion\" (string_to_float_conversion_pattern s f);",
          "Some f",
          "with _ -> None)",
          "| _ -> None"
        ],
        "start_line": 101,
        "end_line": 108,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_basic_ops.ml"
      },
      {
        "hash": "9b635c6bcf460810f56a660f44af069a",
        "text": "Some f\n| StringValue s -> (\ntry\nlet f = float_of_string s in\nlog_recovery_type \"type_conversion\" (string_to_float_conversion_pattern s f);\nSome f\nwith _ -> None)\n| _ -> None",
        "lines": [
          "Some f",
          "| StringValue s -> (",
          "try",
          "let f = float_of_string s in",
          "log_recovery_type \"type_conversion\" (string_to_float_conversion_pattern s f);",
          "Some f",
          "with _ -> None)",
          "| _ -> None"
        ],
        "start_line": 157,
        "end_line": 164,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_operations_conversion.ml"
      }
    ],
    "6c0fc8e9fabe1db07ca01ef087a68c4c": [
      {
        "hash": "6c0fc8e9fabe1db07ca01ef087a68c4c",
        "text": "| StringValue s -> (\ntry\nlet f = float_of_string s in\nlog_recovery_type \"type_conversion\" (string_to_float_conversion_pattern s f);\nSome f\nwith _ -> None)\n| _ -> None",
        "lines": [
          "| StringValue s -> (",
          "try",
          "let f = float_of_string s in",
          "log_recovery_type \"type_conversion\" (string_to_float_conversion_pattern s f);",
          "Some f",
          "with _ -> None)",
          "| _ -> None"
        ],
        "start_line": 102,
        "end_line": 108,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_basic_ops.ml"
      },
      {
        "hash": "6c0fc8e9fabe1db07ca01ef087a68c4c",
        "text": "| StringValue s -> (\ntry\nlet f = float_of_string s in\nlog_recovery_type \"type_conversion\" (string_to_float_conversion_pattern s f);\nSome f\nwith _ -> None)\n| _ -> None",
        "lines": [
          "| StringValue s -> (",
          "try",
          "let f = float_of_string s in",
          "log_recovery_type \"type_conversion\" (string_to_float_conversion_pattern s f);",
          "Some f",
          "with _ -> None)",
          "| _ -> None"
        ],
        "start_line": 158,
        "end_line": 164,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_operations_conversion.ml"
      }
    ],
    "04e070e49234f13e7df73b3cc6b70310": [
      {
        "hash": "04e070e49234f13e7df73b3cc6b70310",
        "text": "try\nlet f = float_of_string s in\nlog_recovery_type \"type_conversion\" (string_to_float_conversion_pattern s f);\nSome f\nwith _ -> None)\n| _ -> None",
        "lines": [
          "try",
          "let f = float_of_string s in",
          "log_recovery_type \"type_conversion\" (string_to_float_conversion_pattern s f);",
          "Some f",
          "with _ -> None)",
          "| _ -> None"
        ],
        "start_line": 103,
        "end_line": 108,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_basic_ops.ml"
      },
      {
        "hash": "04e070e49234f13e7df73b3cc6b70310",
        "text": "try\nlet f = float_of_string s in\nlog_recovery_type \"type_conversion\" (string_to_float_conversion_pattern s f);\nSome f\nwith _ -> None)\n| _ -> None",
        "lines": [
          "try",
          "let f = float_of_string s in",
          "log_recovery_type \"type_conversion\" (string_to_float_conversion_pattern s f);",
          "Some f",
          "with _ -> None)",
          "| _ -> None"
        ],
        "start_line": 159,
        "end_line": 164,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_operations_conversion.ml"
      }
    ],
    "42144006a41785ed29669b95f01543d7": [
      {
        "hash": "42144006a41785ed29669b95f01543d7",
        "text": "let f = float_of_string s in\nlog_recovery_type \"type_conversion\" (string_to_float_conversion_pattern s f);\nSome f\nwith _ -> None)\n| _ -> None",
        "lines": [
          "let f = float_of_string s in",
          "log_recovery_type \"type_conversion\" (string_to_float_conversion_pattern s f);",
          "Some f",
          "with _ -> None)",
          "| _ -> None"
        ],
        "start_line": 104,
        "end_line": 108,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_basic_ops.ml"
      },
      {
        "hash": "42144006a41785ed29669b95f01543d7",
        "text": "let f = float_of_string s in\nlog_recovery_type \"type_conversion\" (string_to_float_conversion_pattern s f);\nSome f\nwith _ -> None)\n| _ -> None",
        "lines": [
          "let f = float_of_string s in",
          "log_recovery_type \"type_conversion\" (string_to_float_conversion_pattern s f);",
          "Some f",
          "with _ -> None)",
          "| _ -> None"
        ],
        "start_line": 160,
        "end_line": 164,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_operations_conversion.ml"
      }
    ],
    "4abc6b049ffbd2299bb6007e0ddbfce9": [
      {
        "hash": "4abc6b049ffbd2299bb6007e0ddbfce9",
        "text": "log_recovery_type \"type_conversion\" (string_to_float_conversion_pattern s f);\nSome f\nwith _ -> None)\n| _ -> None",
        "lines": [
          "log_recovery_type \"type_conversion\" (string_to_float_conversion_pattern s f);",
          "Some f",
          "with _ -> None)",
          "| _ -> None"
        ],
        "start_line": 105,
        "end_line": 108,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_basic_ops.ml"
      },
      {
        "hash": "4abc6b049ffbd2299bb6007e0ddbfce9",
        "text": "log_recovery_type \"type_conversion\" (string_to_float_conversion_pattern s f);\nSome f\nwith _ -> None)\n| _ -> None",
        "lines": [
          "log_recovery_type \"type_conversion\" (string_to_float_conversion_pattern s f);",
          "Some f",
          "with _ -> None)",
          "| _ -> None"
        ],
        "start_line": 161,
        "end_line": 164,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_operations_conversion.ml"
      }
    ],
    "f61095bf5bdb37f9ba0d93baeebcd0b2": [
      {
        "hash": "f61095bf5bdb37f9ba0d93baeebcd0b2",
        "text": "Some f\nwith _ -> None)\n| _ -> None",
        "lines": [
          "Some f",
          "with _ -> None)",
          "| _ -> None"
        ],
        "start_line": 106,
        "end_line": 108,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_basic_ops.ml"
      },
      {
        "hash": "f61095bf5bdb37f9ba0d93baeebcd0b2",
        "text": "Some f\nwith _ -> None)\n| _ -> None",
        "lines": [
          "Some f",
          "with _ -> None)",
          "| _ -> None"
        ],
        "start_line": 162,
        "end_line": 164,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_operations_conversion.ml"
      }
    ],
    "df608139e82836249217190ba74ef6cb": [
      {
        "hash": "df608139e82836249217190ba74ef6cb",
        "text": "let value_type =\nmatch value with\n| IntValue _ -> \"整数\"\n| FloatValue _ -> \"浮点数\"\n| BoolValue _ -> \"布尔值\"\n| _ -> \"值\"\nin\nlog_recovery_type \"type_conversion\" (value_to_string_conversion_pattern value_type s);\nSome s",
        "lines": [
          "let value_type =",
          "match value with",
          "| IntValue _ -> \"整数\"",
          "| FloatValue _ -> \"浮点数\"",
          "| BoolValue _ -> \"布尔值\"",
          "| _ -> \"值\"",
          "in",
          "log_recovery_type \"type_conversion\" (value_to_string_conversion_pattern value_type s);",
          "Some s"
        ],
        "start_line": 116,
        "end_line": 124,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_basic_ops.ml"
      },
      {
        "hash": "df608139e82836249217190ba74ef6cb",
        "text": "let value_type =\nmatch value with\n| IntValue _ -> \"整数\"\n| FloatValue _ -> \"浮点数\"\n| BoolValue _ -> \"布尔值\"\n| _ -> \"值\"\nin\nlog_recovery_type \"type_conversion\" (value_to_string_conversion_pattern value_type s);\nSome s",
        "lines": [
          "let value_type =",
          "match value with",
          "| IntValue _ -> \"整数\"",
          "| FloatValue _ -> \"浮点数\"",
          "| BoolValue _ -> \"布尔值\"",
          "| _ -> \"值\"",
          "in",
          "log_recovery_type \"type_conversion\" (value_to_string_conversion_pattern value_type s);",
          "Some s"
        ],
        "start_line": 172,
        "end_line": 180,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_operations_conversion.ml"
      }
    ],
    "18ad502d001e5d7d71d2c96000ac7ad5": [
      {
        "hash": "18ad502d001e5d7d71d2c96000ac7ad5",
        "text": "match value with\n| IntValue _ -> \"整数\"\n| FloatValue _ -> \"浮点数\"\n| BoolValue _ -> \"布尔值\"\n| _ -> \"值\"\nin\nlog_recovery_type \"type_conversion\" (value_to_string_conversion_pattern value_type s);\nSome s",
        "lines": [
          "match value with",
          "| IntValue _ -> \"整数\"",
          "| FloatValue _ -> \"浮点数\"",
          "| BoolValue _ -> \"布尔值\"",
          "| _ -> \"值\"",
          "in",
          "log_recovery_type \"type_conversion\" (value_to_string_conversion_pattern value_type s);",
          "Some s"
        ],
        "start_line": 117,
        "end_line": 124,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_basic_ops.ml"
      },
      {
        "hash": "18ad502d001e5d7d71d2c96000ac7ad5",
        "text": "match value with\n| IntValue _ -> \"整数\"\n| FloatValue _ -> \"浮点数\"\n| BoolValue _ -> \"布尔值\"\n| _ -> \"值\"\nin\nlog_recovery_type \"type_conversion\" (value_to_string_conversion_pattern value_type s);\nSome s",
        "lines": [
          "match value with",
          "| IntValue _ -> \"整数\"",
          "| FloatValue _ -> \"浮点数\"",
          "| BoolValue _ -> \"布尔值\"",
          "| _ -> \"值\"",
          "in",
          "log_recovery_type \"type_conversion\" (value_to_string_conversion_pattern value_type s);",
          "Some s"
        ],
        "start_line": 173,
        "end_line": 180,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_operations_conversion.ml"
      }
    ],
    "1f2f860ca7c00a94b66ece9652e9b314": [
      {
        "hash": "1f2f860ca7c00a94b66ece9652e9b314",
        "text": "| IntValue _ -> \"整数\"\n| FloatValue _ -> \"浮点数\"\n| BoolValue _ -> \"布尔值\"\n| _ -> \"值\"\nin\nlog_recovery_type \"type_conversion\" (value_to_string_conversion_pattern value_type s);\nSome s",
        "lines": [
          "| IntValue _ -> \"整数\"",
          "| FloatValue _ -> \"浮点数\"",
          "| BoolValue _ -> \"布尔值\"",
          "| _ -> \"值\"",
          "in",
          "log_recovery_type \"type_conversion\" (value_to_string_conversion_pattern value_type s);",
          "Some s"
        ],
        "start_line": 118,
        "end_line": 124,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_basic_ops.ml"
      },
      {
        "hash": "1f2f860ca7c00a94b66ece9652e9b314",
        "text": "| IntValue _ -> \"整数\"\n| FloatValue _ -> \"浮点数\"\n| BoolValue _ -> \"布尔值\"\n| _ -> \"值\"\nin\nlog_recovery_type \"type_conversion\" (value_to_string_conversion_pattern value_type s);\nSome s",
        "lines": [
          "| IntValue _ -> \"整数\"",
          "| FloatValue _ -> \"浮点数\"",
          "| BoolValue _ -> \"布尔值\"",
          "| _ -> \"值\"",
          "in",
          "log_recovery_type \"type_conversion\" (value_to_string_conversion_pattern value_type s);",
          "Some s"
        ],
        "start_line": 174,
        "end_line": 180,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_operations_conversion.ml"
      }
    ],
    "724c6c6dd03dfb6641d7dcd743cef788": [
      {
        "hash": "724c6c6dd03dfb6641d7dcd743cef788",
        "text": "| FloatValue _ -> \"浮点数\"\n| BoolValue _ -> \"布尔值\"\n| _ -> \"值\"\nin\nlog_recovery_type \"type_conversion\" (value_to_string_conversion_pattern value_type s);\nSome s",
        "lines": [
          "| FloatValue _ -> \"浮点数\"",
          "| BoolValue _ -> \"布尔值\"",
          "| _ -> \"值\"",
          "in",
          "log_recovery_type \"type_conversion\" (value_to_string_conversion_pattern value_type s);",
          "Some s"
        ],
        "start_line": 119,
        "end_line": 124,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_basic_ops.ml"
      },
      {
        "hash": "724c6c6dd03dfb6641d7dcd743cef788",
        "text": "| FloatValue _ -> \"浮点数\"\n| BoolValue _ -> \"布尔值\"\n| _ -> \"值\"\nin\nlog_recovery_type \"type_conversion\" (value_to_string_conversion_pattern value_type s);\nSome s",
        "lines": [
          "| FloatValue _ -> \"浮点数\"",
          "| BoolValue _ -> \"布尔值\"",
          "| _ -> \"值\"",
          "in",
          "log_recovery_type \"type_conversion\" (value_to_string_conversion_pattern value_type s);",
          "Some s"
        ],
        "start_line": 175,
        "end_line": 180,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_operations_conversion.ml"
      }
    ],
    "89b95ee1880e7e8085b0617221dba59d": [
      {
        "hash": "89b95ee1880e7e8085b0617221dba59d",
        "text": "| BoolValue _ -> \"布尔值\"\n| _ -> \"值\"\nin\nlog_recovery_type \"type_conversion\" (value_to_string_conversion_pattern value_type s);\nSome s",
        "lines": [
          "| BoolValue _ -> \"布尔值\"",
          "| _ -> \"值\"",
          "in",
          "log_recovery_type \"type_conversion\" (value_to_string_conversion_pattern value_type s);",
          "Some s"
        ],
        "start_line": 120,
        "end_line": 124,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_basic_ops.ml"
      },
      {
        "hash": "89b95ee1880e7e8085b0617221dba59d",
        "text": "| BoolValue _ -> \"布尔值\"\n| _ -> \"值\"\nin\nlog_recovery_type \"type_conversion\" (value_to_string_conversion_pattern value_type s);\nSome s",
        "lines": [
          "| BoolValue _ -> \"布尔值\"",
          "| _ -> \"值\"",
          "in",
          "log_recovery_type \"type_conversion\" (value_to_string_conversion_pattern value_type s);",
          "Some s"
        ],
        "start_line": 176,
        "end_line": 180,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_operations_conversion.ml"
      }
    ],
    "fcde5c2c037bbc1e44c9678cc9b06cac": [
      {
        "hash": "fcde5c2c037bbc1e44c9678cc9b06cac",
        "text": "| _ -> \"值\"\nin\nlog_recovery_type \"type_conversion\" (value_to_string_conversion_pattern value_type s);\nSome s",
        "lines": [
          "| _ -> \"值\"",
          "in",
          "log_recovery_type \"type_conversion\" (value_to_string_conversion_pattern value_type s);",
          "Some s"
        ],
        "start_line": 121,
        "end_line": 124,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_basic_ops.ml"
      },
      {
        "hash": "fcde5c2c037bbc1e44c9678cc9b06cac",
        "text": "| _ -> \"值\"\nin\nlog_recovery_type \"type_conversion\" (value_to_string_conversion_pattern value_type s);\nSome s",
        "lines": [
          "| _ -> \"值\"",
          "in",
          "log_recovery_type \"type_conversion\" (value_to_string_conversion_pattern value_type s);",
          "Some s"
        ],
        "start_line": 177,
        "end_line": 180,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_operations_conversion.ml"
      }
    ],
    "ae9b6b2fb2c3c72661a5f3f4da2a9ddf": [
      {
        "hash": "ae9b6b2fb2c3c72661a5f3f4da2a9ddf",
        "text": "in\nlog_recovery_type \"type_conversion\" (value_to_string_conversion_pattern value_type s);\nSome s",
        "lines": [
          "in",
          "log_recovery_type \"type_conversion\" (value_to_string_conversion_pattern value_type s);",
          "Some s"
        ],
        "start_line": 122,
        "end_line": 124,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_basic_ops.ml"
      },
      {
        "hash": "ae9b6b2fb2c3c72661a5f3f4da2a9ddf",
        "text": "in\nlog_recovery_type \"type_conversion\" (value_to_string_conversion_pattern value_type s);\nSome s",
        "lines": [
          "in",
          "log_recovery_type \"type_conversion\" (value_to_string_conversion_pattern value_type s);",
          "Some s"
        ],
        "start_line": 178,
        "end_line": 180,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_operations_conversion.ml"
      }
    ],
    "63b08a5b9fa7e447745eb930f8a92535": [
      {
        "hash": "63b08a5b9fa7e447745eb930f8a92535",
        "text": "let check_utf8_char state _byte1 byte2 byte3 =\nstate.position + 2 < state.length\n&& Char.code state.input.[state.position + 1] = byte2\n&& Char.code state.input.[state.position + 2] = byte3",
        "lines": [
          "let check_utf8_char state _byte1 byte2 byte3 =",
          "state.position + 2 < state.length",
          "&& Char.code state.input.[state.position + 1] = byte2",
          "&& Char.code state.input.[state.position + 2] = byte3"
        ],
        "start_line": 9,
        "end_line": 12,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_chars.ml"
      },
      {
        "hash": "63b08a5b9fa7e447745eb930f8a92535",
        "text": "let check_utf8_char state _byte1 byte2 byte3 =\nstate.position + 2 < state.length\n&& Char.code state.input.[state.position + 1] = byte2\n&& Char.code state.input.[state.position + 2] = byte3",
        "lines": [
          "let check_utf8_char state _byte1 byte2 byte3 =",
          "state.position + 2 < state.length",
          "&& Char.code state.input.[state.position + 1] = byte2",
          "&& Char.code state.input.[state.position + 2] = byte3"
        ],
        "start_line": 29,
        "end_line": 32,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_char_processing.ml"
      },
      {
        "hash": "63b08a5b9fa7e447745eb930f8a92535",
        "text": "let check_utf8_char state _byte1 byte2 byte3 =\nstate.position + 2 < state.length\n&& Char.code state.input.[state.position + 1] = byte2\n&& Char.code state.input.[state.position + 2] = byte3",
        "lines": [
          "let check_utf8_char state _byte1 byte2 byte3 =",
          "state.position + 2 < state.length",
          "&& Char.code state.input.[state.position + 1] = byte2",
          "&& Char.code state.input.[state.position + 2] = byte3"
        ],
        "start_line": 8,
        "end_line": 11,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_parsers.ml"
      },
      {
        "hash": "63b08a5b9fa7e447745eb930f8a92535",
        "text": "let check_utf8_char state _byte1 byte2 byte3 =\nstate.position + 2 < state.length\n&& Char.code state.input.[state.position + 1] = byte2\n&& Char.code state.input.[state.position + 2] = byte3",
        "lines": [
          "let check_utf8_char state _byte1 byte2 byte3 =",
          "state.position + 2 < state.length",
          "&& Char.code state.input.[state.position + 1] = byte2",
          "&& Char.code state.input.[state.position + 2] = byte3"
        ],
        "start_line": 74,
        "end_line": 77,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_state.ml"
      }
    ],
    "5e542afd4937d5087c14d1c31b997a22": [
      {
        "hash": "5e542afd4937d5087c14d1c31b997a22",
        "text": "state.position + 2 < state.length\n&& Char.code state.input.[state.position + 1] = byte2\n&& Char.code state.input.[state.position + 2] = byte3",
        "lines": [
          "state.position + 2 < state.length",
          "&& Char.code state.input.[state.position + 1] = byte2",
          "&& Char.code state.input.[state.position + 2] = byte3"
        ],
        "start_line": 10,
        "end_line": 12,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_chars.ml"
      },
      {
        "hash": "5e542afd4937d5087c14d1c31b997a22",
        "text": "state.position + 2 < state.length\n&& Char.code state.input.[state.position + 1] = byte2\n&& Char.code state.input.[state.position + 2] = byte3",
        "lines": [
          "state.position + 2 < state.length",
          "&& Char.code state.input.[state.position + 1] = byte2",
          "&& Char.code state.input.[state.position + 2] = byte3"
        ],
        "start_line": 30,
        "end_line": 32,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_char_processing.ml"
      },
      {
        "hash": "5e542afd4937d5087c14d1c31b997a22",
        "text": "state.position + 2 < state.length\n&& Char.code state.input.[state.position + 1] = byte2\n&& Char.code state.input.[state.position + 2] = byte3",
        "lines": [
          "state.position + 2 < state.length",
          "&& Char.code state.input.[state.position + 1] = byte2",
          "&& Char.code state.input.[state.position + 2] = byte3"
        ],
        "start_line": 9,
        "end_line": 11,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_parsers.ml"
      },
      {
        "hash": "5e542afd4937d5087c14d1c31b997a22",
        "text": "state.position + 2 < state.length\n&& Char.code state.input.[state.position + 1] = byte2\n&& Char.code state.input.[state.position + 2] = byte3",
        "lines": [
          "state.position + 2 < state.length",
          "&& Char.code state.input.[state.position + 1] = byte2",
          "&& Char.code state.input.[state.position + 2] = byte3"
        ],
        "start_line": 75,
        "end_line": 77,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_state.ml"
      }
    ],
    "048a36eaf4f9fea290f1a2a286529757": [
      {
        "hash": "048a36eaf4f9fea290f1a2a286529757",
        "text": "| IntToken of int\n| FloatToken of float\n| ChineseNumberToken of string\n| StringToken of string\n| BoolToken of bool",
        "lines": [
          "| IntToken of int",
          "| FloatToken of float",
          "| ChineseNumberToken of string",
          "| StringToken of string",
          "| BoolToken of bool"
        ],
        "start_line": 6,
        "end_line": 10,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_tokens.ml"
      },
      {
        "hash": "048a36eaf4f9fea290f1a2a286529757",
        "text": "| IntToken of int\n| FloatToken of float\n| ChineseNumberToken of string\n| StringToken of string\n| BoolToken of bool",
        "lines": [
          "| IntToken of int",
          "| FloatToken of float",
          "| ChineseNumberToken of string",
          "| StringToken of string",
          "| BoolToken of bool"
        ],
        "start_line": 8,
        "end_line": 12,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/token_definitions_unified.ml"
      }
    ],
    "9746e9a76502bd68e6820ae53b163a71": [
      {
        "hash": "9746e9a76502bd68e6820ae53b163a71",
        "text": "| FloatToken of float\n| ChineseNumberToken of string\n| StringToken of string\n| BoolToken of bool",
        "lines": [
          "| FloatToken of float",
          "| ChineseNumberToken of string",
          "| StringToken of string",
          "| BoolToken of bool"
        ],
        "start_line": 7,
        "end_line": 10,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_tokens.ml"
      },
      {
        "hash": "9746e9a76502bd68e6820ae53b163a71",
        "text": "| FloatToken of float\n| ChineseNumberToken of string\n| StringToken of string\n| BoolToken of bool",
        "lines": [
          "| FloatToken of float",
          "| ChineseNumberToken of string",
          "| StringToken of string",
          "| BoolToken of bool"
        ],
        "start_line": 9,
        "end_line": 12,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/token_definitions_unified.ml"
      }
    ],
    "7aa6219a73b7301ff4d31452062e3823": [
      {
        "hash": "7aa6219a73b7301ff4d31452062e3823",
        "text": "| ChineseNumberToken of string\n| StringToken of string\n| BoolToken of bool",
        "lines": [
          "| ChineseNumberToken of string",
          "| StringToken of string",
          "| BoolToken of bool"
        ],
        "start_line": 8,
        "end_line": 10,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_tokens.ml"
      },
      {
        "hash": "7aa6219a73b7301ff4d31452062e3823",
        "text": "| ChineseNumberToken of string\n| StringToken of string\n| BoolToken of bool",
        "lines": [
          "| ChineseNumberToken of string",
          "| StringToken of string",
          "| BoolToken of bool"
        ],
        "start_line": 10,
        "end_line": 12,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/token_definitions_unified.ml"
      }
    ],
    "b8791fc26698aef51cd7b4c7b7b6263f": [
      {
        "hash": "b8791fc26698aef51cd7b4c7b7b6263f",
        "text": "| LetKeyword\n| RecKeyword\n| InKeyword\n| FunKeyword\n| ParamKeyword\n| IfKeyword\n| ThenKeyword\n| ElseKeyword\n| MatchKeyword\n| WithKeyword",
        "lines": [
          "| LetKeyword",
          "| RecKeyword",
          "| InKeyword",
          "| FunKeyword",
          "| ParamKeyword",
          "| IfKeyword",
          "| ThenKeyword",
          "| ElseKeyword",
          "| MatchKeyword",
          "| WithKeyword"
        ],
        "start_line": 15,
        "end_line": 24,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_tokens.ml"
      },
      {
        "hash": "b8791fc26698aef51cd7b4c7b7b6263f",
        "text": "| LetKeyword\n| RecKeyword\n| InKeyword\n| FunKeyword\n| ParamKeyword\n| IfKeyword\n| ThenKeyword\n| ElseKeyword\n| MatchKeyword\n| WithKeyword",
        "lines": [
          "| LetKeyword",
          "| RecKeyword",
          "| InKeyword",
          "| FunKeyword",
          "| ParamKeyword",
          "| IfKeyword",
          "| ThenKeyword",
          "| ElseKeyword",
          "| MatchKeyword",
          "| WithKeyword"
        ],
        "start_line": 17,
        "end_line": 26,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/token_definitions_unified.ml"
      }
    ],
    "d007a6bd488059427681a9bb84940b81": [
      {
        "hash": "d007a6bd488059427681a9bb84940b81",
        "text": "| RecKeyword\n| InKeyword\n| FunKeyword\n| ParamKeyword\n| IfKeyword\n| ThenKeyword\n| ElseKeyword\n| MatchKeyword\n| WithKeyword\n| OtherKeyword",
        "lines": [
          "| RecKeyword",
          "| InKeyword",
          "| FunKeyword",
          "| ParamKeyword",
          "| IfKeyword",
          "| ThenKeyword",
          "| ElseKeyword",
          "| MatchKeyword",
          "| WithKeyword",
          "| OtherKeyword"
        ],
        "start_line": 16,
        "end_line": 25,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_tokens.ml"
      },
      {
        "hash": "d007a6bd488059427681a9bb84940b81",
        "text": "| RecKeyword\n| InKeyword\n| FunKeyword\n| ParamKeyword\n| IfKeyword\n| ThenKeyword\n| ElseKeyword\n| MatchKeyword\n| WithKeyword\n| OtherKeyword",
        "lines": [
          "| RecKeyword",
          "| InKeyword",
          "| FunKeyword",
          "| ParamKeyword",
          "| IfKeyword",
          "| ThenKeyword",
          "| ElseKeyword",
          "| MatchKeyword",
          "| WithKeyword",
          "| OtherKeyword"
        ],
        "start_line": 18,
        "end_line": 27,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/token_definitions_unified.ml"
      }
    ],
    "0eda5b40821c8e182d3f6fa6315733a7": [
      {
        "hash": "0eda5b40821c8e182d3f6fa6315733a7",
        "text": "| IfKeyword\n| ThenKeyword\n| ElseKeyword\n| MatchKeyword\n| WithKeyword\n| OtherKeyword\n| TypeKeyword\n| PrivateKeyword\n| TrueKeyword\n| FalseKeyword",
        "lines": [
          "| IfKeyword",
          "| ThenKeyword",
          "| ElseKeyword",
          "| MatchKeyword",
          "| WithKeyword",
          "| OtherKeyword",
          "| TypeKeyword",
          "| PrivateKeyword",
          "| TrueKeyword",
          "| FalseKeyword"
        ],
        "start_line": 20,
        "end_line": 29,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_tokens.ml"
      },
      {
        "hash": "0eda5b40821c8e182d3f6fa6315733a7",
        "text": "| IfKeyword\n| ThenKeyword\n| ElseKeyword\n| MatchKeyword\n| WithKeyword\n| OtherKeyword\n| TypeKeyword\n| PrivateKeyword\n| TrueKeyword\n| FalseKeyword",
        "lines": [
          "| IfKeyword",
          "| ThenKeyword",
          "| ElseKeyword",
          "| MatchKeyword",
          "| WithKeyword",
          "| OtherKeyword",
          "| TypeKeyword",
          "| PrivateKeyword",
          "| TrueKeyword",
          "| FalseKeyword"
        ],
        "start_line": 58,
        "end_line": 67,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_types.ml"
      }
    ],
    "a2a5e8d9edbed47bfd342a40463cb89d": [
      {
        "hash": "a2a5e8d9edbed47bfd342a40463cb89d",
        "text": "| ThenKeyword\n| ElseKeyword\n| MatchKeyword\n| WithKeyword\n| OtherKeyword\n| TypeKeyword\n| PrivateKeyword\n| TrueKeyword\n| FalseKeyword\n| AndKeyword",
        "lines": [
          "| ThenKeyword",
          "| ElseKeyword",
          "| MatchKeyword",
          "| WithKeyword",
          "| OtherKeyword",
          "| TypeKeyword",
          "| PrivateKeyword",
          "| TrueKeyword",
          "| FalseKeyword",
          "| AndKeyword"
        ],
        "start_line": 21,
        "end_line": 30,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_tokens.ml"
      },
      {
        "hash": "a2a5e8d9edbed47bfd342a40463cb89d",
        "text": "| ThenKeyword\n| ElseKeyword\n| MatchKeyword\n| WithKeyword\n| OtherKeyword\n| TypeKeyword\n| PrivateKeyword\n| TrueKeyword\n| FalseKeyword\n| AndKeyword",
        "lines": [
          "| ThenKeyword",
          "| ElseKeyword",
          "| MatchKeyword",
          "| WithKeyword",
          "| OtherKeyword",
          "| TypeKeyword",
          "| PrivateKeyword",
          "| TrueKeyword",
          "| FalseKeyword",
          "| AndKeyword"
        ],
        "start_line": 59,
        "end_line": 68,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_types.ml"
      }
    ],
    "f8a1d77b5cd21869483e5cfd73232777": [
      {
        "hash": "f8a1d77b5cd21869483e5cfd73232777",
        "text": "| ElseKeyword\n| MatchKeyword\n| WithKeyword\n| OtherKeyword\n| TypeKeyword\n| PrivateKeyword\n| TrueKeyword\n| FalseKeyword\n| AndKeyword\n| OrKeyword",
        "lines": [
          "| ElseKeyword",
          "| MatchKeyword",
          "| WithKeyword",
          "| OtherKeyword",
          "| TypeKeyword",
          "| PrivateKeyword",
          "| TrueKeyword",
          "| FalseKeyword",
          "| AndKeyword",
          "| OrKeyword"
        ],
        "start_line": 22,
        "end_line": 31,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_tokens.ml"
      },
      {
        "hash": "f8a1d77b5cd21869483e5cfd73232777",
        "text": "| ElseKeyword\n| MatchKeyword\n| WithKeyword\n| OtherKeyword\n| TypeKeyword\n| PrivateKeyword\n| TrueKeyword\n| FalseKeyword\n| AndKeyword\n| OrKeyword",
        "lines": [
          "| ElseKeyword",
          "| MatchKeyword",
          "| WithKeyword",
          "| OtherKeyword",
          "| TypeKeyword",
          "| PrivateKeyword",
          "| TrueKeyword",
          "| FalseKeyword",
          "| AndKeyword",
          "| OrKeyword"
        ],
        "start_line": 60,
        "end_line": 69,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_types.ml"
      }
    ],
    "114d3d80571a8088b0ed4c4766408929": [
      {
        "hash": "114d3d80571a8088b0ed4c4766408929",
        "text": "| MatchKeyword\n| WithKeyword\n| OtherKeyword\n| TypeKeyword\n| PrivateKeyword\n| TrueKeyword\n| FalseKeyword\n| AndKeyword\n| OrKeyword\n| NotKeyword",
        "lines": [
          "| MatchKeyword",
          "| WithKeyword",
          "| OtherKeyword",
          "| TypeKeyword",
          "| PrivateKeyword",
          "| TrueKeyword",
          "| FalseKeyword",
          "| AndKeyword",
          "| OrKeyword",
          "| NotKeyword"
        ],
        "start_line": 23,
        "end_line": 32,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_tokens.ml"
      },
      {
        "hash": "114d3d80571a8088b0ed4c4766408929",
        "text": "| MatchKeyword\n| WithKeyword\n| OtherKeyword\n| TypeKeyword\n| PrivateKeyword\n| TrueKeyword\n| FalseKeyword\n| AndKeyword\n| OrKeyword\n| NotKeyword",
        "lines": [
          "| MatchKeyword",
          "| WithKeyword",
          "| OtherKeyword",
          "| TypeKeyword",
          "| PrivateKeyword",
          "| TrueKeyword",
          "| FalseKeyword",
          "| AndKeyword",
          "| OrKeyword",
          "| NotKeyword"
        ],
        "start_line": 61,
        "end_line": 70,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_types.ml"
      }
    ],
    "052597f9a6491c988b38a360dffe45ab": [
      {
        "hash": "052597f9a6491c988b38a360dffe45ab",
        "text": "| WithKeyword\n| OtherKeyword\n| TypeKeyword\n| PrivateKeyword\n| TrueKeyword\n| FalseKeyword\n| AndKeyword\n| OrKeyword\n| NotKeyword",
        "lines": [
          "| WithKeyword",
          "| OtherKeyword",
          "| TypeKeyword",
          "| PrivateKeyword",
          "| TrueKeyword",
          "| FalseKeyword",
          "| AndKeyword",
          "| OrKeyword",
          "| NotKeyword"
        ],
        "start_line": 24,
        "end_line": 32,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_tokens.ml"
      },
      {
        "hash": "052597f9a6491c988b38a360dffe45ab",
        "text": "| WithKeyword\n| OtherKeyword\n| TypeKeyword\n| PrivateKeyword\n| TrueKeyword\n| FalseKeyword\n| AndKeyword\n| OrKeyword\n| NotKeyword",
        "lines": [
          "| WithKeyword",
          "| OtherKeyword",
          "| TypeKeyword",
          "| PrivateKeyword",
          "| TrueKeyword",
          "| FalseKeyword",
          "| AndKeyword",
          "| OrKeyword",
          "| NotKeyword"
        ],
        "start_line": 62,
        "end_line": 70,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_types.ml"
      }
    ],
    "03765f89b7690c47fd835b8c1c458ab4": [
      {
        "hash": "03765f89b7690c47fd835b8c1c458ab4",
        "text": "| OtherKeyword\n| TypeKeyword\n| PrivateKeyword\n| TrueKeyword\n| FalseKeyword\n| AndKeyword\n| OrKeyword\n| NotKeyword",
        "lines": [
          "| OtherKeyword",
          "| TypeKeyword",
          "| PrivateKeyword",
          "| TrueKeyword",
          "| FalseKeyword",
          "| AndKeyword",
          "| OrKeyword",
          "| NotKeyword"
        ],
        "start_line": 25,
        "end_line": 32,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_tokens.ml"
      },
      {
        "hash": "03765f89b7690c47fd835b8c1c458ab4",
        "text": "| OtherKeyword\n| TypeKeyword\n| PrivateKeyword\n| TrueKeyword\n| FalseKeyword\n| AndKeyword\n| OrKeyword\n| NotKeyword",
        "lines": [
          "| OtherKeyword",
          "| TypeKeyword",
          "| PrivateKeyword",
          "| TrueKeyword",
          "| FalseKeyword",
          "| AndKeyword",
          "| OrKeyword",
          "| NotKeyword"
        ],
        "start_line": 63,
        "end_line": 70,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_types.ml"
      }
    ],
    "6ff75feb6234eafe33f4ca0a5278f520": [
      {
        "hash": "6ff75feb6234eafe33f4ca0a5278f520",
        "text": "| TypeKeyword\n| PrivateKeyword\n| TrueKeyword\n| FalseKeyword\n| AndKeyword\n| OrKeyword\n| NotKeyword",
        "lines": [
          "| TypeKeyword",
          "| PrivateKeyword",
          "| TrueKeyword",
          "| FalseKeyword",
          "| AndKeyword",
          "| OrKeyword",
          "| NotKeyword"
        ],
        "start_line": 26,
        "end_line": 32,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_tokens.ml"
      },
      {
        "hash": "6ff75feb6234eafe33f4ca0a5278f520",
        "text": "| TypeKeyword\n| PrivateKeyword\n| TrueKeyword\n| FalseKeyword\n| AndKeyword\n| OrKeyword\n| NotKeyword",
        "lines": [
          "| TypeKeyword",
          "| PrivateKeyword",
          "| TrueKeyword",
          "| FalseKeyword",
          "| AndKeyword",
          "| OrKeyword",
          "| NotKeyword"
        ],
        "start_line": 64,
        "end_line": 70,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_types.ml"
      }
    ],
    "0f50d059060e206e3a691033a50a7418": [
      {
        "hash": "0f50d059060e206e3a691033a50a7418",
        "text": "| PrivateKeyword\n| TrueKeyword\n| FalseKeyword\n| AndKeyword\n| OrKeyword\n| NotKeyword",
        "lines": [
          "| PrivateKeyword",
          "| TrueKeyword",
          "| FalseKeyword",
          "| AndKeyword",
          "| OrKeyword",
          "| NotKeyword"
        ],
        "start_line": 27,
        "end_line": 32,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_tokens.ml"
      },
      {
        "hash": "0f50d059060e206e3a691033a50a7418",
        "text": "| PrivateKeyword\n| TrueKeyword\n| FalseKeyword\n| AndKeyword\n| OrKeyword\n| NotKeyword",
        "lines": [
          "| PrivateKeyword",
          "| TrueKeyword",
          "| FalseKeyword",
          "| AndKeyword",
          "| OrKeyword",
          "| NotKeyword"
        ],
        "start_line": 65,
        "end_line": 70,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_types.ml"
      }
    ],
    "2a4a8b262f64dbfdde01d22addb077d2": [
      {
        "hash": "2a4a8b262f64dbfdde01d22addb077d2",
        "text": "| TrueKeyword\n| FalseKeyword\n| AndKeyword\n| OrKeyword\n| NotKeyword",
        "lines": [
          "| TrueKeyword",
          "| FalseKeyword",
          "| AndKeyword",
          "| OrKeyword",
          "| NotKeyword"
        ],
        "start_line": 28,
        "end_line": 32,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_tokens.ml"
      },
      {
        "hash": "2a4a8b262f64dbfdde01d22addb077d2",
        "text": "| TrueKeyword\n| FalseKeyword\n| AndKeyword\n| OrKeyword\n| NotKeyword",
        "lines": [
          "| TrueKeyword",
          "| FalseKeyword",
          "| AndKeyword",
          "| OrKeyword",
          "| NotKeyword"
        ],
        "start_line": 66,
        "end_line": 70,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_types.ml"
      }
    ],
    "2df5c8d9dddb4151568191f765d4ae84": [
      {
        "hash": "2df5c8d9dddb4151568191f765d4ae84",
        "text": "| FalseKeyword\n| AndKeyword\n| OrKeyword\n| NotKeyword",
        "lines": [
          "| FalseKeyword",
          "| AndKeyword",
          "| OrKeyword",
          "| NotKeyword"
        ],
        "start_line": 29,
        "end_line": 32,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_tokens.ml"
      },
      {
        "hash": "2df5c8d9dddb4151568191f765d4ae84",
        "text": "| FalseKeyword\n| AndKeyword\n| OrKeyword\n| NotKeyword",
        "lines": [
          "| FalseKeyword",
          "| AndKeyword",
          "| OrKeyword",
          "| NotKeyword"
        ],
        "start_line": 67,
        "end_line": 70,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_types.ml"
      }
    ],
    "c4c02fdafc3287d8fc2cca8e83f95a5f": [
      {
        "hash": "c4c02fdafc3287d8fc2cca8e83f95a5f",
        "text": "| AndKeyword\n| OrKeyword\n| NotKeyword",
        "lines": [
          "| AndKeyword",
          "| OrKeyword",
          "| NotKeyword"
        ],
        "start_line": 30,
        "end_line": 32,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_tokens.ml"
      },
      {
        "hash": "c4c02fdafc3287d8fc2cca8e83f95a5f",
        "text": "| AndKeyword\n| OrKeyword\n| NotKeyword",
        "lines": [
          "| AndKeyword",
          "| OrKeyword",
          "| NotKeyword"
        ],
        "start_line": 68,
        "end_line": 70,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_types.ml"
      }
    ],
    "e92c1e71349eff69e5d7d7cfa4e37f61": [
      {
        "hash": "e92c1e71349eff69e5d7d7cfa4e37f61",
        "text": "| AsKeyword\n| CombineKeyword\n| WithOpKeyword\n| WhenKeyword",
        "lines": [
          "| AsKeyword",
          "| CombineKeyword",
          "| WithOpKeyword",
          "| WhenKeyword"
        ],
        "start_line": 34,
        "end_line": 37,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_tokens.ml"
      },
      {
        "hash": "e92c1e71349eff69e5d7d7cfa4e37f61",
        "text": "| AsKeyword\n| CombineKeyword\n| WithOpKeyword\n| WhenKeyword",
        "lines": [
          "| AsKeyword",
          "| CombineKeyword",
          "| WithOpKeyword",
          "| WhenKeyword"
        ],
        "start_line": 72,
        "end_line": 75,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_types.ml"
      }
    ],
    "e93fc02ed7c26762d80e1e931380c8dd": [
      {
        "hash": "e93fc02ed7c26762d80e1e931380c8dd",
        "text": "| CombineKeyword\n| WithOpKeyword\n| WhenKeyword",
        "lines": [
          "| CombineKeyword",
          "| WithOpKeyword",
          "| WhenKeyword"
        ],
        "start_line": 35,
        "end_line": 37,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_tokens.ml"
      },
      {
        "hash": "e93fc02ed7c26762d80e1e931380c8dd",
        "text": "| CombineKeyword\n| WithOpKeyword\n| WhenKeyword",
        "lines": [
          "| CombineKeyword",
          "| WithOpKeyword",
          "| WhenKeyword"
        ],
        "start_line": 73,
        "end_line": 75,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_types.ml"
      }
    ],
    "56844a324954d97f8fd046f69b7f4fc3": [
      {
        "hash": "56844a324954d97f8fd046f69b7f4fc3",
        "text": "| ExceptionKeyword\n| RaiseKeyword\n| TryKeyword\n| CatchKeyword\n| FinallyKeyword",
        "lines": [
          "| ExceptionKeyword",
          "| RaiseKeyword",
          "| TryKeyword",
          "| CatchKeyword",
          "| FinallyKeyword"
        ],
        "start_line": 42,
        "end_line": 46,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_tokens.ml"
      },
      {
        "hash": "56844a324954d97f8fd046f69b7f4fc3",
        "text": "| ExceptionKeyword\n| RaiseKeyword\n| TryKeyword\n| CatchKeyword\n| FinallyKeyword",
        "lines": [
          "| ExceptionKeyword",
          "| RaiseKeyword",
          "| TryKeyword",
          "| CatchKeyword",
          "| FinallyKeyword"
        ],
        "start_line": 80,
        "end_line": 84,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_types.ml"
      },
      {
        "hash": "56844a324954d97f8fd046f69b7f4fc3",
        "text": "| ExceptionKeyword\n| RaiseKeyword\n| TryKeyword\n| CatchKeyword\n| FinallyKeyword",
        "lines": [
          "| ExceptionKeyword",
          "| RaiseKeyword",
          "| TryKeyword",
          "| CatchKeyword",
          "| FinallyKeyword"
        ],
        "start_line": 40,
        "end_line": 44,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/token_definitions_unified.ml"
      }
    ],
    "859f16900f4330603fde84a3f393b841": [
      {
        "hash": "859f16900f4330603fde84a3f393b841",
        "text": "| RaiseKeyword\n| TryKeyword\n| CatchKeyword\n| FinallyKeyword",
        "lines": [
          "| RaiseKeyword",
          "| TryKeyword",
          "| CatchKeyword",
          "| FinallyKeyword"
        ],
        "start_line": 43,
        "end_line": 46,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_tokens.ml"
      },
      {
        "hash": "859f16900f4330603fde84a3f393b841",
        "text": "| RaiseKeyword\n| TryKeyword\n| CatchKeyword\n| FinallyKeyword",
        "lines": [
          "| RaiseKeyword",
          "| TryKeyword",
          "| CatchKeyword",
          "| FinallyKeyword"
        ],
        "start_line": 81,
        "end_line": 84,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_types.ml"
      },
      {
        "hash": "859f16900f4330603fde84a3f393b841",
        "text": "| RaiseKeyword\n| TryKeyword\n| CatchKeyword\n| FinallyKeyword",
        "lines": [
          "| RaiseKeyword",
          "| TryKeyword",
          "| CatchKeyword",
          "| FinallyKeyword"
        ],
        "start_line": 41,
        "end_line": 44,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/token_definitions_unified.ml"
      }
    ],
    "bea0dd6aa13a20a95025b62c29675c0a": [
      {
        "hash": "bea0dd6aa13a20a95025b62c29675c0a",
        "text": "| TryKeyword\n| CatchKeyword\n| FinallyKeyword",
        "lines": [
          "| TryKeyword",
          "| CatchKeyword",
          "| FinallyKeyword"
        ],
        "start_line": 44,
        "end_line": 46,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_tokens.ml"
      },
      {
        "hash": "bea0dd6aa13a20a95025b62c29675c0a",
        "text": "| TryKeyword\n| CatchKeyword\n| FinallyKeyword",
        "lines": [
          "| TryKeyword",
          "| CatchKeyword",
          "| FinallyKeyword"
        ],
        "start_line": 82,
        "end_line": 84,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_types.ml"
      },
      {
        "hash": "bea0dd6aa13a20a95025b62c29675c0a",
        "text": "| TryKeyword\n| CatchKeyword\n| FinallyKeyword",
        "lines": [
          "| TryKeyword",
          "| CatchKeyword",
          "| FinallyKeyword"
        ],
        "start_line": 42,
        "end_line": 44,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/token_definitions_unified.ml"
      }
    ],
    "881466c7f74e0d40b80baf17b55879ce": [
      {
        "hash": "881466c7f74e0d40b80baf17b55879ce",
        "text": "| HaveKeyword\n| OneKeyword\n| NameKeyword\n| SetKeyword\n| AlsoKeyword\n| ThenGetKeyword\n| CallKeyword\n| ValueKeyword\n| AsForKeyword\n| NumberKeyword",
        "lines": [
          "| HaveKeyword",
          "| OneKeyword",
          "| NameKeyword",
          "| SetKeyword",
          "| AlsoKeyword",
          "| ThenGetKeyword",
          "| CallKeyword",
          "| ValueKeyword",
          "| AsForKeyword",
          "| NumberKeyword"
        ],
        "start_line": 63,
        "end_line": 72,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_tokens.ml"
      },
      {
        "hash": "881466c7f74e0d40b80baf17b55879ce",
        "text": "| HaveKeyword\n| OneKeyword\n| NameKeyword\n| SetKeyword\n| AlsoKeyword\n| ThenGetKeyword\n| CallKeyword\n| ValueKeyword\n| AsForKeyword\n| NumberKeyword",
        "lines": [
          "| HaveKeyword",
          "| OneKeyword",
          "| NameKeyword",
          "| SetKeyword",
          "| AlsoKeyword",
          "| ThenGetKeyword",
          "| CallKeyword",
          "| ValueKeyword",
          "| AsForKeyword",
          "| NumberKeyword"
        ],
        "start_line": 71,
        "end_line": 80,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/token_definitions_unified.ml"
      }
    ],
    "a2b3572c54978e1dbbd96013064c5102": [
      {
        "hash": "a2b3572c54978e1dbbd96013064c5102",
        "text": "| WantExecuteKeyword\n| MustFirstGetKeyword\n| ForThisKeyword\n| TimesKeyword\n| EndCloudKeyword\n| IfWenyanKeyword\n| ThenWenyanKeyword\n| GreaterThanWenyan\n| LessThanWenyan",
        "lines": [
          "| WantExecuteKeyword",
          "| MustFirstGetKeyword",
          "| ForThisKeyword",
          "| TimesKeyword",
          "| EndCloudKeyword",
          "| IfWenyanKeyword",
          "| ThenWenyanKeyword",
          "| GreaterThanWenyan",
          "| LessThanWenyan"
        ],
        "start_line": 74,
        "end_line": 82,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_tokens.ml"
      },
      {
        "hash": "a2b3572c54978e1dbbd96013064c5102",
        "text": "| WantExecuteKeyword\n| MustFirstGetKeyword\n| ForThisKeyword\n| TimesKeyword\n| EndCloudKeyword\n| IfWenyanKeyword\n| ThenWenyanKeyword\n| GreaterThanWenyan\n| LessThanWenyan",
        "lines": [
          "| WantExecuteKeyword",
          "| MustFirstGetKeyword",
          "| ForThisKeyword",
          "| TimesKeyword",
          "| EndCloudKeyword",
          "| IfWenyanKeyword",
          "| ThenWenyanKeyword",
          "| GreaterThanWenyan",
          "| LessThanWenyan"
        ],
        "start_line": 81,
        "end_line": 89,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/token_definitions_unified.ml"
      }
    ],
    "4095621d1380c696cf8261c2086a777b": [
      {
        "hash": "4095621d1380c696cf8261c2086a777b",
        "text": "| MustFirstGetKeyword\n| ForThisKeyword\n| TimesKeyword\n| EndCloudKeyword\n| IfWenyanKeyword\n| ThenWenyanKeyword\n| GreaterThanWenyan\n| LessThanWenyan",
        "lines": [
          "| MustFirstGetKeyword",
          "| ForThisKeyword",
          "| TimesKeyword",
          "| EndCloudKeyword",
          "| IfWenyanKeyword",
          "| ThenWenyanKeyword",
          "| GreaterThanWenyan",
          "| LessThanWenyan"
        ],
        "start_line": 75,
        "end_line": 82,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_tokens.ml"
      },
      {
        "hash": "4095621d1380c696cf8261c2086a777b",
        "text": "| MustFirstGetKeyword\n| ForThisKeyword\n| TimesKeyword\n| EndCloudKeyword\n| IfWenyanKeyword\n| ThenWenyanKeyword\n| GreaterThanWenyan\n| LessThanWenyan",
        "lines": [
          "| MustFirstGetKeyword",
          "| ForThisKeyword",
          "| TimesKeyword",
          "| EndCloudKeyword",
          "| IfWenyanKeyword",
          "| ThenWenyanKeyword",
          "| GreaterThanWenyan",
          "| LessThanWenyan"
        ],
        "start_line": 82,
        "end_line": 89,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/token_definitions_unified.ml"
      }
    ],
    "7dfec8fd683fb25e4b7034eb885d5182": [
      {
        "hash": "7dfec8fd683fb25e4b7034eb885d5182",
        "text": "| ForThisKeyword\n| TimesKeyword\n| EndCloudKeyword\n| IfWenyanKeyword\n| ThenWenyanKeyword\n| GreaterThanWenyan\n| LessThanWenyan",
        "lines": [
          "| ForThisKeyword",
          "| TimesKeyword",
          "| EndCloudKeyword",
          "| IfWenyanKeyword",
          "| ThenWenyanKeyword",
          "| GreaterThanWenyan",
          "| LessThanWenyan"
        ],
        "start_line": 76,
        "end_line": 82,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_tokens.ml"
      },
      {
        "hash": "7dfec8fd683fb25e4b7034eb885d5182",
        "text": "| ForThisKeyword\n| TimesKeyword\n| EndCloudKeyword\n| IfWenyanKeyword\n| ThenWenyanKeyword\n| GreaterThanWenyan\n| LessThanWenyan",
        "lines": [
          "| ForThisKeyword",
          "| TimesKeyword",
          "| EndCloudKeyword",
          "| IfWenyanKeyword",
          "| ThenWenyanKeyword",
          "| GreaterThanWenyan",
          "| LessThanWenyan"
        ],
        "start_line": 83,
        "end_line": 89,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/token_definitions_unified.ml"
      }
    ],
    "8a7331033f8d470880339fc0d78cda02": [
      {
        "hash": "8a7331033f8d470880339fc0d78cda02",
        "text": "| TimesKeyword\n| EndCloudKeyword\n| IfWenyanKeyword\n| ThenWenyanKeyword\n| GreaterThanWenyan\n| LessThanWenyan",
        "lines": [
          "| TimesKeyword",
          "| EndCloudKeyword",
          "| IfWenyanKeyword",
          "| ThenWenyanKeyword",
          "| GreaterThanWenyan",
          "| LessThanWenyan"
        ],
        "start_line": 77,
        "end_line": 82,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_tokens.ml"
      },
      {
        "hash": "8a7331033f8d470880339fc0d78cda02",
        "text": "| TimesKeyword\n| EndCloudKeyword\n| IfWenyanKeyword\n| ThenWenyanKeyword\n| GreaterThanWenyan\n| LessThanWenyan",
        "lines": [
          "| TimesKeyword",
          "| EndCloudKeyword",
          "| IfWenyanKeyword",
          "| ThenWenyanKeyword",
          "| GreaterThanWenyan",
          "| LessThanWenyan"
        ],
        "start_line": 84,
        "end_line": 89,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/token_definitions_unified.ml"
      }
    ],
    "aeea008c08b11c99a6ff3bbdaed952b6": [
      {
        "hash": "aeea008c08b11c99a6ff3bbdaed952b6",
        "text": "| EndCloudKeyword\n| IfWenyanKeyword\n| ThenWenyanKeyword\n| GreaterThanWenyan\n| LessThanWenyan",
        "lines": [
          "| EndCloudKeyword",
          "| IfWenyanKeyword",
          "| ThenWenyanKeyword",
          "| GreaterThanWenyan",
          "| LessThanWenyan"
        ],
        "start_line": 78,
        "end_line": 82,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_tokens.ml"
      },
      {
        "hash": "aeea008c08b11c99a6ff3bbdaed952b6",
        "text": "| EndCloudKeyword\n| IfWenyanKeyword\n| ThenWenyanKeyword\n| GreaterThanWenyan\n| LessThanWenyan",
        "lines": [
          "| EndCloudKeyword",
          "| IfWenyanKeyword",
          "| ThenWenyanKeyword",
          "| GreaterThanWenyan",
          "| LessThanWenyan"
        ],
        "start_line": 85,
        "end_line": 89,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/token_definitions_unified.ml"
      }
    ],
    "72615ad7bcda06f4256adb5999b719ec": [
      {
        "hash": "72615ad7bcda06f4256adb5999b719ec",
        "text": "| IfWenyanKeyword\n| ThenWenyanKeyword\n| GreaterThanWenyan\n| LessThanWenyan",
        "lines": [
          "| IfWenyanKeyword",
          "| ThenWenyanKeyword",
          "| GreaterThanWenyan",
          "| LessThanWenyan"
        ],
        "start_line": 79,
        "end_line": 82,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_tokens.ml"
      },
      {
        "hash": "72615ad7bcda06f4256adb5999b719ec",
        "text": "| IfWenyanKeyword\n| ThenWenyanKeyword\n| GreaterThanWenyan\n| LessThanWenyan",
        "lines": [
          "| IfWenyanKeyword",
          "| ThenWenyanKeyword",
          "| GreaterThanWenyan",
          "| LessThanWenyan"
        ],
        "start_line": 86,
        "end_line": 89,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/token_definitions_unified.ml"
      }
    ],
    "1422fb4511c7b31f5bfecae6d6bc4368": [
      {
        "hash": "1422fb4511c7b31f5bfecae6d6bc4368",
        "text": "| ThenWenyanKeyword\n| GreaterThanWenyan\n| LessThanWenyan",
        "lines": [
          "| ThenWenyanKeyword",
          "| GreaterThanWenyan",
          "| LessThanWenyan"
        ],
        "start_line": 80,
        "end_line": 82,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_tokens.ml"
      },
      {
        "hash": "1422fb4511c7b31f5bfecae6d6bc4368",
        "text": "| ThenWenyanKeyword\n| GreaterThanWenyan\n| LessThanWenyan",
        "lines": [
          "| ThenWenyanKeyword",
          "| GreaterThanWenyan",
          "| LessThanWenyan"
        ],
        "start_line": 87,
        "end_line": 89,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/token_definitions_unified.ml"
      }
    ],
    "0e2950f7f87c51df7ac4551a54d9886b": [
      {
        "hash": "0e2950f7f87c51df7ac4551a54d9886b",
        "text": "| AncientCallItKeyword\n| AncientListStartKeyword\n| AncientListEndKeyword\n| AncientItsFirstKeyword\n| AncientItsSecondKeyword\n| AncientItsThirdKeyword\n| AncientEmptyKeyword\n| AncientHasHeadTailKeyword\n| AncientHeadNameKeyword\n| AncientTailNameKeyword",
        "lines": [
          "| AncientCallItKeyword",
          "| AncientListStartKeyword",
          "| AncientListEndKeyword",
          "| AncientItsFirstKeyword",
          "| AncientItsSecondKeyword",
          "| AncientItsThirdKeyword",
          "| AncientEmptyKeyword",
          "| AncientHasHeadTailKeyword",
          "| AncientHeadNameKeyword",
          "| AncientTailNameKeyword"
        ],
        "start_line": 102,
        "end_line": 111,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_tokens.ml"
      },
      {
        "hash": "0e2950f7f87c51df7ac4551a54d9886b",
        "text": "| AncientCallItKeyword\n| AncientListStartKeyword\n| AncientListEndKeyword\n| AncientItsFirstKeyword\n| AncientItsSecondKeyword\n| AncientItsThirdKeyword\n| AncientEmptyKeyword\n| AncientHasHeadTailKeyword\n| AncientHeadNameKeyword\n| AncientTailNameKeyword",
        "lines": [
          "| AncientCallItKeyword",
          "| AncientListStartKeyword",
          "| AncientListEndKeyword",
          "| AncientItsFirstKeyword",
          "| AncientItsSecondKeyword",
          "| AncientItsThirdKeyword",
          "| AncientEmptyKeyword",
          "| AncientHasHeadTailKeyword",
          "| AncientHeadNameKeyword",
          "| AncientTailNameKeyword"
        ],
        "start_line": 106,
        "end_line": 115,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/token_definitions_unified.ml"
      }
    ],
    "c6dae99ecebd52e43a1646638fdb17e3": [
      {
        "hash": "c6dae99ecebd52e43a1646638fdb17e3",
        "text": "| AncientListStartKeyword\n| AncientListEndKeyword\n| AncientItsFirstKeyword\n| AncientItsSecondKeyword\n| AncientItsThirdKeyword\n| AncientEmptyKeyword\n| AncientHasHeadTailKeyword\n| AncientHeadNameKeyword\n| AncientTailNameKeyword\n| AncientThusAnswerKeyword",
        "lines": [
          "| AncientListStartKeyword",
          "| AncientListEndKeyword",
          "| AncientItsFirstKeyword",
          "| AncientItsSecondKeyword",
          "| AncientItsThirdKeyword",
          "| AncientEmptyKeyword",
          "| AncientHasHeadTailKeyword",
          "| AncientHeadNameKeyword",
          "| AncientTailNameKeyword",
          "| AncientThusAnswerKeyword"
        ],
        "start_line": 103,
        "end_line": 112,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_tokens.ml"
      },
      {
        "hash": "c6dae99ecebd52e43a1646638fdb17e3",
        "text": "| AncientListStartKeyword\n| AncientListEndKeyword\n| AncientItsFirstKeyword\n| AncientItsSecondKeyword\n| AncientItsThirdKeyword\n| AncientEmptyKeyword\n| AncientHasHeadTailKeyword\n| AncientHeadNameKeyword\n| AncientTailNameKeyword\n| AncientThusAnswerKeyword",
        "lines": [
          "| AncientListStartKeyword",
          "| AncientListEndKeyword",
          "| AncientItsFirstKeyword",
          "| AncientItsSecondKeyword",
          "| AncientItsThirdKeyword",
          "| AncientEmptyKeyword",
          "| AncientHasHeadTailKeyword",
          "| AncientHeadNameKeyword",
          "| AncientTailNameKeyword",
          "| AncientThusAnswerKeyword"
        ],
        "start_line": 107,
        "end_line": 116,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/token_definitions_unified.ml"
      }
    ],
    "c394d722039e318e0503c1bd35d16205": [
      {
        "hash": "c394d722039e318e0503c1bd35d16205",
        "text": "| AncientListEndKeyword\n| AncientItsFirstKeyword\n| AncientItsSecondKeyword\n| AncientItsThirdKeyword\n| AncientEmptyKeyword\n| AncientHasHeadTailKeyword\n| AncientHeadNameKeyword\n| AncientTailNameKeyword\n| AncientThusAnswerKeyword\n| AncientAddToKeyword",
        "lines": [
          "| AncientListEndKeyword",
          "| AncientItsFirstKeyword",
          "| AncientItsSecondKeyword",
          "| AncientItsThirdKeyword",
          "| AncientEmptyKeyword",
          "| AncientHasHeadTailKeyword",
          "| AncientHeadNameKeyword",
          "| AncientTailNameKeyword",
          "| AncientThusAnswerKeyword",
          "| AncientAddToKeyword"
        ],
        "start_line": 104,
        "end_line": 113,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_tokens.ml"
      },
      {
        "hash": "c394d722039e318e0503c1bd35d16205",
        "text": "| AncientListEndKeyword\n| AncientItsFirstKeyword\n| AncientItsSecondKeyword\n| AncientItsThirdKeyword\n| AncientEmptyKeyword\n| AncientHasHeadTailKeyword\n| AncientHeadNameKeyword\n| AncientTailNameKeyword\n| AncientThusAnswerKeyword\n| AncientAddToKeyword",
        "lines": [
          "| AncientListEndKeyword",
          "| AncientItsFirstKeyword",
          "| AncientItsSecondKeyword",
          "| AncientItsThirdKeyword",
          "| AncientEmptyKeyword",
          "| AncientHasHeadTailKeyword",
          "| AncientHeadNameKeyword",
          "| AncientTailNameKeyword",
          "| AncientThusAnswerKeyword",
          "| AncientAddToKeyword"
        ],
        "start_line": 108,
        "end_line": 117,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/token_definitions_unified.ml"
      }
    ],
    "35087874c0c26a6d238ce58bed302412": [
      {
        "hash": "35087874c0c26a6d238ce58bed302412",
        "text": "| AncientItsFirstKeyword\n| AncientItsSecondKeyword\n| AncientItsThirdKeyword\n| AncientEmptyKeyword\n| AncientHasHeadTailKeyword\n| AncientHeadNameKeyword\n| AncientTailNameKeyword\n| AncientThusAnswerKeyword\n| AncientAddToKeyword\n| AncientObserveEndKeyword",
        "lines": [
          "| AncientItsFirstKeyword",
          "| AncientItsSecondKeyword",
          "| AncientItsThirdKeyword",
          "| AncientEmptyKeyword",
          "| AncientHasHeadTailKeyword",
          "| AncientHeadNameKeyword",
          "| AncientTailNameKeyword",
          "| AncientThusAnswerKeyword",
          "| AncientAddToKeyword",
          "| AncientObserveEndKeyword"
        ],
        "start_line": 105,
        "end_line": 114,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_tokens.ml"
      },
      {
        "hash": "35087874c0c26a6d238ce58bed302412",
        "text": "| AncientItsFirstKeyword\n| AncientItsSecondKeyword\n| AncientItsThirdKeyword\n| AncientEmptyKeyword\n| AncientHasHeadTailKeyword\n| AncientHeadNameKeyword\n| AncientTailNameKeyword\n| AncientThusAnswerKeyword\n| AncientAddToKeyword\n| AncientObserveEndKeyword",
        "lines": [
          "| AncientItsFirstKeyword",
          "| AncientItsSecondKeyword",
          "| AncientItsThirdKeyword",
          "| AncientEmptyKeyword",
          "| AncientHasHeadTailKeyword",
          "| AncientHeadNameKeyword",
          "| AncientTailNameKeyword",
          "| AncientThusAnswerKeyword",
          "| AncientAddToKeyword",
          "| AncientObserveEndKeyword"
        ],
        "start_line": 109,
        "end_line": 118,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/token_definitions_unified.ml"
      }
    ],
    "4bf1e730d1ba4610cf92da327bf7be37": [
      {
        "hash": "4bf1e730d1ba4610cf92da327bf7be37",
        "text": "| AncientItsSecondKeyword\n| AncientItsThirdKeyword\n| AncientEmptyKeyword\n| AncientHasHeadTailKeyword\n| AncientHeadNameKeyword\n| AncientTailNameKeyword\n| AncientThusAnswerKeyword\n| AncientAddToKeyword\n| AncientObserveEndKeyword\n| AncientBeginKeyword",
        "lines": [
          "| AncientItsSecondKeyword",
          "| AncientItsThirdKeyword",
          "| AncientEmptyKeyword",
          "| AncientHasHeadTailKeyword",
          "| AncientHeadNameKeyword",
          "| AncientTailNameKeyword",
          "| AncientThusAnswerKeyword",
          "| AncientAddToKeyword",
          "| AncientObserveEndKeyword",
          "| AncientBeginKeyword"
        ],
        "start_line": 106,
        "end_line": 115,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_tokens.ml"
      },
      {
        "hash": "4bf1e730d1ba4610cf92da327bf7be37",
        "text": "| AncientItsSecondKeyword\n| AncientItsThirdKeyword\n| AncientEmptyKeyword\n| AncientHasHeadTailKeyword\n| AncientHeadNameKeyword\n| AncientTailNameKeyword\n| AncientThusAnswerKeyword\n| AncientAddToKeyword\n| AncientObserveEndKeyword\n| AncientBeginKeyword",
        "lines": [
          "| AncientItsSecondKeyword",
          "| AncientItsThirdKeyword",
          "| AncientEmptyKeyword",
          "| AncientHasHeadTailKeyword",
          "| AncientHeadNameKeyword",
          "| AncientTailNameKeyword",
          "| AncientThusAnswerKeyword",
          "| AncientAddToKeyword",
          "| AncientObserveEndKeyword",
          "| AncientBeginKeyword"
        ],
        "start_line": 110,
        "end_line": 119,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/token_definitions_unified.ml"
      }
    ],
    "ef718d4bdbd193c1eb468293be5e47e1": [
      {
        "hash": "ef718d4bdbd193c1eb468293be5e47e1",
        "text": "| AncientItsThirdKeyword\n| AncientEmptyKeyword\n| AncientHasHeadTailKeyword\n| AncientHeadNameKeyword\n| AncientTailNameKeyword\n| AncientThusAnswerKeyword\n| AncientAddToKeyword\n| AncientObserveEndKeyword\n| AncientBeginKeyword\n| AncientEndCompleteKeyword",
        "lines": [
          "| AncientItsThirdKeyword",
          "| AncientEmptyKeyword",
          "| AncientHasHeadTailKeyword",
          "| AncientHeadNameKeyword",
          "| AncientTailNameKeyword",
          "| AncientThusAnswerKeyword",
          "| AncientAddToKeyword",
          "| AncientObserveEndKeyword",
          "| AncientBeginKeyword",
          "| AncientEndCompleteKeyword"
        ],
        "start_line": 107,
        "end_line": 116,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_tokens.ml"
      },
      {
        "hash": "ef718d4bdbd193c1eb468293be5e47e1",
        "text": "| AncientItsThirdKeyword\n| AncientEmptyKeyword\n| AncientHasHeadTailKeyword\n| AncientHeadNameKeyword\n| AncientTailNameKeyword\n| AncientThusAnswerKeyword\n| AncientAddToKeyword\n| AncientObserveEndKeyword\n| AncientBeginKeyword\n| AncientEndCompleteKeyword",
        "lines": [
          "| AncientItsThirdKeyword",
          "| AncientEmptyKeyword",
          "| AncientHasHeadTailKeyword",
          "| AncientHeadNameKeyword",
          "| AncientTailNameKeyword",
          "| AncientThusAnswerKeyword",
          "| AncientAddToKeyword",
          "| AncientObserveEndKeyword",
          "| AncientBeginKeyword",
          "| AncientEndCompleteKeyword"
        ],
        "start_line": 111,
        "end_line": 120,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/token_definitions_unified.ml"
      }
    ],
    "e01a6d4c547b8b10d06c9e892feab828": [
      {
        "hash": "e01a6d4c547b8b10d06c9e892feab828",
        "text": "| IntTypeKeyword\n| FloatTypeKeyword\n| StringTypeKeyword\n| BoolTypeKeyword\n| UnitTypeKeyword\n| ListTypeKeyword\n| ArrayTypeKeyword",
        "lines": [
          "| IntTypeKeyword",
          "| FloatTypeKeyword",
          "| StringTypeKeyword",
          "| BoolTypeKeyword",
          "| UnitTypeKeyword",
          "| ListTypeKeyword",
          "| ArrayTypeKeyword"
        ],
        "start_line": 155,
        "end_line": 161,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_tokens.ml"
      },
      {
        "hash": "e01a6d4c547b8b10d06c9e892feab828",
        "text": "| IntTypeKeyword\n| FloatTypeKeyword\n| StringTypeKeyword\n| BoolTypeKeyword\n| UnitTypeKeyword\n| ListTypeKeyword\n| ArrayTypeKeyword",
        "lines": [
          "| IntTypeKeyword",
          "| FloatTypeKeyword",
          "| StringTypeKeyword",
          "| BoolTypeKeyword",
          "| UnitTypeKeyword",
          "| ListTypeKeyword",
          "| ArrayTypeKeyword"
        ],
        "start_line": 35,
        "end_line": 41,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/unified_token_mapper.ml"
      }
    ],
    "e82caaad21b6b4f946e663b27c7fcacc": [
      {
        "hash": "e82caaad21b6b4f946e663b27c7fcacc",
        "text": "| FloatTypeKeyword\n| StringTypeKeyword\n| BoolTypeKeyword\n| UnitTypeKeyword\n| ListTypeKeyword\n| ArrayTypeKeyword",
        "lines": [
          "| FloatTypeKeyword",
          "| StringTypeKeyword",
          "| BoolTypeKeyword",
          "| UnitTypeKeyword",
          "| ListTypeKeyword",
          "| ArrayTypeKeyword"
        ],
        "start_line": 156,
        "end_line": 161,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_tokens.ml"
      },
      {
        "hash": "e82caaad21b6b4f946e663b27c7fcacc",
        "text": "| FloatTypeKeyword\n| StringTypeKeyword\n| BoolTypeKeyword\n| UnitTypeKeyword\n| ListTypeKeyword\n| ArrayTypeKeyword",
        "lines": [
          "| FloatTypeKeyword",
          "| StringTypeKeyword",
          "| BoolTypeKeyword",
          "| UnitTypeKeyword",
          "| ListTypeKeyword",
          "| ArrayTypeKeyword"
        ],
        "start_line": 36,
        "end_line": 41,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/unified_token_mapper.ml"
      }
    ],
    "97af42099868f9d03b1c1ad8daf9acc3": [
      {
        "hash": "97af42099868f9d03b1c1ad8daf9acc3",
        "text": "| StringTypeKeyword\n| BoolTypeKeyword\n| UnitTypeKeyword\n| ListTypeKeyword\n| ArrayTypeKeyword",
        "lines": [
          "| StringTypeKeyword",
          "| BoolTypeKeyword",
          "| UnitTypeKeyword",
          "| ListTypeKeyword",
          "| ArrayTypeKeyword"
        ],
        "start_line": 157,
        "end_line": 161,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_tokens.ml"
      },
      {
        "hash": "97af42099868f9d03b1c1ad8daf9acc3",
        "text": "| StringTypeKeyword\n| BoolTypeKeyword\n| UnitTypeKeyword\n| ListTypeKeyword\n| ArrayTypeKeyword",
        "lines": [
          "| StringTypeKeyword",
          "| BoolTypeKeyword",
          "| UnitTypeKeyword",
          "| ListTypeKeyword",
          "| ArrayTypeKeyword"
        ],
        "start_line": 37,
        "end_line": 41,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/unified_token_mapper.ml"
      }
    ],
    "19a6f3c153fee738b151a34e44540740": [
      {
        "hash": "19a6f3c153fee738b151a34e44540740",
        "text": "| BoolTypeKeyword\n| UnitTypeKeyword\n| ListTypeKeyword\n| ArrayTypeKeyword",
        "lines": [
          "| BoolTypeKeyword",
          "| UnitTypeKeyword",
          "| ListTypeKeyword",
          "| ArrayTypeKeyword"
        ],
        "start_line": 158,
        "end_line": 161,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_tokens.ml"
      },
      {
        "hash": "19a6f3c153fee738b151a34e44540740",
        "text": "| BoolTypeKeyword\n| UnitTypeKeyword\n| ListTypeKeyword\n| ArrayTypeKeyword",
        "lines": [
          "| BoolTypeKeyword",
          "| UnitTypeKeyword",
          "| ListTypeKeyword",
          "| ArrayTypeKeyword"
        ],
        "start_line": 38,
        "end_line": 41,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/unified_token_mapper.ml"
      }
    ],
    "1393bfbc3703eaf999a5c3dc5ff15781": [
      {
        "hash": "1393bfbc3703eaf999a5c3dc5ff15781",
        "text": "| UnitTypeKeyword\n| ListTypeKeyword\n| ArrayTypeKeyword",
        "lines": [
          "| UnitTypeKeyword",
          "| ListTypeKeyword",
          "| ArrayTypeKeyword"
        ],
        "start_line": 159,
        "end_line": 161,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_tokens.ml"
      },
      {
        "hash": "1393bfbc3703eaf999a5c3dc5ff15781",
        "text": "| UnitTypeKeyword\n| ListTypeKeyword\n| ArrayTypeKeyword",
        "lines": [
          "| UnitTypeKeyword",
          "| ListTypeKeyword",
          "| ArrayTypeKeyword"
        ],
        "start_line": 39,
        "end_line": 41,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/unified_token_mapper.ml"
      }
    ],
    "3fac100c064e36c3daf0e0e67ea11e68": [
      {
        "hash": "3fac100c064e36c3daf0e0e67ea11e68",
        "text": "| LeftParen\n| RightParen\n| LeftBracket\n| RightBracket\n| LeftBrace\n| RightBrace\n| Comma\n| Semicolon\n| Colon\n| QuestionMark",
        "lines": [
          "| LeftParen",
          "| RightParen",
          "| LeftBracket",
          "| RightBracket",
          "| LeftBrace",
          "| RightBrace",
          "| Comma",
          "| Semicolon",
          "| Colon",
          "| QuestionMark"
        ],
        "start_line": 212,
        "end_line": 221,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_tokens.ml"
      },
      {
        "hash": "3fac100c064e36c3daf0e0e67ea11e68",
        "text": "| LeftParen\n| RightParen\n| LeftBracket\n| RightBracket\n| LeftBrace\n| RightBrace\n| Comma\n| Semicolon\n| Colon\n| QuestionMark",
        "lines": [
          "| LeftParen",
          "| RightParen",
          "| LeftBracket",
          "| RightBracket",
          "| LeftBrace",
          "| RightBrace",
          "| Comma",
          "| Semicolon",
          "| Colon",
          "| QuestionMark"
        ],
        "start_line": 181,
        "end_line": 190,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_types.ml"
      }
    ],
    "065efd2a92e79109fb4fe53078eb7afa": [
      {
        "hash": "065efd2a92e79109fb4fe53078eb7afa",
        "text": "| RightParen\n| LeftBracket\n| RightBracket\n| LeftBrace\n| RightBrace\n| Comma\n| Semicolon\n| Colon\n| QuestionMark\n| Tilde",
        "lines": [
          "| RightParen",
          "| LeftBracket",
          "| RightBracket",
          "| LeftBrace",
          "| RightBrace",
          "| Comma",
          "| Semicolon",
          "| Colon",
          "| QuestionMark",
          "| Tilde"
        ],
        "start_line": 213,
        "end_line": 222,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_tokens.ml"
      },
      {
        "hash": "065efd2a92e79109fb4fe53078eb7afa",
        "text": "| RightParen\n| LeftBracket\n| RightBracket\n| LeftBrace\n| RightBrace\n| Comma\n| Semicolon\n| Colon\n| QuestionMark\n| Tilde",
        "lines": [
          "| RightParen",
          "| LeftBracket",
          "| RightBracket",
          "| LeftBrace",
          "| RightBrace",
          "| Comma",
          "| Semicolon",
          "| Colon",
          "| QuestionMark",
          "| Tilde"
        ],
        "start_line": 182,
        "end_line": 191,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_types.ml"
      }
    ],
    "dd4d88909c83b52cebc7efb915eb75b4": [
      {
        "hash": "dd4d88909c83b52cebc7efb915eb75b4",
        "text": "| LeftBracket\n| RightBracket\n| LeftBrace\n| RightBrace\n| Comma\n| Semicolon\n| Colon\n| QuestionMark\n| Tilde\n| Pipe",
        "lines": [
          "| LeftBracket",
          "| RightBracket",
          "| LeftBrace",
          "| RightBrace",
          "| Comma",
          "| Semicolon",
          "| Colon",
          "| QuestionMark",
          "| Tilde",
          "| Pipe"
        ],
        "start_line": 214,
        "end_line": 223,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_tokens.ml"
      },
      {
        "hash": "dd4d88909c83b52cebc7efb915eb75b4",
        "text": "| LeftBracket\n| RightBracket\n| LeftBrace\n| RightBrace\n| Comma\n| Semicolon\n| Colon\n| QuestionMark\n| Tilde\n| Pipe",
        "lines": [
          "| LeftBracket",
          "| RightBracket",
          "| LeftBrace",
          "| RightBrace",
          "| Comma",
          "| Semicolon",
          "| Colon",
          "| QuestionMark",
          "| Tilde",
          "| Pipe"
        ],
        "start_line": 183,
        "end_line": 192,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_types.ml"
      }
    ],
    "269da0b9882cfe8be70fde7a5c151325": [
      {
        "hash": "269da0b9882cfe8be70fde7a5c151325",
        "text": "| RightBracket\n| LeftBrace\n| RightBrace\n| Comma\n| Semicolon\n| Colon\n| QuestionMark\n| Tilde\n| Pipe\n| Underscore",
        "lines": [
          "| RightBracket",
          "| LeftBrace",
          "| RightBrace",
          "| Comma",
          "| Semicolon",
          "| Colon",
          "| QuestionMark",
          "| Tilde",
          "| Pipe",
          "| Underscore"
        ],
        "start_line": 215,
        "end_line": 224,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_tokens.ml"
      },
      {
        "hash": "269da0b9882cfe8be70fde7a5c151325",
        "text": "| RightBracket\n| LeftBrace\n| RightBrace\n| Comma\n| Semicolon\n| Colon\n| QuestionMark\n| Tilde\n| Pipe\n| Underscore",
        "lines": [
          "| RightBracket",
          "| LeftBrace",
          "| RightBrace",
          "| Comma",
          "| Semicolon",
          "| Colon",
          "| QuestionMark",
          "| Tilde",
          "| Pipe",
          "| Underscore"
        ],
        "start_line": 184,
        "end_line": 193,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_types.ml"
      }
    ],
    "864888cde2daffaa1ceca935060c8ad5": [
      {
        "hash": "864888cde2daffaa1ceca935060c8ad5",
        "text": "| LeftBrace\n| RightBrace\n| Comma\n| Semicolon\n| Colon\n| QuestionMark\n| Tilde\n| Pipe\n| Underscore\n| LeftArray",
        "lines": [
          "| LeftBrace",
          "| RightBrace",
          "| Comma",
          "| Semicolon",
          "| Colon",
          "| QuestionMark",
          "| Tilde",
          "| Pipe",
          "| Underscore",
          "| LeftArray"
        ],
        "start_line": 216,
        "end_line": 225,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_tokens.ml"
      },
      {
        "hash": "864888cde2daffaa1ceca935060c8ad5",
        "text": "| LeftBrace\n| RightBrace\n| Comma\n| Semicolon\n| Colon\n| QuestionMark\n| Tilde\n| Pipe\n| Underscore\n| LeftArray",
        "lines": [
          "| LeftBrace",
          "| RightBrace",
          "| Comma",
          "| Semicolon",
          "| Colon",
          "| QuestionMark",
          "| Tilde",
          "| Pipe",
          "| Underscore",
          "| LeftArray"
        ],
        "start_line": 185,
        "end_line": 194,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_types.ml"
      }
    ],
    "5c79f45a4a233a383abf558f05c0b560": [
      {
        "hash": "5c79f45a4a233a383abf558f05c0b560",
        "text": "| RightBrace\n| Comma\n| Semicolon\n| Colon\n| QuestionMark\n| Tilde\n| Pipe\n| Underscore\n| LeftArray\n| RightArray",
        "lines": [
          "| RightBrace",
          "| Comma",
          "| Semicolon",
          "| Colon",
          "| QuestionMark",
          "| Tilde",
          "| Pipe",
          "| Underscore",
          "| LeftArray",
          "| RightArray"
        ],
        "start_line": 217,
        "end_line": 226,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_tokens.ml"
      },
      {
        "hash": "5c79f45a4a233a383abf558f05c0b560",
        "text": "| RightBrace\n| Comma\n| Semicolon\n| Colon\n| QuestionMark\n| Tilde\n| Pipe\n| Underscore\n| LeftArray\n| RightArray",
        "lines": [
          "| RightBrace",
          "| Comma",
          "| Semicolon",
          "| Colon",
          "| QuestionMark",
          "| Tilde",
          "| Pipe",
          "| Underscore",
          "| LeftArray",
          "| RightArray"
        ],
        "start_line": 186,
        "end_line": 195,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_types.ml"
      }
    ],
    "5160980dbe3ffbb6118bc6e5706ea569": [
      {
        "hash": "5160980dbe3ffbb6118bc6e5706ea569",
        "text": "| Comma\n| Semicolon\n| Colon\n| QuestionMark\n| Tilde\n| Pipe\n| Underscore\n| LeftArray\n| RightArray\n| AssignArrow",
        "lines": [
          "| Comma",
          "| Semicolon",
          "| Colon",
          "| QuestionMark",
          "| Tilde",
          "| Pipe",
          "| Underscore",
          "| LeftArray",
          "| RightArray",
          "| AssignArrow"
        ],
        "start_line": 218,
        "end_line": 227,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_tokens.ml"
      },
      {
        "hash": "5160980dbe3ffbb6118bc6e5706ea569",
        "text": "| Comma\n| Semicolon\n| Colon\n| QuestionMark\n| Tilde\n| Pipe\n| Underscore\n| LeftArray\n| RightArray\n| AssignArrow",
        "lines": [
          "| Comma",
          "| Semicolon",
          "| Colon",
          "| QuestionMark",
          "| Tilde",
          "| Pipe",
          "| Underscore",
          "| LeftArray",
          "| RightArray",
          "| AssignArrow"
        ],
        "start_line": 187,
        "end_line": 196,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_types.ml"
      }
    ],
    "6e707788d78d0d8abb56151085d22e79": [
      {
        "hash": "6e707788d78d0d8abb56151085d22e79",
        "text": "| Semicolon\n| Colon\n| QuestionMark\n| Tilde\n| Pipe\n| Underscore\n| LeftArray\n| RightArray\n| AssignArrow\n| LeftQuote",
        "lines": [
          "| Semicolon",
          "| Colon",
          "| QuestionMark",
          "| Tilde",
          "| Pipe",
          "| Underscore",
          "| LeftArray",
          "| RightArray",
          "| AssignArrow",
          "| LeftQuote"
        ],
        "start_line": 219,
        "end_line": 228,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_tokens.ml"
      },
      {
        "hash": "6e707788d78d0d8abb56151085d22e79",
        "text": "| Semicolon\n| Colon\n| QuestionMark\n| Tilde\n| Pipe\n| Underscore\n| LeftArray\n| RightArray\n| AssignArrow\n| LeftQuote",
        "lines": [
          "| Semicolon",
          "| Colon",
          "| QuestionMark",
          "| Tilde",
          "| Pipe",
          "| Underscore",
          "| LeftArray",
          "| RightArray",
          "| AssignArrow",
          "| LeftQuote"
        ],
        "start_line": 188,
        "end_line": 197,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_types.ml"
      }
    ],
    "aa3ec402849d3befb0ae656501c483a5": [
      {
        "hash": "aa3ec402849d3befb0ae656501c483a5",
        "text": "| Colon\n| QuestionMark\n| Tilde\n| Pipe\n| Underscore\n| LeftArray\n| RightArray\n| AssignArrow\n| LeftQuote\n| RightQuote",
        "lines": [
          "| Colon",
          "| QuestionMark",
          "| Tilde",
          "| Pipe",
          "| Underscore",
          "| LeftArray",
          "| RightArray",
          "| AssignArrow",
          "| LeftQuote",
          "| RightQuote"
        ],
        "start_line": 220,
        "end_line": 229,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_tokens.ml"
      },
      {
        "hash": "aa3ec402849d3befb0ae656501c483a5",
        "text": "| Colon\n| QuestionMark\n| Tilde\n| Pipe\n| Underscore\n| LeftArray\n| RightArray\n| AssignArrow\n| LeftQuote\n| RightQuote",
        "lines": [
          "| Colon",
          "| QuestionMark",
          "| Tilde",
          "| Pipe",
          "| Underscore",
          "| LeftArray",
          "| RightArray",
          "| AssignArrow",
          "| LeftQuote",
          "| RightQuote"
        ],
        "start_line": 189,
        "end_line": 198,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_types.ml"
      }
    ],
    "7b3feb4bb9e840b0386f0425dcc85883": [
      {
        "hash": "7b3feb4bb9e840b0386f0425dcc85883",
        "text": "| QuestionMark\n| Tilde\n| Pipe\n| Underscore\n| LeftArray\n| RightArray\n| AssignArrow\n| LeftQuote\n| RightQuote",
        "lines": [
          "| QuestionMark",
          "| Tilde",
          "| Pipe",
          "| Underscore",
          "| LeftArray",
          "| RightArray",
          "| AssignArrow",
          "| LeftQuote",
          "| RightQuote"
        ],
        "start_line": 221,
        "end_line": 229,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_tokens.ml"
      },
      {
        "hash": "7b3feb4bb9e840b0386f0425dcc85883",
        "text": "| QuestionMark\n| Tilde\n| Pipe\n| Underscore\n| LeftArray\n| RightArray\n| AssignArrow\n| LeftQuote\n| RightQuote",
        "lines": [
          "| QuestionMark",
          "| Tilde",
          "| Pipe",
          "| Underscore",
          "| LeftArray",
          "| RightArray",
          "| AssignArrow",
          "| LeftQuote",
          "| RightQuote"
        ],
        "start_line": 190,
        "end_line": 198,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_types.ml"
      }
    ],
    "f277fdd45daf0183b67b4088a6418f96": [
      {
        "hash": "f277fdd45daf0183b67b4088a6418f96",
        "text": "| Tilde\n| Pipe\n| Underscore\n| LeftArray\n| RightArray\n| AssignArrow\n| LeftQuote\n| RightQuote",
        "lines": [
          "| Tilde",
          "| Pipe",
          "| Underscore",
          "| LeftArray",
          "| RightArray",
          "| AssignArrow",
          "| LeftQuote",
          "| RightQuote"
        ],
        "start_line": 222,
        "end_line": 229,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_tokens.ml"
      },
      {
        "hash": "f277fdd45daf0183b67b4088a6418f96",
        "text": "| Tilde\n| Pipe\n| Underscore\n| LeftArray\n| RightArray\n| AssignArrow\n| LeftQuote\n| RightQuote",
        "lines": [
          "| Tilde",
          "| Pipe",
          "| Underscore",
          "| LeftArray",
          "| RightArray",
          "| AssignArrow",
          "| LeftQuote",
          "| RightQuote"
        ],
        "start_line": 191,
        "end_line": 198,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_types.ml"
      }
    ],
    "263df4595281750a486871ef69e3d3f0": [
      {
        "hash": "263df4595281750a486871ef69e3d3f0",
        "text": "| Pipe\n| Underscore\n| LeftArray\n| RightArray\n| AssignArrow\n| LeftQuote\n| RightQuote",
        "lines": [
          "| Pipe",
          "| Underscore",
          "| LeftArray",
          "| RightArray",
          "| AssignArrow",
          "| LeftQuote",
          "| RightQuote"
        ],
        "start_line": 223,
        "end_line": 229,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_tokens.ml"
      },
      {
        "hash": "263df4595281750a486871ef69e3d3f0",
        "text": "| Pipe\n| Underscore\n| LeftArray\n| RightArray\n| AssignArrow\n| LeftQuote\n| RightQuote",
        "lines": [
          "| Pipe",
          "| Underscore",
          "| LeftArray",
          "| RightArray",
          "| AssignArrow",
          "| LeftQuote",
          "| RightQuote"
        ],
        "start_line": 192,
        "end_line": 198,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_types.ml"
      }
    ],
    "43e3c41739addfcfc0909fe3c0bcc890": [
      {
        "hash": "43e3c41739addfcfc0909fe3c0bcc890",
        "text": "| Underscore\n| LeftArray\n| RightArray\n| AssignArrow\n| LeftQuote\n| RightQuote",
        "lines": [
          "| Underscore",
          "| LeftArray",
          "| RightArray",
          "| AssignArrow",
          "| LeftQuote",
          "| RightQuote"
        ],
        "start_line": 224,
        "end_line": 229,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_tokens.ml"
      },
      {
        "hash": "43e3c41739addfcfc0909fe3c0bcc890",
        "text": "| Underscore\n| LeftArray\n| RightArray\n| AssignArrow\n| LeftQuote\n| RightQuote",
        "lines": [
          "| Underscore",
          "| LeftArray",
          "| RightArray",
          "| AssignArrow",
          "| LeftQuote",
          "| RightQuote"
        ],
        "start_line": 193,
        "end_line": 198,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_types.ml"
      }
    ],
    "ac8aaa1708efbf78fdacec62d55b89ba": [
      {
        "hash": "ac8aaa1708efbf78fdacec62d55b89ba",
        "text": "| LeftArray\n| RightArray\n| AssignArrow\n| LeftQuote\n| RightQuote",
        "lines": [
          "| LeftArray",
          "| RightArray",
          "| AssignArrow",
          "| LeftQuote",
          "| RightQuote"
        ],
        "start_line": 225,
        "end_line": 229,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_tokens.ml"
      },
      {
        "hash": "ac8aaa1708efbf78fdacec62d55b89ba",
        "text": "| LeftArray\n| RightArray\n| AssignArrow\n| LeftQuote\n| RightQuote",
        "lines": [
          "| LeftArray",
          "| RightArray",
          "| AssignArrow",
          "| LeftQuote",
          "| RightQuote"
        ],
        "start_line": 194,
        "end_line": 198,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_types.ml"
      }
    ],
    "9f5095e1cfd9abb56935a21b9b3cda40": [
      {
        "hash": "9f5095e1cfd9abb56935a21b9b3cda40",
        "text": "| RightArray\n| AssignArrow\n| LeftQuote\n| RightQuote",
        "lines": [
          "| RightArray",
          "| AssignArrow",
          "| LeftQuote",
          "| RightQuote"
        ],
        "start_line": 226,
        "end_line": 229,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_tokens.ml"
      },
      {
        "hash": "9f5095e1cfd9abb56935a21b9b3cda40",
        "text": "| RightArray\n| AssignArrow\n| LeftQuote\n| RightQuote",
        "lines": [
          "| RightArray",
          "| AssignArrow",
          "| LeftQuote",
          "| RightQuote"
        ],
        "start_line": 195,
        "end_line": 198,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_types.ml"
      }
    ],
    "b49cd5942671234bf792947cf2a805ad": [
      {
        "hash": "b49cd5942671234bf792947cf2a805ad",
        "text": "| AssignArrow\n| LeftQuote\n| RightQuote",
        "lines": [
          "| AssignArrow",
          "| LeftQuote",
          "| RightQuote"
        ],
        "start_line": 227,
        "end_line": 229,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_tokens.ml"
      },
      {
        "hash": "b49cd5942671234bf792947cf2a805ad",
        "text": "| AssignArrow\n| LeftQuote\n| RightQuote",
        "lines": [
          "| AssignArrow",
          "| LeftQuote",
          "| RightQuote"
        ],
        "start_line": 196,
        "end_line": 198,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_types.ml"
      }
    ],
    "bb77f1456588613dd975f711022d7ad3": [
      {
        "hash": "bb77f1456588613dd975f711022d7ad3",
        "text": "| ChineseComma\n| ChineseSemicolon\n| ChineseColon\n| ChineseDoubleColon\n| ChinesePipe\n| ChineseLeftArray\n| ChineseRightArray\n| ChineseArrow\n| ChineseDoubleArrow\n| ChineseAssignArrow",
        "lines": [
          "| ChineseComma",
          "| ChineseSemicolon",
          "| ChineseColon",
          "| ChineseDoubleColon",
          "| ChinesePipe",
          "| ChineseLeftArray",
          "| ChineseRightArray",
          "| ChineseArrow",
          "| ChineseDoubleArrow",
          "| ChineseAssignArrow"
        ],
        "start_line": 237,
        "end_line": 246,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_tokens.ml"
      },
      {
        "hash": "bb77f1456588613dd975f711022d7ad3",
        "text": "| ChineseComma\n| ChineseSemicolon\n| ChineseColon\n| ChineseDoubleColon\n| ChinesePipe\n| ChineseLeftArray\n| ChineseRightArray\n| ChineseArrow\n| ChineseDoubleArrow\n| ChineseAssignArrow",
        "lines": [
          "| ChineseComma",
          "| ChineseSemicolon",
          "| ChineseColon",
          "| ChineseDoubleColon",
          "| ChinesePipe",
          "| ChineseLeftArray",
          "| ChineseRightArray",
          "| ChineseArrow",
          "| ChineseDoubleArrow",
          "| ChineseAssignArrow"
        ],
        "start_line": 204,
        "end_line": 213,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_types.ml"
      }
    ],
    "5babab34522eb690823ae72f2cec4e5f": [
      {
        "hash": "5babab34522eb690823ae72f2cec4e5f",
        "text": "技术债务重构 - Fix #1050\n@author 骆言AI代理\n@version 1.0\n@since 2025-07-24 *)",
        "lines": [
          "技术债务重构 - Fix #1050",
          "@author 骆言AI代理",
          "@version 1.0",
          "@since 2025-07-24 *)"
        ],
        "start_line": 9,
        "end_line": 12,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_constructs.ml"
      },
      {
        "hash": "5babab34522eb690823ae72f2cec4e5f",
        "text": "技术债务重构 - Fix #1050\n@author 骆言AI代理\n@version 1.0\n@since 2025-07-24 *)",
        "lines": [
          "技术债务重构 - Fix #1050",
          "@author 骆言AI代理",
          "@version 1.0",
          "@since 2025-07-24 *)"
        ],
        "start_line": 10,
        "end_line": 13,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_literals.ml"
      },
      {
        "hash": "5babab34522eb690823ae72f2cec4e5f",
        "text": "技术债务重构 - Fix #1050\n@author 骆言AI代理\n@version 1.0\n@since 2025-07-24 *)",
        "lines": [
          "技术债务重构 - Fix #1050",
          "@author 骆言AI代理",
          "@version 1.0",
          "@since 2025-07-24 *)"
        ],
        "start_line": 9,
        "end_line": 12,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_special.ml"
      }
    ],
    "c01eb987b210ade6fe694f1eb46b0a0e": [
      {
        "hash": "c01eb987b210ade6fe694f1eb46b0a0e",
        "text": "let is_type_keyword_token = function\n| IntTypeKeyword | FloatTypeKeyword | StringTypeKeyword | BoolTypeKeyword | ListTypeKeyword\n| ArrayTypeKeyword ->\ntrue\n| _ -> false",
        "lines": [
          "let is_type_keyword_token = function",
          "| IntTypeKeyword | FloatTypeKeyword | StringTypeKeyword | BoolTypeKeyword | ListTypeKeyword",
          "| ArrayTypeKeyword ->",
          "true",
          "| _ -> false"
        ],
        "start_line": 19,
        "end_line": 23,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_constructs.ml"
      },
      {
        "hash": "c01eb987b210ade6fe694f1eb46b0a0e",
        "text": "let is_type_keyword_token = function\n| IntTypeKeyword | FloatTypeKeyword | StringTypeKeyword | BoolTypeKeyword | ListTypeKeyword\n| ArrayTypeKeyword ->\ntrue\n| _ -> false",
        "lines": [
          "let is_type_keyword_token = function",
          "| IntTypeKeyword | FloatTypeKeyword | StringTypeKeyword | BoolTypeKeyword | ListTypeKeyword",
          "| ArrayTypeKeyword ->",
          "true",
          "| _ -> false"
        ],
        "start_line": 201,
        "end_line": 205,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_identifiers.ml"
      }
    ],
    "aa85fcb0d93f87a90d6451266326cfc5": [
      {
        "hash": "aa85fcb0d93f87a90d6451266326cfc5",
        "text": "| IntTypeKeyword | FloatTypeKeyword | StringTypeKeyword | BoolTypeKeyword | ListTypeKeyword\n| ArrayTypeKeyword ->\ntrue\n| _ -> false",
        "lines": [
          "| IntTypeKeyword | FloatTypeKeyword | StringTypeKeyword | BoolTypeKeyword | ListTypeKeyword",
          "| ArrayTypeKeyword ->",
          "true",
          "| _ -> false"
        ],
        "start_line": 20,
        "end_line": 23,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_constructs.ml"
      },
      {
        "hash": "aa85fcb0d93f87a90d6451266326cfc5",
        "text": "| IntTypeKeyword | FloatTypeKeyword | StringTypeKeyword | BoolTypeKeyword | ListTypeKeyword\n| ArrayTypeKeyword ->\ntrue\n| _ -> false",
        "lines": [
          "| IntTypeKeyword | FloatTypeKeyword | StringTypeKeyword | BoolTypeKeyword | ListTypeKeyword",
          "| ArrayTypeKeyword ->",
          "true",
          "| _ -> false"
        ],
        "start_line": 202,
        "end_line": 205,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_identifiers.ml"
      }
    ],
    "21016362638f226ff79e57c7e83405ff": [
      {
        "hash": "21016362638f226ff79e57c7e83405ff",
        "text": "| ArrayTypeKeyword ->\ntrue\n| _ -> false",
        "lines": [
          "| ArrayTypeKeyword ->",
          "true",
          "| _ -> false"
        ],
        "start_line": 21,
        "end_line": 23,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_constructs.ml"
      },
      {
        "hash": "21016362638f226ff79e57c7e83405ff",
        "text": "| ArrayTypeKeyword ->\ntrue\n| _ -> false",
        "lines": [
          "| ArrayTypeKeyword ->",
          "true",
          "| _ -> false"
        ],
        "start_line": 203,
        "end_line": 205,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_identifiers.ml"
      }
    ],
    "7fc3f51ddea00e85ba48ccbd82e1b85a": [
      {
        "hash": "7fc3f51ddea00e85ba48ccbd82e1b85a",
        "text": "let is_container_token = function\n| LeftParen | ChineseLeftParen | LeftArray | ChineseLeftArray | LeftBrace -> true\n| _ -> false",
        "lines": [
          "let is_container_token = function",
          "| LeftParen | ChineseLeftParen | LeftArray | ChineseLeftArray | LeftBrace -> true",
          "| _ -> false"
        ],
        "start_line": 26,
        "end_line": 28,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_constructs.ml"
      },
      {
        "hash": "7fc3f51ddea00e85ba48ccbd82e1b85a",
        "text": "let is_container_token = function\n| LeftParen | ChineseLeftParen | LeftArray | ChineseLeftArray | LeftBrace -> true\n| _ -> false",
        "lines": [
          "let is_container_token = function",
          "| LeftParen | ChineseLeftParen | LeftArray | ChineseLeftArray | LeftBrace -> true",
          "| _ -> false"
        ],
        "start_line": 151,
        "end_line": 153,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_operators.ml"
      }
    ],
    "1a174f4f3c8376af173dd836c191f418": [
      {
        "hash": "1a174f4f3c8376af173dd836c191f418",
        "text": "let state1 = advance_parser state in\nlet tag_name, state2 = parse_identifier state1 in\nlet token, _ = current_token state2 in\nif is_identifier_like token then",
        "lines": [
          "let state1 = advance_parser state in",
          "let tag_name, state2 = parse_identifier state1 in",
          "let token, _ = current_token state2 in",
          "if is_identifier_like token then"
        ],
        "start_line": 33,
        "end_line": 36,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_constructs.ml"
      },
      {
        "hash": "1a174f4f3c8376af173dd836c191f418",
        "text": "let state1 = advance_parser state in\nlet tag_name, state2 = parse_identifier state1 in\nlet token, _ = current_token state2 in\nif is_identifier_like token then",
        "lines": [
          "let state1 = advance_parser state in",
          "let tag_name, state2 = parse_identifier state1 in",
          "let token, _ = current_token state2 in",
          "if is_identifier_like token then"
        ],
        "start_line": 33,
        "end_line": 36,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_operators.ml"
      }
    ],
    "89c862352ee32733e3c695282cb5c26b": [
      {
        "hash": "89c862352ee32733e3c695282cb5c26b",
        "text": "let tag_name, state2 = parse_identifier state1 in\nlet token, _ = current_token state2 in\nif is_identifier_like token then",
        "lines": [
          "let tag_name, state2 = parse_identifier state1 in",
          "let token, _ = current_token state2 in",
          "if is_identifier_like token then"
        ],
        "start_line": 34,
        "end_line": 36,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_constructs.ml"
      },
      {
        "hash": "89c862352ee32733e3c695282cb5c26b",
        "text": "let tag_name, state2 = parse_identifier state1 in\nlet token, _ = current_token state2 in\nif is_identifier_like token then",
        "lines": [
          "let tag_name, state2 = parse_identifier state1 in",
          "let token, _ = current_token state2 in",
          "if is_identifier_like token then"
        ],
        "start_line": 34,
        "end_line": 36,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_operators.ml"
      }
    ],
    "aa7a86e2ab070ff158d2078f71e45b21": [
      {
        "hash": "aa7a86e2ab070ff158d2078f71e45b21",
        "text": "let value_expr, state3 = parse_primary_expr state2 in\n(PolymorphicVariantExpr (tag_name, Some value_expr), state3)\nelse",
        "lines": [
          "let value_expr, state3 = parse_primary_expr state2 in",
          "(PolymorphicVariantExpr (tag_name, Some value_expr), state3)",
          "else"
        ],
        "start_line": 38,
        "end_line": 40,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_constructs.ml"
      },
      {
        "hash": "aa7a86e2ab070ff158d2078f71e45b21",
        "text": "let value_expr, state3 = parse_primary_expr state2 in\n(PolymorphicVariantExpr (tag_name, Some value_expr), state3)\nelse",
        "lines": [
          "let value_expr, state3 = parse_primary_expr state2 in",
          "(PolymorphicVariantExpr (tag_name, Some value_expr), state3)",
          "else"
        ],
        "start_line": 38,
        "end_line": 40,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_operators.ml"
      }
    ],
    "889110023fed14d6aa018cc701d08b73": [
      {
        "hash": "889110023fed14d6aa018cc701d08b73",
        "text": "raise\n(Parser_utils.make_unexpected_token_error\n(\"parse_type_keyword_expr: \" ^ show_token token)\n(snd (current_token state)))",
        "lines": [
          "raise",
          "(Parser_utils.make_unexpected_token_error",
          "(\"parse_type_keyword_expr: \" ^ show_token token)",
          "(snd (current_token state)))"
        ],
        "start_line": 67,
        "end_line": 70,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_constructs.ml"
      },
      {
        "hash": "889110023fed14d6aa018cc701d08b73",
        "text": "raise\n(Parser_utils.make_unexpected_token_error\n(\"parse_type_keyword_expr: \" ^ show_token token)\n(snd (current_token state)))",
        "lines": [
          "raise",
          "(Parser_utils.make_unexpected_token_error",
          "(\"parse_type_keyword_expr: \" ^ show_token token)",
          "(snd (current_token state)))"
        ],
        "start_line": 176,
        "end_line": 179,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_identifiers.ml"
      }
    ],
    "83335b85fb14db3269a5a0620d873233": [
      {
        "hash": "83335b85fb14db3269a5a0620d873233",
        "text": "(Parser_utils.make_unexpected_token_error\n(\"parse_type_keyword_expr: \" ^ show_token token)\n(snd (current_token state)))",
        "lines": [
          "(Parser_utils.make_unexpected_token_error",
          "(\"parse_type_keyword_expr: \" ^ show_token token)",
          "(snd (current_token state)))"
        ],
        "start_line": 68,
        "end_line": 70,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_constructs.ml"
      },
      {
        "hash": "83335b85fb14db3269a5a0620d873233",
        "text": "(Parser_utils.make_unexpected_token_error\n(\"parse_type_keyword_expr: \" ^ show_token token)\n(snd (current_token state)))",
        "lines": [
          "(Parser_utils.make_unexpected_token_error",
          "(\"parse_type_keyword_expr: \" ^ show_token token)",
          "(snd (current_token state)))"
        ],
        "start_line": 177,
        "end_line": 179,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_identifiers.ml"
      }
    ],
    "e25bc1567d2c13862b2b17a72316c75e": [
      {
        "hash": "e25bc1567d2c13862b2b17a72316c75e",
        "text": "let state1 = advance_parser state in\nlet token, _ = current_token state1 in\nif is_right_paren token then",
        "lines": [
          "let state1 = advance_parser state in",
          "let token, _ = current_token state1 in",
          "if is_right_paren token then"
        ],
        "start_line": 74,
        "end_line": 76,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_constructs.ml"
      },
      {
        "hash": "e25bc1567d2c13862b2b17a72316c75e",
        "text": "let state1 = advance_parser state in\nlet token, _ = current_token state1 in\nif is_right_paren token then",
        "lines": [
          "let state1 = advance_parser state in",
          "let token, _ = current_token state1 in",
          "if is_right_paren token then"
        ],
        "start_line": 48,
        "end_line": 50,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_operators.ml"
      }
    ],
    "dda5bc2bb2cb8f9ed028389a7c132c75": [
      {
        "hash": "dda5bc2bb2cb8f9ed028389a7c132c75",
        "text": "| IntType_T\n| FloatType_T\n| StringType_T\n| BoolType_T\n| UnitType_T\n| FunType_T of typ * typ\n| TupleType_T of typ list\n| ListType_T of typ\n| TypeVar_T of string\n| ConstructType_T of string * typ list",
        "lines": [
          "| IntType_T",
          "| FloatType_T",
          "| StringType_T",
          "| BoolType_T",
          "| UnitType_T",
          "| FunType_T of typ * typ",
          "| TupleType_T of typ list",
          "| ListType_T of typ",
          "| TypeVar_T of string",
          "| ConstructType_T of string * typ list"
        ],
        "start_line": 5,
        "end_line": 14,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/types.ml"
      },
      {
        "hash": "dda5bc2bb2cb8f9ed028389a7c132c75",
        "text": "| IntType_T\n| FloatType_T\n| StringType_T\n| BoolType_T\n| UnitType_T\n| FunType_T of typ * typ\n| TupleType_T of typ list\n| ListType_T of typ\n| TypeVar_T of string\n| ConstructType_T of string * typ list",
        "lines": [
          "| IntType_T",
          "| FloatType_T",
          "| StringType_T",
          "| BoolType_T",
          "| UnitType_T",
          "| FunType_T of typ * typ",
          "| TupleType_T of typ list",
          "| ListType_T of typ",
          "| TypeVar_T of string",
          "| ConstructType_T of string * typ list"
        ],
        "start_line": 9,
        "end_line": 18,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/core_types.ml"
      }
    ],
    "63547f9afc62b3fbbb0c9f47352208bf": [
      {
        "hash": "63547f9afc62b3fbbb0c9f47352208bf",
        "text": "| FloatType_T\n| StringType_T\n| BoolType_T\n| UnitType_T\n| FunType_T of typ * typ\n| TupleType_T of typ list\n| ListType_T of typ\n| TypeVar_T of string\n| ConstructType_T of string * typ list\n| RefType_T of typ",
        "lines": [
          "| FloatType_T",
          "| StringType_T",
          "| BoolType_T",
          "| UnitType_T",
          "| FunType_T of typ * typ",
          "| TupleType_T of typ list",
          "| ListType_T of typ",
          "| TypeVar_T of string",
          "| ConstructType_T of string * typ list",
          "| RefType_T of typ"
        ],
        "start_line": 6,
        "end_line": 15,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/types.ml"
      },
      {
        "hash": "63547f9afc62b3fbbb0c9f47352208bf",
        "text": "| FloatType_T\n| StringType_T\n| BoolType_T\n| UnitType_T\n| FunType_T of typ * typ\n| TupleType_T of typ list\n| ListType_T of typ\n| TypeVar_T of string\n| ConstructType_T of string * typ list\n| RefType_T of typ",
        "lines": [
          "| FloatType_T",
          "| StringType_T",
          "| BoolType_T",
          "| UnitType_T",
          "| FunType_T of typ * typ",
          "| TupleType_T of typ list",
          "| ListType_T of typ",
          "| TypeVar_T of string",
          "| ConstructType_T of string * typ list",
          "| RefType_T of typ"
        ],
        "start_line": 10,
        "end_line": 19,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/core_types.ml"
      }
    ],
    "9100ee9c8b2eb0986526ce77cfaac0e5": [
      {
        "hash": "9100ee9c8b2eb0986526ce77cfaac0e5",
        "text": "| StringType_T\n| BoolType_T\n| UnitType_T\n| FunType_T of typ * typ\n| TupleType_T of typ list\n| ListType_T of typ\n| TypeVar_T of string\n| ConstructType_T of string * typ list\n| RefType_T of typ\n| RecordType_T of (string * typ) list",
        "lines": [
          "| StringType_T",
          "| BoolType_T",
          "| UnitType_T",
          "| FunType_T of typ * typ",
          "| TupleType_T of typ list",
          "| ListType_T of typ",
          "| TypeVar_T of string",
          "| ConstructType_T of string * typ list",
          "| RefType_T of typ",
          "| RecordType_T of (string * typ) list"
        ],
        "start_line": 7,
        "end_line": 16,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/types.ml"
      },
      {
        "hash": "9100ee9c8b2eb0986526ce77cfaac0e5",
        "text": "| StringType_T\n| BoolType_T\n| UnitType_T\n| FunType_T of typ * typ\n| TupleType_T of typ list\n| ListType_T of typ\n| TypeVar_T of string\n| ConstructType_T of string * typ list\n| RefType_T of typ\n| RecordType_T of (string * typ) list",
        "lines": [
          "| StringType_T",
          "| BoolType_T",
          "| UnitType_T",
          "| FunType_T of typ * typ",
          "| TupleType_T of typ list",
          "| ListType_T of typ",
          "| TypeVar_T of string",
          "| ConstructType_T of string * typ list",
          "| RefType_T of typ",
          "| RecordType_T of (string * typ) list"
        ],
        "start_line": 11,
        "end_line": 20,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/core_types.ml"
      }
    ],
    "b73241afe2f61d59d34231ca753a6fab": [
      {
        "hash": "b73241afe2f61d59d34231ca753a6fab",
        "text": "| BoolType_T\n| UnitType_T\n| FunType_T of typ * typ\n| TupleType_T of typ list\n| ListType_T of typ\n| TypeVar_T of string\n| ConstructType_T of string * typ list\n| RefType_T of typ\n| RecordType_T of (string * typ) list\n| ArrayType_T of typ",
        "lines": [
          "| BoolType_T",
          "| UnitType_T",
          "| FunType_T of typ * typ",
          "| TupleType_T of typ list",
          "| ListType_T of typ",
          "| TypeVar_T of string",
          "| ConstructType_T of string * typ list",
          "| RefType_T of typ",
          "| RecordType_T of (string * typ) list",
          "| ArrayType_T of typ"
        ],
        "start_line": 8,
        "end_line": 17,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/types.ml"
      },
      {
        "hash": "b73241afe2f61d59d34231ca753a6fab",
        "text": "| BoolType_T\n| UnitType_T\n| FunType_T of typ * typ\n| TupleType_T of typ list\n| ListType_T of typ\n| TypeVar_T of string\n| ConstructType_T of string * typ list\n| RefType_T of typ\n| RecordType_T of (string * typ) list\n| ArrayType_T of typ",
        "lines": [
          "| BoolType_T",
          "| UnitType_T",
          "| FunType_T of typ * typ",
          "| TupleType_T of typ list",
          "| ListType_T of typ",
          "| TypeVar_T of string",
          "| ConstructType_T of string * typ list",
          "| RefType_T of typ",
          "| RecordType_T of (string * typ) list",
          "| ArrayType_T of typ"
        ],
        "start_line": 12,
        "end_line": 21,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/core_types.ml"
      }
    ],
    "1e45f3f0e9cc2c67649b4b59485f2eae": [
      {
        "hash": "1e45f3f0e9cc2c67649b4b59485f2eae",
        "text": "| UnitType_T\n| FunType_T of typ * typ\n| TupleType_T of typ list\n| ListType_T of typ\n| TypeVar_T of string\n| ConstructType_T of string * typ list\n| RefType_T of typ\n| RecordType_T of (string * typ) list\n| ArrayType_T of typ\n| ClassType_T of string * (string * typ) list",
        "lines": [
          "| UnitType_T",
          "| FunType_T of typ * typ",
          "| TupleType_T of typ list",
          "| ListType_T of typ",
          "| TypeVar_T of string",
          "| ConstructType_T of string * typ list",
          "| RefType_T of typ",
          "| RecordType_T of (string * typ) list",
          "| ArrayType_T of typ",
          "| ClassType_T of string * (string * typ) list"
        ],
        "start_line": 9,
        "end_line": 18,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/types.ml"
      },
      {
        "hash": "1e45f3f0e9cc2c67649b4b59485f2eae",
        "text": "| UnitType_T\n| FunType_T of typ * typ\n| TupleType_T of typ list\n| ListType_T of typ\n| TypeVar_T of string\n| ConstructType_T of string * typ list\n| RefType_T of typ\n| RecordType_T of (string * typ) list\n| ArrayType_T of typ\n| ClassType_T of string * (string * typ) list",
        "lines": [
          "| UnitType_T",
          "| FunType_T of typ * typ",
          "| TupleType_T of typ list",
          "| ListType_T of typ",
          "| TypeVar_T of string",
          "| ConstructType_T of string * typ list",
          "| RefType_T of typ",
          "| RecordType_T of (string * typ) list",
          "| ArrayType_T of typ",
          "| ClassType_T of string * (string * typ) list"
        ],
        "start_line": 13,
        "end_line": 22,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/core_types.ml"
      }
    ],
    "788599fb6a020644636f7d708ce149bd": [
      {
        "hash": "788599fb6a020644636f7d708ce149bd",
        "text": "| FunType_T of typ * typ\n| TupleType_T of typ list\n| ListType_T of typ\n| TypeVar_T of string\n| ConstructType_T of string * typ list\n| RefType_T of typ\n| RecordType_T of (string * typ) list\n| ArrayType_T of typ\n| ClassType_T of string * (string * typ) list\n| ObjectType_T of (string * typ) list",
        "lines": [
          "| FunType_T of typ * typ",
          "| TupleType_T of typ list",
          "| ListType_T of typ",
          "| TypeVar_T of string",
          "| ConstructType_T of string * typ list",
          "| RefType_T of typ",
          "| RecordType_T of (string * typ) list",
          "| ArrayType_T of typ",
          "| ClassType_T of string * (string * typ) list",
          "| ObjectType_T of (string * typ) list"
        ],
        "start_line": 10,
        "end_line": 19,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/types.ml"
      },
      {
        "hash": "788599fb6a020644636f7d708ce149bd",
        "text": "| FunType_T of typ * typ\n| TupleType_T of typ list\n| ListType_T of typ\n| TypeVar_T of string\n| ConstructType_T of string * typ list\n| RefType_T of typ\n| RecordType_T of (string * typ) list\n| ArrayType_T of typ\n| ClassType_T of string * (string * typ) list\n| ObjectType_T of (string * typ) list",
        "lines": [
          "| FunType_T of typ * typ",
          "| TupleType_T of typ list",
          "| ListType_T of typ",
          "| TypeVar_T of string",
          "| ConstructType_T of string * typ list",
          "| RefType_T of typ",
          "| RecordType_T of (string * typ) list",
          "| ArrayType_T of typ",
          "| ClassType_T of string * (string * typ) list",
          "| ObjectType_T of (string * typ) list"
        ],
        "start_line": 14,
        "end_line": 23,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/core_types.ml"
      }
    ],
    "29df74b39ee66ef82f7640b66ce66f7d": [
      {
        "hash": "29df74b39ee66ef82f7640b66ce66f7d",
        "text": "| TupleType_T of typ list\n| ListType_T of typ\n| TypeVar_T of string\n| ConstructType_T of string * typ list\n| RefType_T of typ\n| RecordType_T of (string * typ) list\n| ArrayType_T of typ\n| ClassType_T of string * (string * typ) list\n| ObjectType_T of (string * typ) list\n| PrivateType_T of string * typ",
        "lines": [
          "| TupleType_T of typ list",
          "| ListType_T of typ",
          "| TypeVar_T of string",
          "| ConstructType_T of string * typ list",
          "| RefType_T of typ",
          "| RecordType_T of (string * typ) list",
          "| ArrayType_T of typ",
          "| ClassType_T of string * (string * typ) list",
          "| ObjectType_T of (string * typ) list",
          "| PrivateType_T of string * typ"
        ],
        "start_line": 11,
        "end_line": 20,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/types.ml"
      },
      {
        "hash": "29df74b39ee66ef82f7640b66ce66f7d",
        "text": "| TupleType_T of typ list\n| ListType_T of typ\n| TypeVar_T of string\n| ConstructType_T of string * typ list\n| RefType_T of typ\n| RecordType_T of (string * typ) list\n| ArrayType_T of typ\n| ClassType_T of string * (string * typ) list\n| ObjectType_T of (string * typ) list\n| PrivateType_T of string * typ",
        "lines": [
          "| TupleType_T of typ list",
          "| ListType_T of typ",
          "| TypeVar_T of string",
          "| ConstructType_T of string * typ list",
          "| RefType_T of typ",
          "| RecordType_T of (string * typ) list",
          "| ArrayType_T of typ",
          "| ClassType_T of string * (string * typ) list",
          "| ObjectType_T of (string * typ) list",
          "| PrivateType_T of string * typ"
        ],
        "start_line": 15,
        "end_line": 24,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/core_types.ml"
      }
    ],
    "1cb487cecae7a7a48c25a0cdea41cd59": [
      {
        "hash": "1cb487cecae7a7a48c25a0cdea41cd59",
        "text": "| ListType_T of typ\n| TypeVar_T of string\n| ConstructType_T of string * typ list\n| RefType_T of typ\n| RecordType_T of (string * typ) list\n| ArrayType_T of typ\n| ClassType_T of string * (string * typ) list\n| ObjectType_T of (string * typ) list\n| PrivateType_T of string * typ\n| PolymorphicVariantType_T of (string * typ option) list",
        "lines": [
          "| ListType_T of typ",
          "| TypeVar_T of string",
          "| ConstructType_T of string * typ list",
          "| RefType_T of typ",
          "| RecordType_T of (string * typ) list",
          "| ArrayType_T of typ",
          "| ClassType_T of string * (string * typ) list",
          "| ObjectType_T of (string * typ) list",
          "| PrivateType_T of string * typ",
          "| PolymorphicVariantType_T of (string * typ option) list"
        ],
        "start_line": 12,
        "end_line": 21,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/types.ml"
      },
      {
        "hash": "1cb487cecae7a7a48c25a0cdea41cd59",
        "text": "| ListType_T of typ\n| TypeVar_T of string\n| ConstructType_T of string * typ list\n| RefType_T of typ\n| RecordType_T of (string * typ) list\n| ArrayType_T of typ\n| ClassType_T of string * (string * typ) list\n| ObjectType_T of (string * typ) list\n| PrivateType_T of string * typ\n| PolymorphicVariantType_T of (string * typ option) list",
        "lines": [
          "| ListType_T of typ",
          "| TypeVar_T of string",
          "| ConstructType_T of string * typ list",
          "| RefType_T of typ",
          "| RecordType_T of (string * typ) list",
          "| ArrayType_T of typ",
          "| ClassType_T of string * (string * typ) list",
          "| ObjectType_T of (string * typ) list",
          "| PrivateType_T of string * typ",
          "| PolymorphicVariantType_T of (string * typ option) list"
        ],
        "start_line": 16,
        "end_line": 25,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/core_types.ml"
      }
    ],
    "979acaca5832e6832d641465eba5b881": [
      {
        "hash": "979acaca5832e6832d641465eba5b881",
        "text": "| TypeVar_T of string\n| ConstructType_T of string * typ list\n| RefType_T of typ\n| RecordType_T of (string * typ) list\n| ArrayType_T of typ\n| ClassType_T of string * (string * typ) list\n| ObjectType_T of (string * typ) list\n| PrivateType_T of string * typ\n| PolymorphicVariantType_T of (string * typ option) list\n[@@deriving show, eq]",
        "lines": [
          "| TypeVar_T of string",
          "| ConstructType_T of string * typ list",
          "| RefType_T of typ",
          "| RecordType_T of (string * typ) list",
          "| ArrayType_T of typ",
          "| ClassType_T of string * (string * typ) list",
          "| ObjectType_T of (string * typ) list",
          "| PrivateType_T of string * typ",
          "| PolymorphicVariantType_T of (string * typ option) list",
          "[@@deriving show, eq]"
        ],
        "start_line": 13,
        "end_line": 22,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/types.ml"
      },
      {
        "hash": "979acaca5832e6832d641465eba5b881",
        "text": "| TypeVar_T of string\n| ConstructType_T of string * typ list\n| RefType_T of typ\n| RecordType_T of (string * typ) list\n| ArrayType_T of typ\n| ClassType_T of string * (string * typ) list\n| ObjectType_T of (string * typ) list\n| PrivateType_T of string * typ\n| PolymorphicVariantType_T of (string * typ option) list\n[@@deriving show, eq]",
        "lines": [
          "| TypeVar_T of string",
          "| ConstructType_T of string * typ list",
          "| RefType_T of typ",
          "| RecordType_T of (string * typ) list",
          "| ArrayType_T of typ",
          "| ClassType_T of string * (string * typ) list",
          "| ObjectType_T of (string * typ) list",
          "| PrivateType_T of string * typ",
          "| PolymorphicVariantType_T of (string * typ option) list",
          "[@@deriving show, eq]"
        ],
        "start_line": 17,
        "end_line": 26,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/core_types.ml"
      }
    ],
    "55700c48242d5b1611e6f6d61b5f4fb3": [
      {
        "hash": "55700c48242d5b1611e6f6d61b5f4fb3",
        "text": "| ConstructType_T of string * typ list\n| RefType_T of typ\n| RecordType_T of (string * typ) list\n| ArrayType_T of typ\n| ClassType_T of string * (string * typ) list\n| ObjectType_T of (string * typ) list\n| PrivateType_T of string * typ\n| PolymorphicVariantType_T of (string * typ option) list\n[@@deriving show, eq]",
        "lines": [
          "| ConstructType_T of string * typ list",
          "| RefType_T of typ",
          "| RecordType_T of (string * typ) list",
          "| ArrayType_T of typ",
          "| ClassType_T of string * (string * typ) list",
          "| ObjectType_T of (string * typ) list",
          "| PrivateType_T of string * typ",
          "| PolymorphicVariantType_T of (string * typ option) list",
          "[@@deriving show, eq]"
        ],
        "start_line": 14,
        "end_line": 22,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/types.ml"
      },
      {
        "hash": "55700c48242d5b1611e6f6d61b5f4fb3",
        "text": "| ConstructType_T of string * typ list\n| RefType_T of typ\n| RecordType_T of (string * typ) list\n| ArrayType_T of typ\n| ClassType_T of string * (string * typ) list\n| ObjectType_T of (string * typ) list\n| PrivateType_T of string * typ\n| PolymorphicVariantType_T of (string * typ option) list\n[@@deriving show, eq]",
        "lines": [
          "| ConstructType_T of string * typ list",
          "| RefType_T of typ",
          "| RecordType_T of (string * typ) list",
          "| ArrayType_T of typ",
          "| ClassType_T of string * (string * typ) list",
          "| ObjectType_T of (string * typ) list",
          "| PrivateType_T of string * typ",
          "| PolymorphicVariantType_T of (string * typ option) list",
          "[@@deriving show, eq]"
        ],
        "start_line": 18,
        "end_line": 26,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/core_types.ml"
      }
    ],
    "c7ea3e9c750157d762c103e91093d5c1": [
      {
        "hash": "c7ea3e9c750157d762c103e91093d5c1",
        "text": "| RefType_T of typ\n| RecordType_T of (string * typ) list\n| ArrayType_T of typ\n| ClassType_T of string * (string * typ) list\n| ObjectType_T of (string * typ) list\n| PrivateType_T of string * typ\n| PolymorphicVariantType_T of (string * typ option) list\n[@@deriving show, eq]",
        "lines": [
          "| RefType_T of typ",
          "| RecordType_T of (string * typ) list",
          "| ArrayType_T of typ",
          "| ClassType_T of string * (string * typ) list",
          "| ObjectType_T of (string * typ) list",
          "| PrivateType_T of string * typ",
          "| PolymorphicVariantType_T of (string * typ option) list",
          "[@@deriving show, eq]"
        ],
        "start_line": 15,
        "end_line": 22,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/types.ml"
      },
      {
        "hash": "c7ea3e9c750157d762c103e91093d5c1",
        "text": "| RefType_T of typ\n| RecordType_T of (string * typ) list\n| ArrayType_T of typ\n| ClassType_T of string * (string * typ) list\n| ObjectType_T of (string * typ) list\n| PrivateType_T of string * typ\n| PolymorphicVariantType_T of (string * typ option) list\n[@@deriving show, eq]",
        "lines": [
          "| RefType_T of typ",
          "| RecordType_T of (string * typ) list",
          "| ArrayType_T of typ",
          "| ClassType_T of string * (string * typ) list",
          "| ObjectType_T of (string * typ) list",
          "| PrivateType_T of string * typ",
          "| PolymorphicVariantType_T of (string * typ option) list",
          "[@@deriving show, eq]"
        ],
        "start_line": 19,
        "end_line": 26,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/core_types.ml"
      }
    ],
    "d6ba50a19a203f3549817243f82d1631": [
      {
        "hash": "d6ba50a19a203f3549817243f82d1631",
        "text": "| RecordType_T of (string * typ) list\n| ArrayType_T of typ\n| ClassType_T of string * (string * typ) list\n| ObjectType_T of (string * typ) list\n| PrivateType_T of string * typ\n| PolymorphicVariantType_T of (string * typ option) list\n[@@deriving show, eq]",
        "lines": [
          "| RecordType_T of (string * typ) list",
          "| ArrayType_T of typ",
          "| ClassType_T of string * (string * typ) list",
          "| ObjectType_T of (string * typ) list",
          "| PrivateType_T of string * typ",
          "| PolymorphicVariantType_T of (string * typ option) list",
          "[@@deriving show, eq]"
        ],
        "start_line": 16,
        "end_line": 22,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/types.ml"
      },
      {
        "hash": "d6ba50a19a203f3549817243f82d1631",
        "text": "| RecordType_T of (string * typ) list\n| ArrayType_T of typ\n| ClassType_T of string * (string * typ) list\n| ObjectType_T of (string * typ) list\n| PrivateType_T of string * typ\n| PolymorphicVariantType_T of (string * typ option) list\n[@@deriving show, eq]",
        "lines": [
          "| RecordType_T of (string * typ) list",
          "| ArrayType_T of typ",
          "| ClassType_T of string * (string * typ) list",
          "| ObjectType_T of (string * typ) list",
          "| PrivateType_T of string * typ",
          "| PolymorphicVariantType_T of (string * typ option) list",
          "[@@deriving show, eq]"
        ],
        "start_line": 20,
        "end_line": 26,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/core_types.ml"
      }
    ],
    "4ebb6ff03a6f684099e3bbf9af15ef22": [
      {
        "hash": "4ebb6ff03a6f684099e3bbf9af15ef22",
        "text": "| ArrayType_T of typ\n| ClassType_T of string * (string * typ) list\n| ObjectType_T of (string * typ) list\n| PrivateType_T of string * typ\n| PolymorphicVariantType_T of (string * typ option) list\n[@@deriving show, eq]",
        "lines": [
          "| ArrayType_T of typ",
          "| ClassType_T of string * (string * typ) list",
          "| ObjectType_T of (string * typ) list",
          "| PrivateType_T of string * typ",
          "| PolymorphicVariantType_T of (string * typ option) list",
          "[@@deriving show, eq]"
        ],
        "start_line": 17,
        "end_line": 22,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/types.ml"
      },
      {
        "hash": "4ebb6ff03a6f684099e3bbf9af15ef22",
        "text": "| ArrayType_T of typ\n| ClassType_T of string * (string * typ) list\n| ObjectType_T of (string * typ) list\n| PrivateType_T of string * typ\n| PolymorphicVariantType_T of (string * typ option) list\n[@@deriving show, eq]",
        "lines": [
          "| ArrayType_T of typ",
          "| ClassType_T of string * (string * typ) list",
          "| ObjectType_T of (string * typ) list",
          "| PrivateType_T of string * typ",
          "| PolymorphicVariantType_T of (string * typ option) list",
          "[@@deriving show, eq]"
        ],
        "start_line": 21,
        "end_line": 26,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/core_types.ml"
      }
    ],
    "c3933e698b131c93351310f213203435": [
      {
        "hash": "c3933e698b131c93351310f213203435",
        "text": "| ClassType_T of string * (string * typ) list\n| ObjectType_T of (string * typ) list\n| PrivateType_T of string * typ\n| PolymorphicVariantType_T of (string * typ option) list\n[@@deriving show, eq]",
        "lines": [
          "| ClassType_T of string * (string * typ) list",
          "| ObjectType_T of (string * typ) list",
          "| PrivateType_T of string * typ",
          "| PolymorphicVariantType_T of (string * typ option) list",
          "[@@deriving show, eq]"
        ],
        "start_line": 18,
        "end_line": 22,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/types.ml"
      },
      {
        "hash": "c3933e698b131c93351310f213203435",
        "text": "| ClassType_T of string * (string * typ) list\n| ObjectType_T of (string * typ) list\n| PrivateType_T of string * typ\n| PolymorphicVariantType_T of (string * typ option) list\n[@@deriving show, eq]",
        "lines": [
          "| ClassType_T of string * (string * typ) list",
          "| ObjectType_T of (string * typ) list",
          "| PrivateType_T of string * typ",
          "| PolymorphicVariantType_T of (string * typ option) list",
          "[@@deriving show, eq]"
        ],
        "start_line": 22,
        "end_line": 26,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/core_types.ml"
      }
    ],
    "d80b88cc068032ff1acedcfc89c0cb77": [
      {
        "hash": "d80b88cc068032ff1acedcfc89c0cb77",
        "text": "| ObjectType_T of (string * typ) list\n| PrivateType_T of string * typ\n| PolymorphicVariantType_T of (string * typ option) list\n[@@deriving show, eq]",
        "lines": [
          "| ObjectType_T of (string * typ) list",
          "| PrivateType_T of string * typ",
          "| PolymorphicVariantType_T of (string * typ option) list",
          "[@@deriving show, eq]"
        ],
        "start_line": 19,
        "end_line": 22,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/types.ml"
      },
      {
        "hash": "d80b88cc068032ff1acedcfc89c0cb77",
        "text": "| ObjectType_T of (string * typ) list\n| PrivateType_T of string * typ\n| PolymorphicVariantType_T of (string * typ option) list\n[@@deriving show, eq]",
        "lines": [
          "| ObjectType_T of (string * typ) list",
          "| PrivateType_T of string * typ",
          "| PolymorphicVariantType_T of (string * typ option) list",
          "[@@deriving show, eq]"
        ],
        "start_line": 23,
        "end_line": 26,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/core_types.ml"
      }
    ],
    "2ac60ad6155894f4439a9bc29ccdb603": [
      {
        "hash": "2ac60ad6155894f4439a9bc29ccdb603",
        "text": "| PrivateType_T of string * typ\n| PolymorphicVariantType_T of (string * typ option) list\n[@@deriving show, eq]",
        "lines": [
          "| PrivateType_T of string * typ",
          "| PolymorphicVariantType_T of (string * typ option) list",
          "[@@deriving show, eq]"
        ],
        "start_line": 20,
        "end_line": 22,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/types.ml"
      },
      {
        "hash": "2ac60ad6155894f4439a9bc29ccdb603",
        "text": "| PrivateType_T of string * typ\n| PolymorphicVariantType_T of (string * typ option) list\n[@@deriving show, eq]",
        "lines": [
          "| PrivateType_T of string * typ",
          "| PolymorphicVariantType_T of (string * typ option) list",
          "[@@deriving show, eq]"
        ],
        "start_line": 24,
        "end_line": 26,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/core_types.ml"
      }
    ],
    "ea1837ed767c132085684d1ec9797707": [
      {
        "hash": "ea1837ed767c132085684d1ec9797707",
        "text": "let parse_ancient_expr parse_expr state =\nlet token, _ = current_token state in\nmatch token with\n| AncientDefineKeyword -> Parser_ancient.parse_ancient_function_definition parse_expr state\n| AncientObserveKeyword ->\nParser_ancient.parse_ancient_match_expression parse_expr Parser_patterns.parse_pattern\nstate\n| AncientListStartKeyword -> Parser_ancient.parse_ancient_list_expression parse_expr state\n| _ ->\nraise",
        "lines": [
          "let parse_ancient_expr parse_expr state =",
          "let token, _ = current_token state in",
          "match token with",
          "| AncientDefineKeyword -> Parser_ancient.parse_ancient_function_definition parse_expr state",
          "| AncientObserveKeyword ->",
          "Parser_ancient.parse_ancient_match_expression parse_expr Parser_patterns.parse_pattern",
          "state",
          "| AncientListStartKeyword -> Parser_ancient.parse_ancient_list_expression parse_expr state",
          "| _ ->",
          "raise"
        ],
        "start_line": 85,
        "end_line": 94,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_operators.ml"
      },
      {
        "hash": "ea1837ed767c132085684d1ec9797707",
        "text": "let parse_ancient_expr parse_expr state =\nlet token, _ = current_token state in\nmatch token with\n| AncientDefineKeyword -> Parser_ancient.parse_ancient_function_definition parse_expr state\n| AncientObserveKeyword ->\nParser_ancient.parse_ancient_match_expression parse_expr Parser_patterns.parse_pattern\nstate\n| AncientListStartKeyword -> Parser_ancient.parse_ancient_list_expression parse_expr state\n| _ ->\nraise",
        "lines": [
          "let parse_ancient_expr parse_expr state =",
          "let token, _ = current_token state in",
          "match token with",
          "| AncientDefineKeyword -> Parser_ancient.parse_ancient_function_definition parse_expr state",
          "| AncientObserveKeyword ->",
          "Parser_ancient.parse_ancient_match_expression parse_expr Parser_patterns.parse_pattern",
          "state",
          "| AncientListStartKeyword -> Parser_ancient.parse_ancient_list_expression parse_expr state",
          "| _ ->",
          "raise"
        ],
        "start_line": 49,
        "end_line": 58,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_special.ml"
      }
    ],
    "2a743a9fcbdf3c3f601fcbeaa6a39eac": [
      {
        "hash": "2a743a9fcbdf3c3f601fcbeaa6a39eac",
        "text": "let token, _ = current_token state in\nmatch token with\n| AncientDefineKeyword -> Parser_ancient.parse_ancient_function_definition parse_expr state\n| AncientObserveKeyword ->\nParser_ancient.parse_ancient_match_expression parse_expr Parser_patterns.parse_pattern\nstate\n| AncientListStartKeyword -> Parser_ancient.parse_ancient_list_expression parse_expr state\n| _ ->\nraise\n(Parser_utils.make_unexpected_token_error",
        "lines": [
          "let token, _ = current_token state in",
          "match token with",
          "| AncientDefineKeyword -> Parser_ancient.parse_ancient_function_definition parse_expr state",
          "| AncientObserveKeyword ->",
          "Parser_ancient.parse_ancient_match_expression parse_expr Parser_patterns.parse_pattern",
          "state",
          "| AncientListStartKeyword -> Parser_ancient.parse_ancient_list_expression parse_expr state",
          "| _ ->",
          "raise",
          "(Parser_utils.make_unexpected_token_error"
        ],
        "start_line": 86,
        "end_line": 95,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_operators.ml"
      },
      {
        "hash": "2a743a9fcbdf3c3f601fcbeaa6a39eac",
        "text": "let token, _ = current_token state in\nmatch token with\n| AncientDefineKeyword -> Parser_ancient.parse_ancient_function_definition parse_expr state\n| AncientObserveKeyword ->\nParser_ancient.parse_ancient_match_expression parse_expr Parser_patterns.parse_pattern\nstate\n| AncientListStartKeyword -> Parser_ancient.parse_ancient_list_expression parse_expr state\n| _ ->\nraise\n(Parser_utils.make_unexpected_token_error",
        "lines": [
          "let token, _ = current_token state in",
          "match token with",
          "| AncientDefineKeyword -> Parser_ancient.parse_ancient_function_definition parse_expr state",
          "| AncientObserveKeyword ->",
          "Parser_ancient.parse_ancient_match_expression parse_expr Parser_patterns.parse_pattern",
          "state",
          "| AncientListStartKeyword -> Parser_ancient.parse_ancient_list_expression parse_expr state",
          "| _ ->",
          "raise",
          "(Parser_utils.make_unexpected_token_error"
        ],
        "start_line": 50,
        "end_line": 59,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_special.ml"
      }
    ],
    "050d518403734a2d07cae1eb437c131b": [
      {
        "hash": "050d518403734a2d07cae1eb437c131b",
        "text": "match token with\n| AncientDefineKeyword -> Parser_ancient.parse_ancient_function_definition parse_expr state\n| AncientObserveKeyword ->\nParser_ancient.parse_ancient_match_expression parse_expr Parser_patterns.parse_pattern\nstate\n| AncientListStartKeyword -> Parser_ancient.parse_ancient_list_expression parse_expr state\n| _ ->\nraise\n(Parser_utils.make_unexpected_token_error\n(\"parse_ancient_expr: \" ^ show_token token)",
        "lines": [
          "match token with",
          "| AncientDefineKeyword -> Parser_ancient.parse_ancient_function_definition parse_expr state",
          "| AncientObserveKeyword ->",
          "Parser_ancient.parse_ancient_match_expression parse_expr Parser_patterns.parse_pattern",
          "state",
          "| AncientListStartKeyword -> Parser_ancient.parse_ancient_list_expression parse_expr state",
          "| _ ->",
          "raise",
          "(Parser_utils.make_unexpected_token_error",
          "(\"parse_ancient_expr: \" ^ show_token token)"
        ],
        "start_line": 87,
        "end_line": 96,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_operators.ml"
      },
      {
        "hash": "050d518403734a2d07cae1eb437c131b",
        "text": "match token with\n| AncientDefineKeyword -> Parser_ancient.parse_ancient_function_definition parse_expr state\n| AncientObserveKeyword ->\nParser_ancient.parse_ancient_match_expression parse_expr Parser_patterns.parse_pattern\nstate\n| AncientListStartKeyword -> Parser_ancient.parse_ancient_list_expression parse_expr state\n| _ ->\nraise\n(Parser_utils.make_unexpected_token_error\n(\"parse_ancient_expr: \" ^ show_token token)",
        "lines": [
          "match token with",
          "| AncientDefineKeyword -> Parser_ancient.parse_ancient_function_definition parse_expr state",
          "| AncientObserveKeyword ->",
          "Parser_ancient.parse_ancient_match_expression parse_expr Parser_patterns.parse_pattern",
          "state",
          "| AncientListStartKeyword -> Parser_ancient.parse_ancient_list_expression parse_expr state",
          "| _ ->",
          "raise",
          "(Parser_utils.make_unexpected_token_error",
          "(\"parse_ancient_expr: \" ^ show_token token)"
        ],
        "start_line": 51,
        "end_line": 60,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_special.ml"
      }
    ],
    "7bba3208842011d99b77430def865494": [
      {
        "hash": "7bba3208842011d99b77430def865494",
        "text": "| AncientDefineKeyword -> Parser_ancient.parse_ancient_function_definition parse_expr state\n| AncientObserveKeyword ->\nParser_ancient.parse_ancient_match_expression parse_expr Parser_patterns.parse_pattern\nstate\n| AncientListStartKeyword -> Parser_ancient.parse_ancient_list_expression parse_expr state\n| _ ->\nraise\n(Parser_utils.make_unexpected_token_error\n(\"parse_ancient_expr: \" ^ show_token token)\n(snd (current_token state)))",
        "lines": [
          "| AncientDefineKeyword -> Parser_ancient.parse_ancient_function_definition parse_expr state",
          "| AncientObserveKeyword ->",
          "Parser_ancient.parse_ancient_match_expression parse_expr Parser_patterns.parse_pattern",
          "state",
          "| AncientListStartKeyword -> Parser_ancient.parse_ancient_list_expression parse_expr state",
          "| _ ->",
          "raise",
          "(Parser_utils.make_unexpected_token_error",
          "(\"parse_ancient_expr: \" ^ show_token token)",
          "(snd (current_token state)))"
        ],
        "start_line": 88,
        "end_line": 97,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_operators.ml"
      },
      {
        "hash": "7bba3208842011d99b77430def865494",
        "text": "| AncientDefineKeyword -> Parser_ancient.parse_ancient_function_definition parse_expr state\n| AncientObserveKeyword ->\nParser_ancient.parse_ancient_match_expression parse_expr Parser_patterns.parse_pattern\nstate\n| AncientListStartKeyword -> Parser_ancient.parse_ancient_list_expression parse_expr state\n| _ ->\nraise\n(Parser_utils.make_unexpected_token_error\n(\"parse_ancient_expr: \" ^ show_token token)\n(snd (current_token state)))",
        "lines": [
          "| AncientDefineKeyword -> Parser_ancient.parse_ancient_function_definition parse_expr state",
          "| AncientObserveKeyword ->",
          "Parser_ancient.parse_ancient_match_expression parse_expr Parser_patterns.parse_pattern",
          "state",
          "| AncientListStartKeyword -> Parser_ancient.parse_ancient_list_expression parse_expr state",
          "| _ ->",
          "raise",
          "(Parser_utils.make_unexpected_token_error",
          "(\"parse_ancient_expr: \" ^ show_token token)",
          "(snd (current_token state)))"
        ],
        "start_line": 52,
        "end_line": 61,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_special.ml"
      }
    ],
    "5ebfe497181f55f70559a4c23363c6a3": [
      {
        "hash": "5ebfe497181f55f70559a4c23363c6a3",
        "text": "| AncientObserveKeyword ->\nParser_ancient.parse_ancient_match_expression parse_expr Parser_patterns.parse_pattern\nstate\n| AncientListStartKeyword -> Parser_ancient.parse_ancient_list_expression parse_expr state\n| _ ->\nraise\n(Parser_utils.make_unexpected_token_error\n(\"parse_ancient_expr: \" ^ show_token token)\n(snd (current_token state)))",
        "lines": [
          "| AncientObserveKeyword ->",
          "Parser_ancient.parse_ancient_match_expression parse_expr Parser_patterns.parse_pattern",
          "state",
          "| AncientListStartKeyword -> Parser_ancient.parse_ancient_list_expression parse_expr state",
          "| _ ->",
          "raise",
          "(Parser_utils.make_unexpected_token_error",
          "(\"parse_ancient_expr: \" ^ show_token token)",
          "(snd (current_token state)))"
        ],
        "start_line": 89,
        "end_line": 97,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_operators.ml"
      },
      {
        "hash": "5ebfe497181f55f70559a4c23363c6a3",
        "text": "| AncientObserveKeyword ->\nParser_ancient.parse_ancient_match_expression parse_expr Parser_patterns.parse_pattern\nstate\n| AncientListStartKeyword -> Parser_ancient.parse_ancient_list_expression parse_expr state\n| _ ->\nraise\n(Parser_utils.make_unexpected_token_error\n(\"parse_ancient_expr: \" ^ show_token token)\n(snd (current_token state)))",
        "lines": [
          "| AncientObserveKeyword ->",
          "Parser_ancient.parse_ancient_match_expression parse_expr Parser_patterns.parse_pattern",
          "state",
          "| AncientListStartKeyword -> Parser_ancient.parse_ancient_list_expression parse_expr state",
          "| _ ->",
          "raise",
          "(Parser_utils.make_unexpected_token_error",
          "(\"parse_ancient_expr: \" ^ show_token token)",
          "(snd (current_token state)))"
        ],
        "start_line": 53,
        "end_line": 61,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_special.ml"
      }
    ],
    "e838c6f386d0a2dd4ecb9e678e8d0cf5": [
      {
        "hash": "e838c6f386d0a2dd4ecb9e678e8d0cf5",
        "text": "Parser_ancient.parse_ancient_match_expression parse_expr Parser_patterns.parse_pattern\nstate\n| AncientListStartKeyword -> Parser_ancient.parse_ancient_list_expression parse_expr state\n| _ ->\nraise\n(Parser_utils.make_unexpected_token_error\n(\"parse_ancient_expr: \" ^ show_token token)\n(snd (current_token state)))",
        "lines": [
          "Parser_ancient.parse_ancient_match_expression parse_expr Parser_patterns.parse_pattern",
          "state",
          "| AncientListStartKeyword -> Parser_ancient.parse_ancient_list_expression parse_expr state",
          "| _ ->",
          "raise",
          "(Parser_utils.make_unexpected_token_error",
          "(\"parse_ancient_expr: \" ^ show_token token)",
          "(snd (current_token state)))"
        ],
        "start_line": 90,
        "end_line": 97,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_operators.ml"
      },
      {
        "hash": "e838c6f386d0a2dd4ecb9e678e8d0cf5",
        "text": "Parser_ancient.parse_ancient_match_expression parse_expr Parser_patterns.parse_pattern\nstate\n| AncientListStartKeyword -> Parser_ancient.parse_ancient_list_expression parse_expr state\n| _ ->\nraise\n(Parser_utils.make_unexpected_token_error\n(\"parse_ancient_expr: \" ^ show_token token)\n(snd (current_token state)))",
        "lines": [
          "Parser_ancient.parse_ancient_match_expression parse_expr Parser_patterns.parse_pattern",
          "state",
          "| AncientListStartKeyword -> Parser_ancient.parse_ancient_list_expression parse_expr state",
          "| _ ->",
          "raise",
          "(Parser_utils.make_unexpected_token_error",
          "(\"parse_ancient_expr: \" ^ show_token token)",
          "(snd (current_token state)))"
        ],
        "start_line": 54,
        "end_line": 61,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_special.ml"
      }
    ],
    "ee85a4cf5011e0d8d8ccc551bc214663": [
      {
        "hash": "ee85a4cf5011e0d8d8ccc551bc214663",
        "text": "state\n| AncientListStartKeyword -> Parser_ancient.parse_ancient_list_expression parse_expr state\n| _ ->\nraise\n(Parser_utils.make_unexpected_token_error\n(\"parse_ancient_expr: \" ^ show_token token)\n(snd (current_token state)))",
        "lines": [
          "state",
          "| AncientListStartKeyword -> Parser_ancient.parse_ancient_list_expression parse_expr state",
          "| _ ->",
          "raise",
          "(Parser_utils.make_unexpected_token_error",
          "(\"parse_ancient_expr: \" ^ show_token token)",
          "(snd (current_token state)))"
        ],
        "start_line": 91,
        "end_line": 97,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_operators.ml"
      },
      {
        "hash": "ee85a4cf5011e0d8d8ccc551bc214663",
        "text": "state\n| AncientListStartKeyword -> Parser_ancient.parse_ancient_list_expression parse_expr state\n| _ ->\nraise\n(Parser_utils.make_unexpected_token_error\n(\"parse_ancient_expr: \" ^ show_token token)\n(snd (current_token state)))",
        "lines": [
          "state",
          "| AncientListStartKeyword -> Parser_ancient.parse_ancient_list_expression parse_expr state",
          "| _ ->",
          "raise",
          "(Parser_utils.make_unexpected_token_error",
          "(\"parse_ancient_expr: \" ^ show_token token)",
          "(snd (current_token state)))"
        ],
        "start_line": 55,
        "end_line": 61,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_special.ml"
      }
    ],
    "d8c4a801975aeaf276e9f39377fb8488": [
      {
        "hash": "d8c4a801975aeaf276e9f39377fb8488",
        "text": "| AncientListStartKeyword -> Parser_ancient.parse_ancient_list_expression parse_expr state\n| _ ->\nraise\n(Parser_utils.make_unexpected_token_error\n(\"parse_ancient_expr: \" ^ show_token token)\n(snd (current_token state)))",
        "lines": [
          "| AncientListStartKeyword -> Parser_ancient.parse_ancient_list_expression parse_expr state",
          "| _ ->",
          "raise",
          "(Parser_utils.make_unexpected_token_error",
          "(\"parse_ancient_expr: \" ^ show_token token)",
          "(snd (current_token state)))"
        ],
        "start_line": 92,
        "end_line": 97,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_operators.ml"
      },
      {
        "hash": "d8c4a801975aeaf276e9f39377fb8488",
        "text": "| AncientListStartKeyword -> Parser_ancient.parse_ancient_list_expression parse_expr state\n| _ ->\nraise\n(Parser_utils.make_unexpected_token_error\n(\"parse_ancient_expr: \" ^ show_token token)\n(snd (current_token state)))",
        "lines": [
          "| AncientListStartKeyword -> Parser_ancient.parse_ancient_list_expression parse_expr state",
          "| _ ->",
          "raise",
          "(Parser_utils.make_unexpected_token_error",
          "(\"parse_ancient_expr: \" ^ show_token token)",
          "(snd (current_token state)))"
        ],
        "start_line": 56,
        "end_line": 61,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_special.ml"
      }
    ],
    "63b4dda4ea01b54d75fcf0bc3820327a": [
      {
        "hash": "63b4dda4ea01b54d75fcf0bc3820327a",
        "text": "| _ ->\nraise\n(Parser_utils.make_unexpected_token_error\n(\"parse_ancient_expr: \" ^ show_token token)\n(snd (current_token state)))",
        "lines": [
          "| _ ->",
          "raise",
          "(Parser_utils.make_unexpected_token_error",
          "(\"parse_ancient_expr: \" ^ show_token token)",
          "(snd (current_token state)))"
        ],
        "start_line": 93,
        "end_line": 97,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_operators.ml"
      },
      {
        "hash": "63b4dda4ea01b54d75fcf0bc3820327a",
        "text": "| _ ->\nraise\n(Parser_utils.make_unexpected_token_error\n(\"parse_ancient_expr: \" ^ show_token token)\n(snd (current_token state)))",
        "lines": [
          "| _ ->",
          "raise",
          "(Parser_utils.make_unexpected_token_error",
          "(\"parse_ancient_expr: \" ^ show_token token)",
          "(snd (current_token state)))"
        ],
        "start_line": 57,
        "end_line": 61,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_special.ml"
      }
    ],
    "e53b301165cb83bfd95beb525d2dc414": [
      {
        "hash": "e53b301165cb83bfd95beb525d2dc414",
        "text": "raise\n(Parser_utils.make_unexpected_token_error\n(\"parse_ancient_expr: \" ^ show_token token)\n(snd (current_token state)))",
        "lines": [
          "raise",
          "(Parser_utils.make_unexpected_token_error",
          "(\"parse_ancient_expr: \" ^ show_token token)",
          "(snd (current_token state)))"
        ],
        "start_line": 94,
        "end_line": 97,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_operators.ml"
      },
      {
        "hash": "e53b301165cb83bfd95beb525d2dc414",
        "text": "raise\n(Parser_utils.make_unexpected_token_error\n(\"parse_ancient_expr: \" ^ show_token token)\n(snd (current_token state)))",
        "lines": [
          "raise",
          "(Parser_utils.make_unexpected_token_error",
          "(\"parse_ancient_expr: \" ^ show_token token)",
          "(snd (current_token state)))"
        ],
        "start_line": 58,
        "end_line": 61,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_special.ml"
      }
    ],
    "00ccb77c14b393532c807cb313185f78": [
      {
        "hash": "00ccb77c14b393532c807cb313185f78",
        "text": "(Parser_utils.make_unexpected_token_error\n(\"parse_ancient_expr: \" ^ show_token token)\n(snd (current_token state)))",
        "lines": [
          "(Parser_utils.make_unexpected_token_error",
          "(\"parse_ancient_expr: \" ^ show_token token)",
          "(snd (current_token state)))"
        ],
        "start_line": 95,
        "end_line": 97,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_operators.ml"
      },
      {
        "hash": "00ccb77c14b393532c807cb313185f78",
        "text": "(Parser_utils.make_unexpected_token_error\n(\"parse_ancient_expr: \" ^ show_token token)\n(snd (current_token state)))",
        "lines": [
          "(Parser_utils.make_unexpected_token_error",
          "(\"parse_ancient_expr: \" ^ show_token token)",
          "(snd (current_token state)))"
        ],
        "start_line": 59,
        "end_line": 61,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_special.ml"
      }
    ],
    "d0cc681ab34f22295512e8789967b274": [
      {
        "hash": "d0cc681ab34f22295512e8789967b274",
        "text": "| AncientDefineKeyword | AncientObserveKeyword | AncientListStartKeyword ->\nparse_ancient_expr parse_expr state\n| _ ->\nraise\n(Parser_utils.make_unexpected_token_error\n(\"parse_special_keyword_exprs: 不支持的特殊token \" ^ show_token token)\npos)",
        "lines": [
          "| AncientDefineKeyword | AncientObserveKeyword | AncientListStartKeyword ->",
          "parse_ancient_expr parse_expr state",
          "| _ ->",
          "raise",
          "(Parser_utils.make_unexpected_token_error",
          "(\"parse_special_keyword_exprs: 不支持的特殊token \" ^ show_token token)",
          "pos)"
        ],
        "start_line": 140,
        "end_line": 146,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_operators.ml"
      },
      {
        "hash": "d0cc681ab34f22295512e8789967b274",
        "text": "| AncientDefineKeyword | AncientObserveKeyword | AncientListStartKeyword ->\nparse_ancient_expr parse_expr state\n| _ ->\nraise\n(Parser_utils.make_unexpected_token_error\n(\"parse_special_keyword_exprs: 不支持的特殊token \" ^ show_token token)\npos)",
        "lines": [
          "| AncientDefineKeyword | AncientObserveKeyword | AncientListStartKeyword ->",
          "parse_ancient_expr parse_expr state",
          "| _ ->",
          "raise",
          "(Parser_utils.make_unexpected_token_error",
          "(\"parse_special_keyword_exprs: 不支持的特殊token \" ^ show_token token)",
          "pos)"
        ],
        "start_line": 80,
        "end_line": 86,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_special.ml"
      }
    ],
    "719771e3bd3e948c651e6c0d1fe2ba5a": [
      {
        "hash": "719771e3bd3e948c651e6c0d1fe2ba5a",
        "text": "parse_ancient_expr parse_expr state\n| _ ->\nraise\n(Parser_utils.make_unexpected_token_error\n(\"parse_special_keyword_exprs: 不支持的特殊token \" ^ show_token token)\npos)",
        "lines": [
          "parse_ancient_expr parse_expr state",
          "| _ ->",
          "raise",
          "(Parser_utils.make_unexpected_token_error",
          "(\"parse_special_keyword_exprs: 不支持的特殊token \" ^ show_token token)",
          "pos)"
        ],
        "start_line": 141,
        "end_line": 146,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_operators.ml"
      },
      {
        "hash": "719771e3bd3e948c651e6c0d1fe2ba5a",
        "text": "parse_ancient_expr parse_expr state\n| _ ->\nraise\n(Parser_utils.make_unexpected_token_error\n(\"parse_special_keyword_exprs: 不支持的特殊token \" ^ show_token token)\npos)",
        "lines": [
          "parse_ancient_expr parse_expr state",
          "| _ ->",
          "raise",
          "(Parser_utils.make_unexpected_token_error",
          "(\"parse_special_keyword_exprs: 不支持的特殊token \" ^ show_token token)",
          "pos)"
        ],
        "start_line": 81,
        "end_line": 86,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_special.ml"
      }
    ],
    "199bff4255ac482dded74006e1a90b61": [
      {
        "hash": "199bff4255ac482dded74006e1a90b61",
        "text": "| _ ->\nraise\n(Parser_utils.make_unexpected_token_error\n(\"parse_special_keyword_exprs: 不支持的特殊token \" ^ show_token token)\npos)",
        "lines": [
          "| _ ->",
          "raise",
          "(Parser_utils.make_unexpected_token_error",
          "(\"parse_special_keyword_exprs: 不支持的特殊token \" ^ show_token token)",
          "pos)"
        ],
        "start_line": 142,
        "end_line": 146,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_operators.ml"
      },
      {
        "hash": "199bff4255ac482dded74006e1a90b61",
        "text": "| _ ->\nraise\n(Parser_utils.make_unexpected_token_error\n(\"parse_special_keyword_exprs: 不支持的特殊token \" ^ show_token token)\npos)",
        "lines": [
          "| _ ->",
          "raise",
          "(Parser_utils.make_unexpected_token_error",
          "(\"parse_special_keyword_exprs: 不支持的特殊token \" ^ show_token token)",
          "pos)"
        ],
        "start_line": 82,
        "end_line": 86,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_special.ml"
      }
    ],
    "29b465cb9f380e3788d77f3d9f72e1d3": [
      {
        "hash": "29b465cb9f380e3788d77f3d9f72e1d3",
        "text": "raise\n(Parser_utils.make_unexpected_token_error\n(\"parse_special_keyword_exprs: 不支持的特殊token \" ^ show_token token)\npos)",
        "lines": [
          "raise",
          "(Parser_utils.make_unexpected_token_error",
          "(\"parse_special_keyword_exprs: 不支持的特殊token \" ^ show_token token)",
          "pos)"
        ],
        "start_line": 143,
        "end_line": 146,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_operators.ml"
      },
      {
        "hash": "29b465cb9f380e3788d77f3d9f72e1d3",
        "text": "raise\n(Parser_utils.make_unexpected_token_error\n(\"parse_special_keyword_exprs: 不支持的特殊token \" ^ show_token token)\npos)",
        "lines": [
          "raise",
          "(Parser_utils.make_unexpected_token_error",
          "(\"parse_special_keyword_exprs: 不支持的特殊token \" ^ show_token token)",
          "pos)"
        ],
        "start_line": 83,
        "end_line": 86,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_special.ml"
      }
    ],
    "9e770e55e35fd8b808f140bf79d9fd68": [
      {
        "hash": "9e770e55e35fd8b808f140bf79d9fd68",
        "text": "(Parser_utils.make_unexpected_token_error\n(\"parse_special_keyword_exprs: 不支持的特殊token \" ^ show_token token)\npos)",
        "lines": [
          "(Parser_utils.make_unexpected_token_error",
          "(\"parse_special_keyword_exprs: 不支持的特殊token \" ^ show_token token)",
          "pos)"
        ],
        "start_line": 144,
        "end_line": 146,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_operators.ml"
      },
      {
        "hash": "9e770e55e35fd8b808f140bf79d9fd68",
        "text": "(Parser_utils.make_unexpected_token_error\n(\"parse_special_keyword_exprs: 不支持的特殊token \" ^ show_token token)\npos)",
        "lines": [
          "(Parser_utils.make_unexpected_token_error",
          "(\"parse_special_keyword_exprs: 不支持的特殊token \" ^ show_token token)",
          "pos)"
        ],
        "start_line": 84,
        "end_line": 86,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_special.ml"
      }
    ],
    "ed8850031b3e9f715e50c29f9d9480fd": [
      {
        "hash": "ed8850031b3e9f715e50c29f9d9480fd",
        "text": "let is_special_keyword_token = function\n| ModuleKeyword | CombineKeyword | ParallelStructKeyword | FiveCharKeyword | SevenCharKeyword\n| AncientDefineKeyword | AncientObserveKeyword | AncientListStartKeyword ->\ntrue\n| _ -> false",
        "lines": [
          "let is_special_keyword_token = function",
          "| ModuleKeyword | CombineKeyword | ParallelStructKeyword | FiveCharKeyword | SevenCharKeyword",
          "| AncientDefineKeyword | AncientObserveKeyword | AncientListStartKeyword ->",
          "true",
          "| _ -> false"
        ],
        "start_line": 156,
        "end_line": 160,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_operators.ml"
      },
      {
        "hash": "ed8850031b3e9f715e50c29f9d9480fd",
        "text": "let is_special_keyword_token = function\n| ModuleKeyword | CombineKeyword | ParallelStructKeyword | FiveCharKeyword | SevenCharKeyword\n| AncientDefineKeyword | AncientObserveKeyword | AncientListStartKeyword ->\ntrue\n| _ -> false",
        "lines": [
          "let is_special_keyword_token = function",
          "| ModuleKeyword | CombineKeyword | ParallelStructKeyword | FiveCharKeyword | SevenCharKeyword",
          "| AncientDefineKeyword | AncientObserveKeyword | AncientListStartKeyword ->",
          "true",
          "| _ -> false"
        ],
        "start_line": 18,
        "end_line": 22,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_special.ml"
      }
    ],
    "17374566fe4c07a1a03a9f3d9cf440e6": [
      {
        "hash": "17374566fe4c07a1a03a9f3d9cf440e6",
        "text": "| ModuleKeyword | CombineKeyword | ParallelStructKeyword | FiveCharKeyword | SevenCharKeyword\n| AncientDefineKeyword | AncientObserveKeyword | AncientListStartKeyword ->\ntrue\n| _ -> false",
        "lines": [
          "| ModuleKeyword | CombineKeyword | ParallelStructKeyword | FiveCharKeyword | SevenCharKeyword",
          "| AncientDefineKeyword | AncientObserveKeyword | AncientListStartKeyword ->",
          "true",
          "| _ -> false"
        ],
        "start_line": 157,
        "end_line": 160,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_operators.ml"
      },
      {
        "hash": "17374566fe4c07a1a03a9f3d9cf440e6",
        "text": "| ModuleKeyword | CombineKeyword | ParallelStructKeyword | FiveCharKeyword | SevenCharKeyword\n| AncientDefineKeyword | AncientObserveKeyword | AncientListStartKeyword ->\ntrue\n| _ -> false",
        "lines": [
          "| ModuleKeyword | CombineKeyword | ParallelStructKeyword | FiveCharKeyword | SevenCharKeyword",
          "| AncientDefineKeyword | AncientObserveKeyword | AncientListStartKeyword ->",
          "true",
          "| _ -> false"
        ],
        "start_line": 19,
        "end_line": 22,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_special.ml"
      }
    ],
    "7427e635f0e364088cc47fcf832874f6": [
      {
        "hash": "7427e635f0e364088cc47fcf832874f6",
        "text": "| AncientDefineKeyword | AncientObserveKeyword | AncientListStartKeyword ->\ntrue\n| _ -> false",
        "lines": [
          "| AncientDefineKeyword | AncientObserveKeyword | AncientListStartKeyword ->",
          "true",
          "| _ -> false"
        ],
        "start_line": 158,
        "end_line": 160,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_operators.ml"
      },
      {
        "hash": "7427e635f0e364088cc47fcf832874f6",
        "text": "| AncientDefineKeyword | AncientObserveKeyword | AncientListStartKeyword ->\ntrue\n| _ -> false",
        "lines": [
          "| AncientDefineKeyword | AncientObserveKeyword | AncientListStartKeyword ->",
          "true",
          "| _ -> false"
        ],
        "start_line": 20,
        "end_line": 22,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_special.ml"
      }
    ],
    "2fc14921e77ffd97696969dd924321e9": [
      {
        "hash": "2fc14921e77ffd97696969dd924321e9",
        "text": "let parse_literal_expr state =\nlet token, _ = current_token state in\nmatch token with\n| IntToken _ | ChineseNumberToken _ | FloatToken _ | StringToken _ ->\nlet literal, state1 = parse_literal state in\n(LitExpr literal, state1)\n| BoolToken _ -> (",
        "lines": [
          "let parse_literal_expr state =",
          "let token, _ = current_token state in",
          "match token with",
          "| IntToken _ | ChineseNumberToken _ | FloatToken _ | StringToken _ ->",
          "let literal, state1 = parse_literal state in",
          "(LitExpr literal, state1)",
          "| BoolToken _ -> ("
        ],
        "start_line": 16,
        "end_line": 22,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_literals.ml"
      },
      {
        "hash": "2fc14921e77ffd97696969dd924321e9",
        "text": "let parse_literal_expr state =\nlet token, _ = current_token state in\nmatch token with\n| IntToken _ | ChineseNumberToken _ | FloatToken _ | StringToken _ ->\nlet literal, state1 = parse_literal state in\n(LitExpr literal, state1)\n| BoolToken _ -> (",
        "lines": [
          "let parse_literal_expr state =",
          "let token, _ = current_token state in",
          "match token with",
          "| IntToken _ | ChineseNumberToken _ | FloatToken _ | StringToken _ ->",
          "let literal, state1 = parse_literal state in",
          "(LitExpr literal, state1)",
          "| BoolToken _ -> ("
        ],
        "start_line": 27,
        "end_line": 33,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_literals.ml"
      }
    ],
    "27e960439e46bace93495224157bfe8d": [
      {
        "hash": "27e960439e46bace93495224157bfe8d",
        "text": "let token, _ = current_token state in\nmatch token with\n| IntToken _ | ChineseNumberToken _ | FloatToken _ | StringToken _ ->\nlet literal, state1 = parse_literal state in\n(LitExpr literal, state1)\n| BoolToken _ -> (",
        "lines": [
          "let token, _ = current_token state in",
          "match token with",
          "| IntToken _ | ChineseNumberToken _ | FloatToken _ | StringToken _ ->",
          "let literal, state1 = parse_literal state in",
          "(LitExpr literal, state1)",
          "| BoolToken _ -> ("
        ],
        "start_line": 17,
        "end_line": 22,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_literals.ml"
      },
      {
        "hash": "27e960439e46bace93495224157bfe8d",
        "text": "let token, _ = current_token state in\nmatch token with\n| IntToken _ | ChineseNumberToken _ | FloatToken _ | StringToken _ ->\nlet literal, state1 = parse_literal state in\n(LitExpr literal, state1)\n| BoolToken _ -> (",
        "lines": [
          "let token, _ = current_token state in",
          "match token with",
          "| IntToken _ | ChineseNumberToken _ | FloatToken _ | StringToken _ ->",
          "let literal, state1 = parse_literal state in",
          "(LitExpr literal, state1)",
          "| BoolToken _ -> ("
        ],
        "start_line": 28,
        "end_line": 33,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_literals.ml"
      }
    ],
    "cf2247a3e2301401f2823b4af59f9526": [
      {
        "hash": "cf2247a3e2301401f2823b4af59f9526",
        "text": "match token with\n| IntToken _ | ChineseNumberToken _ | FloatToken _ | StringToken _ ->\nlet literal, state1 = parse_literal state in\n(LitExpr literal, state1)\n| BoolToken _ -> (",
        "lines": [
          "match token with",
          "| IntToken _ | ChineseNumberToken _ | FloatToken _ | StringToken _ ->",
          "let literal, state1 = parse_literal state in",
          "(LitExpr literal, state1)",
          "| BoolToken _ -> ("
        ],
        "start_line": 18,
        "end_line": 22,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_literals.ml"
      },
      {
        "hash": "cf2247a3e2301401f2823b4af59f9526",
        "text": "match token with\n| IntToken _ | ChineseNumberToken _ | FloatToken _ | StringToken _ ->\nlet literal, state1 = parse_literal state in\n(LitExpr literal, state1)\n| BoolToken _ -> (",
        "lines": [
          "match token with",
          "| IntToken _ | ChineseNumberToken _ | FloatToken _ | StringToken _ ->",
          "let literal, state1 = parse_literal state in",
          "(LitExpr literal, state1)",
          "| BoolToken _ -> ("
        ],
        "start_line": 29,
        "end_line": 33,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_literals.ml"
      }
    ],
    "e95b1df496e154f1cbdce16a73288b5c": [
      {
        "hash": "e95b1df496e154f1cbdce16a73288b5c",
        "text": "| IntToken _ | ChineseNumberToken _ | FloatToken _ | StringToken _ ->\nlet literal, state1 = parse_literal state in\n(LitExpr literal, state1)\n| BoolToken _ -> (",
        "lines": [
          "| IntToken _ | ChineseNumberToken _ | FloatToken _ | StringToken _ ->",
          "let literal, state1 = parse_literal state in",
          "(LitExpr literal, state1)",
          "| BoolToken _ -> ("
        ],
        "start_line": 19,
        "end_line": 22,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_literals.ml"
      },
      {
        "hash": "e95b1df496e154f1cbdce16a73288b5c",
        "text": "| IntToken _ | ChineseNumberToken _ | FloatToken _ | StringToken _ ->\nlet literal, state1 = parse_literal state in\n(LitExpr literal, state1)\n| BoolToken _ -> (",
        "lines": [
          "| IntToken _ | ChineseNumberToken _ | FloatToken _ | StringToken _ ->",
          "let literal, state1 = parse_literal state in",
          "(LitExpr literal, state1)",
          "| BoolToken _ -> ("
        ],
        "start_line": 30,
        "end_line": 33,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_literals.ml"
      }
    ],
    "0b804a61ec16012dc0b18dcbe3c5c808": [
      {
        "hash": "0b804a61ec16012dc0b18dcbe3c5c808",
        "text": "let literal, state1 = parse_literal state in\n(LitExpr literal, state1)\n| BoolToken _ -> (",
        "lines": [
          "let literal, state1 = parse_literal state in",
          "(LitExpr literal, state1)",
          "| BoolToken _ -> ("
        ],
        "start_line": 20,
        "end_line": 22,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_literals.ml"
      },
      {
        "hash": "0b804a61ec16012dc0b18dcbe3c5c808",
        "text": "let literal, state1 = parse_literal state in\n(LitExpr literal, state1)\n| BoolToken _ -> (",
        "lines": [
          "let literal, state1 = parse_literal state in",
          "(LitExpr literal, state1)",
          "| BoolToken _ -> ("
        ],
        "start_line": 31,
        "end_line": 33,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_literals.ml"
      }
    ],
    "bc61e393915c9f908efefe37c8b39482": [
      {
        "hash": "bc61e393915c9f908efefe37c8b39482",
        "text": "let token_after, _ = peek_token state in\nmatch token_after with\n| QuotedIdentifierToken _ ->",
        "lines": [
          "let token_after, _ = peek_token state in",
          "match token_after with",
          "| QuotedIdentifierToken _ ->"
        ],
        "start_line": 24,
        "end_line": 26,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_literals.ml"
      },
      {
        "hash": "bc61e393915c9f908efefe37c8b39482",
        "text": "let token_after, _ = peek_token state in\nmatch token_after with\n| QuotedIdentifierToken _ ->",
        "lines": [
          "let token_after, _ = peek_token state in",
          "match token_after with",
          "| QuotedIdentifierToken _ ->"
        ],
        "start_line": 35,
        "end_line": 37,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_literals.ml"
      }
    ],
    "d11ddf7a2cc0ea5988139a675ca30447": [
      {
        "hash": "d11ddf7a2cc0ea5988139a675ca30447",
        "text": "let literal, state1 = parse_literal state in\n(LitExpr literal, state1))\n| TrueKeyword ->",
        "lines": [
          "let literal, state1 = parse_literal state in",
          "(LitExpr literal, state1))",
          "| TrueKeyword ->"
        ],
        "start_line": 33,
        "end_line": 35,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_literals.ml"
      },
      {
        "hash": "d11ddf7a2cc0ea5988139a675ca30447",
        "text": "let literal, state1 = parse_literal state in\n(LitExpr literal, state1))\n| TrueKeyword ->",
        "lines": [
          "let literal, state1 = parse_literal state in",
          "(LitExpr literal, state1))",
          "| TrueKeyword ->"
        ],
        "start_line": 44,
        "end_line": 46,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_literals.ml"
      }
    ],
    "62e55df875f807a41d6fa2c8cef6ec3e": [
      {
        "hash": "62e55df875f807a41d6fa2c8cef6ec3e",
        "text": "let state1 = advance_parser state in\n(LitExpr (BoolLit true), state1)\n| FalseKeyword ->",
        "lines": [
          "let state1 = advance_parser state in",
          "(LitExpr (BoolLit true), state1)",
          "| FalseKeyword ->"
        ],
        "start_line": 37,
        "end_line": 39,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_literals.ml"
      },
      {
        "hash": "62e55df875f807a41d6fa2c8cef6ec3e",
        "text": "let state1 = advance_parser state in\n(LitExpr (BoolLit true), state1)\n| FalseKeyword ->",
        "lines": [
          "let state1 = advance_parser state in",
          "(LitExpr (BoolLit true), state1)",
          "| FalseKeyword ->"
        ],
        "start_line": 48,
        "end_line": 50,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_literals.ml"
      }
    ],
    "35ebca6e2e48ba583557cc340667db88": [
      {
        "hash": "35ebca6e2e48ba583557cc340667db88",
        "text": "let state1 = advance_parser state in\n(LitExpr (BoolLit false), state1)\n| OneKeyword ->",
        "lines": [
          "let state1 = advance_parser state in",
          "(LitExpr (BoolLit false), state1)",
          "| OneKeyword ->"
        ],
        "start_line": 41,
        "end_line": 43,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_literals.ml"
      },
      {
        "hash": "35ebca6e2e48ba583557cc340667db88",
        "text": "let state1 = advance_parser state in\n(LitExpr (BoolLit false), state1)\n| OneKeyword ->",
        "lines": [
          "let state1 = advance_parser state in",
          "(LitExpr (BoolLit false), state1)",
          "| OneKeyword ->"
        ],
        "start_line": 52,
        "end_line": 54,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_literals.ml"
      }
    ],
    "66e5e551c1111f8e072536609404a72c": [
      {
        "hash": "66e5e551c1111f8e072536609404a72c",
        "text": "let state1 = advance_parser state in\n(LitExpr (IntLit 1), state1)\n| _ ->\nraise\n(Parser_utils.make_unexpected_token_error\n(\"parse_literal_expr: \" ^ show_token token)\n(snd (current_token state)))",
        "lines": [
          "let state1 = advance_parser state in",
          "(LitExpr (IntLit 1), state1)",
          "| _ ->",
          "raise",
          "(Parser_utils.make_unexpected_token_error",
          "(\"parse_literal_expr: \" ^ show_token token)",
          "(snd (current_token state)))"
        ],
        "start_line": 45,
        "end_line": 51,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_literals.ml"
      },
      {
        "hash": "66e5e551c1111f8e072536609404a72c",
        "text": "let state1 = advance_parser state in\n(LitExpr (IntLit 1), state1)\n| _ ->\nraise\n(Parser_utils.make_unexpected_token_error\n(\"parse_literal_expr: \" ^ show_token token)\n(snd (current_token state)))",
        "lines": [
          "let state1 = advance_parser state in",
          "(LitExpr (IntLit 1), state1)",
          "| _ ->",
          "raise",
          "(Parser_utils.make_unexpected_token_error",
          "(\"parse_literal_expr: \" ^ show_token token)",
          "(snd (current_token state)))"
        ],
        "start_line": 56,
        "end_line": 62,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_literals.ml"
      }
    ],
    "d2afe50413e329fa930cc24b0b94ba8f": [
      {
        "hash": "d2afe50413e329fa930cc24b0b94ba8f",
        "text": "(LitExpr (IntLit 1), state1)\n| _ ->\nraise\n(Parser_utils.make_unexpected_token_error\n(\"parse_literal_expr: \" ^ show_token token)\n(snd (current_token state)))",
        "lines": [
          "(LitExpr (IntLit 1), state1)",
          "| _ ->",
          "raise",
          "(Parser_utils.make_unexpected_token_error",
          "(\"parse_literal_expr: \" ^ show_token token)",
          "(snd (current_token state)))"
        ],
        "start_line": 46,
        "end_line": 51,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_literals.ml"
      },
      {
        "hash": "d2afe50413e329fa930cc24b0b94ba8f",
        "text": "(LitExpr (IntLit 1), state1)\n| _ ->\nraise\n(Parser_utils.make_unexpected_token_error\n(\"parse_literal_expr: \" ^ show_token token)\n(snd (current_token state)))",
        "lines": [
          "(LitExpr (IntLit 1), state1)",
          "| _ ->",
          "raise",
          "(Parser_utils.make_unexpected_token_error",
          "(\"parse_literal_expr: \" ^ show_token token)",
          "(snd (current_token state)))"
        ],
        "start_line": 57,
        "end_line": 62,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_literals.ml"
      }
    ],
    "1ff3a849ff1553dbb9cada328429afbd": [
      {
        "hash": "1ff3a849ff1553dbb9cada328429afbd",
        "text": "| _ ->\nraise\n(Parser_utils.make_unexpected_token_error\n(\"parse_literal_expr: \" ^ show_token token)\n(snd (current_token state)))",
        "lines": [
          "| _ ->",
          "raise",
          "(Parser_utils.make_unexpected_token_error",
          "(\"parse_literal_expr: \" ^ show_token token)",
          "(snd (current_token state)))"
        ],
        "start_line": 47,
        "end_line": 51,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_literals.ml"
      },
      {
        "hash": "1ff3a849ff1553dbb9cada328429afbd",
        "text": "| _ ->\nraise\n(Parser_utils.make_unexpected_token_error\n(\"parse_literal_expr: \" ^ show_token token)\n(snd (current_token state)))",
        "lines": [
          "| _ ->",
          "raise",
          "(Parser_utils.make_unexpected_token_error",
          "(\"parse_literal_expr: \" ^ show_token token)",
          "(snd (current_token state)))"
        ],
        "start_line": 58,
        "end_line": 62,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_literals.ml"
      }
    ],
    "c4e5c8a067ff9cda6ffaec9e2efd08ac": [
      {
        "hash": "c4e5c8a067ff9cda6ffaec9e2efd08ac",
        "text": "raise\n(Parser_utils.make_unexpected_token_error\n(\"parse_literal_expr: \" ^ show_token token)\n(snd (current_token state)))",
        "lines": [
          "raise",
          "(Parser_utils.make_unexpected_token_error",
          "(\"parse_literal_expr: \" ^ show_token token)",
          "(snd (current_token state)))"
        ],
        "start_line": 48,
        "end_line": 51,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_literals.ml"
      },
      {
        "hash": "c4e5c8a067ff9cda6ffaec9e2efd08ac",
        "text": "raise\n(Parser_utils.make_unexpected_token_error\n(\"parse_literal_expr: \" ^ show_token token)\n(snd (current_token state)))",
        "lines": [
          "raise",
          "(Parser_utils.make_unexpected_token_error",
          "(\"parse_literal_expr: \" ^ show_token token)",
          "(snd (current_token state)))"
        ],
        "start_line": 59,
        "end_line": 62,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_literals.ml"
      }
    ],
    "bf0743a0abc7b813d7d8c986c778b2f4": [
      {
        "hash": "bf0743a0abc7b813d7d8c986c778b2f4",
        "text": "(Parser_utils.make_unexpected_token_error\n(\"parse_literal_expr: \" ^ show_token token)\n(snd (current_token state)))",
        "lines": [
          "(Parser_utils.make_unexpected_token_error",
          "(\"parse_literal_expr: \" ^ show_token token)",
          "(snd (current_token state)))"
        ],
        "start_line": 49,
        "end_line": 51,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_literals.ml"
      },
      {
        "hash": "bf0743a0abc7b813d7d8c986c778b2f4",
        "text": "(Parser_utils.make_unexpected_token_error\n(\"parse_literal_expr: \" ^ show_token token)\n(snd (current_token state)))",
        "lines": [
          "(Parser_utils.make_unexpected_token_error",
          "(\"parse_literal_expr: \" ^ show_token token)",
          "(snd (current_token state)))"
        ],
        "start_line": 60,
        "end_line": 62,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_literals.ml"
      }
    ],
    "fb4a7c8d4406282a2efb2124e280f178": [
      {
        "hash": "fb4a7c8d4406282a2efb2124e280f178",
        "text": "| IntToken _ | ChineseNumberToken _ | FloatToken _ | StringToken _\n| BoolToken _ | TrueKeyword | FalseKeyword | OneKeyword -> true\n| _ -> false",
        "lines": [
          "| IntToken _ | ChineseNumberToken _ | FloatToken _ | StringToken _",
          "| BoolToken _ | TrueKeyword | FalseKeyword | OneKeyword -> true",
          "| _ -> false"
        ],
        "start_line": 55,
        "end_line": 57,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_literals.ml"
      },
      {
        "hash": "fb4a7c8d4406282a2efb2124e280f178",
        "text": "| IntToken _ | ChineseNumberToken _ | FloatToken _ | StringToken _\n| BoolToken _ | TrueKeyword | FalseKeyword | OneKeyword -> true\n| _ -> false",
        "lines": [
          "| IntToken _ | ChineseNumberToken _ | FloatToken _ | StringToken _",
          "| BoolToken _ | TrueKeyword | FalseKeyword | OneKeyword -> true",
          "| _ -> false"
        ],
        "start_line": 160,
        "end_line": 162,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_literals.ml"
      }
    ],
    "39e359fff23e6705f0a0f9dcdfd76f42": [
      {
        "hash": "39e359fff23e6705f0a0f9dcdfd76f42",
        "text": "let array_value_to_string value_to_string arr =\nlet arr_list = Array.to_list arr in\nFormatting.format_ocaml_array ~formatter:value_to_string arr_list",
        "lines": [
          "let array_value_to_string value_to_string arr =",
          "let arr_list = Array.to_list arr in",
          "Formatting.format_ocaml_array ~formatter:value_to_string arr_list"
        ],
        "start_line": 13,
        "end_line": 15,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_advanced_ops.ml"
      },
      {
        "hash": "39e359fff23e6705f0a0f9dcdfd76f42",
        "text": "let array_value_to_string value_to_string arr =\nlet arr_list = Array.to_list arr in\nFormatting.format_ocaml_array ~formatter:value_to_string arr_list",
        "lines": [
          "let array_value_to_string value_to_string arr =",
          "let arr_list = Array.to_list arr in",
          "Formatting.format_ocaml_array ~formatter:value_to_string arr_list"
        ],
        "start_line": 40,
        "end_line": 42,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_operations_conversion.ml"
      }
    ],
    "461716747d9a667ea9c61de8b26d7027": [
      {
        "hash": "461716747d9a667ea9c61de8b26d7027",
        "text": "let record_value_to_string value_to_string fields =\nFormatting.format_ocaml_record\n~key_formatter:(fun x -> x)\n~value_formatter:value_to_string\nfields",
        "lines": [
          "let record_value_to_string value_to_string fields =",
          "Formatting.format_ocaml_record",
          "~key_formatter:(fun x -> x)",
          "~value_formatter:value_to_string",
          "fields"
        ],
        "start_line": 22,
        "end_line": 26,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_advanced_ops.ml"
      },
      {
        "hash": "461716747d9a667ea9c61de8b26d7027",
        "text": "let record_value_to_string value_to_string fields =\nFormatting.format_ocaml_record\n~key_formatter:(fun x -> x)\n~value_formatter:value_to_string\nfields",
        "lines": [
          "let record_value_to_string value_to_string fields =",
          "Formatting.format_ocaml_record",
          "~key_formatter:(fun x -> x)",
          "~value_formatter:value_to_string",
          "fields"
        ],
        "start_line": 49,
        "end_line": 53,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_operations_conversion.ml"
      }
    ],
    "4acc557776bb8287da7f64e80af9a07b": [
      {
        "hash": "4acc557776bb8287da7f64e80af9a07b",
        "text": "Formatting.format_ocaml_record\n~key_formatter:(fun x -> x)\n~value_formatter:value_to_string\nfields",
        "lines": [
          "Formatting.format_ocaml_record",
          "~key_formatter:(fun x -> x)",
          "~value_formatter:value_to_string",
          "fields"
        ],
        "start_line": 23,
        "end_line": 26,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_advanced_ops.ml"
      },
      {
        "hash": "4acc557776bb8287da7f64e80af9a07b",
        "text": "Formatting.format_ocaml_record\n~key_formatter:(fun x -> x)\n~value_formatter:value_to_string\nfields",
        "lines": [
          "Formatting.format_ocaml_record",
          "~key_formatter:(fun x -> x)",
          "~value_formatter:value_to_string",
          "fields"
        ],
        "start_line": 50,
        "end_line": 53,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_operations_conversion.ml"
      }
    ],
    "cbc26cc635f2a0bb216fc8f2f374c5a8": [
      {
        "hash": "cbc26cc635f2a0bb216fc8f2f374c5a8",
        "text": "~key_formatter:(fun x -> x)\n~value_formatter:value_to_string\nfields",
        "lines": [
          "~key_formatter:(fun x -> x)",
          "~value_formatter:value_to_string",
          "fields"
        ],
        "start_line": 24,
        "end_line": 26,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_advanced_ops.ml"
      },
      {
        "hash": "cbc26cc635f2a0bb216fc8f2f374c5a8",
        "text": "~key_formatter:(fun x -> x)\n~value_formatter:value_to_string\nfields",
        "lines": [
          "~key_formatter:(fun x -> x)",
          "~value_formatter:value_to_string",
          "fields"
        ],
        "start_line": 51,
        "end_line": 53,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_operations_conversion.ml"
      }
    ],
    "68e3c6fe278e2e6928165d7dc6c6e7a1": [
      {
        "hash": "68e3c6fe278e2e6928165d7dc6c6e7a1",
        "text": "let container_value_to_string value_to_string value =\nmatch value with\n| ListValue lst -> list_value_to_string value_to_string lst\n| ArrayValue arr -> array_value_to_string value_to_string arr\n| TupleValue values -> tuple_value_to_string value_to_string values\n| RecordValue fields -> record_value_to_string value_to_string fields\n| RefValue r -> ref_value_to_string value_to_string r\n| _ -> \"container_value_to_string: 不是容器类型\"",
        "lines": [
          "let container_value_to_string value_to_string value =",
          "match value with",
          "| ListValue lst -> list_value_to_string value_to_string lst",
          "| ArrayValue arr -> array_value_to_string value_to_string arr",
          "| TupleValue values -> tuple_value_to_string value_to_string values",
          "| RecordValue fields -> record_value_to_string value_to_string fields",
          "| RefValue r -> ref_value_to_string value_to_string r",
          "| _ -> \"container_value_to_string: 不是容器类型\""
        ],
        "start_line": 33,
        "end_line": 40,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_advanced_ops.ml"
      },
      {
        "hash": "68e3c6fe278e2e6928165d7dc6c6e7a1",
        "text": "let container_value_to_string value_to_string value =\nmatch value with\n| ListValue lst -> list_value_to_string value_to_string lst\n| ArrayValue arr -> array_value_to_string value_to_string arr\n| TupleValue values -> tuple_value_to_string value_to_string values\n| RecordValue fields -> record_value_to_string value_to_string fields\n| RefValue r -> ref_value_to_string value_to_string r\n| _ -> \"container_value_to_string: 不是容器类型\"",
        "lines": [
          "let container_value_to_string value_to_string value =",
          "match value with",
          "| ListValue lst -> list_value_to_string value_to_string lst",
          "| ArrayValue arr -> array_value_to_string value_to_string arr",
          "| TupleValue values -> tuple_value_to_string value_to_string values",
          "| RecordValue fields -> record_value_to_string value_to_string fields",
          "| RefValue r -> ref_value_to_string value_to_string r",
          "| _ -> \"container_value_to_string: 不是容器类型\""
        ],
        "start_line": 60,
        "end_line": 67,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_operations_conversion.ml"
      }
    ],
    "4284523f2f58fa675ed61479271f0952": [
      {
        "hash": "4284523f2f58fa675ed61479271f0952",
        "text": "match value with\n| ListValue lst -> list_value_to_string value_to_string lst\n| ArrayValue arr -> array_value_to_string value_to_string arr\n| TupleValue values -> tuple_value_to_string value_to_string values\n| RecordValue fields -> record_value_to_string value_to_string fields\n| RefValue r -> ref_value_to_string value_to_string r\n| _ -> \"container_value_to_string: 不是容器类型\"",
        "lines": [
          "match value with",
          "| ListValue lst -> list_value_to_string value_to_string lst",
          "| ArrayValue arr -> array_value_to_string value_to_string arr",
          "| TupleValue values -> tuple_value_to_string value_to_string values",
          "| RecordValue fields -> record_value_to_string value_to_string fields",
          "| RefValue r -> ref_value_to_string value_to_string r",
          "| _ -> \"container_value_to_string: 不是容器类型\""
        ],
        "start_line": 34,
        "end_line": 40,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_advanced_ops.ml"
      },
      {
        "hash": "4284523f2f58fa675ed61479271f0952",
        "text": "match value with\n| ListValue lst -> list_value_to_string value_to_string lst\n| ArrayValue arr -> array_value_to_string value_to_string arr\n| TupleValue values -> tuple_value_to_string value_to_string values\n| RecordValue fields -> record_value_to_string value_to_string fields\n| RefValue r -> ref_value_to_string value_to_string r\n| _ -> \"container_value_to_string: 不是容器类型\"",
        "lines": [
          "match value with",
          "| ListValue lst -> list_value_to_string value_to_string lst",
          "| ArrayValue arr -> array_value_to_string value_to_string arr",
          "| TupleValue values -> tuple_value_to_string value_to_string values",
          "| RecordValue fields -> record_value_to_string value_to_string fields",
          "| RefValue r -> ref_value_to_string value_to_string r",
          "| _ -> \"container_value_to_string: 不是容器类型\""
        ],
        "start_line": 61,
        "end_line": 67,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_operations_conversion.ml"
      }
    ],
    "2e08a310477a92f03a2145a120ef9bbc": [
      {
        "hash": "2e08a310477a92f03a2145a120ef9bbc",
        "text": "| ListValue lst -> list_value_to_string value_to_string lst\n| ArrayValue arr -> array_value_to_string value_to_string arr\n| TupleValue values -> tuple_value_to_string value_to_string values\n| RecordValue fields -> record_value_to_string value_to_string fields\n| RefValue r -> ref_value_to_string value_to_string r\n| _ -> \"container_value_to_string: 不是容器类型\"",
        "lines": [
          "| ListValue lst -> list_value_to_string value_to_string lst",
          "| ArrayValue arr -> array_value_to_string value_to_string arr",
          "| TupleValue values -> tuple_value_to_string value_to_string values",
          "| RecordValue fields -> record_value_to_string value_to_string fields",
          "| RefValue r -> ref_value_to_string value_to_string r",
          "| _ -> \"container_value_to_string: 不是容器类型\""
        ],
        "start_line": 35,
        "end_line": 40,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_advanced_ops.ml"
      },
      {
        "hash": "2e08a310477a92f03a2145a120ef9bbc",
        "text": "| ListValue lst -> list_value_to_string value_to_string lst\n| ArrayValue arr -> array_value_to_string value_to_string arr\n| TupleValue values -> tuple_value_to_string value_to_string values\n| RecordValue fields -> record_value_to_string value_to_string fields\n| RefValue r -> ref_value_to_string value_to_string r\n| _ -> \"container_value_to_string: 不是容器类型\"",
        "lines": [
          "| ListValue lst -> list_value_to_string value_to_string lst",
          "| ArrayValue arr -> array_value_to_string value_to_string arr",
          "| TupleValue values -> tuple_value_to_string value_to_string values",
          "| RecordValue fields -> record_value_to_string value_to_string fields",
          "| RefValue r -> ref_value_to_string value_to_string r",
          "| _ -> \"container_value_to_string: 不是容器类型\""
        ],
        "start_line": 62,
        "end_line": 67,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_operations_conversion.ml"
      }
    ],
    "738e7131d4103c96afebc8206037af92": [
      {
        "hash": "738e7131d4103c96afebc8206037af92",
        "text": "| ArrayValue arr -> array_value_to_string value_to_string arr\n| TupleValue values -> tuple_value_to_string value_to_string values\n| RecordValue fields -> record_value_to_string value_to_string fields\n| RefValue r -> ref_value_to_string value_to_string r\n| _ -> \"container_value_to_string: 不是容器类型\"",
        "lines": [
          "| ArrayValue arr -> array_value_to_string value_to_string arr",
          "| TupleValue values -> tuple_value_to_string value_to_string values",
          "| RecordValue fields -> record_value_to_string value_to_string fields",
          "| RefValue r -> ref_value_to_string value_to_string r",
          "| _ -> \"container_value_to_string: 不是容器类型\""
        ],
        "start_line": 36,
        "end_line": 40,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_advanced_ops.ml"
      },
      {
        "hash": "738e7131d4103c96afebc8206037af92",
        "text": "| ArrayValue arr -> array_value_to_string value_to_string arr\n| TupleValue values -> tuple_value_to_string value_to_string values\n| RecordValue fields -> record_value_to_string value_to_string fields\n| RefValue r -> ref_value_to_string value_to_string r\n| _ -> \"container_value_to_string: 不是容器类型\"",
        "lines": [
          "| ArrayValue arr -> array_value_to_string value_to_string arr",
          "| TupleValue values -> tuple_value_to_string value_to_string values",
          "| RecordValue fields -> record_value_to_string value_to_string fields",
          "| RefValue r -> ref_value_to_string value_to_string r",
          "| _ -> \"container_value_to_string: 不是容器类型\""
        ],
        "start_line": 63,
        "end_line": 67,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_operations_conversion.ml"
      }
    ],
    "26af0eb3e5d36e5e5425d3f289e61195": [
      {
        "hash": "26af0eb3e5d36e5e5425d3f289e61195",
        "text": "| TupleValue values -> tuple_value_to_string value_to_string values\n| RecordValue fields -> record_value_to_string value_to_string fields\n| RefValue r -> ref_value_to_string value_to_string r\n| _ -> \"container_value_to_string: 不是容器类型\"",
        "lines": [
          "| TupleValue values -> tuple_value_to_string value_to_string values",
          "| RecordValue fields -> record_value_to_string value_to_string fields",
          "| RefValue r -> ref_value_to_string value_to_string r",
          "| _ -> \"container_value_to_string: 不是容器类型\""
        ],
        "start_line": 37,
        "end_line": 40,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_advanced_ops.ml"
      },
      {
        "hash": "26af0eb3e5d36e5e5425d3f289e61195",
        "text": "| TupleValue values -> tuple_value_to_string value_to_string values\n| RecordValue fields -> record_value_to_string value_to_string fields\n| RefValue r -> ref_value_to_string value_to_string r\n| _ -> \"container_value_to_string: 不是容器类型\"",
        "lines": [
          "| TupleValue values -> tuple_value_to_string value_to_string values",
          "| RecordValue fields -> record_value_to_string value_to_string fields",
          "| RefValue r -> ref_value_to_string value_to_string r",
          "| _ -> \"container_value_to_string: 不是容器类型\""
        ],
        "start_line": 64,
        "end_line": 67,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_operations_conversion.ml"
      }
    ],
    "0bb77f78b64bdfc7c09d9126f861b0e5": [
      {
        "hash": "0bb77f78b64bdfc7c09d9126f861b0e5",
        "text": "| RecordValue fields -> record_value_to_string value_to_string fields\n| RefValue r -> ref_value_to_string value_to_string r\n| _ -> \"container_value_to_string: 不是容器类型\"",
        "lines": [
          "| RecordValue fields -> record_value_to_string value_to_string fields",
          "| RefValue r -> ref_value_to_string value_to_string r",
          "| _ -> \"container_value_to_string: 不是容器类型\""
        ],
        "start_line": 38,
        "end_line": 40,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_advanced_ops.ml"
      },
      {
        "hash": "0bb77f78b64bdfc7c09d9126f861b0e5",
        "text": "| RecordValue fields -> record_value_to_string value_to_string fields\n| RefValue r -> ref_value_to_string value_to_string r\n| _ -> \"container_value_to_string: 不是容器类型\"",
        "lines": [
          "| RecordValue fields -> record_value_to_string value_to_string fields",
          "| RefValue r -> ref_value_to_string value_to_string r",
          "| _ -> \"container_value_to_string: 不是容器类型\""
        ],
        "start_line": 65,
        "end_line": 67,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_operations_conversion.ml"
      }
    ],
    "ba28447fd28fd0e63760fdbae95c7c76": [
      {
        "hash": "ba28447fd28fd0e63760fdbae95c7c76",
        "text": "let function_value_to_string value =\nmatch value with\n| FunctionValue (_, _, _) -> \"<函数>\"\n| BuiltinFunctionValue _ -> \"<内置函数>\"\n| LabeledFunctionValue (_, _, _) -> \"<标签函数>\"\n| _ -> \"function_value_to_string: 不是函数类型\"",
        "lines": [
          "let function_value_to_string value =",
          "match value with",
          "| FunctionValue (_, _, _) -> \"<函数>\"",
          "| BuiltinFunctionValue _ -> \"<内置函数>\"",
          "| LabeledFunctionValue (_, _, _) -> \"<标签函数>\"",
          "| _ -> \"function_value_to_string: 不是函数类型\""
        ],
        "start_line": 43,
        "end_line": 48,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_advanced_ops.ml"
      },
      {
        "hash": "ba28447fd28fd0e63760fdbae95c7c76",
        "text": "let function_value_to_string value =\nmatch value with\n| FunctionValue (_, _, _) -> \"<函数>\"\n| BuiltinFunctionValue _ -> \"<内置函数>\"\n| LabeledFunctionValue (_, _, _) -> \"<标签函数>\"\n| _ -> \"function_value_to_string: 不是函数类型\"",
        "lines": [
          "let function_value_to_string value =",
          "match value with",
          "| FunctionValue (_, _, _) -> \"<函数>\"",
          "| BuiltinFunctionValue _ -> \"<内置函数>\"",
          "| LabeledFunctionValue (_, _, _) -> \"<标签函数>\"",
          "| _ -> \"function_value_to_string: 不是函数类型\""
        ],
        "start_line": 70,
        "end_line": 75,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_operations_conversion.ml"
      }
    ],
    "cd42ccf9b2448b8d6d5c2686b633d824": [
      {
        "hash": "cd42ccf9b2448b8d6d5c2686b633d824",
        "text": "match value with\n| FunctionValue (_, _, _) -> \"<函数>\"\n| BuiltinFunctionValue _ -> \"<内置函数>\"\n| LabeledFunctionValue (_, _, _) -> \"<标签函数>\"\n| _ -> \"function_value_to_string: 不是函数类型\"",
        "lines": [
          "match value with",
          "| FunctionValue (_, _, _) -> \"<函数>\"",
          "| BuiltinFunctionValue _ -> \"<内置函数>\"",
          "| LabeledFunctionValue (_, _, _) -> \"<标签函数>\"",
          "| _ -> \"function_value_to_string: 不是函数类型\""
        ],
        "start_line": 44,
        "end_line": 48,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_advanced_ops.ml"
      },
      {
        "hash": "cd42ccf9b2448b8d6d5c2686b633d824",
        "text": "match value with\n| FunctionValue (_, _, _) -> \"<函数>\"\n| BuiltinFunctionValue _ -> \"<内置函数>\"\n| LabeledFunctionValue (_, _, _) -> \"<标签函数>\"\n| _ -> \"function_value_to_string: 不是函数类型\"",
        "lines": [
          "match value with",
          "| FunctionValue (_, _, _) -> \"<函数>\"",
          "| BuiltinFunctionValue _ -> \"<内置函数>\"",
          "| LabeledFunctionValue (_, _, _) -> \"<标签函数>\"",
          "| _ -> \"function_value_to_string: 不是函数类型\""
        ],
        "start_line": 71,
        "end_line": 75,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_operations_conversion.ml"
      }
    ],
    "350732dfbd17ddd9759aef0da727c9c0": [
      {
        "hash": "350732dfbd17ddd9759aef0da727c9c0",
        "text": "| FunctionValue (_, _, _) -> \"<函数>\"\n| BuiltinFunctionValue _ -> \"<内置函数>\"\n| LabeledFunctionValue (_, _, _) -> \"<标签函数>\"\n| _ -> \"function_value_to_string: 不是函数类型\"",
        "lines": [
          "| FunctionValue (_, _, _) -> \"<函数>\"",
          "| BuiltinFunctionValue _ -> \"<内置函数>\"",
          "| LabeledFunctionValue (_, _, _) -> \"<标签函数>\"",
          "| _ -> \"function_value_to_string: 不是函数类型\""
        ],
        "start_line": 45,
        "end_line": 48,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_advanced_ops.ml"
      },
      {
        "hash": "350732dfbd17ddd9759aef0da727c9c0",
        "text": "| FunctionValue (_, _, _) -> \"<函数>\"\n| BuiltinFunctionValue _ -> \"<内置函数>\"\n| LabeledFunctionValue (_, _, _) -> \"<标签函数>\"\n| _ -> \"function_value_to_string: 不是函数类型\"",
        "lines": [
          "| FunctionValue (_, _, _) -> \"<函数>\"",
          "| BuiltinFunctionValue _ -> \"<内置函数>\"",
          "| LabeledFunctionValue (_, _, _) -> \"<标签函数>\"",
          "| _ -> \"function_value_to_string: 不是函数类型\""
        ],
        "start_line": 72,
        "end_line": 75,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_operations_conversion.ml"
      }
    ],
    "d55a6589e5019de169a7fd93b0ec8238": [
      {
        "hash": "d55a6589e5019de169a7fd93b0ec8238",
        "text": "| BuiltinFunctionValue _ -> \"<内置函数>\"\n| LabeledFunctionValue (_, _, _) -> \"<标签函数>\"\n| _ -> \"function_value_to_string: 不是函数类型\"",
        "lines": [
          "| BuiltinFunctionValue _ -> \"<内置函数>\"",
          "| LabeledFunctionValue (_, _, _) -> \"<标签函数>\"",
          "| _ -> \"function_value_to_string: 不是函数类型\""
        ],
        "start_line": 46,
        "end_line": 48,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_advanced_ops.ml"
      },
      {
        "hash": "d55a6589e5019de169a7fd93b0ec8238",
        "text": "| BuiltinFunctionValue _ -> \"<内置函数>\"\n| LabeledFunctionValue (_, _, _) -> \"<标签函数>\"\n| _ -> \"function_value_to_string: 不是函数类型\"",
        "lines": [
          "| BuiltinFunctionValue _ -> \"<内置函数>\"",
          "| LabeledFunctionValue (_, _, _) -> \"<标签函数>\"",
          "| _ -> \"function_value_to_string: 不是函数类型\""
        ],
        "start_line": 73,
        "end_line": 75,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_operations_conversion.ml"
      }
    ],
    "d28edce791cdf12b79331ee5f6475834": [
      {
        "hash": "d28edce791cdf12b79331ee5f6475834",
        "text": "let constructor_value_to_string value_to_string value =\nmatch value with\n| ConstructorValue (name, args) ->\nFormatting.format_constructor ~name ~formatter:value_to_string args\n| ExceptionValue (name, None) -> name\n| ExceptionValue (name, Some payload) ->\nFormatting.format_constructor ~name ~formatter:value_to_string [payload]\n| PolymorphicVariantValue (tag_name, None) ->\n\"「\" ^ tag_name ^ \"」\"\n| PolymorphicVariantValue (tag_name, Some value) ->",
        "lines": [
          "let constructor_value_to_string value_to_string value =",
          "match value with",
          "| ConstructorValue (name, args) ->",
          "Formatting.format_constructor ~name ~formatter:value_to_string args",
          "| ExceptionValue (name, None) -> name",
          "| ExceptionValue (name, Some payload) ->",
          "Formatting.format_constructor ~name ~formatter:value_to_string [payload]",
          "| PolymorphicVariantValue (tag_name, None) ->",
          "\"「\" ^ tag_name ^ \"」\"",
          "| PolymorphicVariantValue (tag_name, Some value) ->"
        ],
        "start_line": 51,
        "end_line": 60,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_advanced_ops.ml"
      },
      {
        "hash": "d28edce791cdf12b79331ee5f6475834",
        "text": "let constructor_value_to_string value_to_string value =\nmatch value with\n| ConstructorValue (name, args) ->\nFormatting.format_constructor ~name ~formatter:value_to_string args\n| ExceptionValue (name, None) -> name\n| ExceptionValue (name, Some payload) ->\nFormatting.format_constructor ~name ~formatter:value_to_string [payload]\n| PolymorphicVariantValue (tag_name, None) ->\n\"「\" ^ tag_name ^ \"」\"\n| PolymorphicVariantValue (tag_name, Some value) ->",
        "lines": [
          "let constructor_value_to_string value_to_string value =",
          "match value with",
          "| ConstructorValue (name, args) ->",
          "Formatting.format_constructor ~name ~formatter:value_to_string args",
          "| ExceptionValue (name, None) -> name",
          "| ExceptionValue (name, Some payload) ->",
          "Formatting.format_constructor ~name ~formatter:value_to_string [payload]",
          "| PolymorphicVariantValue (tag_name, None) ->",
          "\"「\" ^ tag_name ^ \"」\"",
          "| PolymorphicVariantValue (tag_name, Some value) ->"
        ],
        "start_line": 78,
        "end_line": 87,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_operations_conversion.ml"
      }
    ],
    "b9d4a89faff6e33a00d329f6d13076a7": [
      {
        "hash": "b9d4a89faff6e33a00d329f6d13076a7",
        "text": "match value with\n| ConstructorValue (name, args) ->\nFormatting.format_constructor ~name ~formatter:value_to_string args\n| ExceptionValue (name, None) -> name\n| ExceptionValue (name, Some payload) ->\nFormatting.format_constructor ~name ~formatter:value_to_string [payload]\n| PolymorphicVariantValue (tag_name, None) ->\n\"「\" ^ tag_name ^ \"」\"\n| PolymorphicVariantValue (tag_name, Some value) ->\nlet formatted_tag = \"「\" ^ tag_name ^ \"」\" in",
        "lines": [
          "match value with",
          "| ConstructorValue (name, args) ->",
          "Formatting.format_constructor ~name ~formatter:value_to_string args",
          "| ExceptionValue (name, None) -> name",
          "| ExceptionValue (name, Some payload) ->",
          "Formatting.format_constructor ~name ~formatter:value_to_string [payload]",
          "| PolymorphicVariantValue (tag_name, None) ->",
          "\"「\" ^ tag_name ^ \"」\"",
          "| PolymorphicVariantValue (tag_name, Some value) ->",
          "let formatted_tag = \"「\" ^ tag_name ^ \"」\" in"
        ],
        "start_line": 52,
        "end_line": 61,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_advanced_ops.ml"
      },
      {
        "hash": "b9d4a89faff6e33a00d329f6d13076a7",
        "text": "match value with\n| ConstructorValue (name, args) ->\nFormatting.format_constructor ~name ~formatter:value_to_string args\n| ExceptionValue (name, None) -> name\n| ExceptionValue (name, Some payload) ->\nFormatting.format_constructor ~name ~formatter:value_to_string [payload]\n| PolymorphicVariantValue (tag_name, None) ->\n\"「\" ^ tag_name ^ \"」\"\n| PolymorphicVariantValue (tag_name, Some value) ->\nlet formatted_tag = \"「\" ^ tag_name ^ \"」\" in",
        "lines": [
          "match value with",
          "| ConstructorValue (name, args) ->",
          "Formatting.format_constructor ~name ~formatter:value_to_string args",
          "| ExceptionValue (name, None) -> name",
          "| ExceptionValue (name, Some payload) ->",
          "Formatting.format_constructor ~name ~formatter:value_to_string [payload]",
          "| PolymorphicVariantValue (tag_name, None) ->",
          "\"「\" ^ tag_name ^ \"」\"",
          "| PolymorphicVariantValue (tag_name, Some value) ->",
          "let formatted_tag = \"「\" ^ tag_name ^ \"」\" in"
        ],
        "start_line": 79,
        "end_line": 88,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_operations_conversion.ml"
      }
    ],
    "65e4ccb0d7733628985bc63c393571ca": [
      {
        "hash": "65e4ccb0d7733628985bc63c393571ca",
        "text": "| ConstructorValue (name, args) ->\nFormatting.format_constructor ~name ~formatter:value_to_string args\n| ExceptionValue (name, None) -> name\n| ExceptionValue (name, Some payload) ->\nFormatting.format_constructor ~name ~formatter:value_to_string [payload]\n| PolymorphicVariantValue (tag_name, None) ->\n\"「\" ^ tag_name ^ \"」\"\n| PolymorphicVariantValue (tag_name, Some value) ->\nlet formatted_tag = \"「\" ^ tag_name ^ \"」\" in\nFormatting.format_constructor ~name:formatted_tag ~formatter:value_to_string [value]",
        "lines": [
          "| ConstructorValue (name, args) ->",
          "Formatting.format_constructor ~name ~formatter:value_to_string args",
          "| ExceptionValue (name, None) -> name",
          "| ExceptionValue (name, Some payload) ->",
          "Formatting.format_constructor ~name ~formatter:value_to_string [payload]",
          "| PolymorphicVariantValue (tag_name, None) ->",
          "\"「\" ^ tag_name ^ \"」\"",
          "| PolymorphicVariantValue (tag_name, Some value) ->",
          "let formatted_tag = \"「\" ^ tag_name ^ \"」\" in",
          "Formatting.format_constructor ~name:formatted_tag ~formatter:value_to_string [value]"
        ],
        "start_line": 53,
        "end_line": 62,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_advanced_ops.ml"
      },
      {
        "hash": "65e4ccb0d7733628985bc63c393571ca",
        "text": "| ConstructorValue (name, args) ->\nFormatting.format_constructor ~name ~formatter:value_to_string args\n| ExceptionValue (name, None) -> name\n| ExceptionValue (name, Some payload) ->\nFormatting.format_constructor ~name ~formatter:value_to_string [payload]\n| PolymorphicVariantValue (tag_name, None) ->\n\"「\" ^ tag_name ^ \"」\"\n| PolymorphicVariantValue (tag_name, Some value) ->\nlet formatted_tag = \"「\" ^ tag_name ^ \"」\" in\nFormatting.format_constructor ~name:formatted_tag ~formatter:value_to_string [value]",
        "lines": [
          "| ConstructorValue (name, args) ->",
          "Formatting.format_constructor ~name ~formatter:value_to_string args",
          "| ExceptionValue (name, None) -> name",
          "| ExceptionValue (name, Some payload) ->",
          "Formatting.format_constructor ~name ~formatter:value_to_string [payload]",
          "| PolymorphicVariantValue (tag_name, None) ->",
          "\"「\" ^ tag_name ^ \"」\"",
          "| PolymorphicVariantValue (tag_name, Some value) ->",
          "let formatted_tag = \"「\" ^ tag_name ^ \"」\" in",
          "Formatting.format_constructor ~name:formatted_tag ~formatter:value_to_string [value]"
        ],
        "start_line": 80,
        "end_line": 89,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_operations_conversion.ml"
      }
    ],
    "402062d9db4efce0e874750b4c482b17": [
      {
        "hash": "402062d9db4efce0e874750b4c482b17",
        "text": "Formatting.format_constructor ~name ~formatter:value_to_string args\n| ExceptionValue (name, None) -> name\n| ExceptionValue (name, Some payload) ->\nFormatting.format_constructor ~name ~formatter:value_to_string [payload]\n| PolymorphicVariantValue (tag_name, None) ->\n\"「\" ^ tag_name ^ \"」\"\n| PolymorphicVariantValue (tag_name, Some value) ->\nlet formatted_tag = \"「\" ^ tag_name ^ \"」\" in\nFormatting.format_constructor ~name:formatted_tag ~formatter:value_to_string [value]\n| _ -> \"constructor_value_to_string: 不是构造器类型\"",
        "lines": [
          "Formatting.format_constructor ~name ~formatter:value_to_string args",
          "| ExceptionValue (name, None) -> name",
          "| ExceptionValue (name, Some payload) ->",
          "Formatting.format_constructor ~name ~formatter:value_to_string [payload]",
          "| PolymorphicVariantValue (tag_name, None) ->",
          "\"「\" ^ tag_name ^ \"」\"",
          "| PolymorphicVariantValue (tag_name, Some value) ->",
          "let formatted_tag = \"「\" ^ tag_name ^ \"」\" in",
          "Formatting.format_constructor ~name:formatted_tag ~formatter:value_to_string [value]",
          "| _ -> \"constructor_value_to_string: 不是构造器类型\""
        ],
        "start_line": 54,
        "end_line": 63,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_advanced_ops.ml"
      },
      {
        "hash": "402062d9db4efce0e874750b4c482b17",
        "text": "Formatting.format_constructor ~name ~formatter:value_to_string args\n| ExceptionValue (name, None) -> name\n| ExceptionValue (name, Some payload) ->\nFormatting.format_constructor ~name ~formatter:value_to_string [payload]\n| PolymorphicVariantValue (tag_name, None) ->\n\"「\" ^ tag_name ^ \"」\"\n| PolymorphicVariantValue (tag_name, Some value) ->\nlet formatted_tag = \"「\" ^ tag_name ^ \"」\" in\nFormatting.format_constructor ~name:formatted_tag ~formatter:value_to_string [value]\n| _ -> \"constructor_value_to_string: 不是构造器类型\"",
        "lines": [
          "Formatting.format_constructor ~name ~formatter:value_to_string args",
          "| ExceptionValue (name, None) -> name",
          "| ExceptionValue (name, Some payload) ->",
          "Formatting.format_constructor ~name ~formatter:value_to_string [payload]",
          "| PolymorphicVariantValue (tag_name, None) ->",
          "\"「\" ^ tag_name ^ \"」\"",
          "| PolymorphicVariantValue (tag_name, Some value) ->",
          "let formatted_tag = \"「\" ^ tag_name ^ \"」\" in",
          "Formatting.format_constructor ~name:formatted_tag ~formatter:value_to_string [value]",
          "| _ -> \"constructor_value_to_string: 不是构造器类型\""
        ],
        "start_line": 81,
        "end_line": 90,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_operations_conversion.ml"
      }
    ],
    "9645e72f248ffe5c5565892faf6fe687": [
      {
        "hash": "9645e72f248ffe5c5565892faf6fe687",
        "text": "| ExceptionValue (name, None) -> name\n| ExceptionValue (name, Some payload) ->\nFormatting.format_constructor ~name ~formatter:value_to_string [payload]\n| PolymorphicVariantValue (tag_name, None) ->\n\"「\" ^ tag_name ^ \"」\"\n| PolymorphicVariantValue (tag_name, Some value) ->\nlet formatted_tag = \"「\" ^ tag_name ^ \"」\" in\nFormatting.format_constructor ~name:formatted_tag ~formatter:value_to_string [value]\n| _ -> \"constructor_value_to_string: 不是构造器类型\"",
        "lines": [
          "| ExceptionValue (name, None) -> name",
          "| ExceptionValue (name, Some payload) ->",
          "Formatting.format_constructor ~name ~formatter:value_to_string [payload]",
          "| PolymorphicVariantValue (tag_name, None) ->",
          "\"「\" ^ tag_name ^ \"」\"",
          "| PolymorphicVariantValue (tag_name, Some value) ->",
          "let formatted_tag = \"「\" ^ tag_name ^ \"」\" in",
          "Formatting.format_constructor ~name:formatted_tag ~formatter:value_to_string [value]",
          "| _ -> \"constructor_value_to_string: 不是构造器类型\""
        ],
        "start_line": 55,
        "end_line": 63,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_advanced_ops.ml"
      },
      {
        "hash": "9645e72f248ffe5c5565892faf6fe687",
        "text": "| ExceptionValue (name, None) -> name\n| ExceptionValue (name, Some payload) ->\nFormatting.format_constructor ~name ~formatter:value_to_string [payload]\n| PolymorphicVariantValue (tag_name, None) ->\n\"「\" ^ tag_name ^ \"」\"\n| PolymorphicVariantValue (tag_name, Some value) ->\nlet formatted_tag = \"「\" ^ tag_name ^ \"」\" in\nFormatting.format_constructor ~name:formatted_tag ~formatter:value_to_string [value]\n| _ -> \"constructor_value_to_string: 不是构造器类型\"",
        "lines": [
          "| ExceptionValue (name, None) -> name",
          "| ExceptionValue (name, Some payload) ->",
          "Formatting.format_constructor ~name ~formatter:value_to_string [payload]",
          "| PolymorphicVariantValue (tag_name, None) ->",
          "\"「\" ^ tag_name ^ \"」\"",
          "| PolymorphicVariantValue (tag_name, Some value) ->",
          "let formatted_tag = \"「\" ^ tag_name ^ \"」\" in",
          "Formatting.format_constructor ~name:formatted_tag ~formatter:value_to_string [value]",
          "| _ -> \"constructor_value_to_string: 不是构造器类型\""
        ],
        "start_line": 82,
        "end_line": 90,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_operations_conversion.ml"
      }
    ],
    "c55c46852abb94e1dc210b2dd58ec152": [
      {
        "hash": "c55c46852abb94e1dc210b2dd58ec152",
        "text": "| ExceptionValue (name, Some payload) ->\nFormatting.format_constructor ~name ~formatter:value_to_string [payload]\n| PolymorphicVariantValue (tag_name, None) ->\n\"「\" ^ tag_name ^ \"」\"\n| PolymorphicVariantValue (tag_name, Some value) ->\nlet formatted_tag = \"「\" ^ tag_name ^ \"」\" in\nFormatting.format_constructor ~name:formatted_tag ~formatter:value_to_string [value]\n| _ -> \"constructor_value_to_string: 不是构造器类型\"",
        "lines": [
          "| ExceptionValue (name, Some payload) ->",
          "Formatting.format_constructor ~name ~formatter:value_to_string [payload]",
          "| PolymorphicVariantValue (tag_name, None) ->",
          "\"「\" ^ tag_name ^ \"」\"",
          "| PolymorphicVariantValue (tag_name, Some value) ->",
          "let formatted_tag = \"「\" ^ tag_name ^ \"」\" in",
          "Formatting.format_constructor ~name:formatted_tag ~formatter:value_to_string [value]",
          "| _ -> \"constructor_value_to_string: 不是构造器类型\""
        ],
        "start_line": 56,
        "end_line": 63,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_advanced_ops.ml"
      },
      {
        "hash": "c55c46852abb94e1dc210b2dd58ec152",
        "text": "| ExceptionValue (name, Some payload) ->\nFormatting.format_constructor ~name ~formatter:value_to_string [payload]\n| PolymorphicVariantValue (tag_name, None) ->\n\"「\" ^ tag_name ^ \"」\"\n| PolymorphicVariantValue (tag_name, Some value) ->\nlet formatted_tag = \"「\" ^ tag_name ^ \"」\" in\nFormatting.format_constructor ~name:formatted_tag ~formatter:value_to_string [value]\n| _ -> \"constructor_value_to_string: 不是构造器类型\"",
        "lines": [
          "| ExceptionValue (name, Some payload) ->",
          "Formatting.format_constructor ~name ~formatter:value_to_string [payload]",
          "| PolymorphicVariantValue (tag_name, None) ->",
          "\"「\" ^ tag_name ^ \"」\"",
          "| PolymorphicVariantValue (tag_name, Some value) ->",
          "let formatted_tag = \"「\" ^ tag_name ^ \"」\" in",
          "Formatting.format_constructor ~name:formatted_tag ~formatter:value_to_string [value]",
          "| _ -> \"constructor_value_to_string: 不是构造器类型\""
        ],
        "start_line": 83,
        "end_line": 90,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_operations_conversion.ml"
      }
    ],
    "c38dcd7f43745c6137f4fea7eba13ac0": [
      {
        "hash": "c38dcd7f43745c6137f4fea7eba13ac0",
        "text": "Formatting.format_constructor ~name ~formatter:value_to_string [payload]\n| PolymorphicVariantValue (tag_name, None) ->\n\"「\" ^ tag_name ^ \"」\"\n| PolymorphicVariantValue (tag_name, Some value) ->\nlet formatted_tag = \"「\" ^ tag_name ^ \"」\" in\nFormatting.format_constructor ~name:formatted_tag ~formatter:value_to_string [value]\n| _ -> \"constructor_value_to_string: 不是构造器类型\"",
        "lines": [
          "Formatting.format_constructor ~name ~formatter:value_to_string [payload]",
          "| PolymorphicVariantValue (tag_name, None) ->",
          "\"「\" ^ tag_name ^ \"」\"",
          "| PolymorphicVariantValue (tag_name, Some value) ->",
          "let formatted_tag = \"「\" ^ tag_name ^ \"」\" in",
          "Formatting.format_constructor ~name:formatted_tag ~formatter:value_to_string [value]",
          "| _ -> \"constructor_value_to_string: 不是构造器类型\""
        ],
        "start_line": 57,
        "end_line": 63,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_advanced_ops.ml"
      },
      {
        "hash": "c38dcd7f43745c6137f4fea7eba13ac0",
        "text": "Formatting.format_constructor ~name ~formatter:value_to_string [payload]\n| PolymorphicVariantValue (tag_name, None) ->\n\"「\" ^ tag_name ^ \"」\"\n| PolymorphicVariantValue (tag_name, Some value) ->\nlet formatted_tag = \"「\" ^ tag_name ^ \"」\" in\nFormatting.format_constructor ~name:formatted_tag ~formatter:value_to_string [value]\n| _ -> \"constructor_value_to_string: 不是构造器类型\"",
        "lines": [
          "Formatting.format_constructor ~name ~formatter:value_to_string [payload]",
          "| PolymorphicVariantValue (tag_name, None) ->",
          "\"「\" ^ tag_name ^ \"」\"",
          "| PolymorphicVariantValue (tag_name, Some value) ->",
          "let formatted_tag = \"「\" ^ tag_name ^ \"」\" in",
          "Formatting.format_constructor ~name:formatted_tag ~formatter:value_to_string [value]",
          "| _ -> \"constructor_value_to_string: 不是构造器类型\""
        ],
        "start_line": 84,
        "end_line": 90,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_operations_conversion.ml"
      }
    ],
    "cdd678ff74c0e72d74d044f301c6d83d": [
      {
        "hash": "cdd678ff74c0e72d74d044f301c6d83d",
        "text": "| PolymorphicVariantValue (tag_name, None) ->\n\"「\" ^ tag_name ^ \"」\"\n| PolymorphicVariantValue (tag_name, Some value) ->\nlet formatted_tag = \"「\" ^ tag_name ^ \"」\" in\nFormatting.format_constructor ~name:formatted_tag ~formatter:value_to_string [value]\n| _ -> \"constructor_value_to_string: 不是构造器类型\"",
        "lines": [
          "| PolymorphicVariantValue (tag_name, None) ->",
          "\"「\" ^ tag_name ^ \"」\"",
          "| PolymorphicVariantValue (tag_name, Some value) ->",
          "let formatted_tag = \"「\" ^ tag_name ^ \"」\" in",
          "Formatting.format_constructor ~name:formatted_tag ~formatter:value_to_string [value]",
          "| _ -> \"constructor_value_to_string: 不是构造器类型\""
        ],
        "start_line": 58,
        "end_line": 63,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_advanced_ops.ml"
      },
      {
        "hash": "cdd678ff74c0e72d74d044f301c6d83d",
        "text": "| PolymorphicVariantValue (tag_name, None) ->\n\"「\" ^ tag_name ^ \"」\"\n| PolymorphicVariantValue (tag_name, Some value) ->\nlet formatted_tag = \"「\" ^ tag_name ^ \"」\" in\nFormatting.format_constructor ~name:formatted_tag ~formatter:value_to_string [value]\n| _ -> \"constructor_value_to_string: 不是构造器类型\"",
        "lines": [
          "| PolymorphicVariantValue (tag_name, None) ->",
          "\"「\" ^ tag_name ^ \"」\"",
          "| PolymorphicVariantValue (tag_name, Some value) ->",
          "let formatted_tag = \"「\" ^ tag_name ^ \"」\" in",
          "Formatting.format_constructor ~name:formatted_tag ~formatter:value_to_string [value]",
          "| _ -> \"constructor_value_to_string: 不是构造器类型\""
        ],
        "start_line": 85,
        "end_line": 90,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_operations_conversion.ml"
      }
    ],
    "df50ce89d635899c4b1bcd6472d76dfc": [
      {
        "hash": "df50ce89d635899c4b1bcd6472d76dfc",
        "text": "\"「\" ^ tag_name ^ \"」\"\n| PolymorphicVariantValue (tag_name, Some value) ->\nlet formatted_tag = \"「\" ^ tag_name ^ \"」\" in\nFormatting.format_constructor ~name:formatted_tag ~formatter:value_to_string [value]\n| _ -> \"constructor_value_to_string: 不是构造器类型\"",
        "lines": [
          "\"「\" ^ tag_name ^ \"」\"",
          "| PolymorphicVariantValue (tag_name, Some value) ->",
          "let formatted_tag = \"「\" ^ tag_name ^ \"」\" in",
          "Formatting.format_constructor ~name:formatted_tag ~formatter:value_to_string [value]",
          "| _ -> \"constructor_value_to_string: 不是构造器类型\""
        ],
        "start_line": 59,
        "end_line": 63,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_advanced_ops.ml"
      },
      {
        "hash": "df50ce89d635899c4b1bcd6472d76dfc",
        "text": "\"「\" ^ tag_name ^ \"」\"\n| PolymorphicVariantValue (tag_name, Some value) ->\nlet formatted_tag = \"「\" ^ tag_name ^ \"」\" in\nFormatting.format_constructor ~name:formatted_tag ~formatter:value_to_string [value]\n| _ -> \"constructor_value_to_string: 不是构造器类型\"",
        "lines": [
          "\"「\" ^ tag_name ^ \"」\"",
          "| PolymorphicVariantValue (tag_name, Some value) ->",
          "let formatted_tag = \"「\" ^ tag_name ^ \"」\" in",
          "Formatting.format_constructor ~name:formatted_tag ~formatter:value_to_string [value]",
          "| _ -> \"constructor_value_to_string: 不是构造器类型\""
        ],
        "start_line": 86,
        "end_line": 90,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_operations_conversion.ml"
      }
    ],
    "359de2165169f2a52efaa3fb198329fe": [
      {
        "hash": "359de2165169f2a52efaa3fb198329fe",
        "text": "| PolymorphicVariantValue (tag_name, Some value) ->\nlet formatted_tag = \"「\" ^ tag_name ^ \"」\" in\nFormatting.format_constructor ~name:formatted_tag ~formatter:value_to_string [value]\n| _ -> \"constructor_value_to_string: 不是构造器类型\"",
        "lines": [
          "| PolymorphicVariantValue (tag_name, Some value) ->",
          "let formatted_tag = \"「\" ^ tag_name ^ \"」\" in",
          "Formatting.format_constructor ~name:formatted_tag ~formatter:value_to_string [value]",
          "| _ -> \"constructor_value_to_string: 不是构造器类型\""
        ],
        "start_line": 60,
        "end_line": 63,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_advanced_ops.ml"
      },
      {
        "hash": "359de2165169f2a52efaa3fb198329fe",
        "text": "| PolymorphicVariantValue (tag_name, Some value) ->\nlet formatted_tag = \"「\" ^ tag_name ^ \"」\" in\nFormatting.format_constructor ~name:formatted_tag ~formatter:value_to_string [value]\n| _ -> \"constructor_value_to_string: 不是构造器类型\"",
        "lines": [
          "| PolymorphicVariantValue (tag_name, Some value) ->",
          "let formatted_tag = \"「\" ^ tag_name ^ \"」\" in",
          "Formatting.format_constructor ~name:formatted_tag ~formatter:value_to_string [value]",
          "| _ -> \"constructor_value_to_string: 不是构造器类型\""
        ],
        "start_line": 87,
        "end_line": 90,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_operations_conversion.ml"
      }
    ],
    "60446bf251d9648aa27fc8cd5bef3ef5": [
      {
        "hash": "60446bf251d9648aa27fc8cd5bef3ef5",
        "text": "let formatted_tag = \"「\" ^ tag_name ^ \"」\" in\nFormatting.format_constructor ~name:formatted_tag ~formatter:value_to_string [value]\n| _ -> \"constructor_value_to_string: 不是构造器类型\"",
        "lines": [
          "let formatted_tag = \"「\" ^ tag_name ^ \"」\" in",
          "Formatting.format_constructor ~name:formatted_tag ~formatter:value_to_string [value]",
          "| _ -> \"constructor_value_to_string: 不是构造器类型\""
        ],
        "start_line": 61,
        "end_line": 63,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_advanced_ops.ml"
      },
      {
        "hash": "60446bf251d9648aa27fc8cd5bef3ef5",
        "text": "let formatted_tag = \"「\" ^ tag_name ^ \"」\" in\nFormatting.format_constructor ~name:formatted_tag ~formatter:value_to_string [value]\n| _ -> \"constructor_value_to_string: 不是构造器类型\"",
        "lines": [
          "let formatted_tag = \"「\" ^ tag_name ^ \"」\" in",
          "Formatting.format_constructor ~name:formatted_tag ~formatter:value_to_string [value]",
          "| _ -> \"constructor_value_to_string: 不是构造器类型\""
        ],
        "start_line": 88,
        "end_line": 90,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_operations_conversion.ml"
      }
    ],
    "c50f78fd9a945c19fd52e1f6e87af72c": [
      {
        "hash": "c50f78fd9a945c19fd52e1f6e87af72c",
        "text": "let module_value_to_string value =\nmatch value with\n| ModuleValue bindings ->\nlet names = List.map (fun (name, _) -> name) bindings in\nlet formatted_names = String.concat \", \" names in\n\"<模块: \" ^ formatted_names ^ \">\"\n| _ -> \"module_value_to_string: 不是模块类型\"",
        "lines": [
          "let module_value_to_string value =",
          "match value with",
          "| ModuleValue bindings ->",
          "let names = List.map (fun (name, _) -> name) bindings in",
          "let formatted_names = String.concat \", \" names in",
          "\"<模块: \" ^ formatted_names ^ \">\"",
          "| _ -> \"module_value_to_string: 不是模块类型\""
        ],
        "start_line": 66,
        "end_line": 72,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_advanced_ops.ml"
      },
      {
        "hash": "c50f78fd9a945c19fd52e1f6e87af72c",
        "text": "let module_value_to_string value =\nmatch value with\n| ModuleValue bindings ->\nlet names = List.map (fun (name, _) -> name) bindings in\nlet formatted_names = String.concat \", \" names in\n\"<模块: \" ^ formatted_names ^ \">\"\n| _ -> \"module_value_to_string: 不是模块类型\"",
        "lines": [
          "let module_value_to_string value =",
          "match value with",
          "| ModuleValue bindings ->",
          "let names = List.map (fun (name, _) -> name) bindings in",
          "let formatted_names = String.concat \", \" names in",
          "\"<模块: \" ^ formatted_names ^ \">\"",
          "| _ -> \"module_value_to_string: 不是模块类型\""
        ],
        "start_line": 93,
        "end_line": 99,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_operations_conversion.ml"
      }
    ],
    "f285ab6e0abb32fc8597a0cc859aefa3": [
      {
        "hash": "f285ab6e0abb32fc8597a0cc859aefa3",
        "text": "match value with\n| ModuleValue bindings ->\nlet names = List.map (fun (name, _) -> name) bindings in\nlet formatted_names = String.concat \", \" names in\n\"<模块: \" ^ formatted_names ^ \">\"\n| _ -> \"module_value_to_string: 不是模块类型\"",
        "lines": [
          "match value with",
          "| ModuleValue bindings ->",
          "let names = List.map (fun (name, _) -> name) bindings in",
          "let formatted_names = String.concat \", \" names in",
          "\"<模块: \" ^ formatted_names ^ \">\"",
          "| _ -> \"module_value_to_string: 不是模块类型\""
        ],
        "start_line": 67,
        "end_line": 72,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_advanced_ops.ml"
      },
      {
        "hash": "f285ab6e0abb32fc8597a0cc859aefa3",
        "text": "match value with\n| ModuleValue bindings ->\nlet names = List.map (fun (name, _) -> name) bindings in\nlet formatted_names = String.concat \", \" names in\n\"<模块: \" ^ formatted_names ^ \">\"\n| _ -> \"module_value_to_string: 不是模块类型\"",
        "lines": [
          "match value with",
          "| ModuleValue bindings ->",
          "let names = List.map (fun (name, _) -> name) bindings in",
          "let formatted_names = String.concat \", \" names in",
          "\"<模块: \" ^ formatted_names ^ \">\"",
          "| _ -> \"module_value_to_string: 不是模块类型\""
        ],
        "start_line": 94,
        "end_line": 99,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_operations_conversion.ml"
      }
    ],
    "42433c808eb1ba9f975bf32ae1faee99": [
      {
        "hash": "42433c808eb1ba9f975bf32ae1faee99",
        "text": "| ModuleValue bindings ->\nlet names = List.map (fun (name, _) -> name) bindings in\nlet formatted_names = String.concat \", \" names in\n\"<模块: \" ^ formatted_names ^ \">\"\n| _ -> \"module_value_to_string: 不是模块类型\"",
        "lines": [
          "| ModuleValue bindings ->",
          "let names = List.map (fun (name, _) -> name) bindings in",
          "let formatted_names = String.concat \", \" names in",
          "\"<模块: \" ^ formatted_names ^ \">\"",
          "| _ -> \"module_value_to_string: 不是模块类型\""
        ],
        "start_line": 68,
        "end_line": 72,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_advanced_ops.ml"
      },
      {
        "hash": "42433c808eb1ba9f975bf32ae1faee99",
        "text": "| ModuleValue bindings ->\nlet names = List.map (fun (name, _) -> name) bindings in\nlet formatted_names = String.concat \", \" names in\n\"<模块: \" ^ formatted_names ^ \">\"\n| _ -> \"module_value_to_string: 不是模块类型\"",
        "lines": [
          "| ModuleValue bindings ->",
          "let names = List.map (fun (name, _) -> name) bindings in",
          "let formatted_names = String.concat \", \" names in",
          "\"<模块: \" ^ formatted_names ^ \">\"",
          "| _ -> \"module_value_to_string: 不是模块类型\""
        ],
        "start_line": 95,
        "end_line": 99,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_operations_conversion.ml"
      }
    ],
    "2f752b22a042128763d6d9de70cde2ee": [
      {
        "hash": "2f752b22a042128763d6d9de70cde2ee",
        "text": "let names = List.map (fun (name, _) -> name) bindings in\nlet formatted_names = String.concat \", \" names in\n\"<模块: \" ^ formatted_names ^ \">\"\n| _ -> \"module_value_to_string: 不是模块类型\"",
        "lines": [
          "let names = List.map (fun (name, _) -> name) bindings in",
          "let formatted_names = String.concat \", \" names in",
          "\"<模块: \" ^ formatted_names ^ \">\"",
          "| _ -> \"module_value_to_string: 不是模块类型\""
        ],
        "start_line": 69,
        "end_line": 72,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_advanced_ops.ml"
      },
      {
        "hash": "2f752b22a042128763d6d9de70cde2ee",
        "text": "let names = List.map (fun (name, _) -> name) bindings in\nlet formatted_names = String.concat \", \" names in\n\"<模块: \" ^ formatted_names ^ \">\"\n| _ -> \"module_value_to_string: 不是模块类型\"",
        "lines": [
          "let names = List.map (fun (name, _) -> name) bindings in",
          "let formatted_names = String.concat \", \" names in",
          "\"<模块: \" ^ formatted_names ^ \">\"",
          "| _ -> \"module_value_to_string: 不是模块类型\""
        ],
        "start_line": 96,
        "end_line": 99,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_operations_conversion.ml"
      }
    ],
    "f61bb7ecca693d40d99e0ccb4634950e": [
      {
        "hash": "f61bb7ecca693d40d99e0ccb4634950e",
        "text": "let formatted_names = String.concat \", \" names in\n\"<模块: \" ^ formatted_names ^ \">\"\n| _ -> \"module_value_to_string: 不是模块类型\"",
        "lines": [
          "let formatted_names = String.concat \", \" names in",
          "\"<模块: \" ^ formatted_names ^ \">\"",
          "| _ -> \"module_value_to_string: 不是模块类型\""
        ],
        "start_line": 70,
        "end_line": 72,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_advanced_ops.ml"
      },
      {
        "hash": "f61bb7ecca693d40d99e0ccb4634950e",
        "text": "let formatted_names = String.concat \", \" names in\n\"<模块: \" ^ formatted_names ^ \">\"\n| _ -> \"module_value_to_string: 不是模块类型\"",
        "lines": [
          "let formatted_names = String.concat \", \" names in",
          "\"<模块: \" ^ formatted_names ^ \">\"",
          "| _ -> \"module_value_to_string: 不是模块类型\""
        ],
        "start_line": 97,
        "end_line": 99,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_operations_conversion.ml"
      }
    ],
    "b6d49e15f9050f05f0dea6fb782eb6e4": [
      {
        "hash": "b6d49e15f9050f05f0dea6fb782eb6e4",
        "text": "let register_constructors env type_def =\nmatch type_def with\n| AlgebraicType constructors ->",
        "lines": [
          "let register_constructors env type_def =",
          "match type_def with",
          "| AlgebraicType constructors ->"
        ],
        "start_line": 93,
        "end_line": 95,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_advanced_ops.ml"
      },
      {
        "hash": "b6d49e15f9050f05f0dea6fb782eb6e4",
        "text": "let register_constructors env type_def =\nmatch type_def with\n| AlgebraicType constructors ->",
        "lines": [
          "let register_constructors env type_def =",
          "match type_def with",
          "| AlgebraicType constructors ->"
        ],
        "start_line": 103,
        "end_line": 105,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/pattern_matcher.ml"
      },
      {
        "hash": "b6d49e15f9050f05f0dea6fb782eb6e4",
        "text": "let register_constructors env type_def =\nmatch type_def with\n| AlgebraicType constructors ->",
        "lines": [
          "let register_constructors env type_def =",
          "match type_def with",
          "| AlgebraicType constructors ->"
        ],
        "start_line": 24,
        "end_line": 26,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_operations_advanced.ml"
      }
    ],
    "e6b27d12b4cf7d2d8c9810b93ad847a1": [
      {
        "hash": "e6b27d12b4cf7d2d8c9810b93ad847a1",
        "text": "List.fold_left\n(fun acc_env (constructor_name, _type_opt) ->\nlet constructor_func =\nBuiltinFunctionValue (fun args -> ConstructorValue (constructor_name, args))\nin\nbind_var acc_env constructor_name constructor_func)\nenv constructors\n| _ -> env",
        "lines": [
          "List.fold_left",
          "(fun acc_env (constructor_name, _type_opt) ->",
          "let constructor_func =",
          "BuiltinFunctionValue (fun args -> ConstructorValue (constructor_name, args))",
          "in",
          "bind_var acc_env constructor_name constructor_func)",
          "env constructors",
          "| _ -> env"
        ],
        "start_line": 97,
        "end_line": 104,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_advanced_ops.ml"
      },
      {
        "hash": "e6b27d12b4cf7d2d8c9810b93ad847a1",
        "text": "List.fold_left\n(fun acc_env (constructor_name, _type_opt) ->\nlet constructor_func =\nBuiltinFunctionValue (fun args -> ConstructorValue (constructor_name, args))\nin\nbind_var acc_env constructor_name constructor_func)\nenv constructors\n| _ -> env",
        "lines": [
          "List.fold_left",
          "(fun acc_env (constructor_name, _type_opt) ->",
          "let constructor_func =",
          "BuiltinFunctionValue (fun args -> ConstructorValue (constructor_name, args))",
          "in",
          "bind_var acc_env constructor_name constructor_func)",
          "env constructors",
          "| _ -> env"
        ],
        "start_line": 28,
        "end_line": 35,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_operations_advanced.ml"
      }
    ],
    "d024020fa70f25af64d4d399a7f704c0": [
      {
        "hash": "d024020fa70f25af64d4d399a7f704c0",
        "text": "(fun acc_env (constructor_name, _type_opt) ->\nlet constructor_func =\nBuiltinFunctionValue (fun args -> ConstructorValue (constructor_name, args))\nin\nbind_var acc_env constructor_name constructor_func)\nenv constructors\n| _ -> env",
        "lines": [
          "(fun acc_env (constructor_name, _type_opt) ->",
          "let constructor_func =",
          "BuiltinFunctionValue (fun args -> ConstructorValue (constructor_name, args))",
          "in",
          "bind_var acc_env constructor_name constructor_func)",
          "env constructors",
          "| _ -> env"
        ],
        "start_line": 98,
        "end_line": 104,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_advanced_ops.ml"
      },
      {
        "hash": "d024020fa70f25af64d4d399a7f704c0",
        "text": "(fun acc_env (constructor_name, _type_opt) ->\nlet constructor_func =\nBuiltinFunctionValue (fun args -> ConstructorValue (constructor_name, args))\nin\nbind_var acc_env constructor_name constructor_func)\nenv constructors\n| _ -> env",
        "lines": [
          "(fun acc_env (constructor_name, _type_opt) ->",
          "let constructor_func =",
          "BuiltinFunctionValue (fun args -> ConstructorValue (constructor_name, args))",
          "in",
          "bind_var acc_env constructor_name constructor_func)",
          "env constructors",
          "| _ -> env"
        ],
        "start_line": 29,
        "end_line": 35,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_operations_advanced.ml"
      }
    ],
    "5bee2b8d32e0f7ac01a46cbfd8aa5b87": [
      {
        "hash": "5bee2b8d32e0f7ac01a46cbfd8aa5b87",
        "text": "let constructor_func =\nBuiltinFunctionValue (fun args -> ConstructorValue (constructor_name, args))\nin\nbind_var acc_env constructor_name constructor_func)\nenv constructors\n| _ -> env",
        "lines": [
          "let constructor_func =",
          "BuiltinFunctionValue (fun args -> ConstructorValue (constructor_name, args))",
          "in",
          "bind_var acc_env constructor_name constructor_func)",
          "env constructors",
          "| _ -> env"
        ],
        "start_line": 99,
        "end_line": 104,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_advanced_ops.ml"
      },
      {
        "hash": "5bee2b8d32e0f7ac01a46cbfd8aa5b87",
        "text": "let constructor_func =\nBuiltinFunctionValue (fun args -> ConstructorValue (constructor_name, args))\nin\nbind_var acc_env constructor_name constructor_func)\nenv constructors\n| _ -> env",
        "lines": [
          "let constructor_func =",
          "BuiltinFunctionValue (fun args -> ConstructorValue (constructor_name, args))",
          "in",
          "bind_var acc_env constructor_name constructor_func)",
          "env constructors",
          "| _ -> env"
        ],
        "start_line": 30,
        "end_line": 35,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_operations_advanced.ml"
      }
    ],
    "d3985551399274c3372d442e0eecb04f": [
      {
        "hash": "d3985551399274c3372d442e0eecb04f",
        "text": "BuiltinFunctionValue (fun args -> ConstructorValue (constructor_name, args))\nin\nbind_var acc_env constructor_name constructor_func)\nenv constructors\n| _ -> env",
        "lines": [
          "BuiltinFunctionValue (fun args -> ConstructorValue (constructor_name, args))",
          "in",
          "bind_var acc_env constructor_name constructor_func)",
          "env constructors",
          "| _ -> env"
        ],
        "start_line": 100,
        "end_line": 104,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_advanced_ops.ml"
      },
      {
        "hash": "d3985551399274c3372d442e0eecb04f",
        "text": "BuiltinFunctionValue (fun args -> ConstructorValue (constructor_name, args))\nin\nbind_var acc_env constructor_name constructor_func)\nenv constructors\n| _ -> env",
        "lines": [
          "BuiltinFunctionValue (fun args -> ConstructorValue (constructor_name, args))",
          "in",
          "bind_var acc_env constructor_name constructor_func)",
          "env constructors",
          "| _ -> env"
        ],
        "start_line": 31,
        "end_line": 35,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_operations_advanced.ml"
      }
    ],
    "085817bbc0c4db3207885accb07b9ad8": [
      {
        "hash": "085817bbc0c4db3207885accb07b9ad8",
        "text": "in\nbind_var acc_env constructor_name constructor_func)\nenv constructors\n| _ -> env",
        "lines": [
          "in",
          "bind_var acc_env constructor_name constructor_func)",
          "env constructors",
          "| _ -> env"
        ],
        "start_line": 101,
        "end_line": 104,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_advanced_ops.ml"
      },
      {
        "hash": "085817bbc0c4db3207885accb07b9ad8",
        "text": "in\nbind_var acc_env constructor_name constructor_func)\nenv constructors\n| _ -> env",
        "lines": [
          "in",
          "bind_var acc_env constructor_name constructor_func)",
          "env constructors",
          "| _ -> env"
        ],
        "start_line": 32,
        "end_line": 35,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_operations_advanced.ml"
      }
    ],
    "12303508fa228586e699c3192ac56524": [
      {
        "hash": "12303508fa228586e699c3192ac56524",
        "text": "bind_var acc_env constructor_name constructor_func)\nenv constructors\n| _ -> env",
        "lines": [
          "bind_var acc_env constructor_name constructor_func)",
          "env constructors",
          "| _ -> env"
        ],
        "start_line": 102,
        "end_line": 104,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_advanced_ops.ml"
      },
      {
        "hash": "12303508fa228586e699c3192ac56524",
        "text": "bind_var acc_env constructor_name constructor_func)\nenv constructors\n| _ -> env",
        "lines": [
          "bind_var acc_env constructor_name constructor_func)",
          "env constructors",
          "| _ -> env"
        ],
        "start_line": 33,
        "end_line": 35,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_operations_advanced.ml"
      }
    ],
    "b1e2888c35cc90f858f2a0185157fcf4": [
      {
        "hash": "b1e2888c35cc90f858f2a0185157fcf4",
        "text": "error_type : string;\nerror_message : string;\ncontext : string option;\nsuggestions : string list;\nfix_hints : string list;\nconfidence : float;\n}",
        "lines": [
          "error_type : string;",
          "error_message : string;",
          "context : string option;",
          "suggestions : string list;",
          "fix_hints : string list;",
          "confidence : float;",
          "}"
        ],
        "start_line": 17,
        "end_line": 23,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/error_messages.ml"
      },
      {
        "hash": "b1e2888c35cc90f858f2a0185157fcf4",
        "text": "error_type : string;\nerror_message : string;\ncontext : string option;\nsuggestions : string list;\nfix_hints : string list;\nconfidence : float;\n}",
        "lines": [
          "error_type : string;",
          "error_message : string;",
          "context : string option;",
          "suggestions : string list;",
          "fix_hints : string list;",
          "confidence : float;",
          "}"
        ],
        "start_line": 7,
        "end_line": 13,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/error_messages_analysis.ml"
      }
    ],
    "d95b7aabf95c60e7421f351f6f15bdc1": [
      {
        "hash": "d95b7aabf95c60e7421f351f6f15bdc1",
        "text": "error_message : string;\ncontext : string option;\nsuggestions : string list;\nfix_hints : string list;\nconfidence : float;\n}",
        "lines": [
          "error_message : string;",
          "context : string option;",
          "suggestions : string list;",
          "fix_hints : string list;",
          "confidence : float;",
          "}"
        ],
        "start_line": 18,
        "end_line": 23,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/error_messages.ml"
      },
      {
        "hash": "d95b7aabf95c60e7421f351f6f15bdc1",
        "text": "error_message : string;\ncontext : string option;\nsuggestions : string list;\nfix_hints : string list;\nconfidence : float;\n}",
        "lines": [
          "error_message : string;",
          "context : string option;",
          "suggestions : string list;",
          "fix_hints : string list;",
          "confidence : float;",
          "}"
        ],
        "start_line": 8,
        "end_line": 13,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/error_messages_analysis.ml"
      }
    ],
    "7309fd1a6049a86df29b9216d7958d06": [
      {
        "hash": "7309fd1a6049a86df29b9216d7958d06",
        "text": "context : string option;\nsuggestions : string list;\nfix_hints : string list;\nconfidence : float;\n}",
        "lines": [
          "context : string option;",
          "suggestions : string list;",
          "fix_hints : string list;",
          "confidence : float;",
          "}"
        ],
        "start_line": 19,
        "end_line": 23,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/error_messages.ml"
      },
      {
        "hash": "7309fd1a6049a86df29b9216d7958d06",
        "text": "context : string option;\nsuggestions : string list;\nfix_hints : string list;\nconfidence : float;\n}",
        "lines": [
          "context : string option;",
          "suggestions : string list;",
          "fix_hints : string list;",
          "confidence : float;",
          "}"
        ],
        "start_line": 9,
        "end_line": 13,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/error_messages_analysis.ml"
      }
    ],
    "6a82e572e59d5a18cbab0c6df02e37e2": [
      {
        "hash": "6a82e572e59d5a18cbab0c6df02e37e2",
        "text": "suggestions : string list;\nfix_hints : string list;\nconfidence : float;\n}",
        "lines": [
          "suggestions : string list;",
          "fix_hints : string list;",
          "confidence : float;",
          "}"
        ],
        "start_line": 20,
        "end_line": 23,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/error_messages.ml"
      },
      {
        "hash": "6a82e572e59d5a18cbab0c6df02e37e2",
        "text": "suggestions : string list;\nfix_hints : string list;\nconfidence : float;\n}",
        "lines": [
          "suggestions : string list;",
          "fix_hints : string list;",
          "confidence : float;",
          "}"
        ],
        "start_line": 10,
        "end_line": 13,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/error_messages_analysis.ml"
      }
    ],
    "7c1677eedebbe92b6b04daeb8c848671": [
      {
        "hash": "7c1677eedebbe92b6b04daeb8c848671",
        "text": "fix_hints : string list;\nconfidence : float;\n}",
        "lines": [
          "fix_hints : string list;",
          "confidence : float;",
          "}"
        ],
        "start_line": 21,
        "end_line": 23,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/error_messages.ml"
      },
      {
        "hash": "7c1677eedebbe92b6b04daeb8c848671",
        "text": "fix_hints : string list;\nconfidence : float;\n}",
        "lines": [
          "fix_hints : string list;",
          "confidence : float;",
          "}"
        ],
        "start_line": 11,
        "end_line": 13,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/error_messages_analysis.ml"
      }
    ],
    "0f553d8980f54da1a5cdc35949d93454": [
      {
        "hash": "0f553d8980f54da1a5cdc35949d93454",
        "text": "in\nlet _, pos = current_token state in\nraise (Parser_utils.make_unexpected_token_error error_msg pos)",
        "lines": [
          "in",
          "let _, pos = current_token state in",
          "raise (Parser_utils.make_unexpected_token_error error_msg pos)"
        ],
        "start_line": 106,
        "end_line": 108,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_literals.ml"
      },
      {
        "hash": "0f553d8980f54da1a5cdc35949d93454",
        "text": "in\nlet _, pos = current_token state in\nraise (Parser_utils.make_unexpected_token_error error_msg pos)",
        "lines": [
          "in",
          "let _, pos = current_token state in",
          "raise (Parser_utils.make_unexpected_token_error error_msg pos)"
        ],
        "start_line": 29,
        "end_line": 31,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_special.ml"
      },
      {
        "hash": "0f553d8980f54da1a5cdc35949d93454",
        "text": "in\nlet _, pos = current_token state in\nraise (Parser_utils.make_unexpected_token_error error_msg pos)",
        "lines": [
          "in",
          "let _, pos = current_token state in",
          "raise (Parser_utils.make_unexpected_token_error error_msg pos)"
        ],
        "start_line": 30,
        "end_line": 32,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_identifiers.ml"
      },
      {
        "hash": "0f553d8980f54da1a5cdc35949d93454",
        "text": "in\nlet _, pos = current_token state in\nraise (Parser_utils.make_unexpected_token_error error_msg pos)",
        "lines": [
          "in",
          "let _, pos = current_token state in",
          "raise (Parser_utils.make_unexpected_token_error error_msg pos)"
        ],
        "start_line": 101,
        "end_line": 103,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_primary_consolidated.ml"
      }
    ],
    "4f426abab99999dd24987c0ea740f668": [
      {
        "hash": "4f426abab99999dd24987c0ea740f668",
        "text": "| IntToken i -> advance_and_return (LitExpr (IntLit i)) state\n| ChineseNumberToken s ->\nlet n = Parser_utils.chinese_number_to_int s in\nadvance_and_return (LitExpr (IntLit n)) state\n| FloatToken f -> advance_and_return (LitExpr (FloatLit f)) state\n| StringToken s -> advance_and_return (LitExpr (StringLit s)) state\n| TrueKeyword -> advance_and_return (LitExpr (BoolLit true)) state\n| FalseKeyword -> advance_and_return (LitExpr (BoolLit false)) state\n| OneKeyword -> advance_and_return (LitExpr (IntLit 1)) state\n| _ ->",
        "lines": [
          "| IntToken i -> advance_and_return (LitExpr (IntLit i)) state",
          "| ChineseNumberToken s ->",
          "let n = Parser_utils.chinese_number_to_int s in",
          "advance_and_return (LitExpr (IntLit n)) state",
          "| FloatToken f -> advance_and_return (LitExpr (FloatLit f)) state",
          "| StringToken s -> advance_and_return (LitExpr (StringLit s)) state",
          "| TrueKeyword -> advance_and_return (LitExpr (BoolLit true)) state",
          "| FalseKeyword -> advance_and_return (LitExpr (BoolLit false)) state",
          "| OneKeyword -> advance_and_return (LitExpr (IntLit 1)) state",
          "| _ ->"
        ],
        "start_line": 119,
        "end_line": 128,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_literals.ml"
      },
      {
        "hash": "4f426abab99999dd24987c0ea740f668",
        "text": "| IntToken i -> advance_and_return (LitExpr (IntLit i)) state\n| ChineseNumberToken s ->\nlet n = Parser_utils.chinese_number_to_int s in\nadvance_and_return (LitExpr (IntLit n)) state\n| FloatToken f -> advance_and_return (LitExpr (FloatLit f)) state\n| StringToken s -> advance_and_return (LitExpr (StringLit s)) state\n| TrueKeyword -> advance_and_return (LitExpr (BoolLit true)) state\n| FalseKeyword -> advance_and_return (LitExpr (BoolLit false)) state\n| OneKeyword -> advance_and_return (LitExpr (IntLit 1)) state\n| _ ->",
        "lines": [
          "| IntToken i -> advance_and_return (LitExpr (IntLit i)) state",
          "| ChineseNumberToken s ->",
          "let n = Parser_utils.chinese_number_to_int s in",
          "advance_and_return (LitExpr (IntLit n)) state",
          "| FloatToken f -> advance_and_return (LitExpr (FloatLit f)) state",
          "| StringToken s -> advance_and_return (LitExpr (StringLit s)) state",
          "| TrueKeyword -> advance_and_return (LitExpr (BoolLit true)) state",
          "| FalseKeyword -> advance_and_return (LitExpr (BoolLit false)) state",
          "| OneKeyword -> advance_and_return (LitExpr (IntLit 1)) state",
          "| _ ->"
        ],
        "start_line": 140,
        "end_line": 149,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_literals.ml"
      }
    ],
    "d91df59e1abc39875f66473c06f084f1": [
      {
        "hash": "d91df59e1abc39875f66473c06f084f1",
        "text": "| ChineseNumberToken s ->\nlet n = Parser_utils.chinese_number_to_int s in\nadvance_and_return (LitExpr (IntLit n)) state\n| FloatToken f -> advance_and_return (LitExpr (FloatLit f)) state\n| StringToken s -> advance_and_return (LitExpr (StringLit s)) state\n| TrueKeyword -> advance_and_return (LitExpr (BoolLit true)) state\n| FalseKeyword -> advance_and_return (LitExpr (BoolLit false)) state\n| OneKeyword -> advance_and_return (LitExpr (IntLit 1)) state\n| _ ->\nraise",
        "lines": [
          "| ChineseNumberToken s ->",
          "let n = Parser_utils.chinese_number_to_int s in",
          "advance_and_return (LitExpr (IntLit n)) state",
          "| FloatToken f -> advance_and_return (LitExpr (FloatLit f)) state",
          "| StringToken s -> advance_and_return (LitExpr (StringLit s)) state",
          "| TrueKeyword -> advance_and_return (LitExpr (BoolLit true)) state",
          "| FalseKeyword -> advance_and_return (LitExpr (BoolLit false)) state",
          "| OneKeyword -> advance_and_return (LitExpr (IntLit 1)) state",
          "| _ ->",
          "raise"
        ],
        "start_line": 120,
        "end_line": 129,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_literals.ml"
      },
      {
        "hash": "d91df59e1abc39875f66473c06f084f1",
        "text": "| ChineseNumberToken s ->\nlet n = Parser_utils.chinese_number_to_int s in\nadvance_and_return (LitExpr (IntLit n)) state\n| FloatToken f -> advance_and_return (LitExpr (FloatLit f)) state\n| StringToken s -> advance_and_return (LitExpr (StringLit s)) state\n| TrueKeyword -> advance_and_return (LitExpr (BoolLit true)) state\n| FalseKeyword -> advance_and_return (LitExpr (BoolLit false)) state\n| OneKeyword -> advance_and_return (LitExpr (IntLit 1)) state\n| _ ->\nraise",
        "lines": [
          "| ChineseNumberToken s ->",
          "let n = Parser_utils.chinese_number_to_int s in",
          "advance_and_return (LitExpr (IntLit n)) state",
          "| FloatToken f -> advance_and_return (LitExpr (FloatLit f)) state",
          "| StringToken s -> advance_and_return (LitExpr (StringLit s)) state",
          "| TrueKeyword -> advance_and_return (LitExpr (BoolLit true)) state",
          "| FalseKeyword -> advance_and_return (LitExpr (BoolLit false)) state",
          "| OneKeyword -> advance_and_return (LitExpr (IntLit 1)) state",
          "| _ ->",
          "raise"
        ],
        "start_line": 141,
        "end_line": 150,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_literals.ml"
      }
    ],
    "b6cf454f09858ab9b89ff030e956cedb": [
      {
        "hash": "b6cf454f09858ab9b89ff030e956cedb",
        "text": "let n = Parser_utils.chinese_number_to_int s in\nadvance_and_return (LitExpr (IntLit n)) state\n| FloatToken f -> advance_and_return (LitExpr (FloatLit f)) state\n| StringToken s -> advance_and_return (LitExpr (StringLit s)) state\n| TrueKeyword -> advance_and_return (LitExpr (BoolLit true)) state\n| FalseKeyword -> advance_and_return (LitExpr (BoolLit false)) state\n| OneKeyword -> advance_and_return (LitExpr (IntLit 1)) state\n| _ ->\nraise\n(Parser_utils.make_unexpected_token_error",
        "lines": [
          "let n = Parser_utils.chinese_number_to_int s in",
          "advance_and_return (LitExpr (IntLit n)) state",
          "| FloatToken f -> advance_and_return (LitExpr (FloatLit f)) state",
          "| StringToken s -> advance_and_return (LitExpr (StringLit s)) state",
          "| TrueKeyword -> advance_and_return (LitExpr (BoolLit true)) state",
          "| FalseKeyword -> advance_and_return (LitExpr (BoolLit false)) state",
          "| OneKeyword -> advance_and_return (LitExpr (IntLit 1)) state",
          "| _ ->",
          "raise",
          "(Parser_utils.make_unexpected_token_error"
        ],
        "start_line": 121,
        "end_line": 130,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_literals.ml"
      },
      {
        "hash": "b6cf454f09858ab9b89ff030e956cedb",
        "text": "let n = Parser_utils.chinese_number_to_int s in\nadvance_and_return (LitExpr (IntLit n)) state\n| FloatToken f -> advance_and_return (LitExpr (FloatLit f)) state\n| StringToken s -> advance_and_return (LitExpr (StringLit s)) state\n| TrueKeyword -> advance_and_return (LitExpr (BoolLit true)) state\n| FalseKeyword -> advance_and_return (LitExpr (BoolLit false)) state\n| OneKeyword -> advance_and_return (LitExpr (IntLit 1)) state\n| _ ->\nraise\n(Parser_utils.make_unexpected_token_error",
        "lines": [
          "let n = Parser_utils.chinese_number_to_int s in",
          "advance_and_return (LitExpr (IntLit n)) state",
          "| FloatToken f -> advance_and_return (LitExpr (FloatLit f)) state",
          "| StringToken s -> advance_and_return (LitExpr (StringLit s)) state",
          "| TrueKeyword -> advance_and_return (LitExpr (BoolLit true)) state",
          "| FalseKeyword -> advance_and_return (LitExpr (BoolLit false)) state",
          "| OneKeyword -> advance_and_return (LitExpr (IntLit 1)) state",
          "| _ ->",
          "raise",
          "(Parser_utils.make_unexpected_token_error"
        ],
        "start_line": 142,
        "end_line": 151,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_literals.ml"
      }
    ],
    "ec7ef44c908ee533c1f25dfb476d8e8b": [
      {
        "hash": "ec7ef44c908ee533c1f25dfb476d8e8b",
        "text": "match typ with\n| IntType_T | FloatType_T | StringType_T | BoolType_T | UnitType_T -> typ\n| TypeVar_T var_name -> ( try SubstMap.find var_name subst with Not_found -> typ)\n| FunType_T (param_type, return_type) ->\nFunType_T (apply_subst subst param_type, apply_subst subst return_type)\n| TupleType_T type_list -> TupleType_T (List.map (apply_subst subst) type_list)\n| ListType_T elem_type -> ListType_T (apply_subst subst elem_type)\n| ConstructType_T (name, type_list) ->\nConstructType_T (name, List.map (apply_subst subst) type_list)\n| RefType_T inner_type -> RefType_T (apply_subst subst inner_type)",
        "lines": [
          "match typ with",
          "| IntType_T | FloatType_T | StringType_T | BoolType_T | UnitType_T -> typ",
          "| TypeVar_T var_name -> ( try SubstMap.find var_name subst with Not_found -> typ)",
          "| FunType_T (param_type, return_type) ->",
          "FunType_T (apply_subst subst param_type, apply_subst subst return_type)",
          "| TupleType_T type_list -> TupleType_T (List.map (apply_subst subst) type_list)",
          "| ListType_T elem_type -> ListType_T (apply_subst subst elem_type)",
          "| ConstructType_T (name, type_list) ->",
          "ConstructType_T (name, List.map (apply_subst subst) type_list)",
          "| RefType_T inner_type -> RefType_T (apply_subst subst inner_type)"
        ],
        "start_line": 89,
        "end_line": 98,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/types_unify.ml"
      },
      {
        "hash": "ec7ef44c908ee533c1f25dfb476d8e8b",
        "text": "match typ with\n| IntType_T | FloatType_T | StringType_T | BoolType_T | UnitType_T -> typ\n| TypeVar_T var_name -> ( try SubstMap.find var_name subst with Not_found -> typ)\n| FunType_T (param_type, return_type) ->\nFunType_T (apply_subst subst param_type, apply_subst subst return_type)\n| TupleType_T type_list -> TupleType_T (List.map (apply_subst subst) type_list)\n| ListType_T elem_type -> ListType_T (apply_subst subst elem_type)\n| ConstructType_T (name, type_list) ->\nConstructType_T (name, List.map (apply_subst subst) type_list)\n| RefType_T inner_type -> RefType_T (apply_subst subst inner_type)",
        "lines": [
          "match typ with",
          "| IntType_T | FloatType_T | StringType_T | BoolType_T | UnitType_T -> typ",
          "| TypeVar_T var_name -> ( try SubstMap.find var_name subst with Not_found -> typ)",
          "| FunType_T (param_type, return_type) ->",
          "FunType_T (apply_subst subst param_type, apply_subst subst return_type)",
          "| TupleType_T type_list -> TupleType_T (List.map (apply_subst subst) type_list)",
          "| ListType_T elem_type -> ListType_T (apply_subst subst elem_type)",
          "| ConstructType_T (name, type_list) ->",
          "ConstructType_T (name, List.map (apply_subst subst) type_list)",
          "| RefType_T inner_type -> RefType_T (apply_subst subst inner_type)"
        ],
        "start_line": 10,
        "end_line": 19,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/types_subst.ml"
      }
    ],
    "90be22a2e654721afc51b77f0228b57d": [
      {
        "hash": "90be22a2e654721afc51b77f0228b57d",
        "text": "| IntType_T | FloatType_T | StringType_T | BoolType_T | UnitType_T -> typ\n| TypeVar_T var_name -> ( try SubstMap.find var_name subst with Not_found -> typ)\n| FunType_T (param_type, return_type) ->\nFunType_T (apply_subst subst param_type, apply_subst subst return_type)\n| TupleType_T type_list -> TupleType_T (List.map (apply_subst subst) type_list)\n| ListType_T elem_type -> ListType_T (apply_subst subst elem_type)\n| ConstructType_T (name, type_list) ->\nConstructType_T (name, List.map (apply_subst subst) type_list)\n| RefType_T inner_type -> RefType_T (apply_subst subst inner_type)\n| RecordType_T fields ->",
        "lines": [
          "| IntType_T | FloatType_T | StringType_T | BoolType_T | UnitType_T -> typ",
          "| TypeVar_T var_name -> ( try SubstMap.find var_name subst with Not_found -> typ)",
          "| FunType_T (param_type, return_type) ->",
          "FunType_T (apply_subst subst param_type, apply_subst subst return_type)",
          "| TupleType_T type_list -> TupleType_T (List.map (apply_subst subst) type_list)",
          "| ListType_T elem_type -> ListType_T (apply_subst subst elem_type)",
          "| ConstructType_T (name, type_list) ->",
          "ConstructType_T (name, List.map (apply_subst subst) type_list)",
          "| RefType_T inner_type -> RefType_T (apply_subst subst inner_type)",
          "| RecordType_T fields ->"
        ],
        "start_line": 90,
        "end_line": 99,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/types_unify.ml"
      },
      {
        "hash": "90be22a2e654721afc51b77f0228b57d",
        "text": "| IntType_T | FloatType_T | StringType_T | BoolType_T | UnitType_T -> typ\n| TypeVar_T var_name -> ( try SubstMap.find var_name subst with Not_found -> typ)\n| FunType_T (param_type, return_type) ->\nFunType_T (apply_subst subst param_type, apply_subst subst return_type)\n| TupleType_T type_list -> TupleType_T (List.map (apply_subst subst) type_list)\n| ListType_T elem_type -> ListType_T (apply_subst subst elem_type)\n| ConstructType_T (name, type_list) ->\nConstructType_T (name, List.map (apply_subst subst) type_list)\n| RefType_T inner_type -> RefType_T (apply_subst subst inner_type)\n| RecordType_T fields ->",
        "lines": [
          "| IntType_T | FloatType_T | StringType_T | BoolType_T | UnitType_T -> typ",
          "| TypeVar_T var_name -> ( try SubstMap.find var_name subst with Not_found -> typ)",
          "| FunType_T (param_type, return_type) ->",
          "FunType_T (apply_subst subst param_type, apply_subst subst return_type)",
          "| TupleType_T type_list -> TupleType_T (List.map (apply_subst subst) type_list)",
          "| ListType_T elem_type -> ListType_T (apply_subst subst elem_type)",
          "| ConstructType_T (name, type_list) ->",
          "ConstructType_T (name, List.map (apply_subst subst) type_list)",
          "| RefType_T inner_type -> RefType_T (apply_subst subst inner_type)",
          "| RecordType_T fields ->"
        ],
        "start_line": 11,
        "end_line": 20,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/types_subst.ml"
      }
    ],
    "6c10ea7a6dfb1a1c4b121f50c5aa04b3": [
      {
        "hash": "6c10ea7a6dfb1a1c4b121f50c5aa04b3",
        "text": "| TypeVar_T var_name -> ( try SubstMap.find var_name subst with Not_found -> typ)\n| FunType_T (param_type, return_type) ->\nFunType_T (apply_subst subst param_type, apply_subst subst return_type)\n| TupleType_T type_list -> TupleType_T (List.map (apply_subst subst) type_list)\n| ListType_T elem_type -> ListType_T (apply_subst subst elem_type)\n| ConstructType_T (name, type_list) ->\nConstructType_T (name, List.map (apply_subst subst) type_list)\n| RefType_T inner_type -> RefType_T (apply_subst subst inner_type)\n| RecordType_T fields ->\nRecordType_T (List.map (fun (name, typ) -> (name, apply_subst subst typ)) fields)",
        "lines": [
          "| TypeVar_T var_name -> ( try SubstMap.find var_name subst with Not_found -> typ)",
          "| FunType_T (param_type, return_type) ->",
          "FunType_T (apply_subst subst param_type, apply_subst subst return_type)",
          "| TupleType_T type_list -> TupleType_T (List.map (apply_subst subst) type_list)",
          "| ListType_T elem_type -> ListType_T (apply_subst subst elem_type)",
          "| ConstructType_T (name, type_list) ->",
          "ConstructType_T (name, List.map (apply_subst subst) type_list)",
          "| RefType_T inner_type -> RefType_T (apply_subst subst inner_type)",
          "| RecordType_T fields ->",
          "RecordType_T (List.map (fun (name, typ) -> (name, apply_subst subst typ)) fields)"
        ],
        "start_line": 91,
        "end_line": 100,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/types_unify.ml"
      },
      {
        "hash": "6c10ea7a6dfb1a1c4b121f50c5aa04b3",
        "text": "| TypeVar_T var_name -> ( try SubstMap.find var_name subst with Not_found -> typ)\n| FunType_T (param_type, return_type) ->\nFunType_T (apply_subst subst param_type, apply_subst subst return_type)\n| TupleType_T type_list -> TupleType_T (List.map (apply_subst subst) type_list)\n| ListType_T elem_type -> ListType_T (apply_subst subst elem_type)\n| ConstructType_T (name, type_list) ->\nConstructType_T (name, List.map (apply_subst subst) type_list)\n| RefType_T inner_type -> RefType_T (apply_subst subst inner_type)\n| RecordType_T fields ->\nRecordType_T (List.map (fun (name, typ) -> (name, apply_subst subst typ)) fields)",
        "lines": [
          "| TypeVar_T var_name -> ( try SubstMap.find var_name subst with Not_found -> typ)",
          "| FunType_T (param_type, return_type) ->",
          "FunType_T (apply_subst subst param_type, apply_subst subst return_type)",
          "| TupleType_T type_list -> TupleType_T (List.map (apply_subst subst) type_list)",
          "| ListType_T elem_type -> ListType_T (apply_subst subst elem_type)",
          "| ConstructType_T (name, type_list) ->",
          "ConstructType_T (name, List.map (apply_subst subst) type_list)",
          "| RefType_T inner_type -> RefType_T (apply_subst subst inner_type)",
          "| RecordType_T fields ->",
          "RecordType_T (List.map (fun (name, typ) -> (name, apply_subst subst typ)) fields)"
        ],
        "start_line": 12,
        "end_line": 21,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/types_subst.ml"
      }
    ],
    "294db0d68a4fb59cfb32e71e9bbf3baa": [
      {
        "hash": "294db0d68a4fb59cfb32e71e9bbf3baa",
        "text": "| FunType_T (param_type, return_type) ->\nFunType_T (apply_subst subst param_type, apply_subst subst return_type)\n| TupleType_T type_list -> TupleType_T (List.map (apply_subst subst) type_list)\n| ListType_T elem_type -> ListType_T (apply_subst subst elem_type)\n| ConstructType_T (name, type_list) ->\nConstructType_T (name, List.map (apply_subst subst) type_list)\n| RefType_T inner_type -> RefType_T (apply_subst subst inner_type)\n| RecordType_T fields ->\nRecordType_T (List.map (fun (name, typ) -> (name, apply_subst subst typ)) fields)\n| ArrayType_T elem_type -> ArrayType_T (apply_subst subst elem_type)",
        "lines": [
          "| FunType_T (param_type, return_type) ->",
          "FunType_T (apply_subst subst param_type, apply_subst subst return_type)",
          "| TupleType_T type_list -> TupleType_T (List.map (apply_subst subst) type_list)",
          "| ListType_T elem_type -> ListType_T (apply_subst subst elem_type)",
          "| ConstructType_T (name, type_list) ->",
          "ConstructType_T (name, List.map (apply_subst subst) type_list)",
          "| RefType_T inner_type -> RefType_T (apply_subst subst inner_type)",
          "| RecordType_T fields ->",
          "RecordType_T (List.map (fun (name, typ) -> (name, apply_subst subst typ)) fields)",
          "| ArrayType_T elem_type -> ArrayType_T (apply_subst subst elem_type)"
        ],
        "start_line": 92,
        "end_line": 101,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/types_unify.ml"
      },
      {
        "hash": "294db0d68a4fb59cfb32e71e9bbf3baa",
        "text": "| FunType_T (param_type, return_type) ->\nFunType_T (apply_subst subst param_type, apply_subst subst return_type)\n| TupleType_T type_list -> TupleType_T (List.map (apply_subst subst) type_list)\n| ListType_T elem_type -> ListType_T (apply_subst subst elem_type)\n| ConstructType_T (name, type_list) ->\nConstructType_T (name, List.map (apply_subst subst) type_list)\n| RefType_T inner_type -> RefType_T (apply_subst subst inner_type)\n| RecordType_T fields ->\nRecordType_T (List.map (fun (name, typ) -> (name, apply_subst subst typ)) fields)\n| ArrayType_T elem_type -> ArrayType_T (apply_subst subst elem_type)",
        "lines": [
          "| FunType_T (param_type, return_type) ->",
          "FunType_T (apply_subst subst param_type, apply_subst subst return_type)",
          "| TupleType_T type_list -> TupleType_T (List.map (apply_subst subst) type_list)",
          "| ListType_T elem_type -> ListType_T (apply_subst subst elem_type)",
          "| ConstructType_T (name, type_list) ->",
          "ConstructType_T (name, List.map (apply_subst subst) type_list)",
          "| RefType_T inner_type -> RefType_T (apply_subst subst inner_type)",
          "| RecordType_T fields ->",
          "RecordType_T (List.map (fun (name, typ) -> (name, apply_subst subst typ)) fields)",
          "| ArrayType_T elem_type -> ArrayType_T (apply_subst subst elem_type)"
        ],
        "start_line": 13,
        "end_line": 22,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/types_subst.ml"
      }
    ],
    "72bc17d93d5b183a1a4c6ef61cba8bca": [
      {
        "hash": "72bc17d93d5b183a1a4c6ef61cba8bca",
        "text": "FunType_T (apply_subst subst param_type, apply_subst subst return_type)\n| TupleType_T type_list -> TupleType_T (List.map (apply_subst subst) type_list)\n| ListType_T elem_type -> ListType_T (apply_subst subst elem_type)\n| ConstructType_T (name, type_list) ->\nConstructType_T (name, List.map (apply_subst subst) type_list)\n| RefType_T inner_type -> RefType_T (apply_subst subst inner_type)\n| RecordType_T fields ->\nRecordType_T (List.map (fun (name, typ) -> (name, apply_subst subst typ)) fields)\n| ArrayType_T elem_type -> ArrayType_T (apply_subst subst elem_type)\n| ClassType_T (name, methods) ->",
        "lines": [
          "FunType_T (apply_subst subst param_type, apply_subst subst return_type)",
          "| TupleType_T type_list -> TupleType_T (List.map (apply_subst subst) type_list)",
          "| ListType_T elem_type -> ListType_T (apply_subst subst elem_type)",
          "| ConstructType_T (name, type_list) ->",
          "ConstructType_T (name, List.map (apply_subst subst) type_list)",
          "| RefType_T inner_type -> RefType_T (apply_subst subst inner_type)",
          "| RecordType_T fields ->",
          "RecordType_T (List.map (fun (name, typ) -> (name, apply_subst subst typ)) fields)",
          "| ArrayType_T elem_type -> ArrayType_T (apply_subst subst elem_type)",
          "| ClassType_T (name, methods) ->"
        ],
        "start_line": 93,
        "end_line": 102,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/types_unify.ml"
      },
      {
        "hash": "72bc17d93d5b183a1a4c6ef61cba8bca",
        "text": "FunType_T (apply_subst subst param_type, apply_subst subst return_type)\n| TupleType_T type_list -> TupleType_T (List.map (apply_subst subst) type_list)\n| ListType_T elem_type -> ListType_T (apply_subst subst elem_type)\n| ConstructType_T (name, type_list) ->\nConstructType_T (name, List.map (apply_subst subst) type_list)\n| RefType_T inner_type -> RefType_T (apply_subst subst inner_type)\n| RecordType_T fields ->\nRecordType_T (List.map (fun (name, typ) -> (name, apply_subst subst typ)) fields)\n| ArrayType_T elem_type -> ArrayType_T (apply_subst subst elem_type)\n| ClassType_T (name, methods) ->",
        "lines": [
          "FunType_T (apply_subst subst param_type, apply_subst subst return_type)",
          "| TupleType_T type_list -> TupleType_T (List.map (apply_subst subst) type_list)",
          "| ListType_T elem_type -> ListType_T (apply_subst subst elem_type)",
          "| ConstructType_T (name, type_list) ->",
          "ConstructType_T (name, List.map (apply_subst subst) type_list)",
          "| RefType_T inner_type -> RefType_T (apply_subst subst inner_type)",
          "| RecordType_T fields ->",
          "RecordType_T (List.map (fun (name, typ) -> (name, apply_subst subst typ)) fields)",
          "| ArrayType_T elem_type -> ArrayType_T (apply_subst subst elem_type)",
          "| ClassType_T (name, methods) ->"
        ],
        "start_line": 14,
        "end_line": 23,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/types_subst.ml"
      }
    ],
    "a1ba874c3f283a16ae6d15ea611972ff": [
      {
        "hash": "a1ba874c3f283a16ae6d15ea611972ff",
        "text": "| TupleType_T type_list -> TupleType_T (List.map (apply_subst subst) type_list)\n| ListType_T elem_type -> ListType_T (apply_subst subst elem_type)\n| ConstructType_T (name, type_list) ->\nConstructType_T (name, List.map (apply_subst subst) type_list)\n| RefType_T inner_type -> RefType_T (apply_subst subst inner_type)\n| RecordType_T fields ->\nRecordType_T (List.map (fun (name, typ) -> (name, apply_subst subst typ)) fields)\n| ArrayType_T elem_type -> ArrayType_T (apply_subst subst elem_type)\n| ClassType_T (name, methods) ->\nClassType_T",
        "lines": [
          "| TupleType_T type_list -> TupleType_T (List.map (apply_subst subst) type_list)",
          "| ListType_T elem_type -> ListType_T (apply_subst subst elem_type)",
          "| ConstructType_T (name, type_list) ->",
          "ConstructType_T (name, List.map (apply_subst subst) type_list)",
          "| RefType_T inner_type -> RefType_T (apply_subst subst inner_type)",
          "| RecordType_T fields ->",
          "RecordType_T (List.map (fun (name, typ) -> (name, apply_subst subst typ)) fields)",
          "| ArrayType_T elem_type -> ArrayType_T (apply_subst subst elem_type)",
          "| ClassType_T (name, methods) ->",
          "ClassType_T"
        ],
        "start_line": 94,
        "end_line": 103,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/types_unify.ml"
      },
      {
        "hash": "a1ba874c3f283a16ae6d15ea611972ff",
        "text": "| TupleType_T type_list -> TupleType_T (List.map (apply_subst subst) type_list)\n| ListType_T elem_type -> ListType_T (apply_subst subst elem_type)\n| ConstructType_T (name, type_list) ->\nConstructType_T (name, List.map (apply_subst subst) type_list)\n| RefType_T inner_type -> RefType_T (apply_subst subst inner_type)\n| RecordType_T fields ->\nRecordType_T (List.map (fun (name, typ) -> (name, apply_subst subst typ)) fields)\n| ArrayType_T elem_type -> ArrayType_T (apply_subst subst elem_type)\n| ClassType_T (name, methods) ->\nClassType_T",
        "lines": [
          "| TupleType_T type_list -> TupleType_T (List.map (apply_subst subst) type_list)",
          "| ListType_T elem_type -> ListType_T (apply_subst subst elem_type)",
          "| ConstructType_T (name, type_list) ->",
          "ConstructType_T (name, List.map (apply_subst subst) type_list)",
          "| RefType_T inner_type -> RefType_T (apply_subst subst inner_type)",
          "| RecordType_T fields ->",
          "RecordType_T (List.map (fun (name, typ) -> (name, apply_subst subst typ)) fields)",
          "| ArrayType_T elem_type -> ArrayType_T (apply_subst subst elem_type)",
          "| ClassType_T (name, methods) ->",
          "ClassType_T"
        ],
        "start_line": 15,
        "end_line": 24,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/types_subst.ml"
      }
    ],
    "3b59f705c688384e502dbd2c21ac1570": [
      {
        "hash": "3b59f705c688384e502dbd2c21ac1570",
        "text": "| ListType_T elem_type -> ListType_T (apply_subst subst elem_type)\n| ConstructType_T (name, type_list) ->\nConstructType_T (name, List.map (apply_subst subst) type_list)\n| RefType_T inner_type -> RefType_T (apply_subst subst inner_type)\n| RecordType_T fields ->\nRecordType_T (List.map (fun (name, typ) -> (name, apply_subst subst typ)) fields)\n| ArrayType_T elem_type -> ArrayType_T (apply_subst subst elem_type)\n| ClassType_T (name, methods) ->\nClassType_T\n( name,",
        "lines": [
          "| ListType_T elem_type -> ListType_T (apply_subst subst elem_type)",
          "| ConstructType_T (name, type_list) ->",
          "ConstructType_T (name, List.map (apply_subst subst) type_list)",
          "| RefType_T inner_type -> RefType_T (apply_subst subst inner_type)",
          "| RecordType_T fields ->",
          "RecordType_T (List.map (fun (name, typ) -> (name, apply_subst subst typ)) fields)",
          "| ArrayType_T elem_type -> ArrayType_T (apply_subst subst elem_type)",
          "| ClassType_T (name, methods) ->",
          "ClassType_T",
          "( name,"
        ],
        "start_line": 95,
        "end_line": 104,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/types_unify.ml"
      },
      {
        "hash": "3b59f705c688384e502dbd2c21ac1570",
        "text": "| ListType_T elem_type -> ListType_T (apply_subst subst elem_type)\n| ConstructType_T (name, type_list) ->\nConstructType_T (name, List.map (apply_subst subst) type_list)\n| RefType_T inner_type -> RefType_T (apply_subst subst inner_type)\n| RecordType_T fields ->\nRecordType_T (List.map (fun (name, typ) -> (name, apply_subst subst typ)) fields)\n| ArrayType_T elem_type -> ArrayType_T (apply_subst subst elem_type)\n| ClassType_T (name, methods) ->\nClassType_T\n( name,",
        "lines": [
          "| ListType_T elem_type -> ListType_T (apply_subst subst elem_type)",
          "| ConstructType_T (name, type_list) ->",
          "ConstructType_T (name, List.map (apply_subst subst) type_list)",
          "| RefType_T inner_type -> RefType_T (apply_subst subst inner_type)",
          "| RecordType_T fields ->",
          "RecordType_T (List.map (fun (name, typ) -> (name, apply_subst subst typ)) fields)",
          "| ArrayType_T elem_type -> ArrayType_T (apply_subst subst elem_type)",
          "| ClassType_T (name, methods) ->",
          "ClassType_T",
          "( name,"
        ],
        "start_line": 16,
        "end_line": 25,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/types_subst.ml"
      }
    ],
    "b97f614ca1351e21967aee9bb3ad7d68": [
      {
        "hash": "b97f614ca1351e21967aee9bb3ad7d68",
        "text": "| ConstructType_T (name, type_list) ->\nConstructType_T (name, List.map (apply_subst subst) type_list)\n| RefType_T inner_type -> RefType_T (apply_subst subst inner_type)\n| RecordType_T fields ->\nRecordType_T (List.map (fun (name, typ) -> (name, apply_subst subst typ)) fields)\n| ArrayType_T elem_type -> ArrayType_T (apply_subst subst elem_type)\n| ClassType_T (name, methods) ->\nClassType_T\n( name,\nList.map",
        "lines": [
          "| ConstructType_T (name, type_list) ->",
          "ConstructType_T (name, List.map (apply_subst subst) type_list)",
          "| RefType_T inner_type -> RefType_T (apply_subst subst inner_type)",
          "| RecordType_T fields ->",
          "RecordType_T (List.map (fun (name, typ) -> (name, apply_subst subst typ)) fields)",
          "| ArrayType_T elem_type -> ArrayType_T (apply_subst subst elem_type)",
          "| ClassType_T (name, methods) ->",
          "ClassType_T",
          "( name,",
          "List.map"
        ],
        "start_line": 96,
        "end_line": 105,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/types_unify.ml"
      },
      {
        "hash": "b97f614ca1351e21967aee9bb3ad7d68",
        "text": "| ConstructType_T (name, type_list) ->\nConstructType_T (name, List.map (apply_subst subst) type_list)\n| RefType_T inner_type -> RefType_T (apply_subst subst inner_type)\n| RecordType_T fields ->\nRecordType_T (List.map (fun (name, typ) -> (name, apply_subst subst typ)) fields)\n| ArrayType_T elem_type -> ArrayType_T (apply_subst subst elem_type)\n| ClassType_T (name, methods) ->\nClassType_T\n( name,\nList.map",
        "lines": [
          "| ConstructType_T (name, type_list) ->",
          "ConstructType_T (name, List.map (apply_subst subst) type_list)",
          "| RefType_T inner_type -> RefType_T (apply_subst subst inner_type)",
          "| RecordType_T fields ->",
          "RecordType_T (List.map (fun (name, typ) -> (name, apply_subst subst typ)) fields)",
          "| ArrayType_T elem_type -> ArrayType_T (apply_subst subst elem_type)",
          "| ClassType_T (name, methods) ->",
          "ClassType_T",
          "( name,",
          "List.map"
        ],
        "start_line": 17,
        "end_line": 26,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/types_subst.ml"
      }
    ],
    "c15e9824f4d29ac9b5b044961887e910": [
      {
        "hash": "c15e9824f4d29ac9b5b044961887e910",
        "text": "ConstructType_T (name, List.map (apply_subst subst) type_list)\n| RefType_T inner_type -> RefType_T (apply_subst subst inner_type)\n| RecordType_T fields ->\nRecordType_T (List.map (fun (name, typ) -> (name, apply_subst subst typ)) fields)\n| ArrayType_T elem_type -> ArrayType_T (apply_subst subst elem_type)\n| ClassType_T (name, methods) ->\nClassType_T\n( name,\nList.map\n(fun (method_name, method_type) -> (method_name, apply_subst subst method_type))",
        "lines": [
          "ConstructType_T (name, List.map (apply_subst subst) type_list)",
          "| RefType_T inner_type -> RefType_T (apply_subst subst inner_type)",
          "| RecordType_T fields ->",
          "RecordType_T (List.map (fun (name, typ) -> (name, apply_subst subst typ)) fields)",
          "| ArrayType_T elem_type -> ArrayType_T (apply_subst subst elem_type)",
          "| ClassType_T (name, methods) ->",
          "ClassType_T",
          "( name,",
          "List.map",
          "(fun (method_name, method_type) -> (method_name, apply_subst subst method_type))"
        ],
        "start_line": 97,
        "end_line": 106,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/types_unify.ml"
      },
      {
        "hash": "c15e9824f4d29ac9b5b044961887e910",
        "text": "ConstructType_T (name, List.map (apply_subst subst) type_list)\n| RefType_T inner_type -> RefType_T (apply_subst subst inner_type)\n| RecordType_T fields ->\nRecordType_T (List.map (fun (name, typ) -> (name, apply_subst subst typ)) fields)\n| ArrayType_T elem_type -> ArrayType_T (apply_subst subst elem_type)\n| ClassType_T (name, methods) ->\nClassType_T\n( name,\nList.map\n(fun (method_name, method_type) -> (method_name, apply_subst subst method_type))",
        "lines": [
          "ConstructType_T (name, List.map (apply_subst subst) type_list)",
          "| RefType_T inner_type -> RefType_T (apply_subst subst inner_type)",
          "| RecordType_T fields ->",
          "RecordType_T (List.map (fun (name, typ) -> (name, apply_subst subst typ)) fields)",
          "| ArrayType_T elem_type -> ArrayType_T (apply_subst subst elem_type)",
          "| ClassType_T (name, methods) ->",
          "ClassType_T",
          "( name,",
          "List.map",
          "(fun (method_name, method_type) -> (method_name, apply_subst subst method_type))"
        ],
        "start_line": 18,
        "end_line": 27,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/types_subst.ml"
      }
    ],
    "ef8b4be2f591c2b67ea317375ff8c36a": [
      {
        "hash": "ef8b4be2f591c2b67ea317375ff8c36a",
        "text": "| RefType_T inner_type -> RefType_T (apply_subst subst inner_type)\n| RecordType_T fields ->\nRecordType_T (List.map (fun (name, typ) -> (name, apply_subst subst typ)) fields)\n| ArrayType_T elem_type -> ArrayType_T (apply_subst subst elem_type)\n| ClassType_T (name, methods) ->\nClassType_T\n( name,\nList.map\n(fun (method_name, method_type) -> (method_name, apply_subst subst method_type))\nmethods )",
        "lines": [
          "| RefType_T inner_type -> RefType_T (apply_subst subst inner_type)",
          "| RecordType_T fields ->",
          "RecordType_T (List.map (fun (name, typ) -> (name, apply_subst subst typ)) fields)",
          "| ArrayType_T elem_type -> ArrayType_T (apply_subst subst elem_type)",
          "| ClassType_T (name, methods) ->",
          "ClassType_T",
          "( name,",
          "List.map",
          "(fun (method_name, method_type) -> (method_name, apply_subst subst method_type))",
          "methods )"
        ],
        "start_line": 98,
        "end_line": 107,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/types_unify.ml"
      },
      {
        "hash": "ef8b4be2f591c2b67ea317375ff8c36a",
        "text": "| RefType_T inner_type -> RefType_T (apply_subst subst inner_type)\n| RecordType_T fields ->\nRecordType_T (List.map (fun (name, typ) -> (name, apply_subst subst typ)) fields)\n| ArrayType_T elem_type -> ArrayType_T (apply_subst subst elem_type)\n| ClassType_T (name, methods) ->\nClassType_T\n( name,\nList.map\n(fun (method_name, method_type) -> (method_name, apply_subst subst method_type))\nmethods )",
        "lines": [
          "| RefType_T inner_type -> RefType_T (apply_subst subst inner_type)",
          "| RecordType_T fields ->",
          "RecordType_T (List.map (fun (name, typ) -> (name, apply_subst subst typ)) fields)",
          "| ArrayType_T elem_type -> ArrayType_T (apply_subst subst elem_type)",
          "| ClassType_T (name, methods) ->",
          "ClassType_T",
          "( name,",
          "List.map",
          "(fun (method_name, method_type) -> (method_name, apply_subst subst method_type))",
          "methods )"
        ],
        "start_line": 19,
        "end_line": 28,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/types_subst.ml"
      }
    ],
    "af343947c42a1bf230cc598414612321": [
      {
        "hash": "af343947c42a1bf230cc598414612321",
        "text": "| RecordType_T fields ->\nRecordType_T (List.map (fun (name, typ) -> (name, apply_subst subst typ)) fields)\n| ArrayType_T elem_type -> ArrayType_T (apply_subst subst elem_type)\n| ClassType_T (name, methods) ->\nClassType_T\n( name,\nList.map\n(fun (method_name, method_type) -> (method_name, apply_subst subst method_type))\nmethods )\n| ObjectType_T methods ->",
        "lines": [
          "| RecordType_T fields ->",
          "RecordType_T (List.map (fun (name, typ) -> (name, apply_subst subst typ)) fields)",
          "| ArrayType_T elem_type -> ArrayType_T (apply_subst subst elem_type)",
          "| ClassType_T (name, methods) ->",
          "ClassType_T",
          "( name,",
          "List.map",
          "(fun (method_name, method_type) -> (method_name, apply_subst subst method_type))",
          "methods )",
          "| ObjectType_T methods ->"
        ],
        "start_line": 99,
        "end_line": 108,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/types_unify.ml"
      },
      {
        "hash": "af343947c42a1bf230cc598414612321",
        "text": "| RecordType_T fields ->\nRecordType_T (List.map (fun (name, typ) -> (name, apply_subst subst typ)) fields)\n| ArrayType_T elem_type -> ArrayType_T (apply_subst subst elem_type)\n| ClassType_T (name, methods) ->\nClassType_T\n( name,\nList.map\n(fun (method_name, method_type) -> (method_name, apply_subst subst method_type))\nmethods )\n| ObjectType_T methods ->",
        "lines": [
          "| RecordType_T fields ->",
          "RecordType_T (List.map (fun (name, typ) -> (name, apply_subst subst typ)) fields)",
          "| ArrayType_T elem_type -> ArrayType_T (apply_subst subst elem_type)",
          "| ClassType_T (name, methods) ->",
          "ClassType_T",
          "( name,",
          "List.map",
          "(fun (method_name, method_type) -> (method_name, apply_subst subst method_type))",
          "methods )",
          "| ObjectType_T methods ->"
        ],
        "start_line": 20,
        "end_line": 29,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/types_subst.ml"
      }
    ],
    "4e79c10e97144fbbe8acef2a8e2e7a45": [
      {
        "hash": "4e79c10e97144fbbe8acef2a8e2e7a45",
        "text": "RecordType_T (List.map (fun (name, typ) -> (name, apply_subst subst typ)) fields)\n| ArrayType_T elem_type -> ArrayType_T (apply_subst subst elem_type)\n| ClassType_T (name, methods) ->\nClassType_T\n( name,\nList.map\n(fun (method_name, method_type) -> (method_name, apply_subst subst method_type))\nmethods )\n| ObjectType_T methods ->\nObjectType_T",
        "lines": [
          "RecordType_T (List.map (fun (name, typ) -> (name, apply_subst subst typ)) fields)",
          "| ArrayType_T elem_type -> ArrayType_T (apply_subst subst elem_type)",
          "| ClassType_T (name, methods) ->",
          "ClassType_T",
          "( name,",
          "List.map",
          "(fun (method_name, method_type) -> (method_name, apply_subst subst method_type))",
          "methods )",
          "| ObjectType_T methods ->",
          "ObjectType_T"
        ],
        "start_line": 100,
        "end_line": 109,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/types_unify.ml"
      },
      {
        "hash": "4e79c10e97144fbbe8acef2a8e2e7a45",
        "text": "RecordType_T (List.map (fun (name, typ) -> (name, apply_subst subst typ)) fields)\n| ArrayType_T elem_type -> ArrayType_T (apply_subst subst elem_type)\n| ClassType_T (name, methods) ->\nClassType_T\n( name,\nList.map\n(fun (method_name, method_type) -> (method_name, apply_subst subst method_type))\nmethods )\n| ObjectType_T methods ->\nObjectType_T",
        "lines": [
          "RecordType_T (List.map (fun (name, typ) -> (name, apply_subst subst typ)) fields)",
          "| ArrayType_T elem_type -> ArrayType_T (apply_subst subst elem_type)",
          "| ClassType_T (name, methods) ->",
          "ClassType_T",
          "( name,",
          "List.map",
          "(fun (method_name, method_type) -> (method_name, apply_subst subst method_type))",
          "methods )",
          "| ObjectType_T methods ->",
          "ObjectType_T"
        ],
        "start_line": 21,
        "end_line": 30,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/types_subst.ml"
      }
    ],
    "a079f2562855799497c6e48d1f9f5a64": [
      {
        "hash": "a079f2562855799497c6e48d1f9f5a64",
        "text": "| ArrayType_T elem_type -> ArrayType_T (apply_subst subst elem_type)\n| ClassType_T (name, methods) ->\nClassType_T\n( name,\nList.map\n(fun (method_name, method_type) -> (method_name, apply_subst subst method_type))\nmethods )\n| ObjectType_T methods ->\nObjectType_T\n(List.map",
        "lines": [
          "| ArrayType_T elem_type -> ArrayType_T (apply_subst subst elem_type)",
          "| ClassType_T (name, methods) ->",
          "ClassType_T",
          "( name,",
          "List.map",
          "(fun (method_name, method_type) -> (method_name, apply_subst subst method_type))",
          "methods )",
          "| ObjectType_T methods ->",
          "ObjectType_T",
          "(List.map"
        ],
        "start_line": 101,
        "end_line": 110,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/types_unify.ml"
      },
      {
        "hash": "a079f2562855799497c6e48d1f9f5a64",
        "text": "| ArrayType_T elem_type -> ArrayType_T (apply_subst subst elem_type)\n| ClassType_T (name, methods) ->\nClassType_T\n( name,\nList.map\n(fun (method_name, method_type) -> (method_name, apply_subst subst method_type))\nmethods )\n| ObjectType_T methods ->\nObjectType_T\n(List.map",
        "lines": [
          "| ArrayType_T elem_type -> ArrayType_T (apply_subst subst elem_type)",
          "| ClassType_T (name, methods) ->",
          "ClassType_T",
          "( name,",
          "List.map",
          "(fun (method_name, method_type) -> (method_name, apply_subst subst method_type))",
          "methods )",
          "| ObjectType_T methods ->",
          "ObjectType_T",
          "(List.map"
        ],
        "start_line": 22,
        "end_line": 31,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/types_subst.ml"
      }
    ],
    "0eb00886e1e93f865f3a9e905b1fed3d": [
      {
        "hash": "0eb00886e1e93f865f3a9e905b1fed3d",
        "text": "| ClassType_T (name, methods) ->\nClassType_T\n( name,\nList.map\n(fun (method_name, method_type) -> (method_name, apply_subst subst method_type))\nmethods )\n| ObjectType_T methods ->\nObjectType_T\n(List.map\n(fun (method_name, method_type) -> (method_name, apply_subst subst method_type))",
        "lines": [
          "| ClassType_T (name, methods) ->",
          "ClassType_T",
          "( name,",
          "List.map",
          "(fun (method_name, method_type) -> (method_name, apply_subst subst method_type))",
          "methods )",
          "| ObjectType_T methods ->",
          "ObjectType_T",
          "(List.map",
          "(fun (method_name, method_type) -> (method_name, apply_subst subst method_type))"
        ],
        "start_line": 102,
        "end_line": 111,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/types_unify.ml"
      },
      {
        "hash": "0eb00886e1e93f865f3a9e905b1fed3d",
        "text": "| ClassType_T (name, methods) ->\nClassType_T\n( name,\nList.map\n(fun (method_name, method_type) -> (method_name, apply_subst subst method_type))\nmethods )\n| ObjectType_T methods ->\nObjectType_T\n(List.map\n(fun (method_name, method_type) -> (method_name, apply_subst subst method_type))",
        "lines": [
          "| ClassType_T (name, methods) ->",
          "ClassType_T",
          "( name,",
          "List.map",
          "(fun (method_name, method_type) -> (method_name, apply_subst subst method_type))",
          "methods )",
          "| ObjectType_T methods ->",
          "ObjectType_T",
          "(List.map",
          "(fun (method_name, method_type) -> (method_name, apply_subst subst method_type))"
        ],
        "start_line": 23,
        "end_line": 32,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/types_subst.ml"
      }
    ],
    "424a6f85a9b5f5844da1d7de753a1281": [
      {
        "hash": "424a6f85a9b5f5844da1d7de753a1281",
        "text": "ClassType_T\n( name,\nList.map\n(fun (method_name, method_type) -> (method_name, apply_subst subst method_type))\nmethods )\n| ObjectType_T methods ->\nObjectType_T\n(List.map\n(fun (method_name, method_type) -> (method_name, apply_subst subst method_type))\nmethods)",
        "lines": [
          "ClassType_T",
          "( name,",
          "List.map",
          "(fun (method_name, method_type) -> (method_name, apply_subst subst method_type))",
          "methods )",
          "| ObjectType_T methods ->",
          "ObjectType_T",
          "(List.map",
          "(fun (method_name, method_type) -> (method_name, apply_subst subst method_type))",
          "methods)"
        ],
        "start_line": 103,
        "end_line": 112,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/types_unify.ml"
      },
      {
        "hash": "424a6f85a9b5f5844da1d7de753a1281",
        "text": "ClassType_T\n( name,\nList.map\n(fun (method_name, method_type) -> (method_name, apply_subst subst method_type))\nmethods )\n| ObjectType_T methods ->\nObjectType_T\n(List.map\n(fun (method_name, method_type) -> (method_name, apply_subst subst method_type))\nmethods)",
        "lines": [
          "ClassType_T",
          "( name,",
          "List.map",
          "(fun (method_name, method_type) -> (method_name, apply_subst subst method_type))",
          "methods )",
          "| ObjectType_T methods ->",
          "ObjectType_T",
          "(List.map",
          "(fun (method_name, method_type) -> (method_name, apply_subst subst method_type))",
          "methods)"
        ],
        "start_line": 24,
        "end_line": 33,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/types_subst.ml"
      }
    ],
    "5325d857577e1ac28702fcd0afc7b811": [
      {
        "hash": "5325d857577e1ac28702fcd0afc7b811",
        "text": "( name,\nList.map\n(fun (method_name, method_type) -> (method_name, apply_subst subst method_type))\nmethods )\n| ObjectType_T methods ->\nObjectType_T\n(List.map\n(fun (method_name, method_type) -> (method_name, apply_subst subst method_type))\nmethods)\n| PrivateType_T (name, underlying_type) -> PrivateType_T (name, apply_subst subst underlying_type)",
        "lines": [
          "( name,",
          "List.map",
          "(fun (method_name, method_type) -> (method_name, apply_subst subst method_type))",
          "methods )",
          "| ObjectType_T methods ->",
          "ObjectType_T",
          "(List.map",
          "(fun (method_name, method_type) -> (method_name, apply_subst subst method_type))",
          "methods)",
          "| PrivateType_T (name, underlying_type) -> PrivateType_T (name, apply_subst subst underlying_type)"
        ],
        "start_line": 104,
        "end_line": 113,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/types_unify.ml"
      },
      {
        "hash": "5325d857577e1ac28702fcd0afc7b811",
        "text": "( name,\nList.map\n(fun (method_name, method_type) -> (method_name, apply_subst subst method_type))\nmethods )\n| ObjectType_T methods ->\nObjectType_T\n(List.map\n(fun (method_name, method_type) -> (method_name, apply_subst subst method_type))\nmethods)\n| PrivateType_T (name, underlying_type) -> PrivateType_T (name, apply_subst subst underlying_type)",
        "lines": [
          "( name,",
          "List.map",
          "(fun (method_name, method_type) -> (method_name, apply_subst subst method_type))",
          "methods )",
          "| ObjectType_T methods ->",
          "ObjectType_T",
          "(List.map",
          "(fun (method_name, method_type) -> (method_name, apply_subst subst method_type))",
          "methods)",
          "| PrivateType_T (name, underlying_type) -> PrivateType_T (name, apply_subst subst underlying_type)"
        ],
        "start_line": 25,
        "end_line": 34,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/types_subst.ml"
      }
    ],
    "6e5e0f40269ccfae8dba71e500dd1261": [
      {
        "hash": "6e5e0f40269ccfae8dba71e500dd1261",
        "text": "List.map\n(fun (method_name, method_type) -> (method_name, apply_subst subst method_type))\nmethods )\n| ObjectType_T methods ->\nObjectType_T\n(List.map\n(fun (method_name, method_type) -> (method_name, apply_subst subst method_type))\nmethods)\n| PrivateType_T (name, underlying_type) -> PrivateType_T (name, apply_subst subst underlying_type)\n| PolymorphicVariantType_T variants ->",
        "lines": [
          "List.map",
          "(fun (method_name, method_type) -> (method_name, apply_subst subst method_type))",
          "methods )",
          "| ObjectType_T methods ->",
          "ObjectType_T",
          "(List.map",
          "(fun (method_name, method_type) -> (method_name, apply_subst subst method_type))",
          "methods)",
          "| PrivateType_T (name, underlying_type) -> PrivateType_T (name, apply_subst subst underlying_type)",
          "| PolymorphicVariantType_T variants ->"
        ],
        "start_line": 105,
        "end_line": 114,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/types_unify.ml"
      },
      {
        "hash": "6e5e0f40269ccfae8dba71e500dd1261",
        "text": "List.map\n(fun (method_name, method_type) -> (method_name, apply_subst subst method_type))\nmethods )\n| ObjectType_T methods ->\nObjectType_T\n(List.map\n(fun (method_name, method_type) -> (method_name, apply_subst subst method_type))\nmethods)\n| PrivateType_T (name, underlying_type) -> PrivateType_T (name, apply_subst subst underlying_type)\n| PolymorphicVariantType_T variants ->",
        "lines": [
          "List.map",
          "(fun (method_name, method_type) -> (method_name, apply_subst subst method_type))",
          "methods )",
          "| ObjectType_T methods ->",
          "ObjectType_T",
          "(List.map",
          "(fun (method_name, method_type) -> (method_name, apply_subst subst method_type))",
          "methods)",
          "| PrivateType_T (name, underlying_type) -> PrivateType_T (name, apply_subst subst underlying_type)",
          "| PolymorphicVariantType_T variants ->"
        ],
        "start_line": 26,
        "end_line": 35,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/types_subst.ml"
      }
    ],
    "24c96bf25d7a0e5abcf60256facd93f4": [
      {
        "hash": "24c96bf25d7a0e5abcf60256facd93f4",
        "text": "(fun (method_name, method_type) -> (method_name, apply_subst subst method_type))\nmethods )\n| ObjectType_T methods ->\nObjectType_T\n(List.map\n(fun (method_name, method_type) -> (method_name, apply_subst subst method_type))\nmethods)\n| PrivateType_T (name, underlying_type) -> PrivateType_T (name, apply_subst subst underlying_type)\n| PolymorphicVariantType_T variants ->\nPolymorphicVariantType_T",
        "lines": [
          "(fun (method_name, method_type) -> (method_name, apply_subst subst method_type))",
          "methods )",
          "| ObjectType_T methods ->",
          "ObjectType_T",
          "(List.map",
          "(fun (method_name, method_type) -> (method_name, apply_subst subst method_type))",
          "methods)",
          "| PrivateType_T (name, underlying_type) -> PrivateType_T (name, apply_subst subst underlying_type)",
          "| PolymorphicVariantType_T variants ->",
          "PolymorphicVariantType_T"
        ],
        "start_line": 106,
        "end_line": 115,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/types_unify.ml"
      },
      {
        "hash": "24c96bf25d7a0e5abcf60256facd93f4",
        "text": "(fun (method_name, method_type) -> (method_name, apply_subst subst method_type))\nmethods )\n| ObjectType_T methods ->\nObjectType_T\n(List.map\n(fun (method_name, method_type) -> (method_name, apply_subst subst method_type))\nmethods)\n| PrivateType_T (name, underlying_type) -> PrivateType_T (name, apply_subst subst underlying_type)\n| PolymorphicVariantType_T variants ->\nPolymorphicVariantType_T",
        "lines": [
          "(fun (method_name, method_type) -> (method_name, apply_subst subst method_type))",
          "methods )",
          "| ObjectType_T methods ->",
          "ObjectType_T",
          "(List.map",
          "(fun (method_name, method_type) -> (method_name, apply_subst subst method_type))",
          "methods)",
          "| PrivateType_T (name, underlying_type) -> PrivateType_T (name, apply_subst subst underlying_type)",
          "| PolymorphicVariantType_T variants ->",
          "PolymorphicVariantType_T"
        ],
        "start_line": 27,
        "end_line": 36,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/types_subst.ml"
      }
    ],
    "c3263f4e9576c7a79c4d9e79665bb333": [
      {
        "hash": "c3263f4e9576c7a79c4d9e79665bb333",
        "text": "methods )\n| ObjectType_T methods ->\nObjectType_T\n(List.map\n(fun (method_name, method_type) -> (method_name, apply_subst subst method_type))\nmethods)\n| PrivateType_T (name, underlying_type) -> PrivateType_T (name, apply_subst subst underlying_type)\n| PolymorphicVariantType_T variants ->\nPolymorphicVariantType_T\n(List.map",
        "lines": [
          "methods )",
          "| ObjectType_T methods ->",
          "ObjectType_T",
          "(List.map",
          "(fun (method_name, method_type) -> (method_name, apply_subst subst method_type))",
          "methods)",
          "| PrivateType_T (name, underlying_type) -> PrivateType_T (name, apply_subst subst underlying_type)",
          "| PolymorphicVariantType_T variants ->",
          "PolymorphicVariantType_T",
          "(List.map"
        ],
        "start_line": 107,
        "end_line": 116,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/types_unify.ml"
      },
      {
        "hash": "c3263f4e9576c7a79c4d9e79665bb333",
        "text": "methods )\n| ObjectType_T methods ->\nObjectType_T\n(List.map\n(fun (method_name, method_type) -> (method_name, apply_subst subst method_type))\nmethods)\n| PrivateType_T (name, underlying_type) -> PrivateType_T (name, apply_subst subst underlying_type)\n| PolymorphicVariantType_T variants ->\nPolymorphicVariantType_T\n(List.map",
        "lines": [
          "methods )",
          "| ObjectType_T methods ->",
          "ObjectType_T",
          "(List.map",
          "(fun (method_name, method_type) -> (method_name, apply_subst subst method_type))",
          "methods)",
          "| PrivateType_T (name, underlying_type) -> PrivateType_T (name, apply_subst subst underlying_type)",
          "| PolymorphicVariantType_T variants ->",
          "PolymorphicVariantType_T",
          "(List.map"
        ],
        "start_line": 28,
        "end_line": 37,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/types_subst.ml"
      }
    ],
    "2a0cfc94f1047ed9997dbbab5ff9a298": [
      {
        "hash": "2a0cfc94f1047ed9997dbbab5ff9a298",
        "text": "| ObjectType_T methods ->\nObjectType_T\n(List.map\n(fun (method_name, method_type) -> (method_name, apply_subst subst method_type))\nmethods)\n| PrivateType_T (name, underlying_type) -> PrivateType_T (name, apply_subst subst underlying_type)\n| PolymorphicVariantType_T variants ->\nPolymorphicVariantType_T\n(List.map\n(fun (label, typ_opt) -> (label, Option.map (apply_subst subst) typ_opt))",
        "lines": [
          "| ObjectType_T methods ->",
          "ObjectType_T",
          "(List.map",
          "(fun (method_name, method_type) -> (method_name, apply_subst subst method_type))",
          "methods)",
          "| PrivateType_T (name, underlying_type) -> PrivateType_T (name, apply_subst subst underlying_type)",
          "| PolymorphicVariantType_T variants ->",
          "PolymorphicVariantType_T",
          "(List.map",
          "(fun (label, typ_opt) -> (label, Option.map (apply_subst subst) typ_opt))"
        ],
        "start_line": 108,
        "end_line": 117,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/types_unify.ml"
      },
      {
        "hash": "2a0cfc94f1047ed9997dbbab5ff9a298",
        "text": "| ObjectType_T methods ->\nObjectType_T\n(List.map\n(fun (method_name, method_type) -> (method_name, apply_subst subst method_type))\nmethods)\n| PrivateType_T (name, underlying_type) -> PrivateType_T (name, apply_subst subst underlying_type)\n| PolymorphicVariantType_T variants ->\nPolymorphicVariantType_T\n(List.map\n(fun (label, typ_opt) -> (label, Option.map (apply_subst subst) typ_opt))",
        "lines": [
          "| ObjectType_T methods ->",
          "ObjectType_T",
          "(List.map",
          "(fun (method_name, method_type) -> (method_name, apply_subst subst method_type))",
          "methods)",
          "| PrivateType_T (name, underlying_type) -> PrivateType_T (name, apply_subst subst underlying_type)",
          "| PolymorphicVariantType_T variants ->",
          "PolymorphicVariantType_T",
          "(List.map",
          "(fun (label, typ_opt) -> (label, Option.map (apply_subst subst) typ_opt))"
        ],
        "start_line": 29,
        "end_line": 38,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/types_subst.ml"
      }
    ],
    "fbaa61c43de93454964a956a90bdae53": [
      {
        "hash": "fbaa61c43de93454964a956a90bdae53",
        "text": "ObjectType_T\n(List.map\n(fun (method_name, method_type) -> (method_name, apply_subst subst method_type))\nmethods)\n| PrivateType_T (name, underlying_type) -> PrivateType_T (name, apply_subst subst underlying_type)\n| PolymorphicVariantType_T variants ->\nPolymorphicVariantType_T\n(List.map\n(fun (label, typ_opt) -> (label, Option.map (apply_subst subst) typ_opt))\nvariants)",
        "lines": [
          "ObjectType_T",
          "(List.map",
          "(fun (method_name, method_type) -> (method_name, apply_subst subst method_type))",
          "methods)",
          "| PrivateType_T (name, underlying_type) -> PrivateType_T (name, apply_subst subst underlying_type)",
          "| PolymorphicVariantType_T variants ->",
          "PolymorphicVariantType_T",
          "(List.map",
          "(fun (label, typ_opt) -> (label, Option.map (apply_subst subst) typ_opt))",
          "variants)"
        ],
        "start_line": 109,
        "end_line": 118,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/types_unify.ml"
      },
      {
        "hash": "fbaa61c43de93454964a956a90bdae53",
        "text": "ObjectType_T\n(List.map\n(fun (method_name, method_type) -> (method_name, apply_subst subst method_type))\nmethods)\n| PrivateType_T (name, underlying_type) -> PrivateType_T (name, apply_subst subst underlying_type)\n| PolymorphicVariantType_T variants ->\nPolymorphicVariantType_T\n(List.map\n(fun (label, typ_opt) -> (label, Option.map (apply_subst subst) typ_opt))\nvariants)",
        "lines": [
          "ObjectType_T",
          "(List.map",
          "(fun (method_name, method_type) -> (method_name, apply_subst subst method_type))",
          "methods)",
          "| PrivateType_T (name, underlying_type) -> PrivateType_T (name, apply_subst subst underlying_type)",
          "| PolymorphicVariantType_T variants ->",
          "PolymorphicVariantType_T",
          "(List.map",
          "(fun (label, typ_opt) -> (label, Option.map (apply_subst subst) typ_opt))",
          "variants)"
        ],
        "start_line": 30,
        "end_line": 39,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/types_subst.ml"
      }
    ],
    "ba420e41813437c2be3622d519a59883": [
      {
        "hash": "ba420e41813437c2be3622d519a59883",
        "text": "(List.map\n(fun (method_name, method_type) -> (method_name, apply_subst subst method_type))\nmethods)\n| PrivateType_T (name, underlying_type) -> PrivateType_T (name, apply_subst subst underlying_type)\n| PolymorphicVariantType_T variants ->\nPolymorphicVariantType_T\n(List.map\n(fun (label, typ_opt) -> (label, Option.map (apply_subst subst) typ_opt))\nvariants)",
        "lines": [
          "(List.map",
          "(fun (method_name, method_type) -> (method_name, apply_subst subst method_type))",
          "methods)",
          "| PrivateType_T (name, underlying_type) -> PrivateType_T (name, apply_subst subst underlying_type)",
          "| PolymorphicVariantType_T variants ->",
          "PolymorphicVariantType_T",
          "(List.map",
          "(fun (label, typ_opt) -> (label, Option.map (apply_subst subst) typ_opt))",
          "variants)"
        ],
        "start_line": 110,
        "end_line": 118,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/types_unify.ml"
      },
      {
        "hash": "ba420e41813437c2be3622d519a59883",
        "text": "(List.map\n(fun (method_name, method_type) -> (method_name, apply_subst subst method_type))\nmethods)\n| PrivateType_T (name, underlying_type) -> PrivateType_T (name, apply_subst subst underlying_type)\n| PolymorphicVariantType_T variants ->\nPolymorphicVariantType_T\n(List.map\n(fun (label, typ_opt) -> (label, Option.map (apply_subst subst) typ_opt))\nvariants)",
        "lines": [
          "(List.map",
          "(fun (method_name, method_type) -> (method_name, apply_subst subst method_type))",
          "methods)",
          "| PrivateType_T (name, underlying_type) -> PrivateType_T (name, apply_subst subst underlying_type)",
          "| PolymorphicVariantType_T variants ->",
          "PolymorphicVariantType_T",
          "(List.map",
          "(fun (label, typ_opt) -> (label, Option.map (apply_subst subst) typ_opt))",
          "variants)"
        ],
        "start_line": 31,
        "end_line": 39,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/types_subst.ml"
      }
    ],
    "763c94b5b5281283efb058ace818d1bd": [
      {
        "hash": "763c94b5b5281283efb058ace818d1bd",
        "text": "(fun (method_name, method_type) -> (method_name, apply_subst subst method_type))\nmethods)\n| PrivateType_T (name, underlying_type) -> PrivateType_T (name, apply_subst subst underlying_type)\n| PolymorphicVariantType_T variants ->\nPolymorphicVariantType_T\n(List.map\n(fun (label, typ_opt) -> (label, Option.map (apply_subst subst) typ_opt))\nvariants)",
        "lines": [
          "(fun (method_name, method_type) -> (method_name, apply_subst subst method_type))",
          "methods)",
          "| PrivateType_T (name, underlying_type) -> PrivateType_T (name, apply_subst subst underlying_type)",
          "| PolymorphicVariantType_T variants ->",
          "PolymorphicVariantType_T",
          "(List.map",
          "(fun (label, typ_opt) -> (label, Option.map (apply_subst subst) typ_opt))",
          "variants)"
        ],
        "start_line": 111,
        "end_line": 118,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/types_unify.ml"
      },
      {
        "hash": "763c94b5b5281283efb058ace818d1bd",
        "text": "(fun (method_name, method_type) -> (method_name, apply_subst subst method_type))\nmethods)\n| PrivateType_T (name, underlying_type) -> PrivateType_T (name, apply_subst subst underlying_type)\n| PolymorphicVariantType_T variants ->\nPolymorphicVariantType_T\n(List.map\n(fun (label, typ_opt) -> (label, Option.map (apply_subst subst) typ_opt))\nvariants)",
        "lines": [
          "(fun (method_name, method_type) -> (method_name, apply_subst subst method_type))",
          "methods)",
          "| PrivateType_T (name, underlying_type) -> PrivateType_T (name, apply_subst subst underlying_type)",
          "| PolymorphicVariantType_T variants ->",
          "PolymorphicVariantType_T",
          "(List.map",
          "(fun (label, typ_opt) -> (label, Option.map (apply_subst subst) typ_opt))",
          "variants)"
        ],
        "start_line": 32,
        "end_line": 39,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/types_subst.ml"
      }
    ],
    "9b6d41d651f0da156d67350c06ed0b16": [
      {
        "hash": "9b6d41d651f0da156d67350c06ed0b16",
        "text": "methods)\n| PrivateType_T (name, underlying_type) -> PrivateType_T (name, apply_subst subst underlying_type)\n| PolymorphicVariantType_T variants ->\nPolymorphicVariantType_T\n(List.map\n(fun (label, typ_opt) -> (label, Option.map (apply_subst subst) typ_opt))\nvariants)",
        "lines": [
          "methods)",
          "| PrivateType_T (name, underlying_type) -> PrivateType_T (name, apply_subst subst underlying_type)",
          "| PolymorphicVariantType_T variants ->",
          "PolymorphicVariantType_T",
          "(List.map",
          "(fun (label, typ_opt) -> (label, Option.map (apply_subst subst) typ_opt))",
          "variants)"
        ],
        "start_line": 112,
        "end_line": 118,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/types_unify.ml"
      },
      {
        "hash": "9b6d41d651f0da156d67350c06ed0b16",
        "text": "methods)\n| PrivateType_T (name, underlying_type) -> PrivateType_T (name, apply_subst subst underlying_type)\n| PolymorphicVariantType_T variants ->\nPolymorphicVariantType_T\n(List.map\n(fun (label, typ_opt) -> (label, Option.map (apply_subst subst) typ_opt))\nvariants)",
        "lines": [
          "methods)",
          "| PrivateType_T (name, underlying_type) -> PrivateType_T (name, apply_subst subst underlying_type)",
          "| PolymorphicVariantType_T variants ->",
          "PolymorphicVariantType_T",
          "(List.map",
          "(fun (label, typ_opt) -> (label, Option.map (apply_subst subst) typ_opt))",
          "variants)"
        ],
        "start_line": 33,
        "end_line": 39,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/types_subst.ml"
      }
    ],
    "745198400592752674266f348f13d848": [
      {
        "hash": "745198400592752674266f348f13d848",
        "text": "| PrivateType_T (name, underlying_type) -> PrivateType_T (name, apply_subst subst underlying_type)\n| PolymorphicVariantType_T variants ->\nPolymorphicVariantType_T\n(List.map\n(fun (label, typ_opt) -> (label, Option.map (apply_subst subst) typ_opt))\nvariants)",
        "lines": [
          "| PrivateType_T (name, underlying_type) -> PrivateType_T (name, apply_subst subst underlying_type)",
          "| PolymorphicVariantType_T variants ->",
          "PolymorphicVariantType_T",
          "(List.map",
          "(fun (label, typ_opt) -> (label, Option.map (apply_subst subst) typ_opt))",
          "variants)"
        ],
        "start_line": 113,
        "end_line": 118,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/types_unify.ml"
      },
      {
        "hash": "745198400592752674266f348f13d848",
        "text": "| PrivateType_T (name, underlying_type) -> PrivateType_T (name, apply_subst subst underlying_type)\n| PolymorphicVariantType_T variants ->\nPolymorphicVariantType_T\n(List.map\n(fun (label, typ_opt) -> (label, Option.map (apply_subst subst) typ_opt))\nvariants)",
        "lines": [
          "| PrivateType_T (name, underlying_type) -> PrivateType_T (name, apply_subst subst underlying_type)",
          "| PolymorphicVariantType_T variants ->",
          "PolymorphicVariantType_T",
          "(List.map",
          "(fun (label, typ_opt) -> (label, Option.map (apply_subst subst) typ_opt))",
          "variants)"
        ],
        "start_line": 34,
        "end_line": 39,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/types_subst.ml"
      }
    ],
    "b872f35d079b75582093844305d4fcc2": [
      {
        "hash": "b872f35d079b75582093844305d4fcc2",
        "text": "| PolymorphicVariantType_T variants ->\nPolymorphicVariantType_T\n(List.map\n(fun (label, typ_opt) -> (label, Option.map (apply_subst subst) typ_opt))\nvariants)",
        "lines": [
          "| PolymorphicVariantType_T variants ->",
          "PolymorphicVariantType_T",
          "(List.map",
          "(fun (label, typ_opt) -> (label, Option.map (apply_subst subst) typ_opt))",
          "variants)"
        ],
        "start_line": 114,
        "end_line": 118,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/types_unify.ml"
      },
      {
        "hash": "b872f35d079b75582093844305d4fcc2",
        "text": "| PolymorphicVariantType_T variants ->\nPolymorphicVariantType_T\n(List.map\n(fun (label, typ_opt) -> (label, Option.map (apply_subst subst) typ_opt))\nvariants)",
        "lines": [
          "| PolymorphicVariantType_T variants ->",
          "PolymorphicVariantType_T",
          "(List.map",
          "(fun (label, typ_opt) -> (label, Option.map (apply_subst subst) typ_opt))",
          "variants)"
        ],
        "start_line": 35,
        "end_line": 39,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/types_subst.ml"
      }
    ],
    "59a582e4ebfb3e8232e3e90975741bab": [
      {
        "hash": "59a582e4ebfb3e8232e3e90975741bab",
        "text": "PolymorphicVariantType_T\n(List.map\n(fun (label, typ_opt) -> (label, Option.map (apply_subst subst) typ_opt))\nvariants)",
        "lines": [
          "PolymorphicVariantType_T",
          "(List.map",
          "(fun (label, typ_opt) -> (label, Option.map (apply_subst subst) typ_opt))",
          "variants)"
        ],
        "start_line": 115,
        "end_line": 118,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/types_unify.ml"
      },
      {
        "hash": "59a582e4ebfb3e8232e3e90975741bab",
        "text": "PolymorphicVariantType_T\n(List.map\n(fun (label, typ_opt) -> (label, Option.map (apply_subst subst) typ_opt))\nvariants)",
        "lines": [
          "PolymorphicVariantType_T",
          "(List.map",
          "(fun (label, typ_opt) -> (label, Option.map (apply_subst subst) typ_opt))",
          "variants)"
        ],
        "start_line": 36,
        "end_line": 39,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/types_subst.ml"
      }
    ],
    "c3a07ea37a5cace63a95219d5d79d660": [
      {
        "hash": "c3a07ea37a5cace63a95219d5d79d660",
        "text": "(List.map\n(fun (label, typ_opt) -> (label, Option.map (apply_subst subst) typ_opt))\nvariants)",
        "lines": [
          "(List.map",
          "(fun (label, typ_opt) -> (label, Option.map (apply_subst subst) typ_opt))",
          "variants)"
        ],
        "start_line": 116,
        "end_line": 118,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/types_unify.ml"
      },
      {
        "hash": "c3a07ea37a5cace63a95219d5d79d660",
        "text": "(List.map\n(fun (label, typ_opt) -> (label, Option.map (apply_subst subst) typ_opt))\nvariants)",
        "lines": [
          "(List.map",
          "(fun (label, typ_opt) -> (label, Option.map (apply_subst subst) typ_opt))",
          "variants)"
        ],
        "start_line": 37,
        "end_line": 39,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/types_subst.ml"
      }
    ],
    "735ee56db80d39ed6285b0cbf5ebe1b6": [
      {
        "hash": "735ee56db80d39ed6285b0cbf5ebe1b6",
        "text": "| Error error_info ->\nraise\n(Parser_utils.SyntaxError\n(Compiler_errors.format_error_info error_info, snd (current_token state)))\n| Ok _ -> assert false )",
        "lines": [
          "| Error error_info ->",
          "raise",
          "(Parser_utils.SyntaxError",
          "(Compiler_errors.format_error_info error_info, snd (current_token state)))",
          "| Ok _ -> assert false )"
        ],
        "start_line": 107,
        "end_line": 111,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_natural_functions.ml"
      },
      {
        "hash": "735ee56db80d39ed6285b0cbf5ebe1b6",
        "text": "| Error error_info ->\nraise\n(Parser_utils.SyntaxError\n(Compiler_errors.format_error_info error_info, snd (current_token state)))\n| Ok _ -> assert false )",
        "lines": [
          "| Error error_info ->",
          "raise",
          "(Parser_utils.SyntaxError",
          "(Compiler_errors.format_error_info error_info, snd (current_token state)))",
          "| Ok _ -> assert false )"
        ],
        "start_line": 92,
        "end_line": 96,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser.ml"
      }
    ],
    "e01d0e1818252e64b709f4a0895ceaa2": [
      {
        "hash": "e01d0e1818252e64b709f4a0895ceaa2",
        "text": "raise\n(Parser_utils.SyntaxError\n(Compiler_errors.format_error_info error_info, snd (current_token state)))\n| Ok _ -> assert false )",
        "lines": [
          "raise",
          "(Parser_utils.SyntaxError",
          "(Compiler_errors.format_error_info error_info, snd (current_token state)))",
          "| Ok _ -> assert false )"
        ],
        "start_line": 108,
        "end_line": 111,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_natural_functions.ml"
      },
      {
        "hash": "e01d0e1818252e64b709f4a0895ceaa2",
        "text": "raise\n(Parser_utils.SyntaxError\n(Compiler_errors.format_error_info error_info, snd (current_token state)))\n| Ok _ -> assert false )",
        "lines": [
          "raise",
          "(Parser_utils.SyntaxError",
          "(Compiler_errors.format_error_info error_info, snd (current_token state)))",
          "| Ok _ -> assert false )"
        ],
        "start_line": 93,
        "end_line": 96,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser.ml"
      }
    ],
    "75a0b34c320deb610f70e8fd5d6e4701": [
      {
        "hash": "75a0b34c320deb610f70e8fd5d6e4701",
        "text": "(Parser_utils.SyntaxError\n(Compiler_errors.format_error_info error_info, snd (current_token state)))\n| Ok _ -> assert false )",
        "lines": [
          "(Parser_utils.SyntaxError",
          "(Compiler_errors.format_error_info error_info, snd (current_token state)))",
          "| Ok _ -> assert false )"
        ],
        "start_line": 109,
        "end_line": 111,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_natural_functions.ml"
      },
      {
        "hash": "75a0b34c320deb610f70e8fd5d6e4701",
        "text": "(Parser_utils.SyntaxError\n(Compiler_errors.format_error_info error_info, snd (current_token state)))\n| Ok _ -> assert false )",
        "lines": [
          "(Parser_utils.SyntaxError",
          "(Compiler_errors.format_error_info error_info, snd (current_token state)))",
          "| Ok _ -> assert false )"
        ],
        "start_line": 94,
        "end_line": 96,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser.ml"
      }
    ],
    "b2cee19163a85ad50493ddeadbc85ae2": [
      {
        "hash": "b2cee19163a85ad50493ddeadbc85ae2",
        "text": "let token_after, _ = current_token state in\nmatch token_after with\n| LessThanEqualToKeyword ->\nlet state1 = advance_parser state in\nlet right_expr, state2 = parse_expr state1 in\n(BinaryOpExpr (VarExpr param_name, Le, right_expr), state2)\n| _ -> (VarExpr param_name, state)",
        "lines": [
          "let token_after, _ = current_token state in",
          "match token_after with",
          "| LessThanEqualToKeyword ->",
          "let state1 = advance_parser state in",
          "let right_expr, state2 = parse_expr state1 in",
          "(BinaryOpExpr (VarExpr param_name, Le, right_expr), state2)",
          "| _ -> (VarExpr param_name, state)"
        ],
        "start_line": 172,
        "end_line": 178,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_natural_functions.ml"
      },
      {
        "hash": "b2cee19163a85ad50493ddeadbc85ae2",
        "text": "let token_after, _ = current_token state in\nmatch token_after with\n| LessThanEqualToKeyword ->\nlet state1 = advance_parser state in\nlet right_expr, state2 = parse_expr state1 in\n(BinaryOpExpr (VarExpr param_name, Le, right_expr), state2)\n| _ -> (VarExpr param_name, state)",
        "lines": [
          "let token_after, _ = current_token state in",
          "match token_after with",
          "| LessThanEqualToKeyword ->",
          "let state1 = advance_parser state in",
          "let right_expr, state2 = parse_expr state1 in",
          "(BinaryOpExpr (VarExpr param_name, Le, right_expr), state2)",
          "| _ -> (VarExpr param_name, state)"
        ],
        "start_line": 171,
        "end_line": 177,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_natural_language.ml"
      }
    ],
    "a7e64a2debf6af005810755f9411f8e0": [
      {
        "hash": "a7e64a2debf6af005810755f9411f8e0",
        "text": "match token_after with\n| LessThanEqualToKeyword ->\nlet state1 = advance_parser state in\nlet right_expr, state2 = parse_expr state1 in\n(BinaryOpExpr (VarExpr param_name, Le, right_expr), state2)\n| _ -> (VarExpr param_name, state)",
        "lines": [
          "match token_after with",
          "| LessThanEqualToKeyword ->",
          "let state1 = advance_parser state in",
          "let right_expr, state2 = parse_expr state1 in",
          "(BinaryOpExpr (VarExpr param_name, Le, right_expr), state2)",
          "| _ -> (VarExpr param_name, state)"
        ],
        "start_line": 173,
        "end_line": 178,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_natural_functions.ml"
      },
      {
        "hash": "a7e64a2debf6af005810755f9411f8e0",
        "text": "match token_after with\n| LessThanEqualToKeyword ->\nlet state1 = advance_parser state in\nlet right_expr, state2 = parse_expr state1 in\n(BinaryOpExpr (VarExpr param_name, Le, right_expr), state2)\n| _ -> (VarExpr param_name, state)",
        "lines": [
          "match token_after with",
          "| LessThanEqualToKeyword ->",
          "let state1 = advance_parser state in",
          "let right_expr, state2 = parse_expr state1 in",
          "(BinaryOpExpr (VarExpr param_name, Le, right_expr), state2)",
          "| _ -> (VarExpr param_name, state)"
        ],
        "start_line": 172,
        "end_line": 177,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_natural_language.ml"
      }
    ],
    "709544ab0f32bf0b5cd6f2a422ccc732": [
      {
        "hash": "709544ab0f32bf0b5cd6f2a422ccc732",
        "text": "| LessThanEqualToKeyword ->\nlet state1 = advance_parser state in\nlet right_expr, state2 = parse_expr state1 in\n(BinaryOpExpr (VarExpr param_name, Le, right_expr), state2)\n| _ -> (VarExpr param_name, state)",
        "lines": [
          "| LessThanEqualToKeyword ->",
          "let state1 = advance_parser state in",
          "let right_expr, state2 = parse_expr state1 in",
          "(BinaryOpExpr (VarExpr param_name, Le, right_expr), state2)",
          "| _ -> (VarExpr param_name, state)"
        ],
        "start_line": 174,
        "end_line": 178,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_natural_functions.ml"
      },
      {
        "hash": "709544ab0f32bf0b5cd6f2a422ccc732",
        "text": "| LessThanEqualToKeyword ->\nlet state1 = advance_parser state in\nlet right_expr, state2 = parse_expr state1 in\n(BinaryOpExpr (VarExpr param_name, Le, right_expr), state2)\n| _ -> (VarExpr param_name, state)",
        "lines": [
          "| LessThanEqualToKeyword ->",
          "let state1 = advance_parser state in",
          "let right_expr, state2 = parse_expr state1 in",
          "(BinaryOpExpr (VarExpr param_name, Le, right_expr), state2)",
          "| _ -> (VarExpr param_name, state)"
        ],
        "start_line": 173,
        "end_line": 177,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_natural_language.ml"
      }
    ],
    "f1ba21fe7e0497a2b24e2c8e63f7b922": [
      {
        "hash": "f1ba21fe7e0497a2b24e2c8e63f7b922",
        "text": "let state1 = advance_parser state in\nlet right_expr, state2 = parse_expr state1 in\n(BinaryOpExpr (VarExpr param_name, Le, right_expr), state2)\n| _ -> (VarExpr param_name, state)",
        "lines": [
          "let state1 = advance_parser state in",
          "let right_expr, state2 = parse_expr state1 in",
          "(BinaryOpExpr (VarExpr param_name, Le, right_expr), state2)",
          "| _ -> (VarExpr param_name, state)"
        ],
        "start_line": 175,
        "end_line": 178,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_natural_functions.ml"
      },
      {
        "hash": "f1ba21fe7e0497a2b24e2c8e63f7b922",
        "text": "let state1 = advance_parser state in\nlet right_expr, state2 = parse_expr state1 in\n(BinaryOpExpr (VarExpr param_name, Le, right_expr), state2)\n| _ -> (VarExpr param_name, state)",
        "lines": [
          "let state1 = advance_parser state in",
          "let right_expr, state2 = parse_expr state1 in",
          "(BinaryOpExpr (VarExpr param_name, Le, right_expr), state2)",
          "| _ -> (VarExpr param_name, state)"
        ],
        "start_line": 174,
        "end_line": 177,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_natural_language.ml"
      }
    ],
    "bfd6b5ceac46a518160de6254fd4d319": [
      {
        "hash": "bfd6b5ceac46a518160de6254fd4d319",
        "text": "let right_expr, state2 = parse_expr state1 in\n(BinaryOpExpr (VarExpr param_name, Le, right_expr), state2)\n| _ -> (VarExpr param_name, state)",
        "lines": [
          "let right_expr, state2 = parse_expr state1 in",
          "(BinaryOpExpr (VarExpr param_name, Le, right_expr), state2)",
          "| _ -> (VarExpr param_name, state)"
        ],
        "start_line": 176,
        "end_line": 178,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_natural_functions.ml"
      },
      {
        "hash": "bfd6b5ceac46a518160de6254fd4d319",
        "text": "let right_expr, state2 = parse_expr state1 in\n(BinaryOpExpr (VarExpr param_name, Le, right_expr), state2)\n| _ -> (VarExpr param_name, state)",
        "lines": [
          "let right_expr, state2 = parse_expr state1 in",
          "(BinaryOpExpr (VarExpr param_name, Le, right_expr), state2)",
          "| _ -> (VarExpr param_name, state)"
        ],
        "start_line": 175,
        "end_line": 177,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_natural_language.ml"
      }
    ],
    "410c53780bfa76de21cda62e229b8f5e": [
      {
        "hash": "410c53780bfa76de21cda62e229b8f5e",
        "text": "技术债务重构 - Fix #796\n@author 骆言AI代理\n@version 3.0 (整合版)\n@since 2025-07-21 *)",
        "lines": [
          "技术债务重构 - Fix #796",
          "@author 骆言AI代理",
          "@version 3.0 (整合版)",
          "@since 2025-07-21 *)"
        ],
        "start_line": 11,
        "end_line": 14,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_operators_consolidated.ml"
      },
      {
        "hash": "410c53780bfa76de21cda62e229b8f5e",
        "text": "技术债务重构 - Fix #796\n@author 骆言AI代理\n@version 3.0 (整合版)\n@since 2025-07-21 *)",
        "lines": [
          "技术债务重构 - Fix #796",
          "@author 骆言AI代理",
          "@version 3.0 (整合版)",
          "@since 2025-07-21 *)"
        ],
        "start_line": 14,
        "end_line": 17,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_structured_consolidated.ml"
      },
      {
        "hash": "410c53780bfa76de21cda62e229b8f5e",
        "text": "技术债务重构 - Fix #796\n@author 骆言AI代理\n@version 3.0 (整合版)\n@since 2025-07-21 *)",
        "lines": [
          "技术债务重构 - Fix #796",
          "@author 骆言AI代理",
          "@version 3.0 (整合版)",
          "@since 2025-07-21 *)"
        ],
        "start_line": 14,
        "end_line": 17,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_primary_consolidated.ml"
      }
    ],
    "13ec1d7cc6129b9cbf8876b8b392dc1d": [
      {
        "hash": "13ec1d7cc6129b9cbf8876b8b392dc1d",
        "text": "@author 骆言AI代理\n@version 3.0 (整合版)\n@since 2025-07-21 *)",
        "lines": [
          "@author 骆言AI代理",
          "@version 3.0 (整合版)",
          "@since 2025-07-21 *)"
        ],
        "start_line": 12,
        "end_line": 14,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_operators_consolidated.ml"
      },
      {
        "hash": "13ec1d7cc6129b9cbf8876b8b392dc1d",
        "text": "@author 骆言AI代理\n@version 3.0 (整合版)\n@since 2025-07-21 *)",
        "lines": [
          "@author 骆言AI代理",
          "@version 3.0 (整合版)",
          "@since 2025-07-21 *)"
        ],
        "start_line": 15,
        "end_line": 17,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_structured_consolidated.ml"
      },
      {
        "hash": "13ec1d7cc6129b9cbf8876b8b392dc1d",
        "text": "@author 骆言AI代理\n@version 3.0 (整合版)\n@since 2025-07-21 *)",
        "lines": [
          "@author 骆言AI代理",
          "@version 3.0 (整合版)",
          "@since 2025-07-21 *)"
        ],
        "start_line": 15,
        "end_line": 17,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_primary_consolidated.ml"
      }
    ],
    "e90fc45dc14ef1ea7438498883c302ad": [
      {
        "hash": "e90fc45dc14ef1ea7438498883c302ad",
        "text": "let token, _ = current_token state in\nif token = RightParen || token = ChineseRightParen then (acc, state)\nelse\nlet arg, state1 = parse_expr state in\nlet new_acc = arg :: acc in\nlet token1, _ = current_token state1 in\nif token1 = RightParen || token1 = ChineseRightParen then (new_acc, state1)\nelse if token1 = Comma then",
        "lines": [
          "let token, _ = current_token state in",
          "if token = RightParen || token = ChineseRightParen then (acc, state)",
          "else",
          "let arg, state1 = parse_expr state in",
          "let new_acc = arg :: acc in",
          "let token1, _ = current_token state1 in",
          "if token1 = RightParen || token1 = ChineseRightParen then (new_acc, state1)",
          "else if token1 = Comma then"
        ],
        "start_line": 149,
        "end_line": 156,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_operators_consolidated.ml"
      },
      {
        "hash": "e90fc45dc14ef1ea7438498883c302ad",
        "text": "let token, _ = current_token state in\nif token = RightParen || token = ChineseRightParen then (acc, state)\nelse\nlet arg, state1 = parse_expr state in\nlet new_acc = arg :: acc in\nlet token1, _ = current_token state1 in\nif token1 = RightParen || token1 = ChineseRightParen then (new_acc, state1)\nelse if token1 = Comma then",
        "lines": [
          "let token, _ = current_token state in",
          "if token = RightParen || token = ChineseRightParen then (acc, state)",
          "else",
          "let arg, state1 = parse_expr state in",
          "let new_acc = arg :: acc in",
          "let token1, _ = current_token state1 in",
          "if token1 = RightParen || token1 = ChineseRightParen then (new_acc, state1)",
          "else if token1 = Comma then"
        ],
        "start_line": 188,
        "end_line": 195,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_operators_consolidated.ml"
      }
    ],
    "c6ce8849f7bb18ca4e91d3729462128b": [
      {
        "hash": "c6ce8849f7bb18ca4e91d3729462128b",
        "text": "if token = RightParen || token = ChineseRightParen then (acc, state)\nelse\nlet arg, state1 = parse_expr state in\nlet new_acc = arg :: acc in\nlet token1, _ = current_token state1 in\nif token1 = RightParen || token1 = ChineseRightParen then (new_acc, state1)\nelse if token1 = Comma then",
        "lines": [
          "if token = RightParen || token = ChineseRightParen then (acc, state)",
          "else",
          "let arg, state1 = parse_expr state in",
          "let new_acc = arg :: acc in",
          "let token1, _ = current_token state1 in",
          "if token1 = RightParen || token1 = ChineseRightParen then (new_acc, state1)",
          "else if token1 = Comma then"
        ],
        "start_line": 150,
        "end_line": 156,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_operators_consolidated.ml"
      },
      {
        "hash": "c6ce8849f7bb18ca4e91d3729462128b",
        "text": "if token = RightParen || token = ChineseRightParen then (acc, state)\nelse\nlet arg, state1 = parse_expr state in\nlet new_acc = arg :: acc in\nlet token1, _ = current_token state1 in\nif token1 = RightParen || token1 = ChineseRightParen then (new_acc, state1)\nelse if token1 = Comma then",
        "lines": [
          "if token = RightParen || token = ChineseRightParen then (acc, state)",
          "else",
          "let arg, state1 = parse_expr state in",
          "let new_acc = arg :: acc in",
          "let token1, _ = current_token state1 in",
          "if token1 = RightParen || token1 = ChineseRightParen then (new_acc, state1)",
          "else if token1 = Comma then"
        ],
        "start_line": 189,
        "end_line": 195,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_operators_consolidated.ml"
      }
    ],
    "d2740eeb7f8bf00171b91ab8ce6c3554": [
      {
        "hash": "d2740eeb7f8bf00171b91ab8ce6c3554",
        "text": "else\nlet arg, state1 = parse_expr state in\nlet new_acc = arg :: acc in\nlet token1, _ = current_token state1 in\nif token1 = RightParen || token1 = ChineseRightParen then (new_acc, state1)\nelse if token1 = Comma then",
        "lines": [
          "else",
          "let arg, state1 = parse_expr state in",
          "let new_acc = arg :: acc in",
          "let token1, _ = current_token state1 in",
          "if token1 = RightParen || token1 = ChineseRightParen then (new_acc, state1)",
          "else if token1 = Comma then"
        ],
        "start_line": 151,
        "end_line": 156,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_operators_consolidated.ml"
      },
      {
        "hash": "d2740eeb7f8bf00171b91ab8ce6c3554",
        "text": "else\nlet arg, state1 = parse_expr state in\nlet new_acc = arg :: acc in\nlet token1, _ = current_token state1 in\nif token1 = RightParen || token1 = ChineseRightParen then (new_acc, state1)\nelse if token1 = Comma then",
        "lines": [
          "else",
          "let arg, state1 = parse_expr state in",
          "let new_acc = arg :: acc in",
          "let token1, _ = current_token state1 in",
          "if token1 = RightParen || token1 = ChineseRightParen then (new_acc, state1)",
          "else if token1 = Comma then"
        ],
        "start_line": 190,
        "end_line": 195,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_operators_consolidated.ml"
      }
    ],
    "11f1c9e71a97cd86910f315612087ae4": [
      {
        "hash": "11f1c9e71a97cd86910f315612087ae4",
        "text": "let arg, state1 = parse_expr state in\nlet new_acc = arg :: acc in\nlet token1, _ = current_token state1 in\nif token1 = RightParen || token1 = ChineseRightParen then (new_acc, state1)\nelse if token1 = Comma then",
        "lines": [
          "let arg, state1 = parse_expr state in",
          "let new_acc = arg :: acc in",
          "let token1, _ = current_token state1 in",
          "if token1 = RightParen || token1 = ChineseRightParen then (new_acc, state1)",
          "else if token1 = Comma then"
        ],
        "start_line": 152,
        "end_line": 156,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_operators_consolidated.ml"
      },
      {
        "hash": "11f1c9e71a97cd86910f315612087ae4",
        "text": "let arg, state1 = parse_expr state in\nlet new_acc = arg :: acc in\nlet token1, _ = current_token state1 in\nif token1 = RightParen || token1 = ChineseRightParen then (new_acc, state1)\nelse if token1 = Comma then",
        "lines": [
          "let arg, state1 = parse_expr state in",
          "let new_acc = arg :: acc in",
          "let token1, _ = current_token state1 in",
          "if token1 = RightParen || token1 = ChineseRightParen then (new_acc, state1)",
          "else if token1 = Comma then"
        ],
        "start_line": 191,
        "end_line": 195,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_operators_consolidated.ml"
      }
    ],
    "4ab30403e3832b63f541a55194ce16e9": [
      {
        "hash": "4ab30403e3832b63f541a55194ce16e9",
        "text": "let new_acc = arg :: acc in\nlet token1, _ = current_token state1 in\nif token1 = RightParen || token1 = ChineseRightParen then (new_acc, state1)\nelse if token1 = Comma then",
        "lines": [
          "let new_acc = arg :: acc in",
          "let token1, _ = current_token state1 in",
          "if token1 = RightParen || token1 = ChineseRightParen then (new_acc, state1)",
          "else if token1 = Comma then"
        ],
        "start_line": 153,
        "end_line": 156,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_operators_consolidated.ml"
      },
      {
        "hash": "4ab30403e3832b63f541a55194ce16e9",
        "text": "let new_acc = arg :: acc in\nlet token1, _ = current_token state1 in\nif token1 = RightParen || token1 = ChineseRightParen then (new_acc, state1)\nelse if token1 = Comma then",
        "lines": [
          "let new_acc = arg :: acc in",
          "let token1, _ = current_token state1 in",
          "if token1 = RightParen || token1 = ChineseRightParen then (new_acc, state1)",
          "else if token1 = Comma then"
        ],
        "start_line": 192,
        "end_line": 195,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_operators_consolidated.ml"
      }
    ],
    "5ea1a61dab6e27776253a77a0605f77e": [
      {
        "hash": "5ea1a61dab6e27776253a77a0605f77e",
        "text": "let token1, _ = current_token state1 in\nif token1 = RightParen || token1 = ChineseRightParen then (new_acc, state1)\nelse if token1 = Comma then",
        "lines": [
          "let token1, _ = current_token state1 in",
          "if token1 = RightParen || token1 = ChineseRightParen then (new_acc, state1)",
          "else if token1 = Comma then"
        ],
        "start_line": 154,
        "end_line": 156,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_operators_consolidated.ml"
      },
      {
        "hash": "5ea1a61dab6e27776253a77a0605f77e",
        "text": "let token1, _ = current_token state1 in\nif token1 = RightParen || token1 = ChineseRightParen then (new_acc, state1)\nelse if token1 = Comma then",
        "lines": [
          "let token1, _ = current_token state1 in",
          "if token1 = RightParen || token1 = ChineseRightParen then (new_acc, state1)",
          "else if token1 = Comma then"
        ],
        "start_line": 193,
        "end_line": 195,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_operators_consolidated.ml"
      }
    ],
    "01f845c69d762bf3642f93920c1c893a": [
      {
        "hash": "01f845c69d762bf3642f93920c1c893a",
        "text": "matrix.(i).(j) <-\nmin\n(min (matrix.(i - 1).(j) + 1) (matrix.(i).(j - 1) + 1))\n(matrix.(i - 1).(j - 1) + cost)",
        "lines": [
          "matrix.(i).(j) <-",
          "min",
          "(min (matrix.(i - 1).(j) + 1) (matrix.(i).(j - 1) + 1))",
          "(matrix.(i - 1).(j - 1) + cost)"
        ],
        "start_line": 101,
        "end_line": 104,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/error_recovery.ml"
      },
      {
        "hash": "01f845c69d762bf3642f93920c1c893a",
        "text": "matrix.(i).(j) <-\nmin\n(min (matrix.(i - 1).(j) + 1) (matrix.(i).(j - 1) + 1))\n(matrix.(i - 1).(j - 1) + cost)",
        "lines": [
          "matrix.(i).(j) <-",
          "min",
          "(min (matrix.(i - 1).(j) + 1) (matrix.(i).(j - 1) + 1))",
          "(matrix.(i - 1).(j - 1) + cost)"
        ],
        "start_line": 29,
        "end_line": 32,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/error_messages_analysis.ml"
      }
    ],
    "f657ae7fe6519db6004c768bf0bc07e1": [
      {
        "hash": "f657ae7fe6519db6004c768bf0bc07e1",
        "text": "min\n(min (matrix.(i - 1).(j) + 1) (matrix.(i).(j - 1) + 1))\n(matrix.(i - 1).(j - 1) + cost)",
        "lines": [
          "min",
          "(min (matrix.(i - 1).(j) + 1) (matrix.(i).(j - 1) + 1))",
          "(matrix.(i - 1).(j - 1) + cost)"
        ],
        "start_line": 102,
        "end_line": 104,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/error_recovery.ml"
      },
      {
        "hash": "f657ae7fe6519db6004c768bf0bc07e1",
        "text": "min\n(min (matrix.(i - 1).(j) + 1) (matrix.(i).(j - 1) + 1))\n(matrix.(i - 1).(j - 1) + cost)",
        "lines": [
          "min",
          "(min (matrix.(i - 1).(j) + 1) (matrix.(i).(j - 1) + 1))",
          "(matrix.(i - 1).(j - 1) + cost)"
        ],
        "start_line": 30,
        "end_line": 32,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/error_messages_analysis.ml"
      }
    ],
    "49ab9438c063686e06139dad4cfa3524": [
      {
        "hash": "49ab9438c063686e06139dad4cfa3524",
        "text": "done\ndone;\nmatrix.(len1).(len2)",
        "lines": [
          "done",
          "done;",
          "matrix.(len1).(len2)"
        ],
        "start_line": 106,
        "end_line": 108,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/error_recovery.ml"
      },
      {
        "hash": "49ab9438c063686e06139dad4cfa3524",
        "text": "done\ndone;\nmatrix.(len1).(len2)",
        "lines": [
          "done",
          "done;",
          "matrix.(len1).(len2)"
        ],
        "start_line": 34,
        "end_line": 36,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/error_messages_analysis.ml"
      }
    ],
    "de6202bf8c10dc60347f1fb3b266aca3": [
      {
        "hash": "de6202bf8c10dc60347f1fb3b266aca3",
        "text": "let raise_parse_error expr_type token exn state =\nlet error_msg =\nUnified_formatter.ErrorHandling.parse_failure_with_token expr_type (show_token token)\n(Printexc.to_string exn)\nin\nlet _, pos = current_token state in\nraise (Parser_utils.make_unexpected_token_error error_msg pos)",
        "lines": [
          "let raise_parse_error expr_type token exn state =",
          "let error_msg =",
          "Unified_formatter.ErrorHandling.parse_failure_with_token expr_type (show_token token)",
          "(Printexc.to_string exn)",
          "in",
          "let _, pos = current_token state in",
          "raise (Parser_utils.make_unexpected_token_error error_msg pos)"
        ],
        "start_line": 25,
        "end_line": 31,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_special.ml"
      },
      {
        "hash": "de6202bf8c10dc60347f1fb3b266aca3",
        "text": "let raise_parse_error expr_type token exn state =\nlet error_msg =\nUnified_formatter.ErrorHandling.parse_failure_with_token expr_type (show_token token)\n(Printexc.to_string exn)\nin\nlet _, pos = current_token state in\nraise (Parser_utils.make_unexpected_token_error error_msg pos)",
        "lines": [
          "let raise_parse_error expr_type token exn state =",
          "let error_msg =",
          "Unified_formatter.ErrorHandling.parse_failure_with_token expr_type (show_token token)",
          "(Printexc.to_string exn)",
          "in",
          "let _, pos = current_token state in",
          "raise (Parser_utils.make_unexpected_token_error error_msg pos)"
        ],
        "start_line": 26,
        "end_line": 32,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_identifiers.ml"
      },
      {
        "hash": "de6202bf8c10dc60347f1fb3b266aca3",
        "text": "let raise_parse_error expr_type token exn state =\nlet error_msg =\nUnified_formatter.ErrorHandling.parse_failure_with_token expr_type (show_token token)\n(Printexc.to_string exn)\nin\nlet _, pos = current_token state in\nraise (Parser_utils.make_unexpected_token_error error_msg pos)",
        "lines": [
          "let raise_parse_error expr_type token exn state =",
          "let error_msg =",
          "Unified_formatter.ErrorHandling.parse_failure_with_token expr_type (show_token token)",
          "(Printexc.to_string exn)",
          "in",
          "let _, pos = current_token state in",
          "raise (Parser_utils.make_unexpected_token_error error_msg pos)"
        ],
        "start_line": 97,
        "end_line": 103,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_primary_consolidated.ml"
      }
    ],
    "ba187c3b09bb009785cd87dd2e49410c": [
      {
        "hash": "ba187c3b09bb009785cd87dd2e49410c",
        "text": "let error_msg =\nUnified_formatter.ErrorHandling.parse_failure_with_token expr_type (show_token token)\n(Printexc.to_string exn)\nin\nlet _, pos = current_token state in\nraise (Parser_utils.make_unexpected_token_error error_msg pos)",
        "lines": [
          "let error_msg =",
          "Unified_formatter.ErrorHandling.parse_failure_with_token expr_type (show_token token)",
          "(Printexc.to_string exn)",
          "in",
          "let _, pos = current_token state in",
          "raise (Parser_utils.make_unexpected_token_error error_msg pos)"
        ],
        "start_line": 26,
        "end_line": 31,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_special.ml"
      },
      {
        "hash": "ba187c3b09bb009785cd87dd2e49410c",
        "text": "let error_msg =\nUnified_formatter.ErrorHandling.parse_failure_with_token expr_type (show_token token)\n(Printexc.to_string exn)\nin\nlet _, pos = current_token state in\nraise (Parser_utils.make_unexpected_token_error error_msg pos)",
        "lines": [
          "let error_msg =",
          "Unified_formatter.ErrorHandling.parse_failure_with_token expr_type (show_token token)",
          "(Printexc.to_string exn)",
          "in",
          "let _, pos = current_token state in",
          "raise (Parser_utils.make_unexpected_token_error error_msg pos)"
        ],
        "start_line": 27,
        "end_line": 32,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_identifiers.ml"
      },
      {
        "hash": "ba187c3b09bb009785cd87dd2e49410c",
        "text": "let error_msg =\nUnified_formatter.ErrorHandling.parse_failure_with_token expr_type (show_token token)\n(Printexc.to_string exn)\nin\nlet _, pos = current_token state in\nraise (Parser_utils.make_unexpected_token_error error_msg pos)",
        "lines": [
          "let error_msg =",
          "Unified_formatter.ErrorHandling.parse_failure_with_token expr_type (show_token token)",
          "(Printexc.to_string exn)",
          "in",
          "let _, pos = current_token state in",
          "raise (Parser_utils.make_unexpected_token_error error_msg pos)"
        ],
        "start_line": 98,
        "end_line": 103,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_primary_consolidated.ml"
      }
    ],
    "112d57680068c2f343a0b66c55716187": [
      {
        "hash": "112d57680068c2f343a0b66c55716187",
        "text": "Unified_formatter.ErrorHandling.parse_failure_with_token expr_type (show_token token)\n(Printexc.to_string exn)\nin\nlet _, pos = current_token state in\nraise (Parser_utils.make_unexpected_token_error error_msg pos)",
        "lines": [
          "Unified_formatter.ErrorHandling.parse_failure_with_token expr_type (show_token token)",
          "(Printexc.to_string exn)",
          "in",
          "let _, pos = current_token state in",
          "raise (Parser_utils.make_unexpected_token_error error_msg pos)"
        ],
        "start_line": 27,
        "end_line": 31,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_special.ml"
      },
      {
        "hash": "112d57680068c2f343a0b66c55716187",
        "text": "Unified_formatter.ErrorHandling.parse_failure_with_token expr_type (show_token token)\n(Printexc.to_string exn)\nin\nlet _, pos = current_token state in\nraise (Parser_utils.make_unexpected_token_error error_msg pos)",
        "lines": [
          "Unified_formatter.ErrorHandling.parse_failure_with_token expr_type (show_token token)",
          "(Printexc.to_string exn)",
          "in",
          "let _, pos = current_token state in",
          "raise (Parser_utils.make_unexpected_token_error error_msg pos)"
        ],
        "start_line": 28,
        "end_line": 32,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_identifiers.ml"
      },
      {
        "hash": "112d57680068c2f343a0b66c55716187",
        "text": "Unified_formatter.ErrorHandling.parse_failure_with_token expr_type (show_token token)\n(Printexc.to_string exn)\nin\nlet _, pos = current_token state in\nraise (Parser_utils.make_unexpected_token_error error_msg pos)",
        "lines": [
          "Unified_formatter.ErrorHandling.parse_failure_with_token expr_type (show_token token)",
          "(Printexc.to_string exn)",
          "in",
          "let _, pos = current_token state in",
          "raise (Parser_utils.make_unexpected_token_error error_msg pos)"
        ],
        "start_line": 99,
        "end_line": 103,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_primary_consolidated.ml"
      }
    ],
    "75d4068e825bf5deec8547c044c41acb": [
      {
        "hash": "75d4068e825bf5deec8547c044c41acb",
        "text": "(Printexc.to_string exn)\nin\nlet _, pos = current_token state in\nraise (Parser_utils.make_unexpected_token_error error_msg pos)",
        "lines": [
          "(Printexc.to_string exn)",
          "in",
          "let _, pos = current_token state in",
          "raise (Parser_utils.make_unexpected_token_error error_msg pos)"
        ],
        "start_line": 28,
        "end_line": 31,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_special.ml"
      },
      {
        "hash": "75d4068e825bf5deec8547c044c41acb",
        "text": "(Printexc.to_string exn)\nin\nlet _, pos = current_token state in\nraise (Parser_utils.make_unexpected_token_error error_msg pos)",
        "lines": [
          "(Printexc.to_string exn)",
          "in",
          "let _, pos = current_token state in",
          "raise (Parser_utils.make_unexpected_token_error error_msg pos)"
        ],
        "start_line": 29,
        "end_line": 32,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_identifiers.ml"
      },
      {
        "hash": "75d4068e825bf5deec8547c044c41acb",
        "text": "(Printexc.to_string exn)\nin\nlet _, pos = current_token state in\nraise (Parser_utils.make_unexpected_token_error error_msg pos)",
        "lines": [
          "(Printexc.to_string exn)",
          "in",
          "let _, pos = current_token state in",
          "raise (Parser_utils.make_unexpected_token_error error_msg pos)"
        ],
        "start_line": 100,
        "end_line": 103,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_primary_consolidated.ml"
      }
    ],
    "1f74c59430f5ae6292469843cf45b625": [
      {
        "hash": "1f74c59430f5ae6292469843cf45b625",
        "text": "| LeftBracket | ChineseLeftBracket ->\nlet ancient_list_error_msg =\n\"请使用古雅体列表语法替代 [...]。\\n\\\n空列表：空空如也\\n\\\n有元素的列表：列开始 元素1 其一 元素2 其二 元素3 其三 列结束\\n\\\n模式匹配：有首有尾 首名为「变量名」尾名为「尾部变量名」\"\nin\nraise (SyntaxError (ancient_list_error_msg, pos))",
        "lines": [
          "| LeftBracket | ChineseLeftBracket ->",
          "let ancient_list_error_msg =",
          "\"请使用古雅体列表语法替代 [...]。\\n\\",
          "空列表：空空如也\\n\\",
          "有元素的列表：列开始 元素1 其一 元素2 其二 元素3 其三 列结束\\n\\",
          "模式匹配：有首有尾 首名为「变量名」尾名为「尾部变量名」\"",
          "in",
          "raise (SyntaxError (ancient_list_error_msg, pos))"
        ],
        "start_line": 92,
        "end_line": 99,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_special.ml"
      },
      {
        "hash": "1f74c59430f5ae6292469843cf45b625",
        "text": "| LeftBracket | ChineseLeftBracket ->\nlet ancient_list_error_msg =\n\"请使用古雅体列表语法替代 [...]。\\n\\\n空列表：空空如也\\n\\\n有元素的列表：列开始 元素1 其一 元素2 其二 元素3 其三 列结束\\n\\\n模式匹配：有首有尾 首名为「变量名」尾名为「尾部变量名」\"\nin\nraise (SyntaxError (ancient_list_error_msg, pos))",
        "lines": [
          "| LeftBracket | ChineseLeftBracket ->",
          "let ancient_list_error_msg =",
          "\"请使用古雅体列表语法替代 [...]。\\n\\",
          "空列表：空空如也\\n\\",
          "有元素的列表：列开始 元素1 其一 元素2 其二 元素3 其三 列结束\\n\\",
          "模式匹配：有首有尾 首名为「变量名」尾名为「尾部变量名」\"",
          "in",
          "raise (SyntaxError (ancient_list_error_msg, pos))"
        ],
        "start_line": 68,
        "end_line": 75,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_primary_consolidated.ml"
      }
    ],
    "5699c3c5cf17aa54c7517cef3a0a1b6f": [
      {
        "hash": "5699c3c5cf17aa54c7517cef3a0a1b6f",
        "text": "let ancient_list_error_msg =\n\"请使用古雅体列表语法替代 [...]。\\n\\\n空列表：空空如也\\n\\\n有元素的列表：列开始 元素1 其一 元素2 其二 元素3 其三 列结束\\n\\\n模式匹配：有首有尾 首名为「变量名」尾名为「尾部变量名」\"\nin\nraise (SyntaxError (ancient_list_error_msg, pos))",
        "lines": [
          "let ancient_list_error_msg =",
          "\"请使用古雅体列表语法替代 [...]。\\n\\",
          "空列表：空空如也\\n\\",
          "有元素的列表：列开始 元素1 其一 元素2 其二 元素3 其三 列结束\\n\\",
          "模式匹配：有首有尾 首名为「变量名」尾名为「尾部变量名」\"",
          "in",
          "raise (SyntaxError (ancient_list_error_msg, pos))"
        ],
        "start_line": 93,
        "end_line": 99,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_special.ml"
      },
      {
        "hash": "5699c3c5cf17aa54c7517cef3a0a1b6f",
        "text": "let ancient_list_error_msg =\n\"请使用古雅体列表语法替代 [...]。\\n\\\n空列表：空空如也\\n\\\n有元素的列表：列开始 元素1 其一 元素2 其二 元素3 其三 列结束\\n\\\n模式匹配：有首有尾 首名为「变量名」尾名为「尾部变量名」\"\nin\nraise (SyntaxError (ancient_list_error_msg, pos))",
        "lines": [
          "let ancient_list_error_msg =",
          "\"请使用古雅体列表语法替代 [...]。\\n\\",
          "空列表：空空如也\\n\\",
          "有元素的列表：列开始 元素1 其一 元素2 其二 元素3 其三 列结束\\n\\",
          "模式匹配：有首有尾 首名为「变量名」尾名为「尾部变量名」\"",
          "in",
          "raise (SyntaxError (ancient_list_error_msg, pos))"
        ],
        "start_line": 69,
        "end_line": 75,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_primary_consolidated.ml"
      }
    ],
    "c793249e3996a90ba60d4daa5837f9b6": [
      {
        "hash": "c793249e3996a90ba60d4daa5837f9b6",
        "text": "\"请使用古雅体列表语法替代 [...]。\\n\\\n空列表：空空如也\\n\\\n有元素的列表：列开始 元素1 其一 元素2 其二 元素3 其三 列结束\\n\\\n模式匹配：有首有尾 首名为「变量名」尾名为「尾部变量名」\"\nin\nraise (SyntaxError (ancient_list_error_msg, pos))",
        "lines": [
          "\"请使用古雅体列表语法替代 [...]。\\n\\",
          "空列表：空空如也\\n\\",
          "有元素的列表：列开始 元素1 其一 元素2 其二 元素3 其三 列结束\\n\\",
          "模式匹配：有首有尾 首名为「变量名」尾名为「尾部变量名」\"",
          "in",
          "raise (SyntaxError (ancient_list_error_msg, pos))"
        ],
        "start_line": 94,
        "end_line": 99,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_special.ml"
      },
      {
        "hash": "c793249e3996a90ba60d4daa5837f9b6",
        "text": "\"请使用古雅体列表语法替代 [...]。\\n\\\n空列表：空空如也\\n\\\n有元素的列表：列开始 元素1 其一 元素2 其二 元素3 其三 列结束\\n\\\n模式匹配：有首有尾 首名为「变量名」尾名为「尾部变量名」\"\nin\nraise (SyntaxError (ancient_list_error_msg, pos))",
        "lines": [
          "\"请使用古雅体列表语法替代 [...]。\\n\\",
          "空列表：空空如也\\n\\",
          "有元素的列表：列开始 元素1 其一 元素2 其二 元素3 其三 列结束\\n\\",
          "模式匹配：有首有尾 首名为「变量名」尾名为「尾部变量名」\"",
          "in",
          "raise (SyntaxError (ancient_list_error_msg, pos))"
        ],
        "start_line": 70,
        "end_line": 75,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_primary_consolidated.ml"
      }
    ],
    "c4c95c2717d5cbf4dbb503138328eea5": [
      {
        "hash": "c4c95c2717d5cbf4dbb503138328eea5",
        "text": "空列表：空空如也\\n\\\n有元素的列表：列开始 元素1 其一 元素2 其二 元素3 其三 列结束\\n\\\n模式匹配：有首有尾 首名为「变量名」尾名为「尾部变量名」\"\nin\nraise (SyntaxError (ancient_list_error_msg, pos))",
        "lines": [
          "空列表：空空如也\\n\\",
          "有元素的列表：列开始 元素1 其一 元素2 其二 元素3 其三 列结束\\n\\",
          "模式匹配：有首有尾 首名为「变量名」尾名为「尾部变量名」\"",
          "in",
          "raise (SyntaxError (ancient_list_error_msg, pos))"
        ],
        "start_line": 95,
        "end_line": 99,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_special.ml"
      },
      {
        "hash": "c4c95c2717d5cbf4dbb503138328eea5",
        "text": "空列表：空空如也\\n\\\n有元素的列表：列开始 元素1 其一 元素2 其二 元素3 其三 列结束\\n\\\n模式匹配：有首有尾 首名为「变量名」尾名为「尾部变量名」\"\nin\nraise (SyntaxError (ancient_list_error_msg, pos))",
        "lines": [
          "空列表：空空如也\\n\\",
          "有元素的列表：列开始 元素1 其一 元素2 其二 元素3 其三 列结束\\n\\",
          "模式匹配：有首有尾 首名为「变量名」尾名为「尾部变量名」\"",
          "in",
          "raise (SyntaxError (ancient_list_error_msg, pos))"
        ],
        "start_line": 71,
        "end_line": 75,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_primary_consolidated.ml"
      }
    ],
    "1fbe76efb832f00e4ff0f6f5546e3aa1": [
      {
        "hash": "1fbe76efb832f00e4ff0f6f5546e3aa1",
        "text": "有元素的列表：列开始 元素1 其一 元素2 其二 元素3 其三 列结束\\n\\\n模式匹配：有首有尾 首名为「变量名」尾名为「尾部变量名」\"\nin\nraise (SyntaxError (ancient_list_error_msg, pos))",
        "lines": [
          "有元素的列表：列开始 元素1 其一 元素2 其二 元素3 其三 列结束\\n\\",
          "模式匹配：有首有尾 首名为「变量名」尾名为「尾部变量名」\"",
          "in",
          "raise (SyntaxError (ancient_list_error_msg, pos))"
        ],
        "start_line": 96,
        "end_line": 99,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_special.ml"
      },
      {
        "hash": "1fbe76efb832f00e4ff0f6f5546e3aa1",
        "text": "有元素的列表：列开始 元素1 其一 元素2 其二 元素3 其三 列结束\\n\\\n模式匹配：有首有尾 首名为「变量名」尾名为「尾部变量名」\"\nin\nraise (SyntaxError (ancient_list_error_msg, pos))",
        "lines": [
          "有元素的列表：列开始 元素1 其一 元素2 其二 元素3 其三 列结束\\n\\",
          "模式匹配：有首有尾 首名为「变量名」尾名为「尾部变量名」\"",
          "in",
          "raise (SyntaxError (ancient_list_error_msg, pos))"
        ],
        "start_line": 72,
        "end_line": 75,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_primary_consolidated.ml"
      }
    ],
    "d0e1318fa91c94ba410c737365fbf0c6": [
      {
        "hash": "d0e1318fa91c94ba410c737365fbf0c6",
        "text": "模式匹配：有首有尾 首名为「变量名」尾名为「尾部变量名」\"\nin\nraise (SyntaxError (ancient_list_error_msg, pos))",
        "lines": [
          "模式匹配：有首有尾 首名为「变量名」尾名为「尾部变量名」\"",
          "in",
          "raise (SyntaxError (ancient_list_error_msg, pos))"
        ],
        "start_line": 97,
        "end_line": 99,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_special.ml"
      },
      {
        "hash": "d0e1318fa91c94ba410c737365fbf0c6",
        "text": "模式匹配：有首有尾 首名为「变量名」尾名为「尾部变量名」\"\nin\nraise (SyntaxError (ancient_list_error_msg, pos))",
        "lines": [
          "模式匹配：有首有尾 首名为「变量名」尾名为「尾部变量名」\"",
          "in",
          "raise (SyntaxError (ancient_list_error_msg, pos))"
        ],
        "start_line": 73,
        "end_line": 75,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_primary_consolidated.ml"
      }
    ],
    "1dd9b77794b1078b30a82f9770b4d1d2": [
      {
        "hash": "1dd9b77794b1078b30a82f9770b4d1d2",
        "text": "| _ ->\nraise\n(Parser_utils.make_unexpected_token_error\n(\"parse_primary_expr: 不支持的token \" ^ show_token token)\npos)",
        "lines": [
          "| _ ->",
          "raise",
          "(Parser_utils.make_unexpected_token_error",
          "(\"parse_primary_expr: 不支持的token \" ^ show_token token)",
          "pos)"
        ],
        "start_line": 103,
        "end_line": 107,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_special.ml"
      },
      {
        "hash": "1dd9b77794b1078b30a82f9770b4d1d2",
        "text": "| _ ->\nraise\n(Parser_utils.make_unexpected_token_error\n(\"parse_primary_expr: 不支持的token \" ^ show_token token)\npos)",
        "lines": [
          "| _ ->",
          "raise",
          "(Parser_utils.make_unexpected_token_error",
          "(\"parse_primary_expr: 不支持的token \" ^ show_token token)",
          "pos)"
        ],
        "start_line": 79,
        "end_line": 83,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_primary_consolidated.ml"
      }
    ],
    "9bde8cd2fe12dda56a0a8d71bb6d9a62": [
      {
        "hash": "9bde8cd2fe12dda56a0a8d71bb6d9a62",
        "text": "raise\n(Parser_utils.make_unexpected_token_error\n(\"parse_primary_expr: 不支持的token \" ^ show_token token)\npos)",
        "lines": [
          "raise",
          "(Parser_utils.make_unexpected_token_error",
          "(\"parse_primary_expr: 不支持的token \" ^ show_token token)",
          "pos)"
        ],
        "start_line": 104,
        "end_line": 107,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_special.ml"
      },
      {
        "hash": "9bde8cd2fe12dda56a0a8d71bb6d9a62",
        "text": "raise\n(Parser_utils.make_unexpected_token_error\n(\"parse_primary_expr: 不支持的token \" ^ show_token token)\npos)",
        "lines": [
          "raise",
          "(Parser_utils.make_unexpected_token_error",
          "(\"parse_primary_expr: 不支持的token \" ^ show_token token)",
          "pos)"
        ],
        "start_line": 80,
        "end_line": 83,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_primary_consolidated.ml"
      }
    ],
    "752b2bbb07aa46fe51d2d3c81f7ee8f8": [
      {
        "hash": "752b2bbb07aa46fe51d2d3c81f7ee8f8",
        "text": "(Parser_utils.make_unexpected_token_error\n(\"parse_primary_expr: 不支持的token \" ^ show_token token)\npos)",
        "lines": [
          "(Parser_utils.make_unexpected_token_error",
          "(\"parse_primary_expr: 不支持的token \" ^ show_token token)",
          "pos)"
        ],
        "start_line": 105,
        "end_line": 107,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_special.ml"
      },
      {
        "hash": "752b2bbb07aa46fe51d2d3c81f7ee8f8",
        "text": "(Parser_utils.make_unexpected_token_error\n(\"parse_primary_expr: 不支持的token \" ^ show_token token)\npos)",
        "lines": [
          "(Parser_utils.make_unexpected_token_error",
          "(\"parse_primary_expr: 不支持的token \" ^ show_token token)",
          "pos)"
        ],
        "start_line": 81,
        "end_line": 83,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_primary_consolidated.ml"
      }
    ],
    "331b1cb80d61a5f5554b41f17956eaa9": [
      {
        "hash": "331b1cb80d61a5f5554b41f17956eaa9",
        "text": "let parse_positive_int_env_var v =\ntry\nlet i = int_of_string v in\nif i > 0 then Some i else None\nwith Failure _ -> None",
        "lines": [
          "let parse_positive_int_env_var v =",
          "try",
          "let i = int_of_string v in",
          "if i > 0 then Some i else None",
          "with Failure _ -> None"
        ],
        "start_line": 34,
        "end_line": 38,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/config.ml"
      },
      {
        "hash": "331b1cb80d61a5f5554b41f17956eaa9",
        "text": "let parse_positive_int_env_var v =\ntry\nlet i = int_of_string v in\nif i > 0 then Some i else None\nwith Failure _ -> None",
        "lines": [
          "let parse_positive_int_env_var v =",
          "try",
          "let i = int_of_string v in",
          "if i > 0 then Some i else None",
          "with Failure _ -> None"
        ],
        "start_line": 34,
        "end_line": 38,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/config/unified_config.ml"
      },
      {
        "hash": "331b1cb80d61a5f5554b41f17956eaa9",
        "text": "let parse_positive_int_env_var v =\ntry\nlet i = int_of_string v in\nif i > 0 then Some i else None\nwith Failure _ -> None",
        "lines": [
          "let parse_positive_int_env_var v =",
          "try",
          "let i = int_of_string v in",
          "if i > 0 then Some i else None",
          "with Failure _ -> None"
        ],
        "start_line": 62,
        "end_line": 66,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/config/runtime_config.ml"
      },
      {
        "hash": "331b1cb80d61a5f5554b41f17956eaa9",
        "text": "let parse_positive_int_env_var v =\ntry\nlet i = int_of_string v in\nif i > 0 then Some i else None\nwith Failure _ -> None",
        "lines": [
          "let parse_positive_int_env_var v =",
          "try",
          "let i = int_of_string v in",
          "if i > 0 then Some i else None",
          "with Failure _ -> None"
        ],
        "start_line": 81,
        "end_line": 85,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/config/compiler_config.ml"
      }
    ],
    "fc01a685e8ba925bcac4db13d7f77cfd": [
      {
        "hash": "fc01a685e8ba925bcac4db13d7f77cfd",
        "text": "try\nlet i = int_of_string v in\nif i > 0 then Some i else None\nwith Failure _ -> None",
        "lines": [
          "try",
          "let i = int_of_string v in",
          "if i > 0 then Some i else None",
          "with Failure _ -> None"
        ],
        "start_line": 35,
        "end_line": 38,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/config.ml"
      },
      {
        "hash": "fc01a685e8ba925bcac4db13d7f77cfd",
        "text": "try\nlet i = int_of_string v in\nif i > 0 then Some i else None\nwith Failure _ -> None",
        "lines": [
          "try",
          "let i = int_of_string v in",
          "if i > 0 then Some i else None",
          "with Failure _ -> None"
        ],
        "start_line": 35,
        "end_line": 38,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/config/unified_config.ml"
      },
      {
        "hash": "fc01a685e8ba925bcac4db13d7f77cfd",
        "text": "try\nlet i = int_of_string v in\nif i > 0 then Some i else None\nwith Failure _ -> None",
        "lines": [
          "try",
          "let i = int_of_string v in",
          "if i > 0 then Some i else None",
          "with Failure _ -> None"
        ],
        "start_line": 63,
        "end_line": 66,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/config/runtime_config.ml"
      },
      {
        "hash": "fc01a685e8ba925bcac4db13d7f77cfd",
        "text": "try\nlet i = int_of_string v in\nif i > 0 then Some i else None\nwith Failure _ -> None",
        "lines": [
          "try",
          "let i = int_of_string v in",
          "if i > 0 then Some i else None",
          "with Failure _ -> None"
        ],
        "start_line": 82,
        "end_line": 85,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/config/compiler_config.ml"
      }
    ],
    "3ad539c184b232b4510de6c0f72ed3b0": [
      {
        "hash": "3ad539c184b232b4510de6c0f72ed3b0",
        "text": "let i = int_of_string v in\nif i > 0 then Some i else None\nwith Failure _ -> None",
        "lines": [
          "let i = int_of_string v in",
          "if i > 0 then Some i else None",
          "with Failure _ -> None"
        ],
        "start_line": 36,
        "end_line": 38,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/config.ml"
      },
      {
        "hash": "3ad539c184b232b4510de6c0f72ed3b0",
        "text": "let i = int_of_string v in\nif i > 0 then Some i else None\nwith Failure _ -> None",
        "lines": [
          "let i = int_of_string v in",
          "if i > 0 then Some i else None",
          "with Failure _ -> None"
        ],
        "start_line": 36,
        "end_line": 38,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/config/unified_config.ml"
      },
      {
        "hash": "3ad539c184b232b4510de6c0f72ed3b0",
        "text": "let i = int_of_string v in\nif i > 0 then Some i else None\nwith Failure _ -> None",
        "lines": [
          "let i = int_of_string v in",
          "if i > 0 then Some i else None",
          "with Failure _ -> None"
        ],
        "start_line": 64,
        "end_line": 66,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/config/runtime_config.ml"
      },
      {
        "hash": "3ad539c184b232b4510de6c0f72ed3b0",
        "text": "let i = int_of_string v in\nif i > 0 then Some i else None\nwith Failure _ -> None",
        "lines": [
          "let i = int_of_string v in",
          "if i > 0 then Some i else None",
          "with Failure _ -> None"
        ],
        "start_line": 83,
        "end_line": 85,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/config/compiler_config.ml"
      }
    ],
    "0b5485ebdc14ddadad7fd411ae385847": [
      {
        "hash": "0b5485ebdc14ddadad7fd411ae385847",
        "text": "let parse_positive_float_env_var v =\ntry\nlet f = float_of_string v in\nif f > 0.0 then Some f else None\nwith Failure _ -> None",
        "lines": [
          "let parse_positive_float_env_var v =",
          "try",
          "let f = float_of_string v in",
          "if f > 0.0 then Some f else None",
          "with Failure _ -> None"
        ],
        "start_line": 40,
        "end_line": 44,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/config.ml"
      },
      {
        "hash": "0b5485ebdc14ddadad7fd411ae385847",
        "text": "let parse_positive_float_env_var v =\ntry\nlet f = float_of_string v in\nif f > 0.0 then Some f else None\nwith Failure _ -> None",
        "lines": [
          "let parse_positive_float_env_var v =",
          "try",
          "let f = float_of_string v in",
          "if f > 0.0 then Some f else None",
          "with Failure _ -> None"
        ],
        "start_line": 40,
        "end_line": 44,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/config/unified_config.ml"
      },
      {
        "hash": "0b5485ebdc14ddadad7fd411ae385847",
        "text": "let parse_positive_float_env_var v =\ntry\nlet f = float_of_string v in\nif f > 0.0 then Some f else None\nwith Failure _ -> None",
        "lines": [
          "let parse_positive_float_env_var v =",
          "try",
          "let f = float_of_string v in",
          "if f > 0.0 then Some f else None",
          "with Failure _ -> None"
        ],
        "start_line": 87,
        "end_line": 91,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/config/compiler_config.ml"
      }
    ],
    "e48737137d03aecc78e5dd2d6095150d": [
      {
        "hash": "e48737137d03aecc78e5dd2d6095150d",
        "text": "try\nlet f = float_of_string v in\nif f > 0.0 then Some f else None\nwith Failure _ -> None",
        "lines": [
          "try",
          "let f = float_of_string v in",
          "if f > 0.0 then Some f else None",
          "with Failure _ -> None"
        ],
        "start_line": 41,
        "end_line": 44,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/config.ml"
      },
      {
        "hash": "e48737137d03aecc78e5dd2d6095150d",
        "text": "try\nlet f = float_of_string v in\nif f > 0.0 then Some f else None\nwith Failure _ -> None",
        "lines": [
          "try",
          "let f = float_of_string v in",
          "if f > 0.0 then Some f else None",
          "with Failure _ -> None"
        ],
        "start_line": 41,
        "end_line": 44,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/config/unified_config.ml"
      },
      {
        "hash": "e48737137d03aecc78e5dd2d6095150d",
        "text": "try\nlet f = float_of_string v in\nif f > 0.0 then Some f else None\nwith Failure _ -> None",
        "lines": [
          "try",
          "let f = float_of_string v in",
          "if f > 0.0 then Some f else None",
          "with Failure _ -> None"
        ],
        "start_line": 88,
        "end_line": 91,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/config/compiler_config.ml"
      }
    ],
    "c9262694a6eb41b84a23b28b5bb424d1": [
      {
        "hash": "c9262694a6eb41b84a23b28b5bb424d1",
        "text": "let f = float_of_string v in\nif f > 0.0 then Some f else None\nwith Failure _ -> None",
        "lines": [
          "let f = float_of_string v in",
          "if f > 0.0 then Some f else None",
          "with Failure _ -> None"
        ],
        "start_line": 42,
        "end_line": 44,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/config.ml"
      },
      {
        "hash": "c9262694a6eb41b84a23b28b5bb424d1",
        "text": "let f = float_of_string v in\nif f > 0.0 then Some f else None\nwith Failure _ -> None",
        "lines": [
          "let f = float_of_string v in",
          "if f > 0.0 then Some f else None",
          "with Failure _ -> None"
        ],
        "start_line": 42,
        "end_line": 44,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/config/unified_config.ml"
      },
      {
        "hash": "c9262694a6eb41b84a23b28b5bb424d1",
        "text": "let f = float_of_string v in\nif f > 0.0 then Some f else None\nwith Failure _ -> None",
        "lines": [
          "let f = float_of_string v in",
          "if f > 0.0 then Some f else None",
          "with Failure _ -> None"
        ],
        "start_line": 89,
        "end_line": 91,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/config/compiler_config.ml"
      }
    ],
    "d39151c2294401900a1ceae9e34f8d10": [
      {
        "hash": "d39151c2294401900a1ceae9e34f8d10",
        "text": "let parse_int_range_env_var v min_val max_val =\ntry\nlet i = int_of_string v in\nif i >= min_val && i <= max_val then Some i else None\nwith Failure _ -> None",
        "lines": [
          "let parse_int_range_env_var v min_val max_val =",
          "try",
          "let i = int_of_string v in",
          "if i >= min_val && i <= max_val then Some i else None",
          "with Failure _ -> None"
        ],
        "start_line": 48,
        "end_line": 52,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/config.ml"
      },
      {
        "hash": "d39151c2294401900a1ceae9e34f8d10",
        "text": "let parse_int_range_env_var v min_val max_val =\ntry\nlet i = int_of_string v in\nif i >= min_val && i <= max_val then Some i else None\nwith Failure _ -> None",
        "lines": [
          "let parse_int_range_env_var v min_val max_val =",
          "try",
          "let i = int_of_string v in",
          "if i >= min_val && i <= max_val then Some i else None",
          "with Failure _ -> None"
        ],
        "start_line": 48,
        "end_line": 52,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/config/unified_config.ml"
      },
      {
        "hash": "d39151c2294401900a1ceae9e34f8d10",
        "text": "let parse_int_range_env_var v min_val max_val =\ntry\nlet i = int_of_string v in\nif i >= min_val && i <= max_val then Some i else None\nwith Failure _ -> None",
        "lines": [
          "let parse_int_range_env_var v min_val max_val =",
          "try",
          "let i = int_of_string v in",
          "if i >= min_val && i <= max_val then Some i else None",
          "with Failure _ -> None"
        ],
        "start_line": 95,
        "end_line": 99,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/config/compiler_config.ml"
      }
    ],
    "e57e9995bc4ef4f782c33376f1cd527f": [
      {
        "hash": "e57e9995bc4ef4f782c33376f1cd527f",
        "text": "try\nlet i = int_of_string v in\nif i >= min_val && i <= max_val then Some i else None\nwith Failure _ -> None",
        "lines": [
          "try",
          "let i = int_of_string v in",
          "if i >= min_val && i <= max_val then Some i else None",
          "with Failure _ -> None"
        ],
        "start_line": 49,
        "end_line": 52,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/config.ml"
      },
      {
        "hash": "e57e9995bc4ef4f782c33376f1cd527f",
        "text": "try\nlet i = int_of_string v in\nif i >= min_val && i <= max_val then Some i else None\nwith Failure _ -> None",
        "lines": [
          "try",
          "let i = int_of_string v in",
          "if i >= min_val && i <= max_val then Some i else None",
          "with Failure _ -> None"
        ],
        "start_line": 49,
        "end_line": 52,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/config/unified_config.ml"
      },
      {
        "hash": "e57e9995bc4ef4f782c33376f1cd527f",
        "text": "try\nlet i = int_of_string v in\nif i >= min_val && i <= max_val then Some i else None\nwith Failure _ -> None",
        "lines": [
          "try",
          "let i = int_of_string v in",
          "if i >= min_val && i <= max_val then Some i else None",
          "with Failure _ -> None"
        ],
        "start_line": 96,
        "end_line": 99,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/config/compiler_config.ml"
      }
    ],
    "3b73f8ffe0176e339174223d8d41382b": [
      {
        "hash": "3b73f8ffe0176e339174223d8d41382b",
        "text": "let i = int_of_string v in\nif i >= min_val && i <= max_val then Some i else None\nwith Failure _ -> None",
        "lines": [
          "let i = int_of_string v in",
          "if i >= min_val && i <= max_val then Some i else None",
          "with Failure _ -> None"
        ],
        "start_line": 50,
        "end_line": 52,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/config.ml"
      },
      {
        "hash": "3b73f8ffe0176e339174223d8d41382b",
        "text": "let i = int_of_string v in\nif i >= min_val && i <= max_val then Some i else None\nwith Failure _ -> None",
        "lines": [
          "let i = int_of_string v in",
          "if i >= min_val && i <= max_val then Some i else None",
          "with Failure _ -> None"
        ],
        "start_line": 50,
        "end_line": 52,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/config/unified_config.ml"
      },
      {
        "hash": "3b73f8ffe0176e339174223d8d41382b",
        "text": "let i = int_of_string v in\nif i >= min_val && i <= max_val then Some i else None\nwith Failure _ -> None",
        "lines": [
          "let i = int_of_string v in",
          "if i >= min_val && i <= max_val then Some i else None",
          "with Failure _ -> None"
        ],
        "start_line": 97,
        "end_line": 99,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/config/compiler_config.ml"
      }
    ],
    "1c9a653631c277c933daf916f1c7811f": [
      {
        "hash": "1c9a653631c277c933daf916f1c7811f",
        "text": "let parse_enum_env_var v valid_values =\nlet normalized = String.lowercase_ascii v in\nif List.mem normalized valid_values then Some normalized else None",
        "lines": [
          "let parse_enum_env_var v valid_values =",
          "let normalized = String.lowercase_ascii v in",
          "if List.mem normalized valid_values then Some normalized else None"
        ],
        "start_line": 54,
        "end_line": 56,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/config.ml"
      },
      {
        "hash": "1c9a653631c277c933daf916f1c7811f",
        "text": "let parse_enum_env_var v valid_values =\nlet normalized = String.lowercase_ascii v in\nif List.mem normalized valid_values then Some normalized else None",
        "lines": [
          "let parse_enum_env_var v valid_values =",
          "let normalized = String.lowercase_ascii v in",
          "if List.mem normalized valid_values then Some normalized else None"
        ],
        "start_line": 54,
        "end_line": 56,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/config/unified_config.ml"
      },
      {
        "hash": "1c9a653631c277c933daf916f1c7811f",
        "text": "let parse_enum_env_var v valid_values =\nlet normalized = String.lowercase_ascii v in\nif List.mem normalized valid_values then Some normalized else None",
        "lines": [
          "let parse_enum_env_var v valid_values =",
          "let normalized = String.lowercase_ascii v in",
          "if List.mem normalized valid_values then Some normalized else None"
        ],
        "start_line": 68,
        "end_line": 70,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/config/runtime_config.ml"
      }
    ],
    "118ed8302b11c7979a74c7fe1a852230": [
      {
        "hash": "118ed8302b11c7979a74c7fe1a852230",
        "text": "let formatted_verses =\nList.mapi (fun i verse -> concat_strings [ int_to_string (i + 1); \". \"; verse ]) verses\nin\njoin_with_separator \"\\n\" (header :: formatted_verses)",
        "lines": [
          "let formatted_verses =",
          "List.mapi (fun i verse -> concat_strings [ int_to_string (i + 1); \". \"; verse ]) verses",
          "in",
          "join_with_separator \"\\n\" (header :: formatted_verses)"
        ],
        "start_line": 118,
        "end_line": 121,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/formatter_poetry.ml"
      },
      {
        "hash": "118ed8302b11c7979a74c7fe1a852230",
        "text": "let formatted_verses =\nList.mapi (fun i verse -> concat_strings [ int_to_string (i + 1); \". \"; verse ]) verses\nin\njoin_with_separator \"\\n\" (header :: formatted_verses)",
        "lines": [
          "let formatted_verses =",
          "List.mapi (fun i verse -> concat_strings [ int_to_string (i + 1); \". \"; verse ]) verses",
          "in",
          "join_with_separator \"\\n\" (header :: formatted_verses)"
        ],
        "start_line": 126,
        "end_line": 129,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/formatter_poetry.ml"
      }
    ],
    "64db9d8f2d86891e16fec0f33505f6f0": [
      {
        "hash": "64db9d8f2d86891e16fec0f33505f6f0",
        "text": "List.mapi (fun i verse -> concat_strings [ int_to_string (i + 1); \". \"; verse ]) verses\nin\njoin_with_separator \"\\n\" (header :: formatted_verses)",
        "lines": [
          "List.mapi (fun i verse -> concat_strings [ int_to_string (i + 1); \". \"; verse ]) verses",
          "in",
          "join_with_separator \"\\n\" (header :: formatted_verses)"
        ],
        "start_line": 119,
        "end_line": 121,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/formatter_poetry.ml"
      },
      {
        "hash": "64db9d8f2d86891e16fec0f33505f6f0",
        "text": "List.mapi (fun i verse -> concat_strings [ int_to_string (i + 1); \". \"; verse ]) verses\nin\njoin_with_separator \"\\n\" (header :: formatted_verses)",
        "lines": [
          "List.mapi (fun i verse -> concat_strings [ int_to_string (i + 1); \". \"; verse ]) verses",
          "in",
          "join_with_separator \"\\n\" (header :: formatted_verses)"
        ],
        "start_line": 127,
        "end_line": 129,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/formatter_poetry.ml"
      }
    ],
    "2a867137cb9dc18f9d687fa179bdb01a": [
      {
        "hash": "2a867137cb9dc18f9d687fa179bdb01a",
        "text": "| DuplicatedCode of string list\n| FunctionComplexity of int\n| NamingImprovement of string\n| PerformanceHint of string",
        "lines": [
          "| DuplicatedCode of string list",
          "| FunctionComplexity of int",
          "| NamingImprovement of string",
          "| PerformanceHint of string"
        ],
        "start_line": 23,
        "end_line": 26,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/refactoring_analyzer_types.ml"
      },
      {
        "hash": "2a867137cb9dc18f9d687fa179bdb01a",
        "text": "| DuplicatedCode of string list\n| FunctionComplexity of int\n| NamingImprovement of string\n| PerformanceHint of string",
        "lines": [
          "| DuplicatedCode of string list",
          "| FunctionComplexity of int",
          "| NamingImprovement of string",
          "| PerformanceHint of string"
        ],
        "start_line": 12,
        "end_line": 15,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/refactoring_analyzer.ml"
      }
    ],
    "36693d78d672a3711cf19b1ce14b4a21": [
      {
        "hash": "36693d78d672a3711cf19b1ce14b4a21",
        "text": "| FunctionComplexity of int\n| NamingImprovement of string\n| PerformanceHint of string",
        "lines": [
          "| FunctionComplexity of int",
          "| NamingImprovement of string",
          "| PerformanceHint of string"
        ],
        "start_line": 24,
        "end_line": 26,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/refactoring_analyzer_types.ml"
      },
      {
        "hash": "36693d78d672a3711cf19b1ce14b4a21",
        "text": "| FunctionComplexity of int\n| NamingImprovement of string\n| PerformanceHint of string",
        "lines": [
          "| FunctionComplexity of int",
          "| NamingImprovement of string",
          "| PerformanceHint of string"
        ],
        "start_line": 13,
        "end_line": 15,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/refactoring_analyzer.ml"
      }
    ],
    "115dc287282d4bcaf9b69a3019657a85": [
      {
        "hash": "115dc287282d4bcaf9b69a3019657a85",
        "text": "type log_level =\n| DEBUG\n| INFO\n| WARN\n| ERROR\n| QUIET",
        "lines": [
          "type log_level =",
          "| DEBUG",
          "| INFO",
          "| WARN",
          "| ERROR",
          "| QUIET"
        ],
        "start_line": 4,
        "end_line": 9,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/logger.ml"
      },
      {
        "hash": "115dc287282d4bcaf9b69a3019657a85",
        "text": "type log_level =\n| DEBUG\n| INFO\n| WARN\n| ERROR\n| QUIET",
        "lines": [
          "type log_level =",
          "| DEBUG",
          "| INFO",
          "| WARN",
          "| ERROR",
          "| QUIET"
        ],
        "start_line": 9,
        "end_line": 14,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/logging/log_core.ml"
      }
    ],
    "bb0f3bc4fc76fa4dcf7c6ff90021f63f": [
      {
        "hash": "bb0f3bc4fc76fa4dcf7c6ff90021f63f",
        "text": "| DEBUG\n| INFO\n| WARN\n| ERROR\n| QUIET",
        "lines": [
          "| DEBUG",
          "| INFO",
          "| WARN",
          "| ERROR",
          "| QUIET"
        ],
        "start_line": 5,
        "end_line": 9,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/logger.ml"
      },
      {
        "hash": "bb0f3bc4fc76fa4dcf7c6ff90021f63f",
        "text": "| DEBUG\n| INFO\n| WARN\n| ERROR\n| QUIET",
        "lines": [
          "| DEBUG",
          "| INFO",
          "| WARN",
          "| ERROR",
          "| QUIET"
        ],
        "start_line": 10,
        "end_line": 14,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/logging/log_core.ml"
      }
    ],
    "98b43040a1013f0ae718bad5f840d096": [
      {
        "hash": "98b43040a1013f0ae718bad5f840d096",
        "text": "| INFO\n| WARN\n| ERROR\n| QUIET",
        "lines": [
          "| INFO",
          "| WARN",
          "| ERROR",
          "| QUIET"
        ],
        "start_line": 6,
        "end_line": 9,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/logger.ml"
      },
      {
        "hash": "98b43040a1013f0ae718bad5f840d096",
        "text": "| INFO\n| WARN\n| ERROR\n| QUIET",
        "lines": [
          "| INFO",
          "| WARN",
          "| ERROR",
          "| QUIET"
        ],
        "start_line": 11,
        "end_line": 14,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/logging/log_core.ml"
      }
    ],
    "206976cc07fd2defe63bbe5954e67015": [
      {
        "hash": "206976cc07fd2defe63bbe5954e67015",
        "text": "| WARN\n| ERROR\n| QUIET",
        "lines": [
          "| WARN",
          "| ERROR",
          "| QUIET"
        ],
        "start_line": 7,
        "end_line": 9,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/logger.ml"
      },
      {
        "hash": "206976cc07fd2defe63bbe5954e67015",
        "text": "| WARN\n| ERROR\n| QUIET",
        "lines": [
          "| WARN",
          "| ERROR",
          "| QUIET"
        ],
        "start_line": 12,
        "end_line": 14,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/logging/log_core.ml"
      }
    ],
    "15523884c4015f5f5e78d43c1c933c94": [
      {
        "hash": "15523884c4015f5f5e78d43c1c933c94",
        "text": "mutable show_timestamps : bool;\nmutable show_module_name : bool;\nmutable output_channel : out_channel;\n}",
        "lines": [
          "mutable show_timestamps : bool;",
          "mutable show_module_name : bool;",
          "mutable output_channel : out_channel;",
          "}"
        ],
        "start_line": 13,
        "end_line": 16,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/logger.ml"
      },
      {
        "hash": "15523884c4015f5f5e78d43c1c933c94",
        "text": "mutable show_timestamps : bool;\nmutable show_module_name : bool;\nmutable output_channel : out_channel;\n}",
        "lines": [
          "mutable show_timestamps : bool;",
          "mutable show_module_name : bool;",
          "mutable output_channel : out_channel;",
          "}"
        ],
        "start_line": 25,
        "end_line": 28,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/logging_migration.ml"
      }
    ],
    "7dbb35917028b2f5bcefc8b76a446af5": [
      {
        "hash": "7dbb35917028b2f5bcefc8b76a446af5",
        "text": "mutable show_module_name : bool;\nmutable output_channel : out_channel;\n}",
        "lines": [
          "mutable show_module_name : bool;",
          "mutable output_channel : out_channel;",
          "}"
        ],
        "start_line": 14,
        "end_line": 16,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/logger.ml"
      },
      {
        "hash": "7dbb35917028b2f5bcefc8b76a446af5",
        "text": "mutable show_module_name : bool;\nmutable output_channel : out_channel;\n}",
        "lines": [
          "mutable show_module_name : bool;",
          "mutable output_channel : out_channel;",
          "}"
        ],
        "start_line": 26,
        "end_line": 28,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/logging_migration.ml"
      }
    ],
    "fbcfa2a1047dddf472a66e0227b8fbb7": [
      {
        "hash": "fbcfa2a1047dddf472a66e0227b8fbb7",
        "text": "let level_to_string = function\n| DEBUG -> \"调试\"\n| INFO -> \"信息\"\n| WARN -> \"警告\"\n| ERROR -> \"错误\"\n| QUIET -> \"静默\"",
        "lines": [
          "let level_to_string = function",
          "| DEBUG -> \"调试\"",
          "| INFO -> \"信息\"",
          "| WARN -> \"警告\"",
          "| ERROR -> \"错误\"",
          "| QUIET -> \"静默\""
        ],
        "start_line": 32,
        "end_line": 37,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/logger.ml"
      },
      {
        "hash": "fbcfa2a1047dddf472a66e0227b8fbb7",
        "text": "let level_to_string = function\n| DEBUG -> \"调试\"\n| INFO -> \"信息\"\n| WARN -> \"警告\"\n| ERROR -> \"错误\"\n| QUIET -> \"静默\"",
        "lines": [
          "let level_to_string = function",
          "| DEBUG -> \"调试\"",
          "| INFO -> \"信息\"",
          "| WARN -> \"警告\"",
          "| ERROR -> \"错误\"",
          "| QUIET -> \"静默\""
        ],
        "start_line": 44,
        "end_line": 49,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/logging/log_core.ml"
      }
    ],
    "f1e985a8a6c43f23f66c1ab01a61bc8f": [
      {
        "hash": "f1e985a8a6c43f23f66c1ab01a61bc8f",
        "text": "| DEBUG -> \"调试\"\n| INFO -> \"信息\"\n| WARN -> \"警告\"\n| ERROR -> \"错误\"\n| QUIET -> \"静默\"",
        "lines": [
          "| DEBUG -> \"调试\"",
          "| INFO -> \"信息\"",
          "| WARN -> \"警告\"",
          "| ERROR -> \"错误\"",
          "| QUIET -> \"静默\""
        ],
        "start_line": 33,
        "end_line": 37,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/logger.ml"
      },
      {
        "hash": "f1e985a8a6c43f23f66c1ab01a61bc8f",
        "text": "| DEBUG -> \"调试\"\n| INFO -> \"信息\"\n| WARN -> \"警告\"\n| ERROR -> \"错误\"\n| QUIET -> \"静默\"",
        "lines": [
          "| DEBUG -> \"调试\"",
          "| INFO -> \"信息\"",
          "| WARN -> \"警告\"",
          "| ERROR -> \"错误\"",
          "| QUIET -> \"静默\""
        ],
        "start_line": 45,
        "end_line": 49,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/logging/log_core.ml"
      }
    ],
    "6a8cdba3a3ee8f7e4c79c0d9eb1303d8": [
      {
        "hash": "6a8cdba3a3ee8f7e4c79c0d9eb1303d8",
        "text": "| INFO -> \"信息\"\n| WARN -> \"警告\"\n| ERROR -> \"错误\"\n| QUIET -> \"静默\"",
        "lines": [
          "| INFO -> \"信息\"",
          "| WARN -> \"警告\"",
          "| ERROR -> \"错误\"",
          "| QUIET -> \"静默\""
        ],
        "start_line": 34,
        "end_line": 37,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/logger.ml"
      },
      {
        "hash": "6a8cdba3a3ee8f7e4c79c0d9eb1303d8",
        "text": "| INFO -> \"信息\"\n| WARN -> \"警告\"\n| ERROR -> \"错误\"\n| QUIET -> \"静默\"",
        "lines": [
          "| INFO -> \"信息\"",
          "| WARN -> \"警告\"",
          "| ERROR -> \"错误\"",
          "| QUIET -> \"静默\""
        ],
        "start_line": 46,
        "end_line": 49,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/logging/log_core.ml"
      }
    ],
    "4da33ec92312fdc6204889ee8be41c03": [
      {
        "hash": "4da33ec92312fdc6204889ee8be41c03",
        "text": "| WARN -> \"警告\"\n| ERROR -> \"错误\"\n| QUIET -> \"静默\"",
        "lines": [
          "| WARN -> \"警告\"",
          "| ERROR -> \"错误\"",
          "| QUIET -> \"静默\""
        ],
        "start_line": 35,
        "end_line": 37,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/logger.ml"
      },
      {
        "hash": "4da33ec92312fdc6204889ee8be41c03",
        "text": "| WARN -> \"警告\"\n| ERROR -> \"错误\"\n| QUIET -> \"静默\"",
        "lines": [
          "| WARN -> \"警告\"",
          "| ERROR -> \"错误\"",
          "| QUIET -> \"静默\""
        ],
        "start_line": 47,
        "end_line": 49,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/logging/log_core.ml"
      }
    ],
    "0e057f13cdbd8667f490a20e1ebbd4e1": [
      {
        "hash": "0e057f13cdbd8667f490a20e1ebbd4e1",
        "text": "let print_user_output message =\nPrintf.fprintf global_config.output_channel \"%s\\n\" message;\nflush global_config.output_channel",
        "lines": [
          "let print_user_output message =",
          "Printf.fprintf global_config.output_channel \"%s\\n\" message;",
          "flush global_config.output_channel"
        ],
        "start_line": 172,
        "end_line": 174,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/logger.ml"
      },
      {
        "hash": "0e057f13cdbd8667f490a20e1ebbd4e1",
        "text": "let print_user_output message =\nPrintf.fprintf global_config.output_channel \"%s\\n\" message;\nflush global_config.output_channel",
        "lines": [
          "let print_user_output message =",
          "Printf.fprintf global_config.output_channel \"%s\\n\" message;",
          "flush global_config.output_channel"
        ],
        "start_line": 31,
        "end_line": 33,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/logging/log_output.ml"
      }
    ],
    "1b8bb4a3118379fbe49c962fda8678f1": [
      {
        "hash": "1b8bb4a3118379fbe49c962fda8678f1",
        "text": "let print_user_prompt message =\nPrintf.fprintf global_config.output_channel \"%s\" message;\nflush global_config.output_channel",
        "lines": [
          "let print_user_prompt message =",
          "Printf.fprintf global_config.output_channel \"%s\" message;",
          "flush global_config.output_channel"
        ],
        "start_line": 189,
        "end_line": 191,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/logger.ml"
      },
      {
        "hash": "1b8bb4a3118379fbe49c962fda8678f1",
        "text": "let print_user_prompt message =\nPrintf.fprintf global_config.output_channel \"%s\" message;\nflush global_config.output_channel",
        "lines": [
          "let print_user_prompt message =",
          "Printf.fprintf global_config.output_channel \"%s\" message;",
          "flush global_config.output_channel"
        ],
        "start_line": 48,
        "end_line": 50,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/logging/log_output.ml"
      }
    ],
    "6bd8da846905b46f2197be1269cf5577": [
      {
        "hash": "6bd8da846905b46f2197be1269cf5577",
        "text": "type performance_metric = {\nname : string;\nexecution_time : float;\nmemory_usage : int option;\ncpu_usage : float option;\niterations : int;\nvariance : float option;\n}",
        "lines": [
          "type performance_metric = {",
          "name : string;",
          "execution_time : float;",
          "memory_usage : int option;",
          "cpu_usage : float option;",
          "iterations : int;",
          "variance : float option;",
          "}"
        ],
        "start_line": 15,
        "end_line": 22,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/performance_benchmark.ml"
      },
      {
        "hash": "6bd8da846905b46f2197be1269cf5577",
        "text": "type performance_metric = {\nname : string;\nexecution_time : float;\nmemory_usage : int option;\ncpu_usage : float option;\niterations : int;\nvariance : float option;\n}",
        "lines": [
          "type performance_metric = {",
          "name : string;",
          "execution_time : float;",
          "memory_usage : int option;",
          "cpu_usage : float option;",
          "iterations : int;",
          "variance : float option;",
          "}"
        ],
        "start_line": 11,
        "end_line": 18,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/performance/benchmark_core.ml"
      }
    ],
    "260354b5e512aa1749c988f96825fe0b": [
      {
        "hash": "260354b5e512aa1749c988f96825fe0b",
        "text": "name : string;\nexecution_time : float;\nmemory_usage : int option;\ncpu_usage : float option;\niterations : int;\nvariance : float option;\n}",
        "lines": [
          "name : string;",
          "execution_time : float;",
          "memory_usage : int option;",
          "cpu_usage : float option;",
          "iterations : int;",
          "variance : float option;",
          "}"
        ],
        "start_line": 16,
        "end_line": 22,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/performance_benchmark.ml"
      },
      {
        "hash": "260354b5e512aa1749c988f96825fe0b",
        "text": "name : string;\nexecution_time : float;\nmemory_usage : int option;\ncpu_usage : float option;\niterations : int;\nvariance : float option;\n}",
        "lines": [
          "name : string;",
          "execution_time : float;",
          "memory_usage : int option;",
          "cpu_usage : float option;",
          "iterations : int;",
          "variance : float option;",
          "}"
        ],
        "start_line": 12,
        "end_line": 18,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/performance/benchmark_core.ml"
      }
    ],
    "ae1836e711adc0703224946efef9c693": [
      {
        "hash": "ae1836e711adc0703224946efef9c693",
        "text": "execution_time : float;\nmemory_usage : int option;\ncpu_usage : float option;\niterations : int;\nvariance : float option;\n}",
        "lines": [
          "execution_time : float;",
          "memory_usage : int option;",
          "cpu_usage : float option;",
          "iterations : int;",
          "variance : float option;",
          "}"
        ],
        "start_line": 17,
        "end_line": 22,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/performance_benchmark.ml"
      },
      {
        "hash": "ae1836e711adc0703224946efef9c693",
        "text": "execution_time : float;\nmemory_usage : int option;\ncpu_usage : float option;\niterations : int;\nvariance : float option;\n}",
        "lines": [
          "execution_time : float;",
          "memory_usage : int option;",
          "cpu_usage : float option;",
          "iterations : int;",
          "variance : float option;",
          "}"
        ],
        "start_line": 13,
        "end_line": 18,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/performance/benchmark_core.ml"
      }
    ],
    "5cf2cfa93cb0b66786666ebf574a9923": [
      {
        "hash": "5cf2cfa93cb0b66786666ebf574a9923",
        "text": "memory_usage : int option;\ncpu_usage : float option;\niterations : int;\nvariance : float option;\n}",
        "lines": [
          "memory_usage : int option;",
          "cpu_usage : float option;",
          "iterations : int;",
          "variance : float option;",
          "}"
        ],
        "start_line": 18,
        "end_line": 22,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/performance_benchmark.ml"
      },
      {
        "hash": "5cf2cfa93cb0b66786666ebf574a9923",
        "text": "memory_usage : int option;\ncpu_usage : float option;\niterations : int;\nvariance : float option;\n}",
        "lines": [
          "memory_usage : int option;",
          "cpu_usage : float option;",
          "iterations : int;",
          "variance : float option;",
          "}"
        ],
        "start_line": 14,
        "end_line": 18,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/performance/benchmark_core.ml"
      }
    ],
    "7c17de25f27f6153abc5bc4a77e5437f": [
      {
        "hash": "7c17de25f27f6153abc5bc4a77e5437f",
        "text": "cpu_usage : float option;\niterations : int;\nvariance : float option;\n}",
        "lines": [
          "cpu_usage : float option;",
          "iterations : int;",
          "variance : float option;",
          "}"
        ],
        "start_line": 19,
        "end_line": 22,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/performance_benchmark.ml"
      },
      {
        "hash": "7c17de25f27f6153abc5bc4a77e5437f",
        "text": "cpu_usage : float option;\niterations : int;\nvariance : float option;\n}",
        "lines": [
          "cpu_usage : float option;",
          "iterations : int;",
          "variance : float option;",
          "}"
        ],
        "start_line": 15,
        "end_line": 18,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/performance/benchmark_core.ml"
      }
    ],
    "c9778eafa3eec4fcebadcc8f3cbeb656": [
      {
        "hash": "c9778eafa3eec4fcebadcc8f3cbeb656",
        "text": "iterations : int;\nvariance : float option;\n}",
        "lines": [
          "iterations : int;",
          "variance : float option;",
          "}"
        ],
        "start_line": 20,
        "end_line": 22,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/performance_benchmark.ml"
      },
      {
        "hash": "c9778eafa3eec4fcebadcc8f3cbeb656",
        "text": "iterations : int;\nvariance : float option;\n}",
        "lines": [
          "iterations : int;",
          "variance : float option;",
          "}"
        ],
        "start_line": 16,
        "end_line": 18,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/performance/benchmark_core.ml"
      }
    ],
    "278e7f4a89560d1692e204d635fc8669": [
      {
        "hash": "278e7f4a89560d1692e204d635fc8669",
        "text": "type benchmark_result = {\nmodule_name : string;\ntest_category : string;\nmetrics : performance_metric list;\nbaseline : performance_metric option;\ntimestamp : string;\nenvironment : string;\n}",
        "lines": [
          "type benchmark_result = {",
          "module_name : string;",
          "test_category : string;",
          "metrics : performance_metric list;",
          "baseline : performance_metric option;",
          "timestamp : string;",
          "environment : string;",
          "}"
        ],
        "start_line": 24,
        "end_line": 31,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/performance_benchmark.ml"
      },
      {
        "hash": "278e7f4a89560d1692e204d635fc8669",
        "text": "type benchmark_result = {\nmodule_name : string;\ntest_category : string;\nmetrics : performance_metric list;\nbaseline : performance_metric option;\ntimestamp : string;\nenvironment : string;\n}",
        "lines": [
          "type benchmark_result = {",
          "module_name : string;",
          "test_category : string;",
          "metrics : performance_metric list;",
          "baseline : performance_metric option;",
          "timestamp : string;",
          "environment : string;",
          "}"
        ],
        "start_line": 21,
        "end_line": 28,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/performance/benchmark_core.ml"
      }
    ],
    "9ee8a5cb7f9231ecd8e8b941eaf3061b": [
      {
        "hash": "9ee8a5cb7f9231ecd8e8b941eaf3061b",
        "text": "module_name : string;\ntest_category : string;\nmetrics : performance_metric list;\nbaseline : performance_metric option;\ntimestamp : string;\nenvironment : string;\n}",
        "lines": [
          "module_name : string;",
          "test_category : string;",
          "metrics : performance_metric list;",
          "baseline : performance_metric option;",
          "timestamp : string;",
          "environment : string;",
          "}"
        ],
        "start_line": 25,
        "end_line": 31,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/performance_benchmark.ml"
      },
      {
        "hash": "9ee8a5cb7f9231ecd8e8b941eaf3061b",
        "text": "module_name : string;\ntest_category : string;\nmetrics : performance_metric list;\nbaseline : performance_metric option;\ntimestamp : string;\nenvironment : string;\n}",
        "lines": [
          "module_name : string;",
          "test_category : string;",
          "metrics : performance_metric list;",
          "baseline : performance_metric option;",
          "timestamp : string;",
          "environment : string;",
          "}"
        ],
        "start_line": 22,
        "end_line": 28,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/performance/benchmark_core.ml"
      }
    ],
    "066942b9f6df85f5d80570e138f0416d": [
      {
        "hash": "066942b9f6df85f5d80570e138f0416d",
        "text": "test_category : string;\nmetrics : performance_metric list;\nbaseline : performance_metric option;\ntimestamp : string;\nenvironment : string;\n}",
        "lines": [
          "test_category : string;",
          "metrics : performance_metric list;",
          "baseline : performance_metric option;",
          "timestamp : string;",
          "environment : string;",
          "}"
        ],
        "start_line": 26,
        "end_line": 31,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/performance_benchmark.ml"
      },
      {
        "hash": "066942b9f6df85f5d80570e138f0416d",
        "text": "test_category : string;\nmetrics : performance_metric list;\nbaseline : performance_metric option;\ntimestamp : string;\nenvironment : string;\n}",
        "lines": [
          "test_category : string;",
          "metrics : performance_metric list;",
          "baseline : performance_metric option;",
          "timestamp : string;",
          "environment : string;",
          "}"
        ],
        "start_line": 23,
        "end_line": 28,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/performance/benchmark_core.ml"
      }
    ],
    "8d06edad9d5d6eba12a174a50b28da5b": [
      {
        "hash": "8d06edad9d5d6eba12a174a50b28da5b",
        "text": "metrics : performance_metric list;\nbaseline : performance_metric option;\ntimestamp : string;\nenvironment : string;\n}",
        "lines": [
          "metrics : performance_metric list;",
          "baseline : performance_metric option;",
          "timestamp : string;",
          "environment : string;",
          "}"
        ],
        "start_line": 27,
        "end_line": 31,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/performance_benchmark.ml"
      },
      {
        "hash": "8d06edad9d5d6eba12a174a50b28da5b",
        "text": "metrics : performance_metric list;\nbaseline : performance_metric option;\ntimestamp : string;\nenvironment : string;\n}",
        "lines": [
          "metrics : performance_metric list;",
          "baseline : performance_metric option;",
          "timestamp : string;",
          "environment : string;",
          "}"
        ],
        "start_line": 24,
        "end_line": 28,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/performance/benchmark_core.ml"
      }
    ],
    "579858b284a309a51f209c2fe79ce3af": [
      {
        "hash": "579858b284a309a51f209c2fe79ce3af",
        "text": "baseline : performance_metric option;\ntimestamp : string;\nenvironment : string;\n}",
        "lines": [
          "baseline : performance_metric option;",
          "timestamp : string;",
          "environment : string;",
          "}"
        ],
        "start_line": 28,
        "end_line": 31,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/performance_benchmark.ml"
      },
      {
        "hash": "579858b284a309a51f209c2fe79ce3af",
        "text": "baseline : performance_metric option;\ntimestamp : string;\nenvironment : string;\n}",
        "lines": [
          "baseline : performance_metric option;",
          "timestamp : string;",
          "environment : string;",
          "}"
        ],
        "start_line": 25,
        "end_line": 28,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/performance/benchmark_core.ml"
      }
    ],
    "1d4d9725f7f31b28f4bbc95795432532": [
      {
        "hash": "1d4d9725f7f31b28f4bbc95795432532",
        "text": "timestamp : string;\nenvironment : string;\n}",
        "lines": [
          "timestamp : string;",
          "environment : string;",
          "}"
        ],
        "start_line": 29,
        "end_line": 31,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/performance_benchmark.ml"
      },
      {
        "hash": "1d4d9725f7f31b28f4bbc95795432532",
        "text": "timestamp : string;\nenvironment : string;\n}",
        "lines": [
          "timestamp : string;",
          "environment : string;",
          "}"
        ],
        "start_line": 26,
        "end_line": 28,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/performance/benchmark_core.ml"
      }
    ],
    "7d89336ce0e090826f5e6b796b725a2f": [
      {
        "hash": "7d89336ce0e090826f5e6b796b725a2f",
        "text": "type benchmark_suite = {\nsuite_name : string;\nresults : benchmark_result list;\nsummary : string;\ntotal_duration : float;\n}",
        "lines": [
          "type benchmark_suite = {",
          "suite_name : string;",
          "results : benchmark_result list;",
          "summary : string;",
          "total_duration : float;",
          "}"
        ],
        "start_line": 33,
        "end_line": 38,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/performance_benchmark.ml"
      },
      {
        "hash": "7d89336ce0e090826f5e6b796b725a2f",
        "text": "type benchmark_suite = {\nsuite_name : string;\nresults : benchmark_result list;\nsummary : string;\ntotal_duration : float;\n}",
        "lines": [
          "type benchmark_suite = {",
          "suite_name : string;",
          "results : benchmark_result list;",
          "summary : string;",
          "total_duration : float;",
          "}"
        ],
        "start_line": 31,
        "end_line": 36,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/performance/benchmark_core.ml"
      }
    ],
    "158d189f1c64d14dcaa6fb2c900d3747": [
      {
        "hash": "158d189f1c64d14dcaa6fb2c900d3747",
        "text": "suite_name : string;\nresults : benchmark_result list;\nsummary : string;\ntotal_duration : float;\n}",
        "lines": [
          "suite_name : string;",
          "results : benchmark_result list;",
          "summary : string;",
          "total_duration : float;",
          "}"
        ],
        "start_line": 34,
        "end_line": 38,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/performance_benchmark.ml"
      },
      {
        "hash": "158d189f1c64d14dcaa6fb2c900d3747",
        "text": "suite_name : string;\nresults : benchmark_result list;\nsummary : string;\ntotal_duration : float;\n}",
        "lines": [
          "suite_name : string;",
          "results : benchmark_result list;",
          "summary : string;",
          "total_duration : float;",
          "}"
        ],
        "start_line": 32,
        "end_line": 36,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/performance/benchmark_core.ml"
      }
    ],
    "c0a4e39ff20b5f079cd7792fa63e5a2f": [
      {
        "hash": "c0a4e39ff20b5f079cd7792fa63e5a2f",
        "text": "results : benchmark_result list;\nsummary : string;\ntotal_duration : float;\n}",
        "lines": [
          "results : benchmark_result list;",
          "summary : string;",
          "total_duration : float;",
          "}"
        ],
        "start_line": 35,
        "end_line": 38,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/performance_benchmark.ml"
      },
      {
        "hash": "c0a4e39ff20b5f079cd7792fa63e5a2f",
        "text": "results : benchmark_result list;\nsummary : string;\ntotal_duration : float;\n}",
        "lines": [
          "results : benchmark_result list;",
          "summary : string;",
          "total_duration : float;",
          "}"
        ],
        "start_line": 33,
        "end_line": 36,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/performance/benchmark_core.ml"
      }
    ],
    "26cf3dd1d611084bfaa52a1f4f31ec82": [
      {
        "hash": "26cf3dd1d611084bfaa52a1f4f31ec82",
        "text": "summary : string;\ntotal_duration : float;\n}",
        "lines": [
          "summary : string;",
          "total_duration : float;",
          "}"
        ],
        "start_line": 36,
        "end_line": 38,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/performance_benchmark.ml"
      },
      {
        "hash": "26cf3dd1d611084bfaa52a1f4f31ec82",
        "text": "summary : string;\ntotal_duration : float;\n}",
        "lines": [
          "summary : string;",
          "total_duration : float;",
          "}"
        ],
        "start_line": 34,
        "end_line": 36,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/performance/benchmark_core.ml"
      }
    ],
    "3540192bfd76dee3992b767e96ad12cc": [
      {
        "hash": "3540192bfd76dee3992b767e96ad12cc",
        "text": "let end_time = Sys.time () in\nlet execution_time = end_time -. start_time in\n{\nname;\nexecution_time;\nmemory_usage = None;\ncpu_usage = None;\niterations;\nvariance = None;\n})",
        "lines": [
          "let end_time = Sys.time () in",
          "let execution_time = end_time -. start_time in",
          "{",
          "name;",
          "execution_time;",
          "memory_usage = None;",
          "cpu_usage = None;",
          "iterations;",
          "variance = None;",
          "})"
        ],
        "start_line": 96,
        "end_line": 105,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/performance_benchmark.ml"
      },
      {
        "hash": "3540192bfd76dee3992b767e96ad12cc",
        "text": "let end_time = Sys.time () in\nlet execution_time = end_time -. start_time in\n{\nname;\nexecution_time;\nmemory_usage = None;\ncpu_usage = None;\niterations;\nvariance = None;\n})",
        "lines": [
          "let end_time = Sys.time () in",
          "let execution_time = end_time -. start_time in",
          "{",
          "name;",
          "execution_time;",
          "memory_usage = None;",
          "cpu_usage = None;",
          "iterations;",
          "variance = None;",
          "})"
        ],
        "start_line": 137,
        "end_line": 146,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/performance_benchmark.ml"
      },
      {
        "hash": "3540192bfd76dee3992b767e96ad12cc",
        "text": "let end_time = Sys.time () in\nlet execution_time = end_time -. start_time in\n{\nname;\nexecution_time;\nmemory_usage = None;\ncpu_usage = None;\niterations;\nvariance = None;\n})",
        "lines": [
          "let end_time = Sys.time () in",
          "let execution_time = end_time -. start_time in",
          "{",
          "name;",
          "execution_time;",
          "memory_usage = None;",
          "cpu_usage = None;",
          "iterations;",
          "variance = None;",
          "})"
        ],
        "start_line": 179,
        "end_line": 188,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/performance_benchmark.ml"
      }
    ],
    "54653ccb0711d0a20280f538dc25b97a": [
      {
        "hash": "54653ccb0711d0a20280f538dc25b97a",
        "text": "let execution_time = end_time -. start_time in\n{\nname;\nexecution_time;\nmemory_usage = None;\ncpu_usage = None;\niterations;\nvariance = None;\n})\ntest_configs",
        "lines": [
          "let execution_time = end_time -. start_time in",
          "{",
          "name;",
          "execution_time;",
          "memory_usage = None;",
          "cpu_usage = None;",
          "iterations;",
          "variance = None;",
          "})",
          "test_configs"
        ],
        "start_line": 97,
        "end_line": 106,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/performance_benchmark.ml"
      },
      {
        "hash": "54653ccb0711d0a20280f538dc25b97a",
        "text": "let execution_time = end_time -. start_time in\n{\nname;\nexecution_time;\nmemory_usage = None;\ncpu_usage = None;\niterations;\nvariance = None;\n})\ntest_configs",
        "lines": [
          "let execution_time = end_time -. start_time in",
          "{",
          "name;",
          "execution_time;",
          "memory_usage = None;",
          "cpu_usage = None;",
          "iterations;",
          "variance = None;",
          "})",
          "test_configs"
        ],
        "start_line": 138,
        "end_line": 147,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/performance_benchmark.ml"
      },
      {
        "hash": "54653ccb0711d0a20280f538dc25b97a",
        "text": "let execution_time = end_time -. start_time in\n{\nname;\nexecution_time;\nmemory_usage = None;\ncpu_usage = None;\niterations;\nvariance = None;\n})\ntest_configs",
        "lines": [
          "let execution_time = end_time -. start_time in",
          "{",
          "name;",
          "execution_time;",
          "memory_usage = None;",
          "cpu_usage = None;",
          "iterations;",
          "variance = None;",
          "})",
          "test_configs"
        ],
        "start_line": 180,
        "end_line": 189,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/performance_benchmark.ml"
      }
    ],
    "243ffebfebf581be72a7fd00f3d2b085": [
      {
        "hash": "243ffebfebf581be72a7fd00f3d2b085",
        "text": "{\nname;\nexecution_time;\nmemory_usage = None;\ncpu_usage = None;\niterations;\nvariance = None;\n})\ntest_configs\nend",
        "lines": [
          "{",
          "name;",
          "execution_time;",
          "memory_usage = None;",
          "cpu_usage = None;",
          "iterations;",
          "variance = None;",
          "})",
          "test_configs",
          "end"
        ],
        "start_line": 98,
        "end_line": 107,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/performance_benchmark.ml"
      },
      {
        "hash": "243ffebfebf581be72a7fd00f3d2b085",
        "text": "{\nname;\nexecution_time;\nmemory_usage = None;\ncpu_usage = None;\niterations;\nvariance = None;\n})\ntest_configs\nend",
        "lines": [
          "{",
          "name;",
          "execution_time;",
          "memory_usage = None;",
          "cpu_usage = None;",
          "iterations;",
          "variance = None;",
          "})",
          "test_configs",
          "end"
        ],
        "start_line": 139,
        "end_line": 148,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/performance_benchmark.ml"
      },
      {
        "hash": "243ffebfebf581be72a7fd00f3d2b085",
        "text": "{\nname;\nexecution_time;\nmemory_usage = None;\ncpu_usage = None;\niterations;\nvariance = None;\n})\ntest_configs\nend",
        "lines": [
          "{",
          "name;",
          "execution_time;",
          "memory_usage = None;",
          "cpu_usage = None;",
          "iterations;",
          "variance = None;",
          "})",
          "test_configs",
          "end"
        ],
        "start_line": 181,
        "end_line": 190,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/performance_benchmark.ml"
      }
    ],
    "d968a30573a6fe3a9fab6d6ac28098e5": [
      {
        "hash": "d968a30573a6fe3a9fab6d6ac28098e5",
        "text": "name;\nexecution_time;\nmemory_usage = None;\ncpu_usage = None;\niterations;\nvariance = None;\n})\ntest_configs\nend",
        "lines": [
          "name;",
          "execution_time;",
          "memory_usage = None;",
          "cpu_usage = None;",
          "iterations;",
          "variance = None;",
          "})",
          "test_configs",
          "end"
        ],
        "start_line": 99,
        "end_line": 107,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/performance_benchmark.ml"
      },
      {
        "hash": "d968a30573a6fe3a9fab6d6ac28098e5",
        "text": "name;\nexecution_time;\nmemory_usage = None;\ncpu_usage = None;\niterations;\nvariance = None;\n})\ntest_configs\nend",
        "lines": [
          "name;",
          "execution_time;",
          "memory_usage = None;",
          "cpu_usage = None;",
          "iterations;",
          "variance = None;",
          "})",
          "test_configs",
          "end"
        ],
        "start_line": 140,
        "end_line": 148,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/performance_benchmark.ml"
      },
      {
        "hash": "d968a30573a6fe3a9fab6d6ac28098e5",
        "text": "name;\nexecution_time;\nmemory_usage = None;\ncpu_usage = None;\niterations;\nvariance = None;\n})\ntest_configs\nend",
        "lines": [
          "name;",
          "execution_time;",
          "memory_usage = None;",
          "cpu_usage = None;",
          "iterations;",
          "variance = None;",
          "})",
          "test_configs",
          "end"
        ],
        "start_line": 182,
        "end_line": 190,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/performance_benchmark.ml"
      }
    ],
    "c5afbb94b37be87ce3fb25c82787375e": [
      {
        "hash": "c5afbb94b37be87ce3fb25c82787375e",
        "text": "execution_time;\nmemory_usage = None;\ncpu_usage = None;\niterations;\nvariance = None;\n})\ntest_configs\nend",
        "lines": [
          "execution_time;",
          "memory_usage = None;",
          "cpu_usage = None;",
          "iterations;",
          "variance = None;",
          "})",
          "test_configs",
          "end"
        ],
        "start_line": 100,
        "end_line": 107,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/performance_benchmark.ml"
      },
      {
        "hash": "c5afbb94b37be87ce3fb25c82787375e",
        "text": "execution_time;\nmemory_usage = None;\ncpu_usage = None;\niterations;\nvariance = None;\n})\ntest_configs\nend",
        "lines": [
          "execution_time;",
          "memory_usage = None;",
          "cpu_usage = None;",
          "iterations;",
          "variance = None;",
          "})",
          "test_configs",
          "end"
        ],
        "start_line": 141,
        "end_line": 148,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/performance_benchmark.ml"
      },
      {
        "hash": "c5afbb94b37be87ce3fb25c82787375e",
        "text": "execution_time;\nmemory_usage = None;\ncpu_usage = None;\niterations;\nvariance = None;\n})\ntest_configs\nend",
        "lines": [
          "execution_time;",
          "memory_usage = None;",
          "cpu_usage = None;",
          "iterations;",
          "variance = None;",
          "})",
          "test_configs",
          "end"
        ],
        "start_line": 183,
        "end_line": 190,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/performance_benchmark.ml"
      }
    ],
    "a7169c694731e5967a341a98b81cf370": [
      {
        "hash": "a7169c694731e5967a341a98b81cf370",
        "text": "memory_usage = None;\ncpu_usage = None;\niterations;\nvariance = None;\n})\ntest_configs\nend",
        "lines": [
          "memory_usage = None;",
          "cpu_usage = None;",
          "iterations;",
          "variance = None;",
          "})",
          "test_configs",
          "end"
        ],
        "start_line": 101,
        "end_line": 107,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/performance_benchmark.ml"
      },
      {
        "hash": "a7169c694731e5967a341a98b81cf370",
        "text": "memory_usage = None;\ncpu_usage = None;\niterations;\nvariance = None;\n})\ntest_configs\nend",
        "lines": [
          "memory_usage = None;",
          "cpu_usage = None;",
          "iterations;",
          "variance = None;",
          "})",
          "test_configs",
          "end"
        ],
        "start_line": 142,
        "end_line": 148,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/performance_benchmark.ml"
      },
      {
        "hash": "a7169c694731e5967a341a98b81cf370",
        "text": "memory_usage = None;\ncpu_usage = None;\niterations;\nvariance = None;\n})\ntest_configs\nend",
        "lines": [
          "memory_usage = None;",
          "cpu_usage = None;",
          "iterations;",
          "variance = None;",
          "})",
          "test_configs",
          "end"
        ],
        "start_line": 184,
        "end_line": 190,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/performance_benchmark.ml"
      }
    ],
    "7f2a053b7f37916ccfcbda656ab3c0cd": [
      {
        "hash": "7f2a053b7f37916ccfcbda656ab3c0cd",
        "text": "cpu_usage = None;\niterations;\nvariance = None;\n})\ntest_configs\nend",
        "lines": [
          "cpu_usage = None;",
          "iterations;",
          "variance = None;",
          "})",
          "test_configs",
          "end"
        ],
        "start_line": 102,
        "end_line": 107,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/performance_benchmark.ml"
      },
      {
        "hash": "7f2a053b7f37916ccfcbda656ab3c0cd",
        "text": "cpu_usage = None;\niterations;\nvariance = None;\n})\ntest_configs\nend",
        "lines": [
          "cpu_usage = None;",
          "iterations;",
          "variance = None;",
          "})",
          "test_configs",
          "end"
        ],
        "start_line": 143,
        "end_line": 148,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/performance_benchmark.ml"
      },
      {
        "hash": "7f2a053b7f37916ccfcbda656ab3c0cd",
        "text": "cpu_usage = None;\niterations;\nvariance = None;\n})\ntest_configs\nend",
        "lines": [
          "cpu_usage = None;",
          "iterations;",
          "variance = None;",
          "})",
          "test_configs",
          "end"
        ],
        "start_line": 185,
        "end_line": 190,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/performance_benchmark.ml"
      }
    ],
    "7b43ac9d1434b2ba1dd839ca1d1896a8": [
      {
        "hash": "7b43ac9d1434b2ba1dd839ca1d1896a8",
        "text": "iterations;\nvariance = None;\n})\ntest_configs\nend",
        "lines": [
          "iterations;",
          "variance = None;",
          "})",
          "test_configs",
          "end"
        ],
        "start_line": 103,
        "end_line": 107,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/performance_benchmark.ml"
      },
      {
        "hash": "7b43ac9d1434b2ba1dd839ca1d1896a8",
        "text": "iterations;\nvariance = None;\n})\ntest_configs\nend",
        "lines": [
          "iterations;",
          "variance = None;",
          "})",
          "test_configs",
          "end"
        ],
        "start_line": 144,
        "end_line": 148,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/performance_benchmark.ml"
      },
      {
        "hash": "7b43ac9d1434b2ba1dd839ca1d1896a8",
        "text": "iterations;\nvariance = None;\n})\ntest_configs\nend",
        "lines": [
          "iterations;",
          "variance = None;",
          "})",
          "test_configs",
          "end"
        ],
        "start_line": 186,
        "end_line": 190,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/performance_benchmark.ml"
      }
    ],
    "970badaff0c0c24ef1a86f408f912dbb": [
      {
        "hash": "970badaff0c0c24ef1a86f408f912dbb",
        "text": "variance = None;\n})\ntest_configs\nend",
        "lines": [
          "variance = None;",
          "})",
          "test_configs",
          "end"
        ],
        "start_line": 104,
        "end_line": 107,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/performance_benchmark.ml"
      },
      {
        "hash": "970badaff0c0c24ef1a86f408f912dbb",
        "text": "variance = None;\n})\ntest_configs\nend",
        "lines": [
          "variance = None;",
          "})",
          "test_configs",
          "end"
        ],
        "start_line": 145,
        "end_line": 148,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/performance_benchmark.ml"
      },
      {
        "hash": "970badaff0c0c24ef1a86f408f912dbb",
        "text": "variance = None;\n})\ntest_configs\nend",
        "lines": [
          "variance = None;",
          "})",
          "test_configs",
          "end"
        ],
        "start_line": 187,
        "end_line": 190,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/performance_benchmark.ml"
      }
    ],
    "1536de53f5c802944ea9d778b5ed1743": [
      {
        "hash": "1536de53f5c802944ea9d778b5ed1743",
        "text": "})\ntest_configs\nend",
        "lines": [
          "})",
          "test_configs",
          "end"
        ],
        "start_line": 105,
        "end_line": 107,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/performance_benchmark.ml"
      },
      {
        "hash": "1536de53f5c802944ea9d778b5ed1743",
        "text": "})\ntest_configs\nend",
        "lines": [
          "})",
          "test_configs",
          "end"
        ],
        "start_line": 146,
        "end_line": 148,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/performance_benchmark.ml"
      },
      {
        "hash": "1536de53f5c802944ea9d778b5ed1743",
        "text": "})\ntest_configs\nend",
        "lines": [
          "})",
          "test_configs",
          "end"
        ],
        "start_line": 188,
        "end_line": 190,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/performance_benchmark.ml"
      }
    ],
    "9457d681291c0087094ff3c45211ce69": [
      {
        "hash": "9457d681291c0087094ff3c45211ce69",
        "text": "timestamp;\nenvironment;\n}",
        "lines": [
          "timestamp;",
          "environment;",
          "}"
        ],
        "start_line": 202,
        "end_line": 204,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/performance_benchmark.ml"
      },
      {
        "hash": "9457d681291c0087094ff3c45211ce69",
        "text": "timestamp;\nenvironment;\n}",
        "lines": [
          "timestamp;",
          "environment;",
          "}"
        ],
        "start_line": 67,
        "end_line": 69,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/performance/benchmark_core.ml"
      }
    ],
    "fc33b0647ea58d2f79b5ff25e2df12f2": [
      {
        "hash": "fc33b0647ea58d2f79b5ff25e2df12f2",
        "text": "\":\";\nint_to_string start_line;\n\":\";\nint_to_string start_col;\n\"-\";\nint_to_string end_col;\n]\nelse\nconcat_strings\n[",
        "lines": [
          "\":\";",
          "int_to_string start_line;",
          "\":\";",
          "int_to_string start_col;",
          "\"-\";",
          "int_to_string end_col;",
          "]",
          "else",
          "concat_strings",
          "["
        ],
        "start_line": 31,
        "end_line": 40,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/formatter_tokens.ml"
      },
      {
        "hash": "fc33b0647ea58d2f79b5ff25e2df12f2",
        "text": "\":\";\nint_to_string start_line;\n\":\";\nint_to_string start_col;\n\"-\";\nint_to_string end_col;\n]\nelse\nconcat_strings\n[",
        "lines": [
          "\":\";",
          "int_to_string start_line;",
          "\":\";",
          "int_to_string start_col;",
          "\"-\";",
          "int_to_string end_col;",
          "]",
          "else",
          "concat_strings",
          "["
        ],
        "start_line": 188,
        "end_line": 197,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/formatter_tokens.ml"
      }
    ],
    "c4e2e9fcc2a9a2f2ea0a1f479949810e": [
      {
        "hash": "c4e2e9fcc2a9a2f2ea0a1f479949810e",
        "text": "int_to_string start_line;\n\":\";\nint_to_string start_col;\n\"-\";\nint_to_string end_line;\n\":\";\nint_to_string end_col;\n]",
        "lines": [
          "int_to_string start_line;",
          "\":\";",
          "int_to_string start_col;",
          "\"-\";",
          "int_to_string end_line;",
          "\":\";",
          "int_to_string end_col;",
          "]"
        ],
        "start_line": 43,
        "end_line": 50,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/formatter_tokens.ml"
      },
      {
        "hash": "c4e2e9fcc2a9a2f2ea0a1f479949810e",
        "text": "int_to_string start_line;\n\":\";\nint_to_string start_col;\n\"-\";\nint_to_string end_line;\n\":\";\nint_to_string end_col;\n]",
        "lines": [
          "int_to_string start_line;",
          "\":\";",
          "int_to_string start_col;",
          "\"-\";",
          "int_to_string end_line;",
          "\":\";",
          "int_to_string end_col;",
          "]"
        ],
        "start_line": 45,
        "end_line": 52,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/utils/position_formatters.ml"
      }
    ],
    "f8e4715f3d1acd512fb33029e439ee03": [
      {
        "hash": "f8e4715f3d1acd512fb33029e439ee03",
        "text": "\":\";\nint_to_string start_col;\n\"-\";\nint_to_string end_line;\n\":\";\nint_to_string end_col;\n]",
        "lines": [
          "\":\";",
          "int_to_string start_col;",
          "\"-\";",
          "int_to_string end_line;",
          "\":\";",
          "int_to_string end_col;",
          "]"
        ],
        "start_line": 44,
        "end_line": 50,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/formatter_tokens.ml"
      },
      {
        "hash": "f8e4715f3d1acd512fb33029e439ee03",
        "text": "\":\";\nint_to_string start_col;\n\"-\";\nint_to_string end_line;\n\":\";\nint_to_string end_col;\n]",
        "lines": [
          "\":\";",
          "int_to_string start_col;",
          "\"-\";",
          "int_to_string end_line;",
          "\":\";",
          "int_to_string end_col;",
          "]"
        ],
        "start_line": 46,
        "end_line": 52,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/utils/position_formatters.ml"
      }
    ],
    "b1f8a480df35256370b0a95863ba355d": [
      {
        "hash": "b1f8a480df35256370b0a95863ba355d",
        "text": "int_to_string start_col;\n\"-\";\nint_to_string end_line;\n\":\";\nint_to_string end_col;\n]",
        "lines": [
          "int_to_string start_col;",
          "\"-\";",
          "int_to_string end_line;",
          "\":\";",
          "int_to_string end_col;",
          "]"
        ],
        "start_line": 45,
        "end_line": 50,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/formatter_tokens.ml"
      },
      {
        "hash": "b1f8a480df35256370b0a95863ba355d",
        "text": "int_to_string start_col;\n\"-\";\nint_to_string end_line;\n\":\";\nint_to_string end_col;\n]",
        "lines": [
          "int_to_string start_col;",
          "\"-\";",
          "int_to_string end_line;",
          "\":\";",
          "int_to_string end_col;",
          "]"
        ],
        "start_line": 47,
        "end_line": 52,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/utils/position_formatters.ml"
      }
    ],
    "62a539badeb6099c654615dc2ae6857e": [
      {
        "hash": "62a539badeb6099c654615dc2ae6857e",
        "text": "\"-\";\nint_to_string end_line;\n\":\";\nint_to_string end_col;\n]",
        "lines": [
          "\"-\";",
          "int_to_string end_line;",
          "\":\";",
          "int_to_string end_col;",
          "]"
        ],
        "start_line": 46,
        "end_line": 50,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/formatter_tokens.ml"
      },
      {
        "hash": "62a539badeb6099c654615dc2ae6857e",
        "text": "\"-\";\nint_to_string end_line;\n\":\";\nint_to_string end_col;\n]",
        "lines": [
          "\"-\";",
          "int_to_string end_line;",
          "\":\";",
          "int_to_string end_col;",
          "]"
        ],
        "start_line": 48,
        "end_line": 52,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/utils/position_formatters.ml"
      }
    ],
    "7148e396ed49591674ca10ca5dcc5ed6": [
      {
        "hash": "7148e396ed49591674ca10ca5dcc5ed6",
        "text": "int_to_string end_line;\n\":\";\nint_to_string end_col;\n]",
        "lines": [
          "int_to_string end_line;",
          "\":\";",
          "int_to_string end_col;",
          "]"
        ],
        "start_line": 47,
        "end_line": 50,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/formatter_tokens.ml"
      },
      {
        "hash": "7148e396ed49591674ca10ca5dcc5ed6",
        "text": "int_to_string end_line;\n\":\";\nint_to_string end_col;\n]",
        "lines": [
          "int_to_string end_line;",
          "\":\";",
          "int_to_string end_col;",
          "]"
        ],
        "start_line": 219,
        "end_line": 222,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/formatter_tokens.ml"
      },
      {
        "hash": "7148e396ed49591674ca10ca5dcc5ed6",
        "text": "int_to_string end_line;\n\":\";\nint_to_string end_col;\n]",
        "lines": [
          "int_to_string end_line;",
          "\":\";",
          "int_to_string end_col;",
          "]"
        ],
        "start_line": 49,
        "end_line": 52,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/utils/position_formatters.ml"
      }
    ],
    "c78fe6c3ba0dc036bd4425dea1836d70": [
      {
        "hash": "c78fe6c3ba0dc036bd4425dea1836d70",
        "text": "\":\";\nint_to_string end_col;\n]",
        "lines": [
          "\":\";",
          "int_to_string end_col;",
          "]"
        ],
        "start_line": 48,
        "end_line": 50,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/formatter_tokens.ml"
      },
      {
        "hash": "c78fe6c3ba0dc036bd4425dea1836d70",
        "text": "\":\";\nint_to_string end_col;\n]",
        "lines": [
          "\":\";",
          "int_to_string end_col;",
          "]"
        ],
        "start_line": 220,
        "end_line": 222,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/formatter_tokens.ml"
      },
      {
        "hash": "c78fe6c3ba0dc036bd4425dea1836d70",
        "text": "\":\";\nint_to_string end_col;\n]",
        "lines": [
          "\":\";",
          "int_to_string end_col;",
          "]"
        ],
        "start_line": 50,
        "end_line": 52,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/utils/position_formatters.ml"
      }
    ],
    "6b4cdf37dfdb15008031c878f7d73563": [
      {
        "hash": "6b4cdf37dfdb15008031c878f7d73563",
        "text": "int_to_string end_line;\n\"行第\";\nint_to_string end_col;\n\"列\";\n]",
        "lines": [
          "int_to_string end_line;",
          "\"行第\";",
          "int_to_string end_col;",
          "\"列\";",
          "]"
        ],
        "start_line": 139,
        "end_line": 143,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/formatter_tokens.ml"
      },
      {
        "hash": "6b4cdf37dfdb15008031c878f7d73563",
        "text": "int_to_string end_line;\n\"行第\";\nint_to_string end_col;\n\"列\";\n]",
        "lines": [
          "int_to_string end_line;",
          "\"行第\";",
          "int_to_string end_col;",
          "\"列\";",
          "]"
        ],
        "start_line": 87,
        "end_line": 91,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/utils/position_formatters.ml"
      }
    ],
    "86e9842421817df3fffd47c07bb44cab": [
      {
        "hash": "86e9842421817df3fffd47c07bb44cab",
        "text": "\"行第\";\nint_to_string end_col;\n\"列\";\n]",
        "lines": [
          "\"行第\";",
          "int_to_string end_col;",
          "\"列\";",
          "]"
        ],
        "start_line": 140,
        "end_line": 143,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/formatter_tokens.ml"
      },
      {
        "hash": "86e9842421817df3fffd47c07bb44cab",
        "text": "\"行第\";\nint_to_string end_col;\n\"列\";\n]",
        "lines": [
          "\"行第\";",
          "int_to_string end_col;",
          "\"列\";",
          "]"
        ],
        "start_line": 88,
        "end_line": 91,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/utils/position_formatters.ml"
      }
    ],
    "a00dfe765f1bb863a6a8aa976d71f1f8": [
      {
        "hash": "a00dfe765f1bb863a6a8aa976d71f1f8",
        "text": "int_to_string end_col;\n\"列\";\n]",
        "lines": [
          "int_to_string end_col;",
          "\"列\";",
          "]"
        ],
        "start_line": 141,
        "end_line": 143,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/formatter_tokens.ml"
      },
      {
        "hash": "a00dfe765f1bb863a6a8aa976d71f1f8",
        "text": "int_to_string end_col;\n\"列\";\n]",
        "lines": [
          "int_to_string end_col;",
          "\"列\";",
          "]"
        ],
        "start_line": 89,
        "end_line": 91,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/utils/position_formatters.ml"
      }
    ],
    "451f7cee59aa9286197d83ed077ea949": [
      {
        "hash": "451f7cee59aa9286197d83ed077ea949",
        "text": "int_to_string end_col;\n]\nelse\nconcat_strings\n[\nstart_file;\n\":\";\nint_to_string start_line;\n\":\";\nint_to_string start_col;",
        "lines": [
          "int_to_string end_col;",
          "]",
          "else",
          "concat_strings",
          "[",
          "start_file;",
          "\":\";",
          "int_to_string start_line;",
          "\":\";",
          "int_to_string start_col;"
        ],
        "start_line": 193,
        "end_line": 202,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/formatter_tokens.ml"
      },
      {
        "hash": "451f7cee59aa9286197d83ed077ea949",
        "text": "int_to_string end_col;\n]\nelse\nconcat_strings\n[\nstart_file;\n\":\";\nint_to_string start_line;\n\":\";\nint_to_string start_col;",
        "lines": [
          "int_to_string end_col;",
          "]",
          "else",
          "concat_strings",
          "[",
          "start_file;",
          "\":\";",
          "int_to_string start_line;",
          "\":\";",
          "int_to_string start_col;"
        ],
        "start_line": 206,
        "end_line": 215,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/formatter_tokens.ml"
      }
    ],
    "284c7d89e3b7b9752d8acfd81fd3ee68": [
      {
        "hash": "284c7d89e3b7b9752d8acfd81fd3ee68",
        "text": "]\nelse\nconcat_strings\n[\nstart_file;\n\":\";\nint_to_string start_line;\n\":\";\nint_to_string start_col;\n\" 到 \";",
        "lines": [
          "]",
          "else",
          "concat_strings",
          "[",
          "start_file;",
          "\":\";",
          "int_to_string start_line;",
          "\":\";",
          "int_to_string start_col;",
          "\" 到 \";"
        ],
        "start_line": 194,
        "end_line": 203,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/formatter_tokens.ml"
      },
      {
        "hash": "284c7d89e3b7b9752d8acfd81fd3ee68",
        "text": "]\nelse\nconcat_strings\n[\nstart_file;\n\":\";\nint_to_string start_line;\n\":\";\nint_to_string start_col;\n\" 到 \";",
        "lines": [
          "]",
          "else",
          "concat_strings",
          "[",
          "start_file;",
          "\":\";",
          "int_to_string start_line;",
          "\":\";",
          "int_to_string start_col;",
          "\" 到 \";"
        ],
        "start_line": 207,
        "end_line": 216,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/formatter_tokens.ml"
      }
    ],
    "e1a70ca84240fe9af34653bfa46a0660": [
      {
        "hash": "e1a70ca84240fe9af34653bfa46a0660",
        "text": "let parse_natural_arithmetic_continuation expr _param_name state =\nlet token_after, _ = current_token state in\nmatch token_after with\n| OfParticle ->",
        "lines": [
          "let parse_natural_arithmetic_continuation expr _param_name state =",
          "let token_after, _ = current_token state in",
          "match token_after with",
          "| OfParticle ->"
        ],
        "start_line": 89,
        "end_line": 92,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_utils.ml"
      },
      {
        "hash": "e1a70ca84240fe9af34653bfa46a0660",
        "text": "let parse_natural_arithmetic_continuation expr _param_name state =\nlet token_after, _ = current_token state in\nmatch token_after with\n| OfParticle ->",
        "lines": [
          "let parse_natural_arithmetic_continuation expr _param_name state =",
          "let token_after, _ = current_token state in",
          "match token_after with",
          "| OfParticle ->"
        ],
        "start_line": 25,
        "end_line": 28,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_ancient.ml"
      },
      {
        "hash": "e1a70ca84240fe9af34653bfa46a0660",
        "text": "let parse_natural_arithmetic_continuation expr _param_name state =\nlet token_after, _ = current_token state in\nmatch token_after with\n| OfParticle ->",
        "lines": [
          "let parse_natural_arithmetic_continuation expr _param_name state =",
          "let token_after, _ = current_token state in",
          "match token_after with",
          "| OfParticle ->"
        ],
        "start_line": 9,
        "end_line": 12,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_natural_language.ml"
      }
    ],
    "0eb1c1273890dd8241ae2701f6ca61c9": [
      {
        "hash": "0eb1c1273890dd8241ae2701f6ca61c9",
        "text": "let token_after, _ = current_token state in\nmatch token_after with\n| OfParticle ->",
        "lines": [
          "let token_after, _ = current_token state in",
          "match token_after with",
          "| OfParticle ->"
        ],
        "start_line": 90,
        "end_line": 92,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_utils.ml"
      },
      {
        "hash": "0eb1c1273890dd8241ae2701f6ca61c9",
        "text": "let token_after, _ = current_token state in\nmatch token_after with\n| OfParticle ->",
        "lines": [
          "let token_after, _ = current_token state in",
          "match token_after with",
          "| OfParticle ->"
        ],
        "start_line": 26,
        "end_line": 28,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_ancient.ml"
      },
      {
        "hash": "0eb1c1273890dd8241ae2701f6ca61c9",
        "text": "let token_after, _ = current_token state in\nmatch token_after with\n| OfParticle ->",
        "lines": [
          "let token_after, _ = current_token state in",
          "match token_after with",
          "| OfParticle ->"
        ],
        "start_line": 10,
        "end_line": 12,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_natural_language.ml"
      }
    ],
    "5e736695b85804cb6a711769958c013d": [
      {
        "hash": "5e736695b85804cb6a711769958c013d",
        "text": "let state1 = advance_parser state in\nlet func_name, state2 = parse_identifier state1 in\n(FunCallExpr (VarExpr func_name, [ expr ]), state2)\n| _ -> (expr, state)",
        "lines": [
          "let state1 = advance_parser state in",
          "let func_name, state2 = parse_identifier state1 in",
          "(FunCallExpr (VarExpr func_name, [ expr ]), state2)",
          "| _ -> (expr, state)"
        ],
        "start_line": 94,
        "end_line": 97,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_utils.ml"
      },
      {
        "hash": "5e736695b85804cb6a711769958c013d",
        "text": "let state1 = advance_parser state in\nlet func_name, state2 = parse_identifier state1 in\n(FunCallExpr (VarExpr func_name, [ expr ]), state2)\n| _ -> (expr, state)",
        "lines": [
          "let state1 = advance_parser state in",
          "let func_name, state2 = parse_identifier state1 in",
          "(FunCallExpr (VarExpr func_name, [ expr ]), state2)",
          "| _ -> (expr, state)"
        ],
        "start_line": 30,
        "end_line": 33,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_ancient.ml"
      },
      {
        "hash": "5e736695b85804cb6a711769958c013d",
        "text": "let state1 = advance_parser state in\nlet func_name, state2 = parse_identifier state1 in\n(FunCallExpr (VarExpr func_name, [ expr ]), state2)\n| _ -> (expr, state)",
        "lines": [
          "let state1 = advance_parser state in",
          "let func_name, state2 = parse_identifier state1 in",
          "(FunCallExpr (VarExpr func_name, [ expr ]), state2)",
          "| _ -> (expr, state)"
        ],
        "start_line": 14,
        "end_line": 17,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_natural_language.ml"
      }
    ],
    "cbcde68d212c4a4b3db929160622ea50": [
      {
        "hash": "cbcde68d212c4a4b3db929160622ea50",
        "text": "let func_name, state2 = parse_identifier state1 in\n(FunCallExpr (VarExpr func_name, [ expr ]), state2)\n| _ -> (expr, state)",
        "lines": [
          "let func_name, state2 = parse_identifier state1 in",
          "(FunCallExpr (VarExpr func_name, [ expr ]), state2)",
          "| _ -> (expr, state)"
        ],
        "start_line": 95,
        "end_line": 97,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_utils.ml"
      },
      {
        "hash": "cbcde68d212c4a4b3db929160622ea50",
        "text": "let func_name, state2 = parse_identifier state1 in\n(FunCallExpr (VarExpr func_name, [ expr ]), state2)\n| _ -> (expr, state)",
        "lines": [
          "let func_name, state2 = parse_identifier state1 in",
          "(FunCallExpr (VarExpr func_name, [ expr ]), state2)",
          "| _ -> (expr, state)"
        ],
        "start_line": 31,
        "end_line": 33,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_ancient.ml"
      },
      {
        "hash": "cbcde68d212c4a4b3db929160622ea50",
        "text": "let func_name, state2 = parse_identifier state1 in\n(FunCallExpr (VarExpr func_name, [ expr ]), state2)\n| _ -> (expr, state)",
        "lines": [
          "let func_name, state2 = parse_identifier state1 in",
          "(FunCallExpr (VarExpr func_name, [ expr ]), state2)",
          "| _ -> (expr, state)"
        ],
        "start_line": 15,
        "end_line": 17,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/parser_expressions_natural_language.ml"
      }
    ],
    "3de57b3b2c9d117ffbdc04430f05d95d": [
      {
        "hash": "3de57b3b2c9d117ffbdc04430f05d95d",
        "text": "let all_suggestions = List.fold_right (fun x acc -> x :: acc) suggestions default_suggestions in\nlet error_info = make_error_info ~suggestions:all_suggestions (LexError (msg, pos)) in\nError error_info",
        "lines": [
          "let all_suggestions = List.fold_right (fun x acc -> x :: acc) suggestions default_suggestions in",
          "let error_info = make_error_info ~suggestions:all_suggestions (LexError (msg, pos)) in",
          "Error error_info"
        ],
        "start_line": 74,
        "end_line": 76,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/compiler_errors_creation.ml"
      },
      {
        "hash": "3de57b3b2c9d117ffbdc04430f05d95d",
        "text": "let all_suggestions = List.fold_right (fun x acc -> x :: acc) suggestions default_suggestions in\nlet error_info = make_error_info ~suggestions:all_suggestions (LexError (msg, pos)) in\nError error_info",
        "lines": [
          "let all_suggestions = List.fold_right (fun x acc -> x :: acc) suggestions default_suggestions in",
          "let error_info = make_error_info ~suggestions:all_suggestions (LexError (msg, pos)) in",
          "Error error_info"
        ],
        "start_line": 90,
        "end_line": 92,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/compiler_errors_creation.ml"
      }
    ],
    "72a3fe509f7e18f7a22e85fb5d90c05f": [
      {
        "hash": "72a3fe509f7e18f7a22e85fb5d90c05f",
        "text": "@author 骆言AI代理\n@version 2.2 - 完整模块化第二阶段\n@since 2025-07-24 Fix #1048\n*)",
        "lines": [
          "@author 骆言AI代理",
          "@version 2.2 - 完整模块化第二阶段",
          "@since 2025-07-24 Fix #1048",
          "*)"
        ],
        "start_line": 12,
        "end_line": 15,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_operations_env.ml"
      },
      {
        "hash": "72a3fe509f7e18f7a22e85fb5d90c05f",
        "text": "@author 骆言AI代理\n@version 2.2 - 完整模块化第二阶段\n@since 2025-07-24 Fix #1048\n*)",
        "lines": [
          "@author 骆言AI代理",
          "@version 2.2 - 完整模块化第二阶段",
          "@since 2025-07-24 Fix #1048",
          "*)"
        ],
        "start_line": 12,
        "end_line": 15,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_operations_advanced.ml"
      },
      {
        "hash": "72a3fe509f7e18f7a22e85fb5d90c05f",
        "text": "@author 骆言AI代理\n@version 2.2 - 完整模块化第二阶段\n@since 2025-07-24 Fix #1048\n*)",
        "lines": [
          "@author 骆言AI代理",
          "@version 2.2 - 完整模块化第二阶段",
          "@since 2025-07-24 Fix #1048",
          "*)"
        ],
        "start_line": 12,
        "end_line": 15,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_operations_conversion.ml"
      }
    ],
    "db748dc78d37aaa3be82126ce3b1ec44": [
      {
        "hash": "db748dc78d37aaa3be82126ce3b1ec44",
        "text": "@version 2.2 - 完整模块化第二阶段\n@since 2025-07-24 Fix #1048\n*)",
        "lines": [
          "@version 2.2 - 完整模块化第二阶段",
          "@since 2025-07-24 Fix #1048",
          "*)"
        ],
        "start_line": 13,
        "end_line": 15,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_operations_env.ml"
      },
      {
        "hash": "db748dc78d37aaa3be82126ce3b1ec44",
        "text": "@version 2.2 - 完整模块化第二阶段\n@since 2025-07-24 Fix #1048\n*)",
        "lines": [
          "@version 2.2 - 完整模块化第二阶段",
          "@since 2025-07-24 Fix #1048",
          "*)"
        ],
        "start_line": 13,
        "end_line": 15,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_operations_advanced.ml"
      },
      {
        "hash": "db748dc78d37aaa3be82126ce3b1ec44",
        "text": "@version 2.2 - 完整模块化第二阶段\n@since 2025-07-24 Fix #1048\n*)",
        "lines": [
          "@version 2.2 - 完整模块化第二阶段",
          "@since 2025-07-24 Fix #1048",
          "*)"
        ],
        "start_line": 13,
        "end_line": 15,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/value_operations_conversion.ml"
      }
    ],
    "197a3837408cc32c8b2767ce9d44cbe0": [
      {
        "hash": "197a3837408cc32c8b2767ce9d44cbe0",
        "text": "| Some new_env -> (\nmatch branch.guard with\n| None -> Some (eval_expr_func new_env branch.expr)\n| Some guard_expr ->\nif evaluate_guard new_env guard_expr eval_expr_func then\nSome (eval_expr_func new_env branch.expr)\nelse None)\n| None -> None",
        "lines": [
          "| Some new_env -> (",
          "match branch.guard with",
          "| None -> Some (eval_expr_func new_env branch.expr)",
          "| Some guard_expr ->",
          "if evaluate_guard new_env guard_expr eval_expr_func then",
          "Some (eval_expr_func new_env branch.expr)",
          "else None)",
          "| None -> None"
        ],
        "start_line": 63,
        "end_line": 70,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/pattern_matcher.ml"
      },
      {
        "hash": "197a3837408cc32c8b2767ce9d44cbe0",
        "text": "| Some new_env -> (\nmatch branch.guard with\n| None -> Some (eval_expr_func new_env branch.expr)\n| Some guard_expr ->\nif evaluate_guard new_env guard_expr eval_expr_func then\nSome (eval_expr_func new_env branch.expr)\nelse None)\n| None -> None",
        "lines": [
          "| Some new_env -> (",
          "match branch.guard with",
          "| None -> Some (eval_expr_func new_env branch.expr)",
          "| Some guard_expr ->",
          "if evaluate_guard new_env guard_expr eval_expr_func then",
          "Some (eval_expr_func new_env branch.expr)",
          "else None)",
          "| None -> None"
        ],
        "start_line": 84,
        "end_line": 91,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/pattern_matcher.ml"
      }
    ],
    "ade4791681ac6ca1857158b543688fec": [
      {
        "hash": "ade4791681ac6ca1857158b543688fec",
        "text": "match branch.guard with\n| None -> Some (eval_expr_func new_env branch.expr)\n| Some guard_expr ->\nif evaluate_guard new_env guard_expr eval_expr_func then\nSome (eval_expr_func new_env branch.expr)\nelse None)\n| None -> None",
        "lines": [
          "match branch.guard with",
          "| None -> Some (eval_expr_func new_env branch.expr)",
          "| Some guard_expr ->",
          "if evaluate_guard new_env guard_expr eval_expr_func then",
          "Some (eval_expr_func new_env branch.expr)",
          "else None)",
          "| None -> None"
        ],
        "start_line": 64,
        "end_line": 70,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/pattern_matcher.ml"
      },
      {
        "hash": "ade4791681ac6ca1857158b543688fec",
        "text": "match branch.guard with\n| None -> Some (eval_expr_func new_env branch.expr)\n| Some guard_expr ->\nif evaluate_guard new_env guard_expr eval_expr_func then\nSome (eval_expr_func new_env branch.expr)\nelse None)\n| None -> None",
        "lines": [
          "match branch.guard with",
          "| None -> Some (eval_expr_func new_env branch.expr)",
          "| Some guard_expr ->",
          "if evaluate_guard new_env guard_expr eval_expr_func then",
          "Some (eval_expr_func new_env branch.expr)",
          "else None)",
          "| None -> None"
        ],
        "start_line": 85,
        "end_line": 91,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/pattern_matcher.ml"
      }
    ],
    "3ad0a3075cd84a74110ff79cf0e1fc4e": [
      {
        "hash": "3ad0a3075cd84a74110ff79cf0e1fc4e",
        "text": "| None -> Some (eval_expr_func new_env branch.expr)\n| Some guard_expr ->\nif evaluate_guard new_env guard_expr eval_expr_func then\nSome (eval_expr_func new_env branch.expr)\nelse None)\n| None -> None",
        "lines": [
          "| None -> Some (eval_expr_func new_env branch.expr)",
          "| Some guard_expr ->",
          "if evaluate_guard new_env guard_expr eval_expr_func then",
          "Some (eval_expr_func new_env branch.expr)",
          "else None)",
          "| None -> None"
        ],
        "start_line": 65,
        "end_line": 70,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/pattern_matcher.ml"
      },
      {
        "hash": "3ad0a3075cd84a74110ff79cf0e1fc4e",
        "text": "| None -> Some (eval_expr_func new_env branch.expr)\n| Some guard_expr ->\nif evaluate_guard new_env guard_expr eval_expr_func then\nSome (eval_expr_func new_env branch.expr)\nelse None)\n| None -> None",
        "lines": [
          "| None -> Some (eval_expr_func new_env branch.expr)",
          "| Some guard_expr ->",
          "if evaluate_guard new_env guard_expr eval_expr_func then",
          "Some (eval_expr_func new_env branch.expr)",
          "else None)",
          "| None -> None"
        ],
        "start_line": 86,
        "end_line": 91,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/pattern_matcher.ml"
      }
    ],
    "bdddb20eb98cd8e212f5dfeadc407e9e": [
      {
        "hash": "bdddb20eb98cd8e212f5dfeadc407e9e",
        "text": "| Some guard_expr ->\nif evaluate_guard new_env guard_expr eval_expr_func then\nSome (eval_expr_func new_env branch.expr)\nelse None)\n| None -> None",
        "lines": [
          "| Some guard_expr ->",
          "if evaluate_guard new_env guard_expr eval_expr_func then",
          "Some (eval_expr_func new_env branch.expr)",
          "else None)",
          "| None -> None"
        ],
        "start_line": 66,
        "end_line": 70,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/pattern_matcher.ml"
      },
      {
        "hash": "bdddb20eb98cd8e212f5dfeadc407e9e",
        "text": "| Some guard_expr ->\nif evaluate_guard new_env guard_expr eval_expr_func then\nSome (eval_expr_func new_env branch.expr)\nelse None)\n| None -> None",
        "lines": [
          "| Some guard_expr ->",
          "if evaluate_guard new_env guard_expr eval_expr_func then",
          "Some (eval_expr_func new_env branch.expr)",
          "else None)",
          "| None -> None"
        ],
        "start_line": 87,
        "end_line": 91,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/pattern_matcher.ml"
      }
    ],
    "712bce9dfb63d996c4645f8593251507": [
      {
        "hash": "712bce9dfb63d996c4645f8593251507",
        "text": "if evaluate_guard new_env guard_expr eval_expr_func then\nSome (eval_expr_func new_env branch.expr)\nelse None)\n| None -> None",
        "lines": [
          "if evaluate_guard new_env guard_expr eval_expr_func then",
          "Some (eval_expr_func new_env branch.expr)",
          "else None)",
          "| None -> None"
        ],
        "start_line": 67,
        "end_line": 70,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/pattern_matcher.ml"
      },
      {
        "hash": "712bce9dfb63d996c4645f8593251507",
        "text": "if evaluate_guard new_env guard_expr eval_expr_func then\nSome (eval_expr_func new_env branch.expr)\nelse None)\n| None -> None",
        "lines": [
          "if evaluate_guard new_env guard_expr eval_expr_func then",
          "Some (eval_expr_func new_env branch.expr)",
          "else None)",
          "| None -> None"
        ],
        "start_line": 88,
        "end_line": 91,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/pattern_matcher.ml"
      }
    ],
    "96127af2bb5d7161fedb574ab88ee33e": [
      {
        "hash": "96127af2bb5d7161fedb574ab88ee33e",
        "text": "Some (eval_expr_func new_env branch.expr)\nelse None)\n| None -> None",
        "lines": [
          "Some (eval_expr_func new_env branch.expr)",
          "else None)",
          "| None -> None"
        ],
        "start_line": 68,
        "end_line": 70,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/pattern_matcher.ml"
      },
      {
        "hash": "96127af2bb5d7161fedb574ab88ee33e",
        "text": "Some (eval_expr_func new_env branch.expr)\nelse None)\n| None -> None",
        "lines": [
          "Some (eval_expr_func new_env branch.expr)",
          "else None)",
          "| None -> None"
        ],
        "start_line": 89,
        "end_line": 91,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/pattern_matcher.ml"
      }
    ],
    "d6f1761a84817257c0813b38f2352e61": [
      {
        "hash": "d6f1761a84817257c0813b38f2352e61",
        "text": "open Ast\nopen Refactoring_analyzer_types\nopen Utils.Base_formatter",
        "lines": [
          "open Ast",
          "open Refactoring_analyzer_types",
          "open Utils.Base_formatter"
        ],
        "start_line": 5,
        "end_line": 7,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/performance_analyzer_base.ml"
      },
      {
        "hash": "d6f1761a84817257c0813b38f2352e61",
        "text": "open Ast\nopen Refactoring_analyzer_types\nopen Utils.Base_formatter",
        "lines": [
          "open Ast",
          "open Refactoring_analyzer_types",
          "open Utils.Base_formatter"
        ],
        "start_line": 3,
        "end_line": 5,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/refactoring_analyzer_complexity.ml"
      }
    ],
    "fe52d35fac448304c8a13eb85447aa7f": [
      {
        "hash": "fe52d35fac448304c8a13eb85447aa7f",
        "text": "module TokenDataLoader = struct\nlet find_data_file () =\nlet candidates =\n[\n\"data/token_mappings/supported_legacy_tokens.json\";",
        "lines": [
          "module TokenDataLoader = struct",
          "let find_data_file () =",
          "let candidates =",
          "[",
          "\"data/token_mappings/supported_legacy_tokens.json\";"
        ],
        "start_line": 13,
        "end_line": 17,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_reports.ml"
      },
      {
        "hash": "fe52d35fac448304c8a13eb85447aa7f",
        "text": "module TokenDataLoader = struct\nlet find_data_file () =\nlet candidates =\n[\n\"data/token_mappings/supported_legacy_tokens.json\";",
        "lines": [
          "module TokenDataLoader = struct",
          "let find_data_file () =",
          "let candidates =",
          "[",
          "\"data/token_mappings/supported_legacy_tokens.json\";"
        ],
        "start_line": 369,
        "end_line": 373,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      }
    ],
    "37330487c289fc1e121457f3220ca9ff": [
      {
        "hash": "37330487c289fc1e121457f3220ca9ff",
        "text": "let find_data_file () =\nlet candidates =\n[\n\"data/token_mappings/supported_legacy_tokens.json\";",
        "lines": [
          "let find_data_file () =",
          "let candidates =",
          "[",
          "\"data/token_mappings/supported_legacy_tokens.json\";"
        ],
        "start_line": 14,
        "end_line": 17,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_reports.ml"
      },
      {
        "hash": "37330487c289fc1e121457f3220ca9ff",
        "text": "let find_data_file () =\nlet candidates =\n[\n\"data/token_mappings/supported_legacy_tokens.json\";",
        "lines": [
          "let find_data_file () =",
          "let candidates =",
          "[",
          "\"data/token_mappings/supported_legacy_tokens.json\";"
        ],
        "start_line": 370,
        "end_line": 373,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      }
    ],
    "479c6c240d9ee88af830f799ca179527": [
      {
        "hash": "479c6c240d9ee88af830f799ca179527",
        "text": "let candidates =\n[\n\"data/token_mappings/supported_legacy_tokens.json\";",
        "lines": [
          "let candidates =",
          "[",
          "\"data/token_mappings/supported_legacy_tokens.json\";"
        ],
        "start_line": 15,
        "end_line": 17,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_reports.ml"
      },
      {
        "hash": "479c6c240d9ee88af830f799ca179527",
        "text": "let candidates =\n[\n\"data/token_mappings/supported_legacy_tokens.json\";",
        "lines": [
          "let candidates =",
          "[",
          "\"data/token_mappings/supported_legacy_tokens.json\";"
        ],
        "start_line": 371,
        "end_line": 373,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      }
    ],
    "fc30b16d617dfdf55a6017aec77f1969": [
      {
        "hash": "fc30b16d617dfdf55a6017aec77f1969",
        "text": "]\nin\nList.find (fun path -> Sys.file_exists path) candidates",
        "lines": [
          "]",
          "in",
          "List.find (fun path -> Sys.file_exists path) candidates"
        ],
        "start_line": 25,
        "end_line": 27,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_reports.ml"
      },
      {
        "hash": "fc30b16d617dfdf55a6017aec77f1969",
        "text": "]\nin\nList.find (fun path -> Sys.file_exists path) candidates",
        "lines": [
          "]",
          "in",
          "List.find (fun path -> Sys.file_exists path) candidates"
        ],
        "start_line": 47,
        "end_line": 49,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/unicode/unicode_types.ml"
      },
      {
        "hash": "fc30b16d617dfdf55a6017aec77f1969",
        "text": "]\nin\nList.find (fun path -> Sys.file_exists path) candidates",
        "lines": [
          "]",
          "in",
          "List.find (fun path -> Sys.file_exists path) candidates"
        ],
        "start_line": 50,
        "end_line": 52,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/ping_sheng/feng_rhyme_data.ml"
      },
      {
        "hash": "fc30b16d617dfdf55a6017aec77f1969",
        "text": "]\nin\nList.find (fun path -> Sys.file_exists path) candidates",
        "lines": [
          "]",
          "in",
          "List.find (fun path -> Sys.file_exists path) candidates"
        ],
        "start_line": 236,
        "end_line": 238,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/ze_sheng/hui_rhyme_data.ml"
      }
    ],
    "71fd4cafd10fa7d10925cc98f27970a3": [
      {
        "hash": "71fd4cafd10fa7d10925cc98f27970a3",
        "text": "let load_all_tokens () =\nlet categories =\n[ \"basic_keywords\"; \"wenyan_keywords\"; \"ancient_keywords\"; \"operators\"; \"delimiters\" ]\nin",
        "lines": [
          "let load_all_tokens () =",
          "let categories =",
          "[ \"basic_keywords\"; \"wenyan_keywords\"; \"ancient_keywords\"; \"operators\"; \"delimiters\" ]",
          "in"
        ],
        "start_line": 51,
        "end_line": 54,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_reports.ml"
      },
      {
        "hash": "71fd4cafd10fa7d10925cc98f27970a3",
        "text": "let load_all_tokens () =\nlet categories =\n[ \"basic_keywords\"; \"wenyan_keywords\"; \"ancient_keywords\"; \"operators\"; \"delimiters\" ]\nin",
        "lines": [
          "let load_all_tokens () =",
          "let categories =",
          "[ \"basic_keywords\"; \"wenyan_keywords\"; \"ancient_keywords\"; \"operators\"; \"delimiters\" ]",
          "in"
        ],
        "start_line": 401,
        "end_line": 404,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      }
    ],
    "510daed00d40ddd81ad122db7af1256c": [
      {
        "hash": "510daed00d40ddd81ad122db7af1256c",
        "text": "let categories =\n[ \"basic_keywords\"; \"wenyan_keywords\"; \"ancient_keywords\"; \"operators\"; \"delimiters\" ]\nin",
        "lines": [
          "let categories =",
          "[ \"basic_keywords\"; \"wenyan_keywords\"; \"ancient_keywords\"; \"operators\"; \"delimiters\" ]",
          "in"
        ],
        "start_line": 52,
        "end_line": 54,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_reports.ml"
      },
      {
        "hash": "510daed00d40ddd81ad122db7af1256c",
        "text": "let categories =\n[ \"basic_keywords\"; \"wenyan_keywords\"; \"ancient_keywords\"; \"operators\"; \"delimiters\" ]\nin",
        "lines": [
          "let categories =",
          "[ \"basic_keywords\"; \"wenyan_keywords\"; \"ancient_keywords\"; \"operators\"; \"delimiters\" ]",
          "in"
        ],
        "start_line": 402,
        "end_line": 404,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      }
    ],
    "2a53c262867e247bc4b35e52a5be545a": [
      {
        "hash": "2a53c262867e247bc4b35e52a5be545a",
        "text": "List.fold_left\n(fun acc category ->\nlet tokens = load_token_category category in\ntokens :: acc)\n[] categories\n|> List.concat |> List.rev\nend",
        "lines": [
          "List.fold_left",
          "(fun acc category ->",
          "let tokens = load_token_category category in",
          "tokens :: acc)",
          "[] categories",
          "|> List.concat |> List.rev",
          "end"
        ],
        "start_line": 56,
        "end_line": 62,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_reports.ml"
      },
      {
        "hash": "2a53c262867e247bc4b35e52a5be545a",
        "text": "List.fold_left\n(fun acc category ->\nlet tokens = load_token_category category in\ntokens :: acc)\n[] categories\n|> List.concat |> List.rev\nend",
        "lines": [
          "List.fold_left",
          "(fun acc category ->",
          "let tokens = load_token_category category in",
          "tokens :: acc)",
          "[] categories",
          "|> List.concat |> List.rev",
          "end"
        ],
        "start_line": 406,
        "end_line": 412,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      }
    ],
    "72477bd661b5d22b0cc15c22915d4151": [
      {
        "hash": "72477bd661b5d22b0cc15c22915d4151",
        "text": "(fun acc category ->\nlet tokens = load_token_category category in\ntokens :: acc)\n[] categories\n|> List.concat |> List.rev\nend",
        "lines": [
          "(fun acc category ->",
          "let tokens = load_token_category category in",
          "tokens :: acc)",
          "[] categories",
          "|> List.concat |> List.rev",
          "end"
        ],
        "start_line": 57,
        "end_line": 62,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_reports.ml"
      },
      {
        "hash": "72477bd661b5d22b0cc15c22915d4151",
        "text": "(fun acc category ->\nlet tokens = load_token_category category in\ntokens :: acc)\n[] categories\n|> List.concat |> List.rev\nend",
        "lines": [
          "(fun acc category ->",
          "let tokens = load_token_category category in",
          "tokens :: acc)",
          "[] categories",
          "|> List.concat |> List.rev",
          "end"
        ],
        "start_line": 407,
        "end_line": 412,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      }
    ],
    "9d98d9f51a3f60b185281fdb91bfa58a": [
      {
        "hash": "9d98d9f51a3f60b185281fdb91bfa58a",
        "text": "let tokens = load_token_category category in\ntokens :: acc)\n[] categories\n|> List.concat |> List.rev\nend",
        "lines": [
          "let tokens = load_token_category category in",
          "tokens :: acc)",
          "[] categories",
          "|> List.concat |> List.rev",
          "end"
        ],
        "start_line": 58,
        "end_line": 62,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_reports.ml"
      },
      {
        "hash": "9d98d9f51a3f60b185281fdb91bfa58a",
        "text": "let tokens = load_token_category category in\ntokens :: acc)\n[] categories\n|> List.concat |> List.rev\nend",
        "lines": [
          "let tokens = load_token_category category in",
          "tokens :: acc)",
          "[] categories",
          "|> List.concat |> List.rev",
          "end"
        ],
        "start_line": 408,
        "end_line": 412,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      }
    ],
    "8b99890f8a322a16f9345a3d8e7d6a75": [
      {
        "hash": "8b99890f8a322a16f9345a3d8e7d6a75",
        "text": "tokens :: acc)\n[] categories\n|> List.concat |> List.rev\nend",
        "lines": [
          "tokens :: acc)",
          "[] categories",
          "|> List.concat |> List.rev",
          "end"
        ],
        "start_line": 59,
        "end_line": 62,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_reports.ml"
      },
      {
        "hash": "8b99890f8a322a16f9345a3d8e7d6a75",
        "text": "tokens :: acc)\n[] categories\n|> List.concat |> List.rev\nend",
        "lines": [
          "tokens :: acc)",
          "[] categories",
          "|> List.concat |> List.rev",
          "end"
        ],
        "start_line": 409,
        "end_line": 412,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      }
    ],
    "c181207120d23b39a50cf2a3b0dfeaac": [
      {
        "hash": "c181207120d23b39a50cf2a3b0dfeaac",
        "text": "[] categories\n|> List.concat |> List.rev\nend",
        "lines": [
          "[] categories",
          "|> List.concat |> List.rev",
          "end"
        ],
        "start_line": 60,
        "end_line": 62,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_reports.ml"
      },
      {
        "hash": "c181207120d23b39a50cf2a3b0dfeaac",
        "text": "[] categories\n|> List.concat |> List.rev\nend",
        "lines": [
          "[] categories",
          "|> List.concat |> List.rev",
          "end"
        ],
        "start_line": 410,
        "end_line": 412,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      }
    ],
    "07b8a17c207d1f0461996456281a3986": [
      {
        "hash": "07b8a17c207d1f0461996456281a3986",
        "text": "| LetKeyword\n| RecKeyword\n| InKeyword\n| FunKeyword\n| IfKeyword\n| ThenKeyword\n| ElseKeyword\n| MatchKeyword\n| WithKeyword\n| OtherKeyword",
        "lines": [
          "| LetKeyword",
          "| RecKeyword",
          "| InKeyword",
          "| FunKeyword",
          "| IfKeyword",
          "| ThenKeyword",
          "| ElseKeyword",
          "| MatchKeyword",
          "| WithKeyword",
          "| OtherKeyword"
        ],
        "start_line": 54,
        "end_line": 63,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_types.ml"
      },
      {
        "hash": "07b8a17c207d1f0461996456281a3986",
        "text": "| LetKeyword\n| RecKeyword\n| InKeyword\n| FunKeyword\n| IfKeyword\n| ThenKeyword\n| ElseKeyword\n| MatchKeyword\n| WithKeyword\n| OtherKeyword",
        "lines": [
          "| LetKeyword",
          "| RecKeyword",
          "| InKeyword",
          "| FunKeyword",
          "| IfKeyword",
          "| ThenKeyword",
          "| ElseKeyword",
          "| MatchKeyword",
          "| WithKeyword",
          "| OtherKeyword"
        ],
        "start_line": 17,
        "end_line": 26,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/unified_token_mapper.ml"
      }
    ],
    "7a502595ea29485bbb53eea61549836b": [
      {
        "hash": "7a502595ea29485bbb53eea61549836b",
        "text": "env\nin\nenv",
        "lines": [
          "env",
          "in",
          "env"
        ],
        "start_line": 25,
        "end_line": 27,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/types_builtin.ml"
      },
      {
        "hash": "7a502595ea29485bbb53eea61549836b",
        "text": "env\nin\nenv",
        "lines": [
          "env",
          "in",
          "env"
        ],
        "start_line": 57,
        "end_line": 59,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/types_builtin.ml"
      },
      {
        "hash": "7a502595ea29485bbb53eea61549836b",
        "text": "env\nin\nenv",
        "lines": [
          "env",
          "in",
          "env"
        ],
        "start_line": 79,
        "end_line": 81,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/types_builtin.ml"
      },
      {
        "hash": "7a502595ea29485bbb53eea61549836b",
        "text": "env\nin\nenv",
        "lines": [
          "env",
          "in",
          "env"
        ],
        "start_line": 131,
        "end_line": 133,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/types_builtin.ml"
      },
      {
        "hash": "7a502595ea29485bbb53eea61549836b",
        "text": "env\nin\nenv",
        "lines": [
          "env",
          "in",
          "env"
        ],
        "start_line": 151,
        "end_line": 153,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/types_builtin.ml"
      },
      {
        "hash": "7a502595ea29485bbb53eea61549836b",
        "text": "env\nin\nenv",
        "lines": [
          "env",
          "in",
          "env"
        ],
        "start_line": 160,
        "end_line": 162,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/types_builtin.ml"
      },
      {
        "hash": "7a502595ea29485bbb53eea61549836b",
        "text": "env\nin\nenv",
        "lines": [
          "env",
          "in",
          "env"
        ],
        "start_line": 175,
        "end_line": 177,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/types_builtin.ml"
      },
      {
        "hash": "7a502595ea29485bbb53eea61549836b",
        "text": "env\nin\nenv",
        "lines": [
          "env",
          "in",
          "env"
        ],
        "start_line": 208,
        "end_line": 210,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/types_builtin.ml"
      }
    ],
    "1110ed1a6febb85f8b88ce65ee06a28d": [
      {
        "hash": "1110ed1a6febb85f8b88ce65ee06a28d",
        "text": "if stop_condition ch then (String.concat \"\" (List.rev acc), pos) else loop next_pos (ch :: acc)\nin\nloop start_pos []",
        "lines": [
          "if stop_condition ch then (String.concat \"\" (List.rev acc), pos) else loop next_pos (ch :: acc)",
          "in",
          "loop start_pos []"
        ],
        "start_line": 24,
        "end_line": 26,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_utils.ml"
      },
      {
        "hash": "1110ed1a6febb85f8b88ce65ee06a28d",
        "text": "if stop_condition ch then (String.concat \"\" (List.rev acc), pos) else loop next_pos (ch :: acc)\nin\nloop start_pos []",
        "lines": [
          "if stop_condition ch then (String.concat \"\" (List.rev acc), pos) else loop next_pos (ch :: acc)",
          "in",
          "loop start_pos []"
        ],
        "start_line": 26,
        "end_line": 28,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_utils_modular.ml"
      }
    ],
    "eaae24053962429cdf016a3f54a09024": [
      {
        "hash": "eaae24053962429cdf016a3f54a09024",
        "text": "let process_escape_sequences str =\nlet len = String.length str in\nlet buf = Buffer.create len in\nlet rec loop i =\nif i >= len then Buffer.contents buf\nelse if str.[i] = '\\\\' && i + 1 < len then (\nmatch str.[i + 1] with\n| 'n' ->\nBuffer.add_char buf '\\n';\nloop (i + 2)",
        "lines": [
          "let process_escape_sequences str =",
          "let len = String.length str in",
          "let buf = Buffer.create len in",
          "let rec loop i =",
          "if i >= len then Buffer.contents buf",
          "else if str.[i] = '\\\\' && i + 1 < len then (",
          "match str.[i + 1] with",
          "| 'n' ->",
          "Buffer.add_char buf '\\n';",
          "loop (i + 2)"
        ],
        "start_line": 44,
        "end_line": 53,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_utils.ml"
      },
      {
        "hash": "eaae24053962429cdf016a3f54a09024",
        "text": "let process_escape_sequences str =\nlet len = String.length str in\nlet buf = Buffer.create len in\nlet rec loop i =\nif i >= len then Buffer.contents buf\nelse if str.[i] = '\\\\' && i + 1 < len then (\nmatch str.[i + 1] with\n| 'n' ->\nBuffer.add_char buf '\\n';\nloop (i + 2)",
        "lines": [
          "let process_escape_sequences str =",
          "let len = String.length str in",
          "let buf = Buffer.create len in",
          "let rec loop i =",
          "if i >= len then Buffer.contents buf",
          "else if str.[i] = '\\\\' && i + 1 < len then (",
          "match str.[i + 1] with",
          "| 'n' ->",
          "Buffer.add_char buf '\\n';",
          "loop (i + 2)"
        ],
        "start_line": 46,
        "end_line": 55,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_utils_modular.ml"
      }
    ],
    "387de48d36ae0ddee09914900a717a49": [
      {
        "hash": "387de48d36ae0ddee09914900a717a49",
        "text": "let len = String.length str in\nlet buf = Buffer.create len in\nlet rec loop i =\nif i >= len then Buffer.contents buf\nelse if str.[i] = '\\\\' && i + 1 < len then (\nmatch str.[i + 1] with\n| 'n' ->\nBuffer.add_char buf '\\n';\nloop (i + 2)\n| 't' ->",
        "lines": [
          "let len = String.length str in",
          "let buf = Buffer.create len in",
          "let rec loop i =",
          "if i >= len then Buffer.contents buf",
          "else if str.[i] = '\\\\' && i + 1 < len then (",
          "match str.[i + 1] with",
          "| 'n' ->",
          "Buffer.add_char buf '\\n';",
          "loop (i + 2)",
          "| 't' ->"
        ],
        "start_line": 45,
        "end_line": 54,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_utils.ml"
      },
      {
        "hash": "387de48d36ae0ddee09914900a717a49",
        "text": "let len = String.length str in\nlet buf = Buffer.create len in\nlet rec loop i =\nif i >= len then Buffer.contents buf\nelse if str.[i] = '\\\\' && i + 1 < len then (\nmatch str.[i + 1] with\n| 'n' ->\nBuffer.add_char buf '\\n';\nloop (i + 2)\n| 't' ->",
        "lines": [
          "let len = String.length str in",
          "let buf = Buffer.create len in",
          "let rec loop i =",
          "if i >= len then Buffer.contents buf",
          "else if str.[i] = '\\\\' && i + 1 < len then (",
          "match str.[i + 1] with",
          "| 'n' ->",
          "Buffer.add_char buf '\\n';",
          "loop (i + 2)",
          "| 't' ->"
        ],
        "start_line": 47,
        "end_line": 56,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_utils_modular.ml"
      }
    ],
    "3545dbdda60547f46132da3a289a6a98": [
      {
        "hash": "3545dbdda60547f46132da3a289a6a98",
        "text": "let buf = Buffer.create len in\nlet rec loop i =\nif i >= len then Buffer.contents buf\nelse if str.[i] = '\\\\' && i + 1 < len then (\nmatch str.[i + 1] with\n| 'n' ->\nBuffer.add_char buf '\\n';\nloop (i + 2)\n| 't' ->\nBuffer.add_char buf '\\t';",
        "lines": [
          "let buf = Buffer.create len in",
          "let rec loop i =",
          "if i >= len then Buffer.contents buf",
          "else if str.[i] = '\\\\' && i + 1 < len then (",
          "match str.[i + 1] with",
          "| 'n' ->",
          "Buffer.add_char buf '\\n';",
          "loop (i + 2)",
          "| 't' ->",
          "Buffer.add_char buf '\\t';"
        ],
        "start_line": 46,
        "end_line": 55,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_utils.ml"
      },
      {
        "hash": "3545dbdda60547f46132da3a289a6a98",
        "text": "let buf = Buffer.create len in\nlet rec loop i =\nif i >= len then Buffer.contents buf\nelse if str.[i] = '\\\\' && i + 1 < len then (\nmatch str.[i + 1] with\n| 'n' ->\nBuffer.add_char buf '\\n';\nloop (i + 2)\n| 't' ->\nBuffer.add_char buf '\\t';",
        "lines": [
          "let buf = Buffer.create len in",
          "let rec loop i =",
          "if i >= len then Buffer.contents buf",
          "else if str.[i] = '\\\\' && i + 1 < len then (",
          "match str.[i + 1] with",
          "| 'n' ->",
          "Buffer.add_char buf '\\n';",
          "loop (i + 2)",
          "| 't' ->",
          "Buffer.add_char buf '\\t';"
        ],
        "start_line": 48,
        "end_line": 57,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_utils_modular.ml"
      }
    ],
    "57f2b4032d1f06219b34f25c2a676656": [
      {
        "hash": "57f2b4032d1f06219b34f25c2a676656",
        "text": "let rec loop i =\nif i >= len then Buffer.contents buf\nelse if str.[i] = '\\\\' && i + 1 < len then (\nmatch str.[i + 1] with\n| 'n' ->\nBuffer.add_char buf '\\n';\nloop (i + 2)\n| 't' ->\nBuffer.add_char buf '\\t';\nloop (i + 2)",
        "lines": [
          "let rec loop i =",
          "if i >= len then Buffer.contents buf",
          "else if str.[i] = '\\\\' && i + 1 < len then (",
          "match str.[i + 1] with",
          "| 'n' ->",
          "Buffer.add_char buf '\\n';",
          "loop (i + 2)",
          "| 't' ->",
          "Buffer.add_char buf '\\t';",
          "loop (i + 2)"
        ],
        "start_line": 47,
        "end_line": 56,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_utils.ml"
      },
      {
        "hash": "57f2b4032d1f06219b34f25c2a676656",
        "text": "let rec loop i =\nif i >= len then Buffer.contents buf\nelse if str.[i] = '\\\\' && i + 1 < len then (\nmatch str.[i + 1] with\n| 'n' ->\nBuffer.add_char buf '\\n';\nloop (i + 2)\n| 't' ->\nBuffer.add_char buf '\\t';\nloop (i + 2)",
        "lines": [
          "let rec loop i =",
          "if i >= len then Buffer.contents buf",
          "else if str.[i] = '\\\\' && i + 1 < len then (",
          "match str.[i + 1] with",
          "| 'n' ->",
          "Buffer.add_char buf '\\n';",
          "loop (i + 2)",
          "| 't' ->",
          "Buffer.add_char buf '\\t';",
          "loop (i + 2)"
        ],
        "start_line": 49,
        "end_line": 58,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_utils_modular.ml"
      }
    ],
    "d94b054aa240a04f13c3756be437283f": [
      {
        "hash": "d94b054aa240a04f13c3756be437283f",
        "text": "if i >= len then Buffer.contents buf\nelse if str.[i] = '\\\\' && i + 1 < len then (\nmatch str.[i + 1] with\n| 'n' ->\nBuffer.add_char buf '\\n';\nloop (i + 2)\n| 't' ->\nBuffer.add_char buf '\\t';\nloop (i + 2)\n| 'r' ->",
        "lines": [
          "if i >= len then Buffer.contents buf",
          "else if str.[i] = '\\\\' && i + 1 < len then (",
          "match str.[i + 1] with",
          "| 'n' ->",
          "Buffer.add_char buf '\\n';",
          "loop (i + 2)",
          "| 't' ->",
          "Buffer.add_char buf '\\t';",
          "loop (i + 2)",
          "| 'r' ->"
        ],
        "start_line": 48,
        "end_line": 57,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_utils.ml"
      },
      {
        "hash": "d94b054aa240a04f13c3756be437283f",
        "text": "if i >= len then Buffer.contents buf\nelse if str.[i] = '\\\\' && i + 1 < len then (\nmatch str.[i + 1] with\n| 'n' ->\nBuffer.add_char buf '\\n';\nloop (i + 2)\n| 't' ->\nBuffer.add_char buf '\\t';\nloop (i + 2)\n| 'r' ->",
        "lines": [
          "if i >= len then Buffer.contents buf",
          "else if str.[i] = '\\\\' && i + 1 < len then (",
          "match str.[i + 1] with",
          "| 'n' ->",
          "Buffer.add_char buf '\\n';",
          "loop (i + 2)",
          "| 't' ->",
          "Buffer.add_char buf '\\t';",
          "loop (i + 2)",
          "| 'r' ->"
        ],
        "start_line": 50,
        "end_line": 59,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_utils_modular.ml"
      }
    ],
    "6d4c41a6ed61c69614bbf7bfbc265e33": [
      {
        "hash": "6d4c41a6ed61c69614bbf7bfbc265e33",
        "text": "else if str.[i] = '\\\\' && i + 1 < len then (\nmatch str.[i + 1] with\n| 'n' ->\nBuffer.add_char buf '\\n';\nloop (i + 2)\n| 't' ->\nBuffer.add_char buf '\\t';\nloop (i + 2)\n| 'r' ->\nBuffer.add_char buf '\\r';",
        "lines": [
          "else if str.[i] = '\\\\' && i + 1 < len then (",
          "match str.[i + 1] with",
          "| 'n' ->",
          "Buffer.add_char buf '\\n';",
          "loop (i + 2)",
          "| 't' ->",
          "Buffer.add_char buf '\\t';",
          "loop (i + 2)",
          "| 'r' ->",
          "Buffer.add_char buf '\\r';"
        ],
        "start_line": 49,
        "end_line": 58,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_utils.ml"
      },
      {
        "hash": "6d4c41a6ed61c69614bbf7bfbc265e33",
        "text": "else if str.[i] = '\\\\' && i + 1 < len then (\nmatch str.[i + 1] with\n| 'n' ->\nBuffer.add_char buf '\\n';\nloop (i + 2)\n| 't' ->\nBuffer.add_char buf '\\t';\nloop (i + 2)\n| 'r' ->\nBuffer.add_char buf '\\r';",
        "lines": [
          "else if str.[i] = '\\\\' && i + 1 < len then (",
          "match str.[i + 1] with",
          "| 'n' ->",
          "Buffer.add_char buf '\\n';",
          "loop (i + 2)",
          "| 't' ->",
          "Buffer.add_char buf '\\t';",
          "loop (i + 2)",
          "| 'r' ->",
          "Buffer.add_char buf '\\r';"
        ],
        "start_line": 51,
        "end_line": 60,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_utils_modular.ml"
      }
    ],
    "c32729a464e22bd7c20a65b37fff9dcd": [
      {
        "hash": "c32729a464e22bd7c20a65b37fff9dcd",
        "text": "match str.[i + 1] with\n| 'n' ->\nBuffer.add_char buf '\\n';\nloop (i + 2)\n| 't' ->\nBuffer.add_char buf '\\t';\nloop (i + 2)\n| 'r' ->\nBuffer.add_char buf '\\r';\nloop (i + 2)",
        "lines": [
          "match str.[i + 1] with",
          "| 'n' ->",
          "Buffer.add_char buf '\\n';",
          "loop (i + 2)",
          "| 't' ->",
          "Buffer.add_char buf '\\t';",
          "loop (i + 2)",
          "| 'r' ->",
          "Buffer.add_char buf '\\r';",
          "loop (i + 2)"
        ],
        "start_line": 50,
        "end_line": 59,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_utils.ml"
      },
      {
        "hash": "c32729a464e22bd7c20a65b37fff9dcd",
        "text": "match str.[i + 1] with\n| 'n' ->\nBuffer.add_char buf '\\n';\nloop (i + 2)\n| 't' ->\nBuffer.add_char buf '\\t';\nloop (i + 2)\n| 'r' ->\nBuffer.add_char buf '\\r';\nloop (i + 2)",
        "lines": [
          "match str.[i + 1] with",
          "| 'n' ->",
          "Buffer.add_char buf '\\n';",
          "loop (i + 2)",
          "| 't' ->",
          "Buffer.add_char buf '\\t';",
          "loop (i + 2)",
          "| 'r' ->",
          "Buffer.add_char buf '\\r';",
          "loop (i + 2)"
        ],
        "start_line": 52,
        "end_line": 61,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_utils_modular.ml"
      }
    ],
    "86687fa7aa90e59e415f1fa5e4bbce36": [
      {
        "hash": "86687fa7aa90e59e415f1fa5e4bbce36",
        "text": "| 'n' ->\nBuffer.add_char buf '\\n';\nloop (i + 2)\n| 't' ->\nBuffer.add_char buf '\\t';\nloop (i + 2)\n| 'r' ->\nBuffer.add_char buf '\\r';\nloop (i + 2)\n| '\\\\' ->",
        "lines": [
          "| 'n' ->",
          "Buffer.add_char buf '\\n';",
          "loop (i + 2)",
          "| 't' ->",
          "Buffer.add_char buf '\\t';",
          "loop (i + 2)",
          "| 'r' ->",
          "Buffer.add_char buf '\\r';",
          "loop (i + 2)",
          "| '\\\\' ->"
        ],
        "start_line": 51,
        "end_line": 60,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_utils.ml"
      },
      {
        "hash": "86687fa7aa90e59e415f1fa5e4bbce36",
        "text": "| 'n' ->\nBuffer.add_char buf '\\n';\nloop (i + 2)\n| 't' ->\nBuffer.add_char buf '\\t';\nloop (i + 2)\n| 'r' ->\nBuffer.add_char buf '\\r';\nloop (i + 2)\n| '\\\\' ->",
        "lines": [
          "| 'n' ->",
          "Buffer.add_char buf '\\n';",
          "loop (i + 2)",
          "| 't' ->",
          "Buffer.add_char buf '\\t';",
          "loop (i + 2)",
          "| 'r' ->",
          "Buffer.add_char buf '\\r';",
          "loop (i + 2)",
          "| '\\\\' ->"
        ],
        "start_line": 53,
        "end_line": 62,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_utils_modular.ml"
      }
    ],
    "c645ffc344d778b3628ad6815ea19282": [
      {
        "hash": "c645ffc344d778b3628ad6815ea19282",
        "text": "Buffer.add_char buf '\\n';\nloop (i + 2)\n| 't' ->\nBuffer.add_char buf '\\t';\nloop (i + 2)\n| 'r' ->\nBuffer.add_char buf '\\r';\nloop (i + 2)\n| '\\\\' ->\nBuffer.add_char buf '\\\\';",
        "lines": [
          "Buffer.add_char buf '\\n';",
          "loop (i + 2)",
          "| 't' ->",
          "Buffer.add_char buf '\\t';",
          "loop (i + 2)",
          "| 'r' ->",
          "Buffer.add_char buf '\\r';",
          "loop (i + 2)",
          "| '\\\\' ->",
          "Buffer.add_char buf '\\\\';"
        ],
        "start_line": 52,
        "end_line": 61,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_utils.ml"
      },
      {
        "hash": "c645ffc344d778b3628ad6815ea19282",
        "text": "Buffer.add_char buf '\\n';\nloop (i + 2)\n| 't' ->\nBuffer.add_char buf '\\t';\nloop (i + 2)\n| 'r' ->\nBuffer.add_char buf '\\r';\nloop (i + 2)\n| '\\\\' ->\nBuffer.add_char buf '\\\\';",
        "lines": [
          "Buffer.add_char buf '\\n';",
          "loop (i + 2)",
          "| 't' ->",
          "Buffer.add_char buf '\\t';",
          "loop (i + 2)",
          "| 'r' ->",
          "Buffer.add_char buf '\\r';",
          "loop (i + 2)",
          "| '\\\\' ->",
          "Buffer.add_char buf '\\\\';"
        ],
        "start_line": 54,
        "end_line": 63,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_utils_modular.ml"
      }
    ],
    "02b34406a428e98b9b618fba8b5b1e98": [
      {
        "hash": "02b34406a428e98b9b618fba8b5b1e98",
        "text": "loop (i + 2)\n| 't' ->\nBuffer.add_char buf '\\t';\nloop (i + 2)\n| 'r' ->\nBuffer.add_char buf '\\r';\nloop (i + 2)\n| '\\\\' ->\nBuffer.add_char buf '\\\\';\nloop (i + 2)",
        "lines": [
          "loop (i + 2)",
          "| 't' ->",
          "Buffer.add_char buf '\\t';",
          "loop (i + 2)",
          "| 'r' ->",
          "Buffer.add_char buf '\\r';",
          "loop (i + 2)",
          "| '\\\\' ->",
          "Buffer.add_char buf '\\\\';",
          "loop (i + 2)"
        ],
        "start_line": 53,
        "end_line": 62,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_utils.ml"
      },
      {
        "hash": "02b34406a428e98b9b618fba8b5b1e98",
        "text": "loop (i + 2)\n| 't' ->\nBuffer.add_char buf '\\t';\nloop (i + 2)\n| 'r' ->\nBuffer.add_char buf '\\r';\nloop (i + 2)\n| '\\\\' ->\nBuffer.add_char buf '\\\\';\nloop (i + 2)",
        "lines": [
          "loop (i + 2)",
          "| 't' ->",
          "Buffer.add_char buf '\\t';",
          "loop (i + 2)",
          "| 'r' ->",
          "Buffer.add_char buf '\\r';",
          "loop (i + 2)",
          "| '\\\\' ->",
          "Buffer.add_char buf '\\\\';",
          "loop (i + 2)"
        ],
        "start_line": 55,
        "end_line": 64,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_utils_modular.ml"
      }
    ],
    "0f64a9bce6fb43092fb93e433b63aeff": [
      {
        "hash": "0f64a9bce6fb43092fb93e433b63aeff",
        "text": "| 't' ->\nBuffer.add_char buf '\\t';\nloop (i + 2)\n| 'r' ->\nBuffer.add_char buf '\\r';\nloop (i + 2)\n| '\\\\' ->\nBuffer.add_char buf '\\\\';\nloop (i + 2)\n| '\"' ->",
        "lines": [
          "| 't' ->",
          "Buffer.add_char buf '\\t';",
          "loop (i + 2)",
          "| 'r' ->",
          "Buffer.add_char buf '\\r';",
          "loop (i + 2)",
          "| '\\\\' ->",
          "Buffer.add_char buf '\\\\';",
          "loop (i + 2)",
          "| '\"' ->"
        ],
        "start_line": 54,
        "end_line": 63,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_utils.ml"
      },
      {
        "hash": "0f64a9bce6fb43092fb93e433b63aeff",
        "text": "| 't' ->\nBuffer.add_char buf '\\t';\nloop (i + 2)\n| 'r' ->\nBuffer.add_char buf '\\r';\nloop (i + 2)\n| '\\\\' ->\nBuffer.add_char buf '\\\\';\nloop (i + 2)\n| '\"' ->",
        "lines": [
          "| 't' ->",
          "Buffer.add_char buf '\\t';",
          "loop (i + 2)",
          "| 'r' ->",
          "Buffer.add_char buf '\\r';",
          "loop (i + 2)",
          "| '\\\\' ->",
          "Buffer.add_char buf '\\\\';",
          "loop (i + 2)",
          "| '\"' ->"
        ],
        "start_line": 56,
        "end_line": 65,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_utils_modular.ml"
      }
    ],
    "6370e8520a9fd2fcd636ec36d43e484c": [
      {
        "hash": "6370e8520a9fd2fcd636ec36d43e484c",
        "text": "Buffer.add_char buf '\\t';\nloop (i + 2)\n| 'r' ->\nBuffer.add_char buf '\\r';\nloop (i + 2)\n| '\\\\' ->\nBuffer.add_char buf '\\\\';\nloop (i + 2)\n| '\"' ->\nBuffer.add_char buf '\"';",
        "lines": [
          "Buffer.add_char buf '\\t';",
          "loop (i + 2)",
          "| 'r' ->",
          "Buffer.add_char buf '\\r';",
          "loop (i + 2)",
          "| '\\\\' ->",
          "Buffer.add_char buf '\\\\';",
          "loop (i + 2)",
          "| '\"' ->",
          "Buffer.add_char buf '\"';"
        ],
        "start_line": 55,
        "end_line": 64,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_utils.ml"
      },
      {
        "hash": "6370e8520a9fd2fcd636ec36d43e484c",
        "text": "Buffer.add_char buf '\\t';\nloop (i + 2)\n| 'r' ->\nBuffer.add_char buf '\\r';\nloop (i + 2)\n| '\\\\' ->\nBuffer.add_char buf '\\\\';\nloop (i + 2)\n| '\"' ->\nBuffer.add_char buf '\"';",
        "lines": [
          "Buffer.add_char buf '\\t';",
          "loop (i + 2)",
          "| 'r' ->",
          "Buffer.add_char buf '\\r';",
          "loop (i + 2)",
          "| '\\\\' ->",
          "Buffer.add_char buf '\\\\';",
          "loop (i + 2)",
          "| '\"' ->",
          "Buffer.add_char buf '\"';"
        ],
        "start_line": 57,
        "end_line": 66,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_utils_modular.ml"
      }
    ],
    "0e798d0e1e9225da80c818c653e4bb06": [
      {
        "hash": "0e798d0e1e9225da80c818c653e4bb06",
        "text": "loop (i + 2)\n| 'r' ->\nBuffer.add_char buf '\\r';\nloop (i + 2)\n| '\\\\' ->\nBuffer.add_char buf '\\\\';\nloop (i + 2)\n| '\"' ->\nBuffer.add_char buf '\"';\nloop (i + 2)",
        "lines": [
          "loop (i + 2)",
          "| 'r' ->",
          "Buffer.add_char buf '\\r';",
          "loop (i + 2)",
          "| '\\\\' ->",
          "Buffer.add_char buf '\\\\';",
          "loop (i + 2)",
          "| '\"' ->",
          "Buffer.add_char buf '\"';",
          "loop (i + 2)"
        ],
        "start_line": 56,
        "end_line": 65,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_utils.ml"
      },
      {
        "hash": "0e798d0e1e9225da80c818c653e4bb06",
        "text": "loop (i + 2)\n| 'r' ->\nBuffer.add_char buf '\\r';\nloop (i + 2)\n| '\\\\' ->\nBuffer.add_char buf '\\\\';\nloop (i + 2)\n| '\"' ->\nBuffer.add_char buf '\"';\nloop (i + 2)",
        "lines": [
          "loop (i + 2)",
          "| 'r' ->",
          "Buffer.add_char buf '\\r';",
          "loop (i + 2)",
          "| '\\\\' ->",
          "Buffer.add_char buf '\\\\';",
          "loop (i + 2)",
          "| '\"' ->",
          "Buffer.add_char buf '\"';",
          "loop (i + 2)"
        ],
        "start_line": 58,
        "end_line": 67,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_utils_modular.ml"
      }
    ],
    "0ad48ffd8328e3aa36a8a78b1d0aee6e": [
      {
        "hash": "0ad48ffd8328e3aa36a8a78b1d0aee6e",
        "text": "| 'r' ->\nBuffer.add_char buf '\\r';\nloop (i + 2)\n| '\\\\' ->\nBuffer.add_char buf '\\\\';\nloop (i + 2)\n| '\"' ->\nBuffer.add_char buf '\"';\nloop (i + 2)\n| '\\'' ->",
        "lines": [
          "| 'r' ->",
          "Buffer.add_char buf '\\r';",
          "loop (i + 2)",
          "| '\\\\' ->",
          "Buffer.add_char buf '\\\\';",
          "loop (i + 2)",
          "| '\"' ->",
          "Buffer.add_char buf '\"';",
          "loop (i + 2)",
          "| '\\'' ->"
        ],
        "start_line": 57,
        "end_line": 66,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_utils.ml"
      },
      {
        "hash": "0ad48ffd8328e3aa36a8a78b1d0aee6e",
        "text": "| 'r' ->\nBuffer.add_char buf '\\r';\nloop (i + 2)\n| '\\\\' ->\nBuffer.add_char buf '\\\\';\nloop (i + 2)\n| '\"' ->\nBuffer.add_char buf '\"';\nloop (i + 2)\n| '\\'' ->",
        "lines": [
          "| 'r' ->",
          "Buffer.add_char buf '\\r';",
          "loop (i + 2)",
          "| '\\\\' ->",
          "Buffer.add_char buf '\\\\';",
          "loop (i + 2)",
          "| '\"' ->",
          "Buffer.add_char buf '\"';",
          "loop (i + 2)",
          "| '\\'' ->"
        ],
        "start_line": 59,
        "end_line": 68,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_utils_modular.ml"
      }
    ],
    "505eeeac1753acd2490d5f1f40b17b33": [
      {
        "hash": "505eeeac1753acd2490d5f1f40b17b33",
        "text": "Buffer.add_char buf '\\r';\nloop (i + 2)\n| '\\\\' ->\nBuffer.add_char buf '\\\\';\nloop (i + 2)\n| '\"' ->\nBuffer.add_char buf '\"';\nloop (i + 2)\n| '\\'' ->\nBuffer.add_char buf '\\'';",
        "lines": [
          "Buffer.add_char buf '\\r';",
          "loop (i + 2)",
          "| '\\\\' ->",
          "Buffer.add_char buf '\\\\';",
          "loop (i + 2)",
          "| '\"' ->",
          "Buffer.add_char buf '\"';",
          "loop (i + 2)",
          "| '\\'' ->",
          "Buffer.add_char buf '\\'';"
        ],
        "start_line": 58,
        "end_line": 67,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_utils.ml"
      },
      {
        "hash": "505eeeac1753acd2490d5f1f40b17b33",
        "text": "Buffer.add_char buf '\\r';\nloop (i + 2)\n| '\\\\' ->\nBuffer.add_char buf '\\\\';\nloop (i + 2)\n| '\"' ->\nBuffer.add_char buf '\"';\nloop (i + 2)\n| '\\'' ->\nBuffer.add_char buf '\\'';",
        "lines": [
          "Buffer.add_char buf '\\r';",
          "loop (i + 2)",
          "| '\\\\' ->",
          "Buffer.add_char buf '\\\\';",
          "loop (i + 2)",
          "| '\"' ->",
          "Buffer.add_char buf '\"';",
          "loop (i + 2)",
          "| '\\'' ->",
          "Buffer.add_char buf '\\'';"
        ],
        "start_line": 60,
        "end_line": 69,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_utils_modular.ml"
      }
    ],
    "e2b8ce9842a66b31cfbd0460d945664e": [
      {
        "hash": "e2b8ce9842a66b31cfbd0460d945664e",
        "text": "loop (i + 2)\n| '\\\\' ->\nBuffer.add_char buf '\\\\';\nloop (i + 2)\n| '\"' ->\nBuffer.add_char buf '\"';\nloop (i + 2)\n| '\\'' ->\nBuffer.add_char buf '\\'';\nloop (i + 2)",
        "lines": [
          "loop (i + 2)",
          "| '\\\\' ->",
          "Buffer.add_char buf '\\\\';",
          "loop (i + 2)",
          "| '\"' ->",
          "Buffer.add_char buf '\"';",
          "loop (i + 2)",
          "| '\\'' ->",
          "Buffer.add_char buf '\\'';",
          "loop (i + 2)"
        ],
        "start_line": 59,
        "end_line": 68,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_utils.ml"
      },
      {
        "hash": "e2b8ce9842a66b31cfbd0460d945664e",
        "text": "loop (i + 2)\n| '\\\\' ->\nBuffer.add_char buf '\\\\';\nloop (i + 2)\n| '\"' ->\nBuffer.add_char buf '\"';\nloop (i + 2)\n| '\\'' ->\nBuffer.add_char buf '\\'';\nloop (i + 2)",
        "lines": [
          "loop (i + 2)",
          "| '\\\\' ->",
          "Buffer.add_char buf '\\\\';",
          "loop (i + 2)",
          "| '\"' ->",
          "Buffer.add_char buf '\"';",
          "loop (i + 2)",
          "| '\\'' ->",
          "Buffer.add_char buf '\\'';",
          "loop (i + 2)"
        ],
        "start_line": 61,
        "end_line": 70,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_utils_modular.ml"
      }
    ],
    "ec7a68f2ffb5537d630229ca8bf5fcaa": [
      {
        "hash": "ec7a68f2ffb5537d630229ca8bf5fcaa",
        "text": "| '\\\\' ->\nBuffer.add_char buf '\\\\';\nloop (i + 2)\n| '\"' ->\nBuffer.add_char buf '\"';\nloop (i + 2)\n| '\\'' ->\nBuffer.add_char buf '\\'';\nloop (i + 2)\n| c ->",
        "lines": [
          "| '\\\\' ->",
          "Buffer.add_char buf '\\\\';",
          "loop (i + 2)",
          "| '\"' ->",
          "Buffer.add_char buf '\"';",
          "loop (i + 2)",
          "| '\\'' ->",
          "Buffer.add_char buf '\\'';",
          "loop (i + 2)",
          "| c ->"
        ],
        "start_line": 60,
        "end_line": 69,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_utils.ml"
      },
      {
        "hash": "ec7a68f2ffb5537d630229ca8bf5fcaa",
        "text": "| '\\\\' ->\nBuffer.add_char buf '\\\\';\nloop (i + 2)\n| '\"' ->\nBuffer.add_char buf '\"';\nloop (i + 2)\n| '\\'' ->\nBuffer.add_char buf '\\'';\nloop (i + 2)\n| c ->",
        "lines": [
          "| '\\\\' ->",
          "Buffer.add_char buf '\\\\';",
          "loop (i + 2)",
          "| '\"' ->",
          "Buffer.add_char buf '\"';",
          "loop (i + 2)",
          "| '\\'' ->",
          "Buffer.add_char buf '\\'';",
          "loop (i + 2)",
          "| c ->"
        ],
        "start_line": 62,
        "end_line": 71,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_utils_modular.ml"
      }
    ],
    "6b87ee9bf59f644d48d306efac6b4e43": [
      {
        "hash": "6b87ee9bf59f644d48d306efac6b4e43",
        "text": "Buffer.add_char buf '\\\\';\nloop (i + 2)\n| '\"' ->\nBuffer.add_char buf '\"';\nloop (i + 2)\n| '\\'' ->\nBuffer.add_char buf '\\'';\nloop (i + 2)\n| c ->\nBuffer.add_char buf '\\\\';",
        "lines": [
          "Buffer.add_char buf '\\\\';",
          "loop (i + 2)",
          "| '\"' ->",
          "Buffer.add_char buf '\"';",
          "loop (i + 2)",
          "| '\\'' ->",
          "Buffer.add_char buf '\\'';",
          "loop (i + 2)",
          "| c ->",
          "Buffer.add_char buf '\\\\';"
        ],
        "start_line": 61,
        "end_line": 70,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_utils.ml"
      },
      {
        "hash": "6b87ee9bf59f644d48d306efac6b4e43",
        "text": "Buffer.add_char buf '\\\\';\nloop (i + 2)\n| '\"' ->\nBuffer.add_char buf '\"';\nloop (i + 2)\n| '\\'' ->\nBuffer.add_char buf '\\'';\nloop (i + 2)\n| c ->\nBuffer.add_char buf '\\\\';",
        "lines": [
          "Buffer.add_char buf '\\\\';",
          "loop (i + 2)",
          "| '\"' ->",
          "Buffer.add_char buf '\"';",
          "loop (i + 2)",
          "| '\\'' ->",
          "Buffer.add_char buf '\\'';",
          "loop (i + 2)",
          "| c ->",
          "Buffer.add_char buf '\\\\';"
        ],
        "start_line": 63,
        "end_line": 72,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_utils_modular.ml"
      }
    ],
    "1c8c280b24800b60dc4d2e827c26ed94": [
      {
        "hash": "1c8c280b24800b60dc4d2e827c26ed94",
        "text": "loop (i + 2)\n| '\"' ->\nBuffer.add_char buf '\"';\nloop (i + 2)\n| '\\'' ->\nBuffer.add_char buf '\\'';\nloop (i + 2)\n| c ->\nBuffer.add_char buf '\\\\';\nBuffer.add_char buf c;",
        "lines": [
          "loop (i + 2)",
          "| '\"' ->",
          "Buffer.add_char buf '\"';",
          "loop (i + 2)",
          "| '\\'' ->",
          "Buffer.add_char buf '\\'';",
          "loop (i + 2)",
          "| c ->",
          "Buffer.add_char buf '\\\\';",
          "Buffer.add_char buf c;"
        ],
        "start_line": 62,
        "end_line": 71,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_utils.ml"
      },
      {
        "hash": "1c8c280b24800b60dc4d2e827c26ed94",
        "text": "loop (i + 2)\n| '\"' ->\nBuffer.add_char buf '\"';\nloop (i + 2)\n| '\\'' ->\nBuffer.add_char buf '\\'';\nloop (i + 2)\n| c ->\nBuffer.add_char buf '\\\\';\nBuffer.add_char buf c;",
        "lines": [
          "loop (i + 2)",
          "| '\"' ->",
          "Buffer.add_char buf '\"';",
          "loop (i + 2)",
          "| '\\'' ->",
          "Buffer.add_char buf '\\'';",
          "loop (i + 2)",
          "| c ->",
          "Buffer.add_char buf '\\\\';",
          "Buffer.add_char buf c;"
        ],
        "start_line": 64,
        "end_line": 73,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_utils_modular.ml"
      }
    ],
    "ed93e3d47f5e6705ba31a640360dff05": [
      {
        "hash": "ed93e3d47f5e6705ba31a640360dff05",
        "text": "| '\"' ->\nBuffer.add_char buf '\"';\nloop (i + 2)\n| '\\'' ->\nBuffer.add_char buf '\\'';\nloop (i + 2)\n| c ->\nBuffer.add_char buf '\\\\';\nBuffer.add_char buf c;\nloop (i + 2))",
        "lines": [
          "| '\"' ->",
          "Buffer.add_char buf '\"';",
          "loop (i + 2)",
          "| '\\'' ->",
          "Buffer.add_char buf '\\'';",
          "loop (i + 2)",
          "| c ->",
          "Buffer.add_char buf '\\\\';",
          "Buffer.add_char buf c;",
          "loop (i + 2))"
        ],
        "start_line": 63,
        "end_line": 72,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_utils.ml"
      },
      {
        "hash": "ed93e3d47f5e6705ba31a640360dff05",
        "text": "| '\"' ->\nBuffer.add_char buf '\"';\nloop (i + 2)\n| '\\'' ->\nBuffer.add_char buf '\\'';\nloop (i + 2)\n| c ->\nBuffer.add_char buf '\\\\';\nBuffer.add_char buf c;\nloop (i + 2))",
        "lines": [
          "| '\"' ->",
          "Buffer.add_char buf '\"';",
          "loop (i + 2)",
          "| '\\'' ->",
          "Buffer.add_char buf '\\'';",
          "loop (i + 2)",
          "| c ->",
          "Buffer.add_char buf '\\\\';",
          "Buffer.add_char buf c;",
          "loop (i + 2))"
        ],
        "start_line": 65,
        "end_line": 74,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_utils_modular.ml"
      }
    ],
    "54a424c64b0104057d28e7285bf2155e": [
      {
        "hash": "54a424c64b0104057d28e7285bf2155e",
        "text": "Buffer.add_char buf '\"';\nloop (i + 2)\n| '\\'' ->\nBuffer.add_char buf '\\'';\nloop (i + 2)\n| c ->\nBuffer.add_char buf '\\\\';\nBuffer.add_char buf c;\nloop (i + 2))\nelse (",
        "lines": [
          "Buffer.add_char buf '\"';",
          "loop (i + 2)",
          "| '\\'' ->",
          "Buffer.add_char buf '\\'';",
          "loop (i + 2)",
          "| c ->",
          "Buffer.add_char buf '\\\\';",
          "Buffer.add_char buf c;",
          "loop (i + 2))",
          "else ("
        ],
        "start_line": 64,
        "end_line": 73,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_utils.ml"
      },
      {
        "hash": "54a424c64b0104057d28e7285bf2155e",
        "text": "Buffer.add_char buf '\"';\nloop (i + 2)\n| '\\'' ->\nBuffer.add_char buf '\\'';\nloop (i + 2)\n| c ->\nBuffer.add_char buf '\\\\';\nBuffer.add_char buf c;\nloop (i + 2))\nelse (",
        "lines": [
          "Buffer.add_char buf '\"';",
          "loop (i + 2)",
          "| '\\'' ->",
          "Buffer.add_char buf '\\'';",
          "loop (i + 2)",
          "| c ->",
          "Buffer.add_char buf '\\\\';",
          "Buffer.add_char buf c;",
          "loop (i + 2))",
          "else ("
        ],
        "start_line": 66,
        "end_line": 75,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_utils_modular.ml"
      }
    ],
    "72aea05f4c880cf669901fb30e2bd9b6": [
      {
        "hash": "72aea05f4c880cf669901fb30e2bd9b6",
        "text": "loop (i + 2)\n| '\\'' ->\nBuffer.add_char buf '\\'';\nloop (i + 2)\n| c ->\nBuffer.add_char buf '\\\\';\nBuffer.add_char buf c;\nloop (i + 2))\nelse (\nBuffer.add_char buf str.[i];",
        "lines": [
          "loop (i + 2)",
          "| '\\'' ->",
          "Buffer.add_char buf '\\'';",
          "loop (i + 2)",
          "| c ->",
          "Buffer.add_char buf '\\\\';",
          "Buffer.add_char buf c;",
          "loop (i + 2))",
          "else (",
          "Buffer.add_char buf str.[i];"
        ],
        "start_line": 65,
        "end_line": 74,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_utils.ml"
      },
      {
        "hash": "72aea05f4c880cf669901fb30e2bd9b6",
        "text": "loop (i + 2)\n| '\\'' ->\nBuffer.add_char buf '\\'';\nloop (i + 2)\n| c ->\nBuffer.add_char buf '\\\\';\nBuffer.add_char buf c;\nloop (i + 2))\nelse (\nBuffer.add_char buf str.[i];",
        "lines": [
          "loop (i + 2)",
          "| '\\'' ->",
          "Buffer.add_char buf '\\'';",
          "loop (i + 2)",
          "| c ->",
          "Buffer.add_char buf '\\\\';",
          "Buffer.add_char buf c;",
          "loop (i + 2))",
          "else (",
          "Buffer.add_char buf str.[i];"
        ],
        "start_line": 67,
        "end_line": 76,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_utils_modular.ml"
      }
    ],
    "284723e43085bea8989d2bcbd1cb8029": [
      {
        "hash": "284723e43085bea8989d2bcbd1cb8029",
        "text": "| '\\'' ->\nBuffer.add_char buf '\\'';\nloop (i + 2)\n| c ->\nBuffer.add_char buf '\\\\';\nBuffer.add_char buf c;\nloop (i + 2))\nelse (\nBuffer.add_char buf str.[i];\nloop (i + 1))",
        "lines": [
          "| '\\'' ->",
          "Buffer.add_char buf '\\'';",
          "loop (i + 2)",
          "| c ->",
          "Buffer.add_char buf '\\\\';",
          "Buffer.add_char buf c;",
          "loop (i + 2))",
          "else (",
          "Buffer.add_char buf str.[i];",
          "loop (i + 1))"
        ],
        "start_line": 66,
        "end_line": 75,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_utils.ml"
      },
      {
        "hash": "284723e43085bea8989d2bcbd1cb8029",
        "text": "| '\\'' ->\nBuffer.add_char buf '\\'';\nloop (i + 2)\n| c ->\nBuffer.add_char buf '\\\\';\nBuffer.add_char buf c;\nloop (i + 2))\nelse (\nBuffer.add_char buf str.[i];\nloop (i + 1))",
        "lines": [
          "| '\\'' ->",
          "Buffer.add_char buf '\\'';",
          "loop (i + 2)",
          "| c ->",
          "Buffer.add_char buf '\\\\';",
          "Buffer.add_char buf c;",
          "loop (i + 2))",
          "else (",
          "Buffer.add_char buf str.[i];",
          "loop (i + 1))"
        ],
        "start_line": 68,
        "end_line": 77,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_utils_modular.ml"
      }
    ],
    "139395d149aa211e5a62908aae31eced": [
      {
        "hash": "139395d149aa211e5a62908aae31eced",
        "text": "Buffer.add_char buf '\\'';\nloop (i + 2)\n| c ->\nBuffer.add_char buf '\\\\';\nBuffer.add_char buf c;\nloop (i + 2))\nelse (\nBuffer.add_char buf str.[i];\nloop (i + 1))\nin",
        "lines": [
          "Buffer.add_char buf '\\'';",
          "loop (i + 2)",
          "| c ->",
          "Buffer.add_char buf '\\\\';",
          "Buffer.add_char buf c;",
          "loop (i + 2))",
          "else (",
          "Buffer.add_char buf str.[i];",
          "loop (i + 1))",
          "in"
        ],
        "start_line": 67,
        "end_line": 76,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_utils.ml"
      },
      {
        "hash": "139395d149aa211e5a62908aae31eced",
        "text": "Buffer.add_char buf '\\'';\nloop (i + 2)\n| c ->\nBuffer.add_char buf '\\\\';\nBuffer.add_char buf c;\nloop (i + 2))\nelse (\nBuffer.add_char buf str.[i];\nloop (i + 1))\nin",
        "lines": [
          "Buffer.add_char buf '\\'';",
          "loop (i + 2)",
          "| c ->",
          "Buffer.add_char buf '\\\\';",
          "Buffer.add_char buf c;",
          "loop (i + 2))",
          "else (",
          "Buffer.add_char buf str.[i];",
          "loop (i + 1))",
          "in"
        ],
        "start_line": 69,
        "end_line": 78,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_utils_modular.ml"
      }
    ],
    "f878edcae515e7fd61791b2bb0149d2d": [
      {
        "hash": "f878edcae515e7fd61791b2bb0149d2d",
        "text": "loop (i + 2)\n| c ->\nBuffer.add_char buf '\\\\';\nBuffer.add_char buf c;\nloop (i + 2))\nelse (\nBuffer.add_char buf str.[i];\nloop (i + 1))\nin\nloop 0",
        "lines": [
          "loop (i + 2)",
          "| c ->",
          "Buffer.add_char buf '\\\\';",
          "Buffer.add_char buf c;",
          "loop (i + 2))",
          "else (",
          "Buffer.add_char buf str.[i];",
          "loop (i + 1))",
          "in",
          "loop 0"
        ],
        "start_line": 68,
        "end_line": 77,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_utils.ml"
      },
      {
        "hash": "f878edcae515e7fd61791b2bb0149d2d",
        "text": "loop (i + 2)\n| c ->\nBuffer.add_char buf '\\\\';\nBuffer.add_char buf c;\nloop (i + 2))\nelse (\nBuffer.add_char buf str.[i];\nloop (i + 1))\nin\nloop 0",
        "lines": [
          "loop (i + 2)",
          "| c ->",
          "Buffer.add_char buf '\\\\';",
          "Buffer.add_char buf c;",
          "loop (i + 2))",
          "else (",
          "Buffer.add_char buf str.[i];",
          "loop (i + 1))",
          "in",
          "loop 0"
        ],
        "start_line": 70,
        "end_line": 79,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_utils_modular.ml"
      }
    ],
    "82eba78f42519dea3f736ad6e04349ed": [
      {
        "hash": "82eba78f42519dea3f736ad6e04349ed",
        "text": "| c ->\nBuffer.add_char buf '\\\\';\nBuffer.add_char buf c;\nloop (i + 2))\nelse (\nBuffer.add_char buf str.[i];\nloop (i + 1))\nin\nloop 0",
        "lines": [
          "| c ->",
          "Buffer.add_char buf '\\\\';",
          "Buffer.add_char buf c;",
          "loop (i + 2))",
          "else (",
          "Buffer.add_char buf str.[i];",
          "loop (i + 1))",
          "in",
          "loop 0"
        ],
        "start_line": 69,
        "end_line": 77,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_utils.ml"
      },
      {
        "hash": "82eba78f42519dea3f736ad6e04349ed",
        "text": "| c ->\nBuffer.add_char buf '\\\\';\nBuffer.add_char buf c;\nloop (i + 2))\nelse (\nBuffer.add_char buf str.[i];\nloop (i + 1))\nin\nloop 0",
        "lines": [
          "| c ->",
          "Buffer.add_char buf '\\\\';",
          "Buffer.add_char buf c;",
          "loop (i + 2))",
          "else (",
          "Buffer.add_char buf str.[i];",
          "loop (i + 1))",
          "in",
          "loop 0"
        ],
        "start_line": 71,
        "end_line": 79,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_utils_modular.ml"
      }
    ],
    "a4341de6ab52f2cf8cf9977a4a973cba": [
      {
        "hash": "a4341de6ab52f2cf8cf9977a4a973cba",
        "text": "Buffer.add_char buf '\\\\';\nBuffer.add_char buf c;\nloop (i + 2))\nelse (\nBuffer.add_char buf str.[i];\nloop (i + 1))\nin\nloop 0",
        "lines": [
          "Buffer.add_char buf '\\\\';",
          "Buffer.add_char buf c;",
          "loop (i + 2))",
          "else (",
          "Buffer.add_char buf str.[i];",
          "loop (i + 1))",
          "in",
          "loop 0"
        ],
        "start_line": 70,
        "end_line": 77,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_utils.ml"
      },
      {
        "hash": "a4341de6ab52f2cf8cf9977a4a973cba",
        "text": "Buffer.add_char buf '\\\\';\nBuffer.add_char buf c;\nloop (i + 2))\nelse (\nBuffer.add_char buf str.[i];\nloop (i + 1))\nin\nloop 0",
        "lines": [
          "Buffer.add_char buf '\\\\';",
          "Buffer.add_char buf c;",
          "loop (i + 2))",
          "else (",
          "Buffer.add_char buf str.[i];",
          "loop (i + 1))",
          "in",
          "loop 0"
        ],
        "start_line": 72,
        "end_line": 79,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_utils_modular.ml"
      }
    ],
    "f6a71e925b07513781fd4ee750f0f6d0": [
      {
        "hash": "f6a71e925b07513781fd4ee750f0f6d0",
        "text": "Buffer.add_char buf c;\nloop (i + 2))\nelse (\nBuffer.add_char buf str.[i];\nloop (i + 1))\nin\nloop 0",
        "lines": [
          "Buffer.add_char buf c;",
          "loop (i + 2))",
          "else (",
          "Buffer.add_char buf str.[i];",
          "loop (i + 1))",
          "in",
          "loop 0"
        ],
        "start_line": 71,
        "end_line": 77,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_utils.ml"
      },
      {
        "hash": "f6a71e925b07513781fd4ee750f0f6d0",
        "text": "Buffer.add_char buf c;\nloop (i + 2))\nelse (\nBuffer.add_char buf str.[i];\nloop (i + 1))\nin\nloop 0",
        "lines": [
          "Buffer.add_char buf c;",
          "loop (i + 2))",
          "else (",
          "Buffer.add_char buf str.[i];",
          "loop (i + 1))",
          "in",
          "loop 0"
        ],
        "start_line": 73,
        "end_line": 79,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_utils_modular.ml"
      }
    ],
    "e53d1e7028cd35610c3d410c5004aaae": [
      {
        "hash": "e53d1e7028cd35610c3d410c5004aaae",
        "text": "loop (i + 2))\nelse (\nBuffer.add_char buf str.[i];\nloop (i + 1))\nin\nloop 0",
        "lines": [
          "loop (i + 2))",
          "else (",
          "Buffer.add_char buf str.[i];",
          "loop (i + 1))",
          "in",
          "loop 0"
        ],
        "start_line": 72,
        "end_line": 77,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_utils.ml"
      },
      {
        "hash": "e53d1e7028cd35610c3d410c5004aaae",
        "text": "loop (i + 2))\nelse (\nBuffer.add_char buf str.[i];\nloop (i + 1))\nin\nloop 0",
        "lines": [
          "loop (i + 2))",
          "else (",
          "Buffer.add_char buf str.[i];",
          "loop (i + 1))",
          "in",
          "loop 0"
        ],
        "start_line": 74,
        "end_line": 79,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_utils_modular.ml"
      }
    ],
    "bad864757037e5c6cd4fb99b9b2b545a": [
      {
        "hash": "bad864757037e5c6cd4fb99b9b2b545a",
        "text": "else (\nBuffer.add_char buf str.[i];\nloop (i + 1))\nin\nloop 0",
        "lines": [
          "else (",
          "Buffer.add_char buf str.[i];",
          "loop (i + 1))",
          "in",
          "loop 0"
        ],
        "start_line": 73,
        "end_line": 77,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_utils.ml"
      },
      {
        "hash": "bad864757037e5c6cd4fb99b9b2b545a",
        "text": "else (\nBuffer.add_char buf str.[i];\nloop (i + 1))\nin\nloop 0",
        "lines": [
          "else (",
          "Buffer.add_char buf str.[i];",
          "loop (i + 1))",
          "in",
          "loop 0"
        ],
        "start_line": 75,
        "end_line": 79,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_utils_modular.ml"
      }
    ],
    "a6fe294a704312663baf007b42e12c85": [
      {
        "hash": "a6fe294a704312663baf007b42e12c85",
        "text": "Buffer.add_char buf str.[i];\nloop (i + 1))\nin\nloop 0",
        "lines": [
          "Buffer.add_char buf str.[i];",
          "loop (i + 1))",
          "in",
          "loop 0"
        ],
        "start_line": 74,
        "end_line": 77,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_utils.ml"
      },
      {
        "hash": "a6fe294a704312663baf007b42e12c85",
        "text": "Buffer.add_char buf str.[i];\nloop (i + 1))\nin\nloop 0",
        "lines": [
          "Buffer.add_char buf str.[i];",
          "loop (i + 1))",
          "in",
          "loop 0"
        ],
        "start_line": 76,
        "end_line": 79,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_utils_modular.ml"
      }
    ],
    "00deb3358addb5da7adad647f0a5ec06": [
      {
        "hash": "00deb3358addb5da7adad647f0a5ec06",
        "text": "loop (i + 1))\nin\nloop 0",
        "lines": [
          "loop (i + 1))",
          "in",
          "loop 0"
        ],
        "start_line": 75,
        "end_line": 77,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_utils.ml"
      },
      {
        "hash": "00deb3358addb5da7adad647f0a5ec06",
        "text": "loop (i + 1))\nin\nloop 0",
        "lines": [
          "loop (i + 1))",
          "in",
          "loop 0"
        ],
        "start_line": 77,
        "end_line": 79,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_utils_modular.ml"
      }
    ],
    "0327e1fd49a68eca062419bb9fc078de": [
      {
        "hash": "0327e1fd49a68eca062419bb9fc078de",
        "text": "let convert_fullwidth_number_sequence sequence =\nlet rec loop pos acc =\nif pos >= String.length sequence then acc\nelse if pos + 2 < String.length sequence then\nlet ch = String.sub sequence pos 3 in\nmatch Utf8_utils.FullwidthDetection.fullwidth_digit_to_int ch with\n| Some digit -> loop (pos + 3) ((acc * 10) + digit)\n| None -> acc\nelse acc\nin",
        "lines": [
          "let convert_fullwidth_number_sequence sequence =",
          "let rec loop pos acc =",
          "if pos >= String.length sequence then acc",
          "else if pos + 2 < String.length sequence then",
          "let ch = String.sub sequence pos 3 in",
          "match Utf8_utils.FullwidthDetection.fullwidth_digit_to_int ch with",
          "| Some digit -> loop (pos + 3) ((acc * 10) + digit)",
          "| None -> acc",
          "else acc",
          "in"
        ],
        "start_line": 102,
        "end_line": 111,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_utils.ml"
      },
      {
        "hash": "0327e1fd49a68eca062419bb9fc078de",
        "text": "let convert_fullwidth_number_sequence sequence =\nlet rec loop pos acc =\nif pos >= String.length sequence then acc\nelse if pos + 2 < String.length sequence then\nlet ch = String.sub sequence pos 3 in\nmatch Utf8_utils.FullwidthDetection.fullwidth_digit_to_int ch with\n| Some digit -> loop (pos + 3) ((acc * 10) + digit)\n| None -> acc\nelse acc\nin",
        "lines": [
          "let convert_fullwidth_number_sequence sequence =",
          "let rec loop pos acc =",
          "if pos >= String.length sequence then acc",
          "else if pos + 2 < String.length sequence then",
          "let ch = String.sub sequence pos 3 in",
          "match Utf8_utils.FullwidthDetection.fullwidth_digit_to_int ch with",
          "| Some digit -> loop (pos + 3) ((acc * 10) + digit)",
          "| None -> acc",
          "else acc",
          "in"
        ],
        "start_line": 104,
        "end_line": 113,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_utils_modular.ml"
      }
    ],
    "f51f6f3659d698dba1d346316c6c06b9": [
      {
        "hash": "f51f6f3659d698dba1d346316c6c06b9",
        "text": "let rec loop pos acc =\nif pos >= String.length sequence then acc\nelse if pos + 2 < String.length sequence then\nlet ch = String.sub sequence pos 3 in\nmatch Utf8_utils.FullwidthDetection.fullwidth_digit_to_int ch with\n| Some digit -> loop (pos + 3) ((acc * 10) + digit)\n| None -> acc\nelse acc\nin\nlet int_val = loop 0 0 in",
        "lines": [
          "let rec loop pos acc =",
          "if pos >= String.length sequence then acc",
          "else if pos + 2 < String.length sequence then",
          "let ch = String.sub sequence pos 3 in",
          "match Utf8_utils.FullwidthDetection.fullwidth_digit_to_int ch with",
          "| Some digit -> loop (pos + 3) ((acc * 10) + digit)",
          "| None -> acc",
          "else acc",
          "in",
          "let int_val = loop 0 0 in"
        ],
        "start_line": 103,
        "end_line": 112,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_utils.ml"
      },
      {
        "hash": "f51f6f3659d698dba1d346316c6c06b9",
        "text": "let rec loop pos acc =\nif pos >= String.length sequence then acc\nelse if pos + 2 < String.length sequence then\nlet ch = String.sub sequence pos 3 in\nmatch Utf8_utils.FullwidthDetection.fullwidth_digit_to_int ch with\n| Some digit -> loop (pos + 3) ((acc * 10) + digit)\n| None -> acc\nelse acc\nin\nlet int_val = loop 0 0 in",
        "lines": [
          "let rec loop pos acc =",
          "if pos >= String.length sequence then acc",
          "else if pos + 2 < String.length sequence then",
          "let ch = String.sub sequence pos 3 in",
          "match Utf8_utils.FullwidthDetection.fullwidth_digit_to_int ch with",
          "| Some digit -> loop (pos + 3) ((acc * 10) + digit)",
          "| None -> acc",
          "else acc",
          "in",
          "let int_val = loop 0 0 in"
        ],
        "start_line": 105,
        "end_line": 114,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_utils_modular.ml"
      }
    ],
    "17abf4c566565b1b189cca2d7dc5d4d0": [
      {
        "hash": "17abf4c566565b1b189cca2d7dc5d4d0",
        "text": "if pos >= String.length sequence then acc\nelse if pos + 2 < String.length sequence then\nlet ch = String.sub sequence pos 3 in\nmatch Utf8_utils.FullwidthDetection.fullwidth_digit_to_int ch with\n| Some digit -> loop (pos + 3) ((acc * 10) + digit)\n| None -> acc\nelse acc\nin\nlet int_val = loop 0 0 in\nLexer_tokens.IntToken int_val",
        "lines": [
          "if pos >= String.length sequence then acc",
          "else if pos + 2 < String.length sequence then",
          "let ch = String.sub sequence pos 3 in",
          "match Utf8_utils.FullwidthDetection.fullwidth_digit_to_int ch with",
          "| Some digit -> loop (pos + 3) ((acc * 10) + digit)",
          "| None -> acc",
          "else acc",
          "in",
          "let int_val = loop 0 0 in",
          "Lexer_tokens.IntToken int_val"
        ],
        "start_line": 104,
        "end_line": 113,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_utils.ml"
      },
      {
        "hash": "17abf4c566565b1b189cca2d7dc5d4d0",
        "text": "if pos >= String.length sequence then acc\nelse if pos + 2 < String.length sequence then\nlet ch = String.sub sequence pos 3 in\nmatch Utf8_utils.FullwidthDetection.fullwidth_digit_to_int ch with\n| Some digit -> loop (pos + 3) ((acc * 10) + digit)\n| None -> acc\nelse acc\nin\nlet int_val = loop 0 0 in\nLexer_tokens.IntToken int_val",
        "lines": [
          "if pos >= String.length sequence then acc",
          "else if pos + 2 < String.length sequence then",
          "let ch = String.sub sequence pos 3 in",
          "match Utf8_utils.FullwidthDetection.fullwidth_digit_to_int ch with",
          "| Some digit -> loop (pos + 3) ((acc * 10) + digit)",
          "| None -> acc",
          "else acc",
          "in",
          "let int_val = loop 0 0 in",
          "Lexer_tokens.IntToken int_val"
        ],
        "start_line": 106,
        "end_line": 115,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_utils_modular.ml"
      }
    ],
    "13652588c16dad3db6881123b86267d9": [
      {
        "hash": "13652588c16dad3db6881123b86267d9",
        "text": "else if pos + 2 < String.length sequence then\nlet ch = String.sub sequence pos 3 in\nmatch Utf8_utils.FullwidthDetection.fullwidth_digit_to_int ch with\n| Some digit -> loop (pos + 3) ((acc * 10) + digit)\n| None -> acc\nelse acc\nin\nlet int_val = loop 0 0 in\nLexer_tokens.IntToken int_val",
        "lines": [
          "else if pos + 2 < String.length sequence then",
          "let ch = String.sub sequence pos 3 in",
          "match Utf8_utils.FullwidthDetection.fullwidth_digit_to_int ch with",
          "| Some digit -> loop (pos + 3) ((acc * 10) + digit)",
          "| None -> acc",
          "else acc",
          "in",
          "let int_val = loop 0 0 in",
          "Lexer_tokens.IntToken int_val"
        ],
        "start_line": 105,
        "end_line": 113,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_utils.ml"
      },
      {
        "hash": "13652588c16dad3db6881123b86267d9",
        "text": "else if pos + 2 < String.length sequence then\nlet ch = String.sub sequence pos 3 in\nmatch Utf8_utils.FullwidthDetection.fullwidth_digit_to_int ch with\n| Some digit -> loop (pos + 3) ((acc * 10) + digit)\n| None -> acc\nelse acc\nin\nlet int_val = loop 0 0 in\nLexer_tokens.IntToken int_val",
        "lines": [
          "else if pos + 2 < String.length sequence then",
          "let ch = String.sub sequence pos 3 in",
          "match Utf8_utils.FullwidthDetection.fullwidth_digit_to_int ch with",
          "| Some digit -> loop (pos + 3) ((acc * 10) + digit)",
          "| None -> acc",
          "else acc",
          "in",
          "let int_val = loop 0 0 in",
          "Lexer_tokens.IntToken int_val"
        ],
        "start_line": 107,
        "end_line": 115,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_utils_modular.ml"
      }
    ],
    "3197614fe910e6dccdc7d326f3c43f08": [
      {
        "hash": "3197614fe910e6dccdc7d326f3c43f08",
        "text": "let ch = String.sub sequence pos 3 in\nmatch Utf8_utils.FullwidthDetection.fullwidth_digit_to_int ch with\n| Some digit -> loop (pos + 3) ((acc * 10) + digit)\n| None -> acc\nelse acc\nin\nlet int_val = loop 0 0 in\nLexer_tokens.IntToken int_val",
        "lines": [
          "let ch = String.sub sequence pos 3 in",
          "match Utf8_utils.FullwidthDetection.fullwidth_digit_to_int ch with",
          "| Some digit -> loop (pos + 3) ((acc * 10) + digit)",
          "| None -> acc",
          "else acc",
          "in",
          "let int_val = loop 0 0 in",
          "Lexer_tokens.IntToken int_val"
        ],
        "start_line": 106,
        "end_line": 113,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_utils.ml"
      },
      {
        "hash": "3197614fe910e6dccdc7d326f3c43f08",
        "text": "let ch = String.sub sequence pos 3 in\nmatch Utf8_utils.FullwidthDetection.fullwidth_digit_to_int ch with\n| Some digit -> loop (pos + 3) ((acc * 10) + digit)\n| None -> acc\nelse acc\nin\nlet int_val = loop 0 0 in\nLexer_tokens.IntToken int_val",
        "lines": [
          "let ch = String.sub sequence pos 3 in",
          "match Utf8_utils.FullwidthDetection.fullwidth_digit_to_int ch with",
          "| Some digit -> loop (pos + 3) ((acc * 10) + digit)",
          "| None -> acc",
          "else acc",
          "in",
          "let int_val = loop 0 0 in",
          "Lexer_tokens.IntToken int_val"
        ],
        "start_line": 108,
        "end_line": 115,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_utils_modular.ml"
      }
    ],
    "5c4ce64116632a6762f9a7eda6bbdd29": [
      {
        "hash": "5c4ce64116632a6762f9a7eda6bbdd29",
        "text": "match Utf8_utils.FullwidthDetection.fullwidth_digit_to_int ch with\n| Some digit -> loop (pos + 3) ((acc * 10) + digit)\n| None -> acc\nelse acc\nin\nlet int_val = loop 0 0 in\nLexer_tokens.IntToken int_val",
        "lines": [
          "match Utf8_utils.FullwidthDetection.fullwidth_digit_to_int ch with",
          "| Some digit -> loop (pos + 3) ((acc * 10) + digit)",
          "| None -> acc",
          "else acc",
          "in",
          "let int_val = loop 0 0 in",
          "Lexer_tokens.IntToken int_val"
        ],
        "start_line": 107,
        "end_line": 113,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_utils.ml"
      },
      {
        "hash": "5c4ce64116632a6762f9a7eda6bbdd29",
        "text": "match Utf8_utils.FullwidthDetection.fullwidth_digit_to_int ch with\n| Some digit -> loop (pos + 3) ((acc * 10) + digit)\n| None -> acc\nelse acc\nin\nlet int_val = loop 0 0 in\nLexer_tokens.IntToken int_val",
        "lines": [
          "match Utf8_utils.FullwidthDetection.fullwidth_digit_to_int ch with",
          "| Some digit -> loop (pos + 3) ((acc * 10) + digit)",
          "| None -> acc",
          "else acc",
          "in",
          "let int_val = loop 0 0 in",
          "Lexer_tokens.IntToken int_val"
        ],
        "start_line": 109,
        "end_line": 115,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_utils_modular.ml"
      }
    ],
    "9b146f08e2e12e6785ce66d1f9a0156c": [
      {
        "hash": "9b146f08e2e12e6785ce66d1f9a0156c",
        "text": "| Some digit -> loop (pos + 3) ((acc * 10) + digit)\n| None -> acc\nelse acc\nin\nlet int_val = loop 0 0 in\nLexer_tokens.IntToken int_val",
        "lines": [
          "| Some digit -> loop (pos + 3) ((acc * 10) + digit)",
          "| None -> acc",
          "else acc",
          "in",
          "let int_val = loop 0 0 in",
          "Lexer_tokens.IntToken int_val"
        ],
        "start_line": 108,
        "end_line": 113,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_utils.ml"
      },
      {
        "hash": "9b146f08e2e12e6785ce66d1f9a0156c",
        "text": "| Some digit -> loop (pos + 3) ((acc * 10) + digit)\n| None -> acc\nelse acc\nin\nlet int_val = loop 0 0 in\nLexer_tokens.IntToken int_val",
        "lines": [
          "| Some digit -> loop (pos + 3) ((acc * 10) + digit)",
          "| None -> acc",
          "else acc",
          "in",
          "let int_val = loop 0 0 in",
          "Lexer_tokens.IntToken int_val"
        ],
        "start_line": 110,
        "end_line": 115,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_utils_modular.ml"
      }
    ],
    "c0c0db8186642cc37f069e5d96bfc9fb": [
      {
        "hash": "c0c0db8186642cc37f069e5d96bfc9fb",
        "text": "| None -> acc\nelse acc\nin\nlet int_val = loop 0 0 in\nLexer_tokens.IntToken int_val",
        "lines": [
          "| None -> acc",
          "else acc",
          "in",
          "let int_val = loop 0 0 in",
          "Lexer_tokens.IntToken int_val"
        ],
        "start_line": 109,
        "end_line": 113,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_utils.ml"
      },
      {
        "hash": "c0c0db8186642cc37f069e5d96bfc9fb",
        "text": "| None -> acc\nelse acc\nin\nlet int_val = loop 0 0 in\nLexer_tokens.IntToken int_val",
        "lines": [
          "| None -> acc",
          "else acc",
          "in",
          "let int_val = loop 0 0 in",
          "Lexer_tokens.IntToken int_val"
        ],
        "start_line": 111,
        "end_line": 115,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_utils_modular.ml"
      }
    ],
    "270e2b25502e7a94fdfd4b85255f7413": [
      {
        "hash": "270e2b25502e7a94fdfd4b85255f7413",
        "text": "else acc\nin\nlet int_val = loop 0 0 in\nLexer_tokens.IntToken int_val",
        "lines": [
          "else acc",
          "in",
          "let int_val = loop 0 0 in",
          "Lexer_tokens.IntToken int_val"
        ],
        "start_line": 110,
        "end_line": 113,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_utils.ml"
      },
      {
        "hash": "270e2b25502e7a94fdfd4b85255f7413",
        "text": "else acc\nin\nlet int_val = loop 0 0 in\nLexer_tokens.IntToken int_val",
        "lines": [
          "else acc",
          "in",
          "let int_val = loop 0 0 in",
          "Lexer_tokens.IntToken int_val"
        ],
        "start_line": 112,
        "end_line": 115,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_utils_modular.ml"
      }
    ],
    "8e2cb9b640333c8998c510f121e1e89b": [
      {
        "hash": "8e2cb9b640333c8998c510f121e1e89b",
        "text": "in\nlet int_val = loop 0 0 in\nLexer_tokens.IntToken int_val",
        "lines": [
          "in",
          "let int_val = loop 0 0 in",
          "Lexer_tokens.IntToken int_val"
        ],
        "start_line": 111,
        "end_line": 113,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_utils.ml"
      },
      {
        "hash": "8e2cb9b640333c8998c510f121e1e89b",
        "text": "in\nlet int_val = loop 0 0 in\nLexer_tokens.IntToken int_val",
        "lines": [
          "in",
          "let int_val = loop 0 0 in",
          "Lexer_tokens.IntToken int_val"
        ],
        "start_line": 113,
        "end_line": 115,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_utils_modular.ml"
      }
    ],
    "a7747da5d05c122a498d537321df9052": [
      {
        "hash": "a7747da5d05c122a498d537321df9052",
        "text": "open Ast\nopen Error_utils\nopen Unified_formatter",
        "lines": [
          "open Ast",
          "open Error_utils",
          "open Unified_formatter"
        ],
        "start_line": 3,
        "end_line": 5,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/c_codegen_exceptions.ml"
      },
      {
        "hash": "a7747da5d05c122a498d537321df9052",
        "text": "open Ast\nopen Error_utils\nopen Unified_formatter",
        "lines": [
          "open Ast",
          "open Error_utils",
          "open Unified_formatter"
        ],
        "start_line": 4,
        "end_line": 6,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/c_codegen_expressions.ml"
      }
    ],
    "24c53e03144b30baed4886ec8193bfe0": [
      {
        "hash": "24c53e03144b30baed4886ec8193bfe0",
        "text": "| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword\n| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword\n| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword\n| Token_mapping.Token_definitions_unified.OfParticle -> OfParticle\n| Token_mapping.Token_definitions_unified.MinusOneKeyword -> MinusOneKeyword\n| Token_mapping.Token_definitions_unified.PlusKeyword -> PlusKeyword\n| Token_mapping.Token_definitions_unified.WhereKeyword -> WhereKeyword\n| Token_mapping.Token_definitions_unified.SmallKeyword -> SmallKeyword\n| Token_mapping.Token_definitions_unified.ShouldGetKeyword -> ShouldGetKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword",
          "| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword",
          "| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword",
          "| Token_mapping.Token_definitions_unified.OfParticle -> OfParticle",
          "| Token_mapping.Token_definitions_unified.MinusOneKeyword -> MinusOneKeyword",
          "| Token_mapping.Token_definitions_unified.PlusKeyword -> PlusKeyword",
          "| Token_mapping.Token_definitions_unified.WhereKeyword -> WhereKeyword",
          "| Token_mapping.Token_definitions_unified.SmallKeyword -> SmallKeyword",
          "| Token_mapping.Token_definitions_unified.ShouldGetKeyword -> ShouldGetKeyword"
        ],
        "start_line": 50,
        "end_line": 58,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "24c53e03144b30baed4886ec8193bfe0",
        "text": "| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword\n| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword\n| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword\n| Token_mapping.Token_definitions_unified.OfParticle -> OfParticle\n| Token_mapping.Token_definitions_unified.MinusOneKeyword -> MinusOneKeyword\n| Token_mapping.Token_definitions_unified.PlusKeyword -> PlusKeyword\n| Token_mapping.Token_definitions_unified.WhereKeyword -> WhereKeyword\n| Token_mapping.Token_definitions_unified.SmallKeyword -> SmallKeyword\n| Token_mapping.Token_definitions_unified.ShouldGetKeyword -> ShouldGetKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.RemainingKeyword -> RemainingKeyword",
          "| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword",
          "| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword",
          "| Token_mapping.Token_definitions_unified.OfParticle -> OfParticle",
          "| Token_mapping.Token_definitions_unified.MinusOneKeyword -> MinusOneKeyword",
          "| Token_mapping.Token_definitions_unified.PlusKeyword -> PlusKeyword",
          "| Token_mapping.Token_definitions_unified.WhereKeyword -> WhereKeyword",
          "| Token_mapping.Token_definitions_unified.SmallKeyword -> SmallKeyword",
          "| Token_mapping.Token_definitions_unified.ShouldGetKeyword -> ShouldGetKeyword"
        ],
        "start_line": 73,
        "end_line": 81,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_keywords.ml"
      }
    ],
    "44445cf931a94997b67e96fab66b58dd": [
      {
        "hash": "44445cf931a94997b67e96fab66b58dd",
        "text": "| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword\n| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword\n| Token_mapping.Token_definitions_unified.OfParticle -> OfParticle\n| Token_mapping.Token_definitions_unified.MinusOneKeyword -> MinusOneKeyword\n| Token_mapping.Token_definitions_unified.PlusKeyword -> PlusKeyword\n| Token_mapping.Token_definitions_unified.WhereKeyword -> WhereKeyword\n| Token_mapping.Token_definitions_unified.SmallKeyword -> SmallKeyword\n| Token_mapping.Token_definitions_unified.ShouldGetKeyword -> ShouldGetKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword",
          "| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword",
          "| Token_mapping.Token_definitions_unified.OfParticle -> OfParticle",
          "| Token_mapping.Token_definitions_unified.MinusOneKeyword -> MinusOneKeyword",
          "| Token_mapping.Token_definitions_unified.PlusKeyword -> PlusKeyword",
          "| Token_mapping.Token_definitions_unified.WhereKeyword -> WhereKeyword",
          "| Token_mapping.Token_definitions_unified.SmallKeyword -> SmallKeyword",
          "| Token_mapping.Token_definitions_unified.ShouldGetKeyword -> ShouldGetKeyword"
        ],
        "start_line": 51,
        "end_line": 58,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "44445cf931a94997b67e96fab66b58dd",
        "text": "| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword\n| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword\n| Token_mapping.Token_definitions_unified.OfParticle -> OfParticle\n| Token_mapping.Token_definitions_unified.MinusOneKeyword -> MinusOneKeyword\n| Token_mapping.Token_definitions_unified.PlusKeyword -> PlusKeyword\n| Token_mapping.Token_definitions_unified.WhereKeyword -> WhereKeyword\n| Token_mapping.Token_definitions_unified.SmallKeyword -> SmallKeyword\n| Token_mapping.Token_definitions_unified.ShouldGetKeyword -> ShouldGetKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.EmptyKeyword -> EmptyKeyword",
          "| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword",
          "| Token_mapping.Token_definitions_unified.OfParticle -> OfParticle",
          "| Token_mapping.Token_definitions_unified.MinusOneKeyword -> MinusOneKeyword",
          "| Token_mapping.Token_definitions_unified.PlusKeyword -> PlusKeyword",
          "| Token_mapping.Token_definitions_unified.WhereKeyword -> WhereKeyword",
          "| Token_mapping.Token_definitions_unified.SmallKeyword -> SmallKeyword",
          "| Token_mapping.Token_definitions_unified.ShouldGetKeyword -> ShouldGetKeyword"
        ],
        "start_line": 74,
        "end_line": 81,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_keywords.ml"
      }
    ],
    "5b3aeabf990b0b9a65a2b41f97f969ca": [
      {
        "hash": "5b3aeabf990b0b9a65a2b41f97f969ca",
        "text": "| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword\n| Token_mapping.Token_definitions_unified.OfParticle -> OfParticle\n| Token_mapping.Token_definitions_unified.MinusOneKeyword -> MinusOneKeyword\n| Token_mapping.Token_definitions_unified.PlusKeyword -> PlusKeyword\n| Token_mapping.Token_definitions_unified.WhereKeyword -> WhereKeyword\n| Token_mapping.Token_definitions_unified.SmallKeyword -> SmallKeyword\n| Token_mapping.Token_definitions_unified.ShouldGetKeyword -> ShouldGetKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword",
          "| Token_mapping.Token_definitions_unified.OfParticle -> OfParticle",
          "| Token_mapping.Token_definitions_unified.MinusOneKeyword -> MinusOneKeyword",
          "| Token_mapping.Token_definitions_unified.PlusKeyword -> PlusKeyword",
          "| Token_mapping.Token_definitions_unified.WhereKeyword -> WhereKeyword",
          "| Token_mapping.Token_definitions_unified.SmallKeyword -> SmallKeyword",
          "| Token_mapping.Token_definitions_unified.ShouldGetKeyword -> ShouldGetKeyword"
        ],
        "start_line": 52,
        "end_line": 58,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "5b3aeabf990b0b9a65a2b41f97f969ca",
        "text": "| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword\n| Token_mapping.Token_definitions_unified.OfParticle -> OfParticle\n| Token_mapping.Token_definitions_unified.MinusOneKeyword -> MinusOneKeyword\n| Token_mapping.Token_definitions_unified.PlusKeyword -> PlusKeyword\n| Token_mapping.Token_definitions_unified.WhereKeyword -> WhereKeyword\n| Token_mapping.Token_definitions_unified.SmallKeyword -> SmallKeyword\n| Token_mapping.Token_definitions_unified.ShouldGetKeyword -> ShouldGetKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.CharacterCountKeyword -> CharacterCountKeyword",
          "| Token_mapping.Token_definitions_unified.OfParticle -> OfParticle",
          "| Token_mapping.Token_definitions_unified.MinusOneKeyword -> MinusOneKeyword",
          "| Token_mapping.Token_definitions_unified.PlusKeyword -> PlusKeyword",
          "| Token_mapping.Token_definitions_unified.WhereKeyword -> WhereKeyword",
          "| Token_mapping.Token_definitions_unified.SmallKeyword -> SmallKeyword",
          "| Token_mapping.Token_definitions_unified.ShouldGetKeyword -> ShouldGetKeyword"
        ],
        "start_line": 75,
        "end_line": 81,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_keywords.ml"
      }
    ],
    "0f9e32ec3b5ad71edfd61d583e254afa": [
      {
        "hash": "0f9e32ec3b5ad71edfd61d583e254afa",
        "text": "| Token_mapping.Token_definitions_unified.OfParticle -> OfParticle\n| Token_mapping.Token_definitions_unified.MinusOneKeyword -> MinusOneKeyword\n| Token_mapping.Token_definitions_unified.PlusKeyword -> PlusKeyword\n| Token_mapping.Token_definitions_unified.WhereKeyword -> WhereKeyword\n| Token_mapping.Token_definitions_unified.SmallKeyword -> SmallKeyword\n| Token_mapping.Token_definitions_unified.ShouldGetKeyword -> ShouldGetKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.OfParticle -> OfParticle",
          "| Token_mapping.Token_definitions_unified.MinusOneKeyword -> MinusOneKeyword",
          "| Token_mapping.Token_definitions_unified.PlusKeyword -> PlusKeyword",
          "| Token_mapping.Token_definitions_unified.WhereKeyword -> WhereKeyword",
          "| Token_mapping.Token_definitions_unified.SmallKeyword -> SmallKeyword",
          "| Token_mapping.Token_definitions_unified.ShouldGetKeyword -> ShouldGetKeyword"
        ],
        "start_line": 53,
        "end_line": 58,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "0f9e32ec3b5ad71edfd61d583e254afa",
        "text": "| Token_mapping.Token_definitions_unified.OfParticle -> OfParticle\n| Token_mapping.Token_definitions_unified.MinusOneKeyword -> MinusOneKeyword\n| Token_mapping.Token_definitions_unified.PlusKeyword -> PlusKeyword\n| Token_mapping.Token_definitions_unified.WhereKeyword -> WhereKeyword\n| Token_mapping.Token_definitions_unified.SmallKeyword -> SmallKeyword\n| Token_mapping.Token_definitions_unified.ShouldGetKeyword -> ShouldGetKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.OfParticle -> OfParticle",
          "| Token_mapping.Token_definitions_unified.MinusOneKeyword -> MinusOneKeyword",
          "| Token_mapping.Token_definitions_unified.PlusKeyword -> PlusKeyword",
          "| Token_mapping.Token_definitions_unified.WhereKeyword -> WhereKeyword",
          "| Token_mapping.Token_definitions_unified.SmallKeyword -> SmallKeyword",
          "| Token_mapping.Token_definitions_unified.ShouldGetKeyword -> ShouldGetKeyword"
        ],
        "start_line": 76,
        "end_line": 81,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_keywords.ml"
      }
    ],
    "4577e52ac0d0996c1d8fc5a50e0266a9": [
      {
        "hash": "4577e52ac0d0996c1d8fc5a50e0266a9",
        "text": "| Token_mapping.Token_definitions_unified.MinusOneKeyword -> MinusOneKeyword\n| Token_mapping.Token_definitions_unified.PlusKeyword -> PlusKeyword\n| Token_mapping.Token_definitions_unified.WhereKeyword -> WhereKeyword\n| Token_mapping.Token_definitions_unified.SmallKeyword -> SmallKeyword\n| Token_mapping.Token_definitions_unified.ShouldGetKeyword -> ShouldGetKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.MinusOneKeyword -> MinusOneKeyword",
          "| Token_mapping.Token_definitions_unified.PlusKeyword -> PlusKeyword",
          "| Token_mapping.Token_definitions_unified.WhereKeyword -> WhereKeyword",
          "| Token_mapping.Token_definitions_unified.SmallKeyword -> SmallKeyword",
          "| Token_mapping.Token_definitions_unified.ShouldGetKeyword -> ShouldGetKeyword"
        ],
        "start_line": 54,
        "end_line": 58,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "4577e52ac0d0996c1d8fc5a50e0266a9",
        "text": "| Token_mapping.Token_definitions_unified.MinusOneKeyword -> MinusOneKeyword\n| Token_mapping.Token_definitions_unified.PlusKeyword -> PlusKeyword\n| Token_mapping.Token_definitions_unified.WhereKeyword -> WhereKeyword\n| Token_mapping.Token_definitions_unified.SmallKeyword -> SmallKeyword\n| Token_mapping.Token_definitions_unified.ShouldGetKeyword -> ShouldGetKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.MinusOneKeyword -> MinusOneKeyword",
          "| Token_mapping.Token_definitions_unified.PlusKeyword -> PlusKeyword",
          "| Token_mapping.Token_definitions_unified.WhereKeyword -> WhereKeyword",
          "| Token_mapping.Token_definitions_unified.SmallKeyword -> SmallKeyword",
          "| Token_mapping.Token_definitions_unified.ShouldGetKeyword -> ShouldGetKeyword"
        ],
        "start_line": 77,
        "end_line": 81,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_keywords.ml"
      }
    ],
    "2c0ec6c28f3199785b9a420e8957432a": [
      {
        "hash": "2c0ec6c28f3199785b9a420e8957432a",
        "text": "| Token_mapping.Token_definitions_unified.PlusKeyword -> PlusKeyword\n| Token_mapping.Token_definitions_unified.WhereKeyword -> WhereKeyword\n| Token_mapping.Token_definitions_unified.SmallKeyword -> SmallKeyword\n| Token_mapping.Token_definitions_unified.ShouldGetKeyword -> ShouldGetKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.PlusKeyword -> PlusKeyword",
          "| Token_mapping.Token_definitions_unified.WhereKeyword -> WhereKeyword",
          "| Token_mapping.Token_definitions_unified.SmallKeyword -> SmallKeyword",
          "| Token_mapping.Token_definitions_unified.ShouldGetKeyword -> ShouldGetKeyword"
        ],
        "start_line": 55,
        "end_line": 58,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "2c0ec6c28f3199785b9a420e8957432a",
        "text": "| Token_mapping.Token_definitions_unified.PlusKeyword -> PlusKeyword\n| Token_mapping.Token_definitions_unified.WhereKeyword -> WhereKeyword\n| Token_mapping.Token_definitions_unified.SmallKeyword -> SmallKeyword\n| Token_mapping.Token_definitions_unified.ShouldGetKeyword -> ShouldGetKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.PlusKeyword -> PlusKeyword",
          "| Token_mapping.Token_definitions_unified.WhereKeyword -> WhereKeyword",
          "| Token_mapping.Token_definitions_unified.SmallKeyword -> SmallKeyword",
          "| Token_mapping.Token_definitions_unified.ShouldGetKeyword -> ShouldGetKeyword"
        ],
        "start_line": 78,
        "end_line": 81,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_keywords.ml"
      }
    ],
    "68148b2c62648e810e0e2eb01adcc1bc": [
      {
        "hash": "68148b2c62648e810e0e2eb01adcc1bc",
        "text": "| Token_mapping.Token_definitions_unified.WhereKeyword -> WhereKeyword\n| Token_mapping.Token_definitions_unified.SmallKeyword -> SmallKeyword\n| Token_mapping.Token_definitions_unified.ShouldGetKeyword -> ShouldGetKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.WhereKeyword -> WhereKeyword",
          "| Token_mapping.Token_definitions_unified.SmallKeyword -> SmallKeyword",
          "| Token_mapping.Token_definitions_unified.ShouldGetKeyword -> ShouldGetKeyword"
        ],
        "start_line": 56,
        "end_line": 58,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_classical.ml"
      },
      {
        "hash": "68148b2c62648e810e0e2eb01adcc1bc",
        "text": "| Token_mapping.Token_definitions_unified.WhereKeyword -> WhereKeyword\n| Token_mapping.Token_definitions_unified.SmallKeyword -> SmallKeyword\n| Token_mapping.Token_definitions_unified.ShouldGetKeyword -> ShouldGetKeyword",
        "lines": [
          "| Token_mapping.Token_definitions_unified.WhereKeyword -> WhereKeyword",
          "| Token_mapping.Token_definitions_unified.SmallKeyword -> SmallKeyword",
          "| Token_mapping.Token_definitions_unified.ShouldGetKeyword -> ShouldGetKeyword"
        ],
        "start_line": 79,
        "end_line": 81,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_conversion_keywords.ml"
      }
    ],
    "43ef2a2c56285e0c69c52cabc7bfa745": [
      {
        "hash": "43ef2a2c56285e0c69c52cabc7bfa745",
        "text": "];\ntable\n)",
        "lines": [
          "];",
          "table",
          ")"
        ],
        "start_line": 13,
        "end_line": 15,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_chinese_numbers.ml"
      },
      {
        "hash": "43ef2a2c56285e0c69c52cabc7bfa745",
        "text": "];\ntable\n)",
        "lines": [
          "];",
          "table",
          ")"
        ],
        "start_line": 21,
        "end_line": 23,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer_chinese_numbers.ml"
      }
    ],
    "6a7cb9c5daf0ed407bd831e409a86b00": [
      {
        "hash": "6a7cb9c5daf0ed407bd831e409a86b00",
        "text": "let convert_underscores str =\nlet len = String.length str in\nlet buffer = Buffer.create len in\nlet rec loop i capitalize_next =\nif i >= len then Buffer.contents buffer\nelse\nlet c = str.[i] in\nif c = '_' then loop (i + 1) true\nelse if capitalize_next then (\nBuffer.add_char buffer (Char.uppercase_ascii c);",
        "lines": [
          "let convert_underscores str =",
          "let len = String.length str in",
          "let buffer = Buffer.create len in",
          "let rec loop i capitalize_next =",
          "if i >= len then Buffer.contents buffer",
          "else",
          "let c = str.[i] in",
          "if c = '_' then loop (i + 1) true",
          "else if capitalize_next then (",
          "Buffer.add_char buffer (Char.uppercase_ascii c);"
        ],
        "start_line": 185,
        "end_line": 194,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/logging_migration.ml"
      },
      {
        "hash": "6a7cb9c5daf0ed407bd831e409a86b00",
        "text": "let convert_underscores str =\nlet len = String.length str in\nlet buffer = Buffer.create len in\nlet rec loop i capitalize_next =\nif i >= len then Buffer.contents buffer\nelse\nlet c = str.[i] in\nif c = '_' then loop (i + 1) true\nelse if capitalize_next then (\nBuffer.add_char buffer (Char.uppercase_ascii c);",
        "lines": [
          "let convert_underscores str =",
          "let len = String.length str in",
          "let buffer = Buffer.create len in",
          "let rec loop i capitalize_next =",
          "if i >= len then Buffer.contents buffer",
          "else",
          "let c = str.[i] in",
          "if c = '_' then loop (i + 1) true",
          "else if capitalize_next then (",
          "Buffer.add_char buffer (Char.uppercase_ascii c);"
        ],
        "start_line": 71,
        "end_line": 80,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/logger_utils.ml"
      }
    ],
    "8ff9de46d034ca909904c5799a6c9f44": [
      {
        "hash": "8ff9de46d034ca909904c5799a6c9f44",
        "text": "let len = String.length str in\nlet buffer = Buffer.create len in\nlet rec loop i capitalize_next =\nif i >= len then Buffer.contents buffer\nelse\nlet c = str.[i] in\nif c = '_' then loop (i + 1) true\nelse if capitalize_next then (\nBuffer.add_char buffer (Char.uppercase_ascii c);\nloop (i + 1) false)",
        "lines": [
          "let len = String.length str in",
          "let buffer = Buffer.create len in",
          "let rec loop i capitalize_next =",
          "if i >= len then Buffer.contents buffer",
          "else",
          "let c = str.[i] in",
          "if c = '_' then loop (i + 1) true",
          "else if capitalize_next then (",
          "Buffer.add_char buffer (Char.uppercase_ascii c);",
          "loop (i + 1) false)"
        ],
        "start_line": 186,
        "end_line": 195,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/logging_migration.ml"
      },
      {
        "hash": "8ff9de46d034ca909904c5799a6c9f44",
        "text": "let len = String.length str in\nlet buffer = Buffer.create len in\nlet rec loop i capitalize_next =\nif i >= len then Buffer.contents buffer\nelse\nlet c = str.[i] in\nif c = '_' then loop (i + 1) true\nelse if capitalize_next then (\nBuffer.add_char buffer (Char.uppercase_ascii c);\nloop (i + 1) false)",
        "lines": [
          "let len = String.length str in",
          "let buffer = Buffer.create len in",
          "let rec loop i capitalize_next =",
          "if i >= len then Buffer.contents buffer",
          "else",
          "let c = str.[i] in",
          "if c = '_' then loop (i + 1) true",
          "else if capitalize_next then (",
          "Buffer.add_char buffer (Char.uppercase_ascii c);",
          "loop (i + 1) false)"
        ],
        "start_line": 72,
        "end_line": 81,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/logger_utils.ml"
      }
    ],
    "4a48825bff197dd0985d6cd29a1111e9": [
      {
        "hash": "4a48825bff197dd0985d6cd29a1111e9",
        "text": "let buffer = Buffer.create len in\nlet rec loop i capitalize_next =\nif i >= len then Buffer.contents buffer\nelse\nlet c = str.[i] in\nif c = '_' then loop (i + 1) true\nelse if capitalize_next then (\nBuffer.add_char buffer (Char.uppercase_ascii c);\nloop (i + 1) false)\nelse (",
        "lines": [
          "let buffer = Buffer.create len in",
          "let rec loop i capitalize_next =",
          "if i >= len then Buffer.contents buffer",
          "else",
          "let c = str.[i] in",
          "if c = '_' then loop (i + 1) true",
          "else if capitalize_next then (",
          "Buffer.add_char buffer (Char.uppercase_ascii c);",
          "loop (i + 1) false)",
          "else ("
        ],
        "start_line": 187,
        "end_line": 196,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/logging_migration.ml"
      },
      {
        "hash": "4a48825bff197dd0985d6cd29a1111e9",
        "text": "let buffer = Buffer.create len in\nlet rec loop i capitalize_next =\nif i >= len then Buffer.contents buffer\nelse\nlet c = str.[i] in\nif c = '_' then loop (i + 1) true\nelse if capitalize_next then (\nBuffer.add_char buffer (Char.uppercase_ascii c);\nloop (i + 1) false)\nelse (",
        "lines": [
          "let buffer = Buffer.create len in",
          "let rec loop i capitalize_next =",
          "if i >= len then Buffer.contents buffer",
          "else",
          "let c = str.[i] in",
          "if c = '_' then loop (i + 1) true",
          "else if capitalize_next then (",
          "Buffer.add_char buffer (Char.uppercase_ascii c);",
          "loop (i + 1) false)",
          "else ("
        ],
        "start_line": 73,
        "end_line": 82,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/logger_utils.ml"
      }
    ],
    "7092e6422d14ba8879046a2a3409a232": [
      {
        "hash": "7092e6422d14ba8879046a2a3409a232",
        "text": "let rec loop i capitalize_next =\nif i >= len then Buffer.contents buffer\nelse\nlet c = str.[i] in\nif c = '_' then loop (i + 1) true\nelse if capitalize_next then (\nBuffer.add_char buffer (Char.uppercase_ascii c);\nloop (i + 1) false)\nelse (\nBuffer.add_char buffer c;",
        "lines": [
          "let rec loop i capitalize_next =",
          "if i >= len then Buffer.contents buffer",
          "else",
          "let c = str.[i] in",
          "if c = '_' then loop (i + 1) true",
          "else if capitalize_next then (",
          "Buffer.add_char buffer (Char.uppercase_ascii c);",
          "loop (i + 1) false)",
          "else (",
          "Buffer.add_char buffer c;"
        ],
        "start_line": 188,
        "end_line": 197,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/logging_migration.ml"
      },
      {
        "hash": "7092e6422d14ba8879046a2a3409a232",
        "text": "let rec loop i capitalize_next =\nif i >= len then Buffer.contents buffer\nelse\nlet c = str.[i] in\nif c = '_' then loop (i + 1) true\nelse if capitalize_next then (\nBuffer.add_char buffer (Char.uppercase_ascii c);\nloop (i + 1) false)\nelse (\nBuffer.add_char buffer c;",
        "lines": [
          "let rec loop i capitalize_next =",
          "if i >= len then Buffer.contents buffer",
          "else",
          "let c = str.[i] in",
          "if c = '_' then loop (i + 1) true",
          "else if capitalize_next then (",
          "Buffer.add_char buffer (Char.uppercase_ascii c);",
          "loop (i + 1) false)",
          "else (",
          "Buffer.add_char buffer c;"
        ],
        "start_line": 74,
        "end_line": 83,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/logger_utils.ml"
      }
    ],
    "c60c563d1dfb1fd26bf090b9f738c887": [
      {
        "hash": "c60c563d1dfb1fd26bf090b9f738c887",
        "text": "if i >= len then Buffer.contents buffer\nelse\nlet c = str.[i] in\nif c = '_' then loop (i + 1) true\nelse if capitalize_next then (\nBuffer.add_char buffer (Char.uppercase_ascii c);\nloop (i + 1) false)\nelse (\nBuffer.add_char buffer c;\nloop (i + 1) false)",
        "lines": [
          "if i >= len then Buffer.contents buffer",
          "else",
          "let c = str.[i] in",
          "if c = '_' then loop (i + 1) true",
          "else if capitalize_next then (",
          "Buffer.add_char buffer (Char.uppercase_ascii c);",
          "loop (i + 1) false)",
          "else (",
          "Buffer.add_char buffer c;",
          "loop (i + 1) false)"
        ],
        "start_line": 189,
        "end_line": 198,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/logging_migration.ml"
      },
      {
        "hash": "c60c563d1dfb1fd26bf090b9f738c887",
        "text": "if i >= len then Buffer.contents buffer\nelse\nlet c = str.[i] in\nif c = '_' then loop (i + 1) true\nelse if capitalize_next then (\nBuffer.add_char buffer (Char.uppercase_ascii c);\nloop (i + 1) false)\nelse (\nBuffer.add_char buffer c;\nloop (i + 1) false)",
        "lines": [
          "if i >= len then Buffer.contents buffer",
          "else",
          "let c = str.[i] in",
          "if c = '_' then loop (i + 1) true",
          "else if capitalize_next then (",
          "Buffer.add_char buffer (Char.uppercase_ascii c);",
          "loop (i + 1) false)",
          "else (",
          "Buffer.add_char buffer c;",
          "loop (i + 1) false)"
        ],
        "start_line": 75,
        "end_line": 84,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/logger_utils.ml"
      }
    ],
    "8b752243d91bd0ee543fc9e0023be354": [
      {
        "hash": "8b752243d91bd0ee543fc9e0023be354",
        "text": "else\nlet c = str.[i] in\nif c = '_' then loop (i + 1) true\nelse if capitalize_next then (\nBuffer.add_char buffer (Char.uppercase_ascii c);\nloop (i + 1) false)\nelse (\nBuffer.add_char buffer c;\nloop (i + 1) false)\nin",
        "lines": [
          "else",
          "let c = str.[i] in",
          "if c = '_' then loop (i + 1) true",
          "else if capitalize_next then (",
          "Buffer.add_char buffer (Char.uppercase_ascii c);",
          "loop (i + 1) false)",
          "else (",
          "Buffer.add_char buffer c;",
          "loop (i + 1) false)",
          "in"
        ],
        "start_line": 190,
        "end_line": 199,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/logging_migration.ml"
      },
      {
        "hash": "8b752243d91bd0ee543fc9e0023be354",
        "text": "else\nlet c = str.[i] in\nif c = '_' then loop (i + 1) true\nelse if capitalize_next then (\nBuffer.add_char buffer (Char.uppercase_ascii c);\nloop (i + 1) false)\nelse (\nBuffer.add_char buffer c;\nloop (i + 1) false)\nin",
        "lines": [
          "else",
          "let c = str.[i] in",
          "if c = '_' then loop (i + 1) true",
          "else if capitalize_next then (",
          "Buffer.add_char buffer (Char.uppercase_ascii c);",
          "loop (i + 1) false)",
          "else (",
          "Buffer.add_char buffer c;",
          "loop (i + 1) false)",
          "in"
        ],
        "start_line": 76,
        "end_line": 85,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/logger_utils.ml"
      }
    ],
    "1287b66a4b549fe4fd448ebaac1a90ec": [
      {
        "hash": "1287b66a4b549fe4fd448ebaac1a90ec",
        "text": "let c = str.[i] in\nif c = '_' then loop (i + 1) true\nelse if capitalize_next then (\nBuffer.add_char buffer (Char.uppercase_ascii c);\nloop (i + 1) false)\nelse (\nBuffer.add_char buffer c;\nloop (i + 1) false)\nin\nloop 0 false",
        "lines": [
          "let c = str.[i] in",
          "if c = '_' then loop (i + 1) true",
          "else if capitalize_next then (",
          "Buffer.add_char buffer (Char.uppercase_ascii c);",
          "loop (i + 1) false)",
          "else (",
          "Buffer.add_char buffer c;",
          "loop (i + 1) false)",
          "in",
          "loop 0 false"
        ],
        "start_line": 191,
        "end_line": 200,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/logging_migration.ml"
      },
      {
        "hash": "1287b66a4b549fe4fd448ebaac1a90ec",
        "text": "let c = str.[i] in\nif c = '_' then loop (i + 1) true\nelse if capitalize_next then (\nBuffer.add_char buffer (Char.uppercase_ascii c);\nloop (i + 1) false)\nelse (\nBuffer.add_char buffer c;\nloop (i + 1) false)\nin\nloop 0 false",
        "lines": [
          "let c = str.[i] in",
          "if c = '_' then loop (i + 1) true",
          "else if capitalize_next then (",
          "Buffer.add_char buffer (Char.uppercase_ascii c);",
          "loop (i + 1) false)",
          "else (",
          "Buffer.add_char buffer c;",
          "loop (i + 1) false)",
          "in",
          "loop 0 false"
        ],
        "start_line": 77,
        "end_line": 86,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/logger_utils.ml"
      }
    ],
    "a5f89e7151f2785cbfb2073871cbba96": [
      {
        "hash": "a5f89e7151f2785cbfb2073871cbba96",
        "text": "if c = '_' then loop (i + 1) true\nelse if capitalize_next then (\nBuffer.add_char buffer (Char.uppercase_ascii c);\nloop (i + 1) false)\nelse (\nBuffer.add_char buffer c;\nloop (i + 1) false)\nin\nloop 0 false\nin",
        "lines": [
          "if c = '_' then loop (i + 1) true",
          "else if capitalize_next then (",
          "Buffer.add_char buffer (Char.uppercase_ascii c);",
          "loop (i + 1) false)",
          "else (",
          "Buffer.add_char buffer c;",
          "loop (i + 1) false)",
          "in",
          "loop 0 false",
          "in"
        ],
        "start_line": 192,
        "end_line": 201,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/logging_migration.ml"
      },
      {
        "hash": "a5f89e7151f2785cbfb2073871cbba96",
        "text": "if c = '_' then loop (i + 1) true\nelse if capitalize_next then (\nBuffer.add_char buffer (Char.uppercase_ascii c);\nloop (i + 1) false)\nelse (\nBuffer.add_char buffer c;\nloop (i + 1) false)\nin\nloop 0 false\nin",
        "lines": [
          "if c = '_' then loop (i + 1) true",
          "else if capitalize_next then (",
          "Buffer.add_char buffer (Char.uppercase_ascii c);",
          "loop (i + 1) false)",
          "else (",
          "Buffer.add_char buffer c;",
          "loop (i + 1) false)",
          "in",
          "loop 0 false",
          "in"
        ],
        "start_line": 78,
        "end_line": 87,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/logger_utils.ml"
      }
    ],
    "2d3bcd89c84739d28c7f6e5c861455d4": [
      {
        "hash": "2d3bcd89c84739d28c7f6e5c861455d4",
        "text": "else if capitalize_next then (\nBuffer.add_char buffer (Char.uppercase_ascii c);\nloop (i + 1) false)\nelse (\nBuffer.add_char buffer c;\nloop (i + 1) false)\nin\nloop 0 false\nin\nconvert_underscores capitalized",
        "lines": [
          "else if capitalize_next then (",
          "Buffer.add_char buffer (Char.uppercase_ascii c);",
          "loop (i + 1) false)",
          "else (",
          "Buffer.add_char buffer c;",
          "loop (i + 1) false)",
          "in",
          "loop 0 false",
          "in",
          "convert_underscores capitalized"
        ],
        "start_line": 193,
        "end_line": 202,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/logging_migration.ml"
      },
      {
        "hash": "2d3bcd89c84739d28c7f6e5c861455d4",
        "text": "else if capitalize_next then (\nBuffer.add_char buffer (Char.uppercase_ascii c);\nloop (i + 1) false)\nelse (\nBuffer.add_char buffer c;\nloop (i + 1) false)\nin\nloop 0 false\nin\nconvert_underscores capitalized",
        "lines": [
          "else if capitalize_next then (",
          "Buffer.add_char buffer (Char.uppercase_ascii c);",
          "loop (i + 1) false)",
          "else (",
          "Buffer.add_char buffer c;",
          "loop (i + 1) false)",
          "in",
          "loop 0 false",
          "in",
          "convert_underscores capitalized"
        ],
        "start_line": 79,
        "end_line": 88,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/logger_utils.ml"
      }
    ],
    "016d2ec2bda976248967648c363fbe9c": [
      {
        "hash": "016d2ec2bda976248967648c363fbe9c",
        "text": "Buffer.add_char buffer (Char.uppercase_ascii c);\nloop (i + 1) false)\nelse (\nBuffer.add_char buffer c;\nloop (i + 1) false)\nin\nloop 0 false\nin\nconvert_underscores capitalized",
        "lines": [
          "Buffer.add_char buffer (Char.uppercase_ascii c);",
          "loop (i + 1) false)",
          "else (",
          "Buffer.add_char buffer c;",
          "loop (i + 1) false)",
          "in",
          "loop 0 false",
          "in",
          "convert_underscores capitalized"
        ],
        "start_line": 194,
        "end_line": 202,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/logging_migration.ml"
      },
      {
        "hash": "016d2ec2bda976248967648c363fbe9c",
        "text": "Buffer.add_char buffer (Char.uppercase_ascii c);\nloop (i + 1) false)\nelse (\nBuffer.add_char buffer c;\nloop (i + 1) false)\nin\nloop 0 false\nin\nconvert_underscores capitalized",
        "lines": [
          "Buffer.add_char buffer (Char.uppercase_ascii c);",
          "loop (i + 1) false)",
          "else (",
          "Buffer.add_char buffer c;",
          "loop (i + 1) false)",
          "in",
          "loop 0 false",
          "in",
          "convert_underscores capitalized"
        ],
        "start_line": 80,
        "end_line": 88,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/logger_utils.ml"
      }
    ],
    "28cebd250e48398389eec0f42b304bf0": [
      {
        "hash": "28cebd250e48398389eec0f42b304bf0",
        "text": "loop (i + 1) false)\nelse (\nBuffer.add_char buffer c;\nloop (i + 1) false)\nin\nloop 0 false\nin\nconvert_underscores capitalized",
        "lines": [
          "loop (i + 1) false)",
          "else (",
          "Buffer.add_char buffer c;",
          "loop (i + 1) false)",
          "in",
          "loop 0 false",
          "in",
          "convert_underscores capitalized"
        ],
        "start_line": 195,
        "end_line": 202,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/logging_migration.ml"
      },
      {
        "hash": "28cebd250e48398389eec0f42b304bf0",
        "text": "loop (i + 1) false)\nelse (\nBuffer.add_char buffer c;\nloop (i + 1) false)\nin\nloop 0 false\nin\nconvert_underscores capitalized",
        "lines": [
          "loop (i + 1) false)",
          "else (",
          "Buffer.add_char buffer c;",
          "loop (i + 1) false)",
          "in",
          "loop 0 false",
          "in",
          "convert_underscores capitalized"
        ],
        "start_line": 81,
        "end_line": 88,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/logger_utils.ml"
      }
    ],
    "957dafbbd3181871fbe0f0910d7a1cdb": [
      {
        "hash": "957dafbbd3181871fbe0f0910d7a1cdb",
        "text": "else (\nBuffer.add_char buffer c;\nloop (i + 1) false)\nin\nloop 0 false\nin\nconvert_underscores capitalized",
        "lines": [
          "else (",
          "Buffer.add_char buffer c;",
          "loop (i + 1) false)",
          "in",
          "loop 0 false",
          "in",
          "convert_underscores capitalized"
        ],
        "start_line": 196,
        "end_line": 202,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/logging_migration.ml"
      },
      {
        "hash": "957dafbbd3181871fbe0f0910d7a1cdb",
        "text": "else (\nBuffer.add_char buffer c;\nloop (i + 1) false)\nin\nloop 0 false\nin\nconvert_underscores capitalized",
        "lines": [
          "else (",
          "Buffer.add_char buffer c;",
          "loop (i + 1) false)",
          "in",
          "loop 0 false",
          "in",
          "convert_underscores capitalized"
        ],
        "start_line": 82,
        "end_line": 88,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/logger_utils.ml"
      }
    ],
    "3043f87a269c9760c656b381396ea096": [
      {
        "hash": "3043f87a269c9760c656b381396ea096",
        "text": "Buffer.add_char buffer c;\nloop (i + 1) false)\nin\nloop 0 false\nin\nconvert_underscores capitalized",
        "lines": [
          "Buffer.add_char buffer c;",
          "loop (i + 1) false)",
          "in",
          "loop 0 false",
          "in",
          "convert_underscores capitalized"
        ],
        "start_line": 197,
        "end_line": 202,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/logging_migration.ml"
      },
      {
        "hash": "3043f87a269c9760c656b381396ea096",
        "text": "Buffer.add_char buffer c;\nloop (i + 1) false)\nin\nloop 0 false\nin\nconvert_underscores capitalized",
        "lines": [
          "Buffer.add_char buffer c;",
          "loop (i + 1) false)",
          "in",
          "loop 0 false",
          "in",
          "convert_underscores capitalized"
        ],
        "start_line": 83,
        "end_line": 88,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/logger_utils.ml"
      }
    ],
    "8d0b66541240bd0f201efe95fcc775bb": [
      {
        "hash": "8d0b66541240bd0f201efe95fcc775bb",
        "text": "loop (i + 1) false)\nin\nloop 0 false\nin\nconvert_underscores capitalized",
        "lines": [
          "loop (i + 1) false)",
          "in",
          "loop 0 false",
          "in",
          "convert_underscores capitalized"
        ],
        "start_line": 198,
        "end_line": 202,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/logging_migration.ml"
      },
      {
        "hash": "8d0b66541240bd0f201efe95fcc775bb",
        "text": "loop (i + 1) false)\nin\nloop 0 false\nin\nconvert_underscores capitalized",
        "lines": [
          "loop (i + 1) false)",
          "in",
          "loop 0 false",
          "in",
          "convert_underscores capitalized"
        ],
        "start_line": 84,
        "end_line": 88,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/logger_utils.ml"
      }
    ],
    "2799fc531763a338c0219f481a57aa69": [
      {
        "hash": "2799fc531763a338c0219f481a57aa69",
        "text": "in\nloop 0 false\nin\nconvert_underscores capitalized",
        "lines": [
          "in",
          "loop 0 false",
          "in",
          "convert_underscores capitalized"
        ],
        "start_line": 199,
        "end_line": 202,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/logging_migration.ml"
      },
      {
        "hash": "2799fc531763a338c0219f481a57aa69",
        "text": "in\nloop 0 false\nin\nconvert_underscores capitalized",
        "lines": [
          "in",
          "loop 0 false",
          "in",
          "convert_underscores capitalized"
        ],
        "start_line": 85,
        "end_line": 88,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/logger_utils.ml"
      }
    ],
    "643df1d39153c31e131dbdcd5e145d6c": [
      {
        "hash": "643df1d39153c31e131dbdcd5e145d6c",
        "text": "loop 0 false\nin\nconvert_underscores capitalized",
        "lines": [
          "loop 0 false",
          "in",
          "convert_underscores capitalized"
        ],
        "start_line": 200,
        "end_line": 202,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/logging_migration.ml"
      },
      {
        "hash": "643df1d39153c31e131dbdcd5e145d6c",
        "text": "loop 0 false\nin\nconvert_underscores capitalized",
        "lines": [
          "loop 0 false",
          "in",
          "convert_underscores capitalized"
        ],
        "start_line": 86,
        "end_line": 88,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/logger_utils.ml"
      }
    ],
    "bafa12245e4d59d66ab4576f4a14f1a7": [
      {
        "hash": "bafa12245e4d59d66ab4576f4a14f1a7",
        "text": "let smart_init module_name =\nmatch module_name with\n| \"Main\" | \"Compiler\" -> init_info_error_loggers module_name\n| \"Parser\" | \"ParserPoetry\" -> init_debug_error_loggers module_name\n| \"Semantic\" | \"TypesInfer\" -> init_info_error_loggers module_name\n| \"Codegen\" | \"CCodegen\" -> init_debug_error_loggers module_name\n| \"ErrorRecovery\" ->\nlet _, info, error = init_debug_info_error_loggers module_name in\n(info, error)\n| _ -> init_info_error_loggers module_name",
        "lines": [
          "let smart_init module_name =",
          "match module_name with",
          "| \"Main\" | \"Compiler\" -> init_info_error_loggers module_name",
          "| \"Parser\" | \"ParserPoetry\" -> init_debug_error_loggers module_name",
          "| \"Semantic\" | \"TypesInfer\" -> init_info_error_loggers module_name",
          "| \"Codegen\" | \"CCodegen\" -> init_debug_error_loggers module_name",
          "| \"ErrorRecovery\" ->",
          "let _, info, error = init_debug_info_error_loggers module_name in",
          "(info, error)",
          "| _ -> init_info_error_loggers module_name"
        ],
        "start_line": 205,
        "end_line": 214,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/logging_migration.ml"
      },
      {
        "hash": "bafa12245e4d59d66ab4576f4a14f1a7",
        "text": "let smart_init module_name =\nmatch module_name with\n| \"Main\" | \"Compiler\" -> init_info_error_loggers module_name\n| \"Parser\" | \"ParserPoetry\" -> init_debug_error_loggers module_name\n| \"Semantic\" | \"TypesInfer\" -> init_info_error_loggers module_name\n| \"Codegen\" | \"CCodegen\" -> init_debug_error_loggers module_name\n| \"ErrorRecovery\" ->\nlet _, info, error = init_debug_info_error_loggers module_name in\n(info, error)\n| _ -> init_info_error_loggers module_name",
        "lines": [
          "let smart_init module_name =",
          "match module_name with",
          "| \"Main\" | \"Compiler\" -> init_info_error_loggers module_name",
          "| \"Parser\" | \"ParserPoetry\" -> init_debug_error_loggers module_name",
          "| \"Semantic\" | \"TypesInfer\" -> init_info_error_loggers module_name",
          "| \"Codegen\" | \"CCodegen\" -> init_debug_error_loggers module_name",
          "| \"ErrorRecovery\" ->",
          "let _, info, error = init_debug_info_error_loggers module_name in",
          "(info, error)",
          "| _ -> init_info_error_loggers module_name"
        ],
        "start_line": 91,
        "end_line": 100,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/logger_utils.ml"
      }
    ],
    "69c1679010dd2288e709d90d0e8de094": [
      {
        "hash": "69c1679010dd2288e709d90d0e8de094",
        "text": "confidence : float;\nsuggested_fix : string;\n}",
        "lines": [
          "confidence : float;",
          "suggested_fix : string;",
          "}"
        ],
        "start_line": 36,
        "end_line": 38,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/refactoring_analyzer_naming.ml"
      },
      {
        "hash": "69c1679010dd2288e709d90d0e8de094",
        "text": "confidence : float;\nsuggested_fix : string;\n}",
        "lines": [
          "confidence : float;",
          "suggested_fix : string;",
          "}"
        ],
        "start_line": 168,
        "end_line": 170,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/refactoring_analyzer_complexity.ml"
      }
    ],
    "e281bd8c1ee883e8e4a1f4b32ae4a3fa": [
      {
        "hash": "e281bd8c1ee883e8e4a1f4b32ae4a3fa",
        "text": "compile_to_c = false;\nc_output_file = None;\n}",
        "lines": [
          "compile_to_c = false;",
          "c_output_file = None;",
          "}"
        ],
        "start_line": 28,
        "end_line": 30,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/compile_options.ml"
      },
      {
        "hash": "e281bd8c1ee883e8e4a1f4b32ae4a3fa",
        "text": "compile_to_c = false;\nc_output_file = None;\n}",
        "lines": [
          "compile_to_c = false;",
          "c_output_file = None;",
          "}"
        ],
        "start_line": 43,
        "end_line": 45,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/compile_options.ml"
      },
      {
        "hash": "e281bd8c1ee883e8e4a1f4b32ae4a3fa",
        "text": "compile_to_c = false;\nc_output_file = None;\n}",
        "lines": [
          "compile_to_c = false;",
          "c_output_file = None;",
          "}"
        ],
        "start_line": 58,
        "end_line": 60,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/compile_options.ml"
      }
    ],
    "7e9094337525e1db05e305d87c58deae": [
      {
        "hash": "7e9094337525e1db05e305d87c58deae",
        "text": "filename = None;\nrecovery_mode = true;\nlog_level = \"quiet\";\ncompile_to_c = false;\nc_output_file = None;\n}",
        "lines": [
          "filename = None;",
          "recovery_mode = true;",
          "log_level = \"quiet\";",
          "compile_to_c = false;",
          "c_output_file = None;",
          "}"
        ],
        "start_line": 40,
        "end_line": 45,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/compile_options.ml"
      },
      {
        "hash": "7e9094337525e1db05e305d87c58deae",
        "text": "filename = None;\nrecovery_mode = true;\nlog_level = \"quiet\";\ncompile_to_c = false;\nc_output_file = None;\n}",
        "lines": [
          "filename = None;",
          "recovery_mode = true;",
          "log_level = \"quiet\";",
          "compile_to_c = false;",
          "c_output_file = None;",
          "}"
        ],
        "start_line": 55,
        "end_line": 60,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/compile_options.ml"
      }
    ],
    "e35ea4e7742686f216cbd9e50ba7c1cb": [
      {
        "hash": "e35ea4e7742686f216cbd9e50ba7c1cb",
        "text": "recovery_mode = true;\nlog_level = \"quiet\";\ncompile_to_c = false;\nc_output_file = None;\n}",
        "lines": [
          "recovery_mode = true;",
          "log_level = \"quiet\";",
          "compile_to_c = false;",
          "c_output_file = None;",
          "}"
        ],
        "start_line": 41,
        "end_line": 45,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/compile_options.ml"
      },
      {
        "hash": "e35ea4e7742686f216cbd9e50ba7c1cb",
        "text": "recovery_mode = true;\nlog_level = \"quiet\";\ncompile_to_c = false;\nc_output_file = None;\n}",
        "lines": [
          "recovery_mode = true;",
          "log_level = \"quiet\";",
          "compile_to_c = false;",
          "c_output_file = None;",
          "}"
        ],
        "start_line": 56,
        "end_line": 60,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/compile_options.ml"
      }
    ],
    "0116f39c36e12d6cb41ec3f7b9e18821": [
      {
        "hash": "0116f39c36e12d6cb41ec3f7b9e18821",
        "text": "log_level = \"quiet\";\ncompile_to_c = false;\nc_output_file = None;\n}",
        "lines": [
          "log_level = \"quiet\";",
          "compile_to_c = false;",
          "c_output_file = None;",
          "}"
        ],
        "start_line": 42,
        "end_line": 45,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/compile_options.ml"
      },
      {
        "hash": "0116f39c36e12d6cb41ec3f7b9e18821",
        "text": "log_level = \"quiet\";\ncompile_to_c = false;\nc_output_file = None;\n}",
        "lines": [
          "log_level = \"quiet\";",
          "compile_to_c = false;",
          "c_output_file = None;",
          "}"
        ],
        "start_line": 57,
        "end_line": 60,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/compile_options.ml"
      }
    ],
    "beb034cf5477d869128ce6598f007e19": [
      {
        "hash": "beb034cf5477d869128ce6598f007e19",
        "text": "concat_strings\n[\n\"函数「\";\nfunc_name;\n\"」参数数量不匹配: 期望 \";\nint_to_string expected;\n\" 个参数，但提供了 \";\nint_to_string actual;\n\" 个参数\";\n]",
        "lines": [
          "concat_strings",
          "[",
          "\"函数「\";",
          "func_name;",
          "\"」参数数量不匹配: 期望 \";",
          "int_to_string expected;",
          "\" 个参数，但提供了 \";",
          "int_to_string actual;",
          "\" 个参数\";",
          "]"
        ],
        "start_line": 28,
        "end_line": 37,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/formatter_errors.ml"
      },
      {
        "hash": "beb034cf5477d869128ce6598f007e19",
        "text": "concat_strings\n[\n\"函数「\";\nfunc_name;\n\"」参数数量不匹配: 期望 \";\nint_to_string expected;\n\" 个参数，但提供了 \";\nint_to_string actual;\n\" 个参数\";\n]",
        "lines": [
          "concat_strings",
          "[",
          "\"函数「\";",
          "func_name;",
          "\"」参数数量不匹配: 期望 \";",
          "int_to_string expected;",
          "\" 个参数，但提供了 \";",
          "int_to_string actual;",
          "\" 个参数\";",
          "]"
        ],
        "start_line": 108,
        "end_line": 117,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/utils/error_formatters.ml"
      }
    ],
    "ce33c7939a2f707184bea33777bb4276": [
      {
        "hash": "ce33c7939a2f707184bea33777bb4276",
        "text": "[\n\"函数「\";\nfunc_name;\n\"」参数数量不匹配: 期望 \";\nint_to_string expected;\n\" 个参数，但提供了 \";\nint_to_string actual;\n\" 个参数\";\n]",
        "lines": [
          "[",
          "\"函数「\";",
          "func_name;",
          "\"」参数数量不匹配: 期望 \";",
          "int_to_string expected;",
          "\" 个参数，但提供了 \";",
          "int_to_string actual;",
          "\" 个参数\";",
          "]"
        ],
        "start_line": 29,
        "end_line": 37,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/formatter_errors.ml"
      },
      {
        "hash": "ce33c7939a2f707184bea33777bb4276",
        "text": "[\n\"函数「\";\nfunc_name;\n\"」参数数量不匹配: 期望 \";\nint_to_string expected;\n\" 个参数，但提供了 \";\nint_to_string actual;\n\" 个参数\";\n]",
        "lines": [
          "[",
          "\"函数「\";",
          "func_name;",
          "\"」参数数量不匹配: 期望 \";",
          "int_to_string expected;",
          "\" 个参数，但提供了 \";",
          "int_to_string actual;",
          "\" 个参数\";",
          "]"
        ],
        "start_line": 109,
        "end_line": 117,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/utils/error_formatters.ml"
      }
    ],
    "a0d345e5510587ada4c995516cd08362": [
      {
        "hash": "a0d345e5510587ada4c995516cd08362",
        "text": "\"函数「\";\nfunc_name;\n\"」参数数量不匹配: 期望 \";\nint_to_string expected;\n\" 个参数，但提供了 \";\nint_to_string actual;\n\" 个参数\";\n]",
        "lines": [
          "\"函数「\";",
          "func_name;",
          "\"」参数数量不匹配: 期望 \";",
          "int_to_string expected;",
          "\" 个参数，但提供了 \";",
          "int_to_string actual;",
          "\" 个参数\";",
          "]"
        ],
        "start_line": 30,
        "end_line": 37,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/formatter_errors.ml"
      },
      {
        "hash": "a0d345e5510587ada4c995516cd08362",
        "text": "\"函数「\";\nfunc_name;\n\"」参数数量不匹配: 期望 \";\nint_to_string expected;\n\" 个参数，但提供了 \";\nint_to_string actual;\n\" 个参数\";\n]",
        "lines": [
          "\"函数「\";",
          "func_name;",
          "\"」参数数量不匹配: 期望 \";",
          "int_to_string expected;",
          "\" 个参数，但提供了 \";",
          "int_to_string actual;",
          "\" 个参数\";",
          "]"
        ],
        "start_line": 110,
        "end_line": 117,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/utils/error_formatters.ml"
      }
    ],
    "832c0c317131fad88bead2a4ef9b83ae": [
      {
        "hash": "832c0c317131fad88bead2a4ef9b83ae",
        "text": "func_name;\n\"」参数数量不匹配: 期望 \";\nint_to_string expected;\n\" 个参数，但提供了 \";\nint_to_string actual;\n\" 个参数\";\n]",
        "lines": [
          "func_name;",
          "\"」参数数量不匹配: 期望 \";",
          "int_to_string expected;",
          "\" 个参数，但提供了 \";",
          "int_to_string actual;",
          "\" 个参数\";",
          "]"
        ],
        "start_line": 31,
        "end_line": 37,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/formatter_errors.ml"
      },
      {
        "hash": "832c0c317131fad88bead2a4ef9b83ae",
        "text": "func_name;\n\"」参数数量不匹配: 期望 \";\nint_to_string expected;\n\" 个参数，但提供了 \";\nint_to_string actual;\n\" 个参数\";\n]",
        "lines": [
          "func_name;",
          "\"」参数数量不匹配: 期望 \";",
          "int_to_string expected;",
          "\" 个参数，但提供了 \";",
          "int_to_string actual;",
          "\" 个参数\";",
          "]"
        ],
        "start_line": 111,
        "end_line": 117,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/utils/error_formatters.ml"
      }
    ],
    "a146c6c6bdf0d1f3739d4ddb46fc4a71": [
      {
        "hash": "a146c6c6bdf0d1f3739d4ddb46fc4a71",
        "text": "\"」参数数量不匹配: 期望 \";\nint_to_string expected;\n\" 个参数，但提供了 \";\nint_to_string actual;\n\" 个参数\";\n]",
        "lines": [
          "\"」参数数量不匹配: 期望 \";",
          "int_to_string expected;",
          "\" 个参数，但提供了 \";",
          "int_to_string actual;",
          "\" 个参数\";",
          "]"
        ],
        "start_line": 32,
        "end_line": 37,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/formatter_errors.ml"
      },
      {
        "hash": "a146c6c6bdf0d1f3739d4ddb46fc4a71",
        "text": "\"」参数数量不匹配: 期望 \";\nint_to_string expected;\n\" 个参数，但提供了 \";\nint_to_string actual;\n\" 个参数\";\n]",
        "lines": [
          "\"」参数数量不匹配: 期望 \";",
          "int_to_string expected;",
          "\" 个参数，但提供了 \";",
          "int_to_string actual;",
          "\" 个参数\";",
          "]"
        ],
        "start_line": 112,
        "end_line": 117,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/utils/error_formatters.ml"
      }
    ],
    "ac11415afb6f4e3679d127ddedb7b341": [
      {
        "hash": "ac11415afb6f4e3679d127ddedb7b341",
        "text": "int_to_string expected;\n\" 个参数，但提供了 \";\nint_to_string actual;\n\" 个参数\";\n]",
        "lines": [
          "int_to_string expected;",
          "\" 个参数，但提供了 \";",
          "int_to_string actual;",
          "\" 个参数\";",
          "]"
        ],
        "start_line": 33,
        "end_line": 37,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/formatter_errors.ml"
      },
      {
        "hash": "ac11415afb6f4e3679d127ddedb7b341",
        "text": "int_to_string expected;\n\" 个参数，但提供了 \";\nint_to_string actual;\n\" 个参数\";\n]",
        "lines": [
          "int_to_string expected;",
          "\" 个参数，但提供了 \";",
          "int_to_string actual;",
          "\" 个参数\";",
          "]"
        ],
        "start_line": 113,
        "end_line": 117,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/utils/error_formatters.ml"
      }
    ],
    "edd02e412e70f395de147e3e7195753d": [
      {
        "hash": "edd02e412e70f395de147e3e7195753d",
        "text": "\" 个参数，但提供了 \";\nint_to_string actual;\n\" 个参数\";\n]",
        "lines": [
          "\" 个参数，但提供了 \";",
          "int_to_string actual;",
          "\" 个参数\";",
          "]"
        ],
        "start_line": 34,
        "end_line": 37,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/formatter_errors.ml"
      },
      {
        "hash": "edd02e412e70f395de147e3e7195753d",
        "text": "\" 个参数，但提供了 \";\nint_to_string actual;\n\" 个参数\";\n]",
        "lines": [
          "\" 个参数，但提供了 \";",
          "int_to_string actual;",
          "\" 个参数\";",
          "]"
        ],
        "start_line": 114,
        "end_line": 117,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/utils/error_formatters.ml"
      }
    ],
    "46df8fdffe73318552df86ab2799a005": [
      {
        "hash": "46df8fdffe73318552df86ab2799a005",
        "text": "int_to_string actual;\n\" 个参数\";\n]",
        "lines": [
          "int_to_string actual;",
          "\" 个参数\";",
          "]"
        ],
        "start_line": 35,
        "end_line": 37,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/formatter_errors.ml"
      },
      {
        "hash": "46df8fdffe73318552df86ab2799a005",
        "text": "int_to_string actual;\n\" 个参数\";\n]",
        "lines": [
          "int_to_string actual;",
          "\" 个参数\";",
          "]"
        ],
        "start_line": 115,
        "end_line": 117,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/utils/error_formatters.ml"
      }
    ],
    "2abf0587baa01d3b188c43854ff5e872": [
      {
        "hash": "2abf0587baa01d3b188c43854ff5e872",
        "text": "]\nin\nlet rec apply_replacements msg replacements =\nmatch replacements with\n| [] -> msg\n| (old_str, new_str) :: rest ->\nlet new_msg = Str.global_replace (Str.regexp_string old_str) new_str msg in\napply_replacements new_msg rest\nin\napply_replacements msg replacements",
        "lines": [
          "]",
          "in",
          "let rec apply_replacements msg replacements =",
          "match replacements with",
          "| [] -> msg",
          "| (old_str, new_str) :: rest ->",
          "let new_msg = Str.global_replace (Str.regexp_string old_str) new_str msg in",
          "apply_replacements new_msg rest",
          "in",
          "apply_replacements msg replacements"
        ],
        "start_line": 26,
        "end_line": 35,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/error_messages_translation.ml"
      },
      {
        "hash": "2abf0587baa01d3b188c43854ff5e872",
        "text": "]\nin\nlet rec apply_replacements msg replacements =\nmatch replacements with\n| [] -> msg\n| (old_str, new_str) :: rest ->\nlet new_msg = Str.global_replace (Str.regexp_string old_str) new_str msg in\napply_replacements new_msg rest\nin\napply_replacements msg replacements",
        "lines": [
          "]",
          "in",
          "let rec apply_replacements msg replacements =",
          "match replacements with",
          "| [] -> msg",
          "| (old_str, new_str) :: rest ->",
          "let new_msg = Str.global_replace (Str.regexp_string old_str) new_str msg in",
          "apply_replacements new_msg rest",
          "in",
          "apply_replacements msg replacements"
        ],
        "start_line": 54,
        "end_line": 63,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/error_messages_translation.ml"
      }
    ],
    "6068db8e98364eefa37ad7eeb1b11ba6": [
      {
        "hash": "6068db8e98364eefa37ad7eeb1b11ba6",
        "text": "in\nlet rec apply_replacements msg replacements =\nmatch replacements with\n| [] -> msg\n| (old_str, new_str) :: rest ->\nlet new_msg = Str.global_replace (Str.regexp_string old_str) new_str msg in\napply_replacements new_msg rest\nin\napply_replacements msg replacements",
        "lines": [
          "in",
          "let rec apply_replacements msg replacements =",
          "match replacements with",
          "| [] -> msg",
          "| (old_str, new_str) :: rest ->",
          "let new_msg = Str.global_replace (Str.regexp_string old_str) new_str msg in",
          "apply_replacements new_msg rest",
          "in",
          "apply_replacements msg replacements"
        ],
        "start_line": 27,
        "end_line": 35,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/error_messages_translation.ml"
      },
      {
        "hash": "6068db8e98364eefa37ad7eeb1b11ba6",
        "text": "in\nlet rec apply_replacements msg replacements =\nmatch replacements with\n| [] -> msg\n| (old_str, new_str) :: rest ->\nlet new_msg = Str.global_replace (Str.regexp_string old_str) new_str msg in\napply_replacements new_msg rest\nin\napply_replacements msg replacements",
        "lines": [
          "in",
          "let rec apply_replacements msg replacements =",
          "match replacements with",
          "| [] -> msg",
          "| (old_str, new_str) :: rest ->",
          "let new_msg = Str.global_replace (Str.regexp_string old_str) new_str msg in",
          "apply_replacements new_msg rest",
          "in",
          "apply_replacements msg replacements"
        ],
        "start_line": 55,
        "end_line": 63,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/error_messages_translation.ml"
      }
    ],
    "4f2b64fc663b548c13c197abfb867457": [
      {
        "hash": "4f2b64fc663b548c13c197abfb867457",
        "text": "let rec apply_replacements msg replacements =\nmatch replacements with\n| [] -> msg\n| (old_str, new_str) :: rest ->\nlet new_msg = Str.global_replace (Str.regexp_string old_str) new_str msg in\napply_replacements new_msg rest\nin\napply_replacements msg replacements",
        "lines": [
          "let rec apply_replacements msg replacements =",
          "match replacements with",
          "| [] -> msg",
          "| (old_str, new_str) :: rest ->",
          "let new_msg = Str.global_replace (Str.regexp_string old_str) new_str msg in",
          "apply_replacements new_msg rest",
          "in",
          "apply_replacements msg replacements"
        ],
        "start_line": 28,
        "end_line": 35,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/error_messages_translation.ml"
      },
      {
        "hash": "4f2b64fc663b548c13c197abfb867457",
        "text": "let rec apply_replacements msg replacements =\nmatch replacements with\n| [] -> msg\n| (old_str, new_str) :: rest ->\nlet new_msg = Str.global_replace (Str.regexp_string old_str) new_str msg in\napply_replacements new_msg rest\nin\napply_replacements msg replacements",
        "lines": [
          "let rec apply_replacements msg replacements =",
          "match replacements with",
          "| [] -> msg",
          "| (old_str, new_str) :: rest ->",
          "let new_msg = Str.global_replace (Str.regexp_string old_str) new_str msg in",
          "apply_replacements new_msg rest",
          "in",
          "apply_replacements msg replacements"
        ],
        "start_line": 56,
        "end_line": 63,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/error_messages_translation.ml"
      }
    ],
    "79b2a09859512f0906b90ba381d9b05a": [
      {
        "hash": "79b2a09859512f0906b90ba381d9b05a",
        "text": "match replacements with\n| [] -> msg\n| (old_str, new_str) :: rest ->\nlet new_msg = Str.global_replace (Str.regexp_string old_str) new_str msg in\napply_replacements new_msg rest\nin\napply_replacements msg replacements",
        "lines": [
          "match replacements with",
          "| [] -> msg",
          "| (old_str, new_str) :: rest ->",
          "let new_msg = Str.global_replace (Str.regexp_string old_str) new_str msg in",
          "apply_replacements new_msg rest",
          "in",
          "apply_replacements msg replacements"
        ],
        "start_line": 29,
        "end_line": 35,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/error_messages_translation.ml"
      },
      {
        "hash": "79b2a09859512f0906b90ba381d9b05a",
        "text": "match replacements with\n| [] -> msg\n| (old_str, new_str) :: rest ->\nlet new_msg = Str.global_replace (Str.regexp_string old_str) new_str msg in\napply_replacements new_msg rest\nin\napply_replacements msg replacements",
        "lines": [
          "match replacements with",
          "| [] -> msg",
          "| (old_str, new_str) :: rest ->",
          "let new_msg = Str.global_replace (Str.regexp_string old_str) new_str msg in",
          "apply_replacements new_msg rest",
          "in",
          "apply_replacements msg replacements"
        ],
        "start_line": 57,
        "end_line": 63,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/error_messages_translation.ml"
      }
    ],
    "75eee3d5da0aada650565e7e9d2aa7bf": [
      {
        "hash": "75eee3d5da0aada650565e7e9d2aa7bf",
        "text": "| [] -> msg\n| (old_str, new_str) :: rest ->\nlet new_msg = Str.global_replace (Str.regexp_string old_str) new_str msg in\napply_replacements new_msg rest\nin\napply_replacements msg replacements",
        "lines": [
          "| [] -> msg",
          "| (old_str, new_str) :: rest ->",
          "let new_msg = Str.global_replace (Str.regexp_string old_str) new_str msg in",
          "apply_replacements new_msg rest",
          "in",
          "apply_replacements msg replacements"
        ],
        "start_line": 30,
        "end_line": 35,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/error_messages_translation.ml"
      },
      {
        "hash": "75eee3d5da0aada650565e7e9d2aa7bf",
        "text": "| [] -> msg\n| (old_str, new_str) :: rest ->\nlet new_msg = Str.global_replace (Str.regexp_string old_str) new_str msg in\napply_replacements new_msg rest\nin\napply_replacements msg replacements",
        "lines": [
          "| [] -> msg",
          "| (old_str, new_str) :: rest ->",
          "let new_msg = Str.global_replace (Str.regexp_string old_str) new_str msg in",
          "apply_replacements new_msg rest",
          "in",
          "apply_replacements msg replacements"
        ],
        "start_line": 58,
        "end_line": 63,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/error_messages_translation.ml"
      }
    ],
    "9ee7c2bdb8648de974df0f7fa32688e9": [
      {
        "hash": "9ee7c2bdb8648de974df0f7fa32688e9",
        "text": "| (old_str, new_str) :: rest ->\nlet new_msg = Str.global_replace (Str.regexp_string old_str) new_str msg in\napply_replacements new_msg rest\nin\napply_replacements msg replacements",
        "lines": [
          "| (old_str, new_str) :: rest ->",
          "let new_msg = Str.global_replace (Str.regexp_string old_str) new_str msg in",
          "apply_replacements new_msg rest",
          "in",
          "apply_replacements msg replacements"
        ],
        "start_line": 31,
        "end_line": 35,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/error_messages_translation.ml"
      },
      {
        "hash": "9ee7c2bdb8648de974df0f7fa32688e9",
        "text": "| (old_str, new_str) :: rest ->\nlet new_msg = Str.global_replace (Str.regexp_string old_str) new_str msg in\napply_replacements new_msg rest\nin\napply_replacements msg replacements",
        "lines": [
          "| (old_str, new_str) :: rest ->",
          "let new_msg = Str.global_replace (Str.regexp_string old_str) new_str msg in",
          "apply_replacements new_msg rest",
          "in",
          "apply_replacements msg replacements"
        ],
        "start_line": 59,
        "end_line": 63,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/error_messages_translation.ml"
      }
    ],
    "bf46d2e6a40cb00f4b18bf21f42026b3": [
      {
        "hash": "bf46d2e6a40cb00f4b18bf21f42026b3",
        "text": "let new_msg = Str.global_replace (Str.regexp_string old_str) new_str msg in\napply_replacements new_msg rest\nin\napply_replacements msg replacements",
        "lines": [
          "let new_msg = Str.global_replace (Str.regexp_string old_str) new_str msg in",
          "apply_replacements new_msg rest",
          "in",
          "apply_replacements msg replacements"
        ],
        "start_line": 32,
        "end_line": 35,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/error_messages_translation.ml"
      },
      {
        "hash": "bf46d2e6a40cb00f4b18bf21f42026b3",
        "text": "let new_msg = Str.global_replace (Str.regexp_string old_str) new_str msg in\napply_replacements new_msg rest\nin\napply_replacements msg replacements",
        "lines": [
          "let new_msg = Str.global_replace (Str.regexp_string old_str) new_str msg in",
          "apply_replacements new_msg rest",
          "in",
          "apply_replacements msg replacements"
        ],
        "start_line": 60,
        "end_line": 63,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/error_messages_translation.ml"
      }
    ],
    "9be408939c3e7eea5311eb46f5d8dc1a": [
      {
        "hash": "9be408939c3e7eea5311eb46f5d8dc1a",
        "text": "apply_replacements new_msg rest\nin\napply_replacements msg replacements",
        "lines": [
          "apply_replacements new_msg rest",
          "in",
          "apply_replacements msg replacements"
        ],
        "start_line": 33,
        "end_line": 35,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/error_messages_translation.ml"
      },
      {
        "hash": "9be408939c3e7eea5311eb46f5d8dc1a",
        "text": "apply_replacements new_msg rest\nin\napply_replacements msg replacements",
        "lines": [
          "apply_replacements new_msg rest",
          "in",
          "apply_replacements msg replacements"
        ],
        "start_line": 61,
        "end_line": 63,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/error_messages_translation.ml"
      }
    ],
    "3757c99cb79f1892982d6d5d58b41d56": [
      {
        "hash": "3757c99cb79f1892982d6d5d58b41d56",
        "text": "let trim_whitespace s =\nlet len = String.length s in\nlet rec start i =\nif i >= len then len else match s.[i] with ' ' | '\\t' | '\\n' | '\\r' -> start (i + 1) | _ -> i\nin\nlet rec finish i =\nif i < 0 then -1 else match s.[i] with ' ' | '\\t' | '\\n' | '\\r' -> finish (i - 1) | _ -> i\nin\nlet s_start = start 0 in\nlet s_end = finish (len - 1) in",
        "lines": [
          "let trim_whitespace s =",
          "let len = String.length s in",
          "let rec start i =",
          "if i >= len then len else match s.[i] with ' ' | '\\t' | '\\n' | '\\r' -> start (i + 1) | _ -> i",
          "in",
          "let rec finish i =",
          "if i < 0 then -1 else match s.[i] with ' ' | '\\t' | '\\n' | '\\r' -> finish (i - 1) | _ -> i",
          "in",
          "let s_start = start 0 in",
          "let s_end = finish (len - 1) in"
        ],
        "start_line": 7,
        "end_line": 16,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/data_loader_parser.ml"
      },
      {
        "hash": "3757c99cb79f1892982d6d5d58b41d56",
        "text": "let trim_whitespace s =\nlet len = String.length s in\nlet rec start i =\nif i >= len then len else match s.[i] with ' ' | '\\t' | '\\n' | '\\r' -> start (i + 1) | _ -> i\nin\nlet rec finish i =\nif i < 0 then -1 else match s.[i] with ' ' | '\\t' | '\\n' | '\\r' -> finish (i - 1) | _ -> i\nin\nlet s_start = start 0 in\nlet s_end = finish (len - 1) in",
        "lines": [
          "let trim_whitespace s =",
          "let len = String.length s in",
          "let rec start i =",
          "if i >= len then len else match s.[i] with ' ' | '\\t' | '\\n' | '\\r' -> start (i + 1) | _ -> i",
          "in",
          "let rec finish i =",
          "if i < 0 then -1 else match s.[i] with ' ' | '\\t' | '\\n' | '\\r' -> finish (i - 1) | _ -> i",
          "in",
          "let s_start = start 0 in",
          "let s_end = finish (len - 1) in"
        ],
        "start_line": 10,
        "end_line": 19,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/poetry_json_parser.ml"
      }
    ],
    "88c1118582aeeec705511f1bc1c16821": [
      {
        "hash": "88c1118582aeeec705511f1bc1c16821",
        "text": "let len = String.length s in\nlet rec start i =\nif i >= len then len else match s.[i] with ' ' | '\\t' | '\\n' | '\\r' -> start (i + 1) | _ -> i\nin\nlet rec finish i =\nif i < 0 then -1 else match s.[i] with ' ' | '\\t' | '\\n' | '\\r' -> finish (i - 1) | _ -> i\nin\nlet s_start = start 0 in\nlet s_end = finish (len - 1) in\nif s_start > s_end then \"\" else String.sub s s_start (s_end - s_start + 1)",
        "lines": [
          "let len = String.length s in",
          "let rec start i =",
          "if i >= len then len else match s.[i] with ' ' | '\\t' | '\\n' | '\\r' -> start (i + 1) | _ -> i",
          "in",
          "let rec finish i =",
          "if i < 0 then -1 else match s.[i] with ' ' | '\\t' | '\\n' | '\\r' -> finish (i - 1) | _ -> i",
          "in",
          "let s_start = start 0 in",
          "let s_end = finish (len - 1) in",
          "if s_start > s_end then \"\" else String.sub s s_start (s_end - s_start + 1)"
        ],
        "start_line": 8,
        "end_line": 17,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/data_loader_parser.ml"
      },
      {
        "hash": "88c1118582aeeec705511f1bc1c16821",
        "text": "let len = String.length s in\nlet rec start i =\nif i >= len then len else match s.[i] with ' ' | '\\t' | '\\n' | '\\r' -> start (i + 1) | _ -> i\nin\nlet rec finish i =\nif i < 0 then -1 else match s.[i] with ' ' | '\\t' | '\\n' | '\\r' -> finish (i - 1) | _ -> i\nin\nlet s_start = start 0 in\nlet s_end = finish (len - 1) in\nif s_start > s_end then \"\" else String.sub s s_start (s_end - s_start + 1)",
        "lines": [
          "let len = String.length s in",
          "let rec start i =",
          "if i >= len then len else match s.[i] with ' ' | '\\t' | '\\n' | '\\r' -> start (i + 1) | _ -> i",
          "in",
          "let rec finish i =",
          "if i < 0 then -1 else match s.[i] with ' ' | '\\t' | '\\n' | '\\r' -> finish (i - 1) | _ -> i",
          "in",
          "let s_start = start 0 in",
          "let s_end = finish (len - 1) in",
          "if s_start > s_end then \"\" else String.sub s s_start (s_end - s_start + 1)"
        ],
        "start_line": 11,
        "end_line": 20,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/poetry_json_parser.ml"
      }
    ],
    "43171d09b3392f192771edf45e8859af": [
      {
        "hash": "43171d09b3392f192771edf45e8859af",
        "text": "let rec start i =\nif i >= len then len else match s.[i] with ' ' | '\\t' | '\\n' | '\\r' -> start (i + 1) | _ -> i\nin\nlet rec finish i =\nif i < 0 then -1 else match s.[i] with ' ' | '\\t' | '\\n' | '\\r' -> finish (i - 1) | _ -> i\nin\nlet s_start = start 0 in\nlet s_end = finish (len - 1) in\nif s_start > s_end then \"\" else String.sub s s_start (s_end - s_start + 1)",
        "lines": [
          "let rec start i =",
          "if i >= len then len else match s.[i] with ' ' | '\\t' | '\\n' | '\\r' -> start (i + 1) | _ -> i",
          "in",
          "let rec finish i =",
          "if i < 0 then -1 else match s.[i] with ' ' | '\\t' | '\\n' | '\\r' -> finish (i - 1) | _ -> i",
          "in",
          "let s_start = start 0 in",
          "let s_end = finish (len - 1) in",
          "if s_start > s_end then \"\" else String.sub s s_start (s_end - s_start + 1)"
        ],
        "start_line": 9,
        "end_line": 17,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/data_loader_parser.ml"
      },
      {
        "hash": "43171d09b3392f192771edf45e8859af",
        "text": "let rec start i =\nif i >= len then len else match s.[i] with ' ' | '\\t' | '\\n' | '\\r' -> start (i + 1) | _ -> i\nin\nlet rec finish i =\nif i < 0 then -1 else match s.[i] with ' ' | '\\t' | '\\n' | '\\r' -> finish (i - 1) | _ -> i\nin\nlet s_start = start 0 in\nlet s_end = finish (len - 1) in\nif s_start > s_end then \"\" else String.sub s s_start (s_end - s_start + 1)",
        "lines": [
          "let rec start i =",
          "if i >= len then len else match s.[i] with ' ' | '\\t' | '\\n' | '\\r' -> start (i + 1) | _ -> i",
          "in",
          "let rec finish i =",
          "if i < 0 then -1 else match s.[i] with ' ' | '\\t' | '\\n' | '\\r' -> finish (i - 1) | _ -> i",
          "in",
          "let s_start = start 0 in",
          "let s_end = finish (len - 1) in",
          "if s_start > s_end then \"\" else String.sub s s_start (s_end - s_start + 1)"
        ],
        "start_line": 12,
        "end_line": 20,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/poetry_json_parser.ml"
      }
    ],
    "077a257e3ec6c836f4298f7ed0a9658c": [
      {
        "hash": "077a257e3ec6c836f4298f7ed0a9658c",
        "text": "if i >= len then len else match s.[i] with ' ' | '\\t' | '\\n' | '\\r' -> start (i + 1) | _ -> i\nin\nlet rec finish i =\nif i < 0 then -1 else match s.[i] with ' ' | '\\t' | '\\n' | '\\r' -> finish (i - 1) | _ -> i\nin\nlet s_start = start 0 in\nlet s_end = finish (len - 1) in\nif s_start > s_end then \"\" else String.sub s s_start (s_end - s_start + 1)",
        "lines": [
          "if i >= len then len else match s.[i] with ' ' | '\\t' | '\\n' | '\\r' -> start (i + 1) | _ -> i",
          "in",
          "let rec finish i =",
          "if i < 0 then -1 else match s.[i] with ' ' | '\\t' | '\\n' | '\\r' -> finish (i - 1) | _ -> i",
          "in",
          "let s_start = start 0 in",
          "let s_end = finish (len - 1) in",
          "if s_start > s_end then \"\" else String.sub s s_start (s_end - s_start + 1)"
        ],
        "start_line": 10,
        "end_line": 17,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/data_loader_parser.ml"
      },
      {
        "hash": "077a257e3ec6c836f4298f7ed0a9658c",
        "text": "if i >= len then len else match s.[i] with ' ' | '\\t' | '\\n' | '\\r' -> start (i + 1) | _ -> i\nin\nlet rec finish i =\nif i < 0 then -1 else match s.[i] with ' ' | '\\t' | '\\n' | '\\r' -> finish (i - 1) | _ -> i\nin\nlet s_start = start 0 in\nlet s_end = finish (len - 1) in\nif s_start > s_end then \"\" else String.sub s s_start (s_end - s_start + 1)",
        "lines": [
          "if i >= len then len else match s.[i] with ' ' | '\\t' | '\\n' | '\\r' -> start (i + 1) | _ -> i",
          "in",
          "let rec finish i =",
          "if i < 0 then -1 else match s.[i] with ' ' | '\\t' | '\\n' | '\\r' -> finish (i - 1) | _ -> i",
          "in",
          "let s_start = start 0 in",
          "let s_end = finish (len - 1) in",
          "if s_start > s_end then \"\" else String.sub s s_start (s_end - s_start + 1)"
        ],
        "start_line": 13,
        "end_line": 20,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/poetry_json_parser.ml"
      }
    ],
    "faaa260218b10384048df747faaeb4c7": [
      {
        "hash": "faaa260218b10384048df747faaeb4c7",
        "text": "in\nlet rec finish i =\nif i < 0 then -1 else match s.[i] with ' ' | '\\t' | '\\n' | '\\r' -> finish (i - 1) | _ -> i\nin\nlet s_start = start 0 in\nlet s_end = finish (len - 1) in\nif s_start > s_end then \"\" else String.sub s s_start (s_end - s_start + 1)",
        "lines": [
          "in",
          "let rec finish i =",
          "if i < 0 then -1 else match s.[i] with ' ' | '\\t' | '\\n' | '\\r' -> finish (i - 1) | _ -> i",
          "in",
          "let s_start = start 0 in",
          "let s_end = finish (len - 1) in",
          "if s_start > s_end then \"\" else String.sub s s_start (s_end - s_start + 1)"
        ],
        "start_line": 11,
        "end_line": 17,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/data_loader_parser.ml"
      },
      {
        "hash": "faaa260218b10384048df747faaeb4c7",
        "text": "in\nlet rec finish i =\nif i < 0 then -1 else match s.[i] with ' ' | '\\t' | '\\n' | '\\r' -> finish (i - 1) | _ -> i\nin\nlet s_start = start 0 in\nlet s_end = finish (len - 1) in\nif s_start > s_end then \"\" else String.sub s s_start (s_end - s_start + 1)",
        "lines": [
          "in",
          "let rec finish i =",
          "if i < 0 then -1 else match s.[i] with ' ' | '\\t' | '\\n' | '\\r' -> finish (i - 1) | _ -> i",
          "in",
          "let s_start = start 0 in",
          "let s_end = finish (len - 1) in",
          "if s_start > s_end then \"\" else String.sub s s_start (s_end - s_start + 1)"
        ],
        "start_line": 14,
        "end_line": 20,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/poetry_json_parser.ml"
      }
    ],
    "cadd270c6a889688e371ec89107cbef6": [
      {
        "hash": "cadd270c6a889688e371ec89107cbef6",
        "text": "let rec finish i =\nif i < 0 then -1 else match s.[i] with ' ' | '\\t' | '\\n' | '\\r' -> finish (i - 1) | _ -> i\nin\nlet s_start = start 0 in\nlet s_end = finish (len - 1) in\nif s_start > s_end then \"\" else String.sub s s_start (s_end - s_start + 1)",
        "lines": [
          "let rec finish i =",
          "if i < 0 then -1 else match s.[i] with ' ' | '\\t' | '\\n' | '\\r' -> finish (i - 1) | _ -> i",
          "in",
          "let s_start = start 0 in",
          "let s_end = finish (len - 1) in",
          "if s_start > s_end then \"\" else String.sub s s_start (s_end - s_start + 1)"
        ],
        "start_line": 12,
        "end_line": 17,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/data_loader_parser.ml"
      },
      {
        "hash": "cadd270c6a889688e371ec89107cbef6",
        "text": "let rec finish i =\nif i < 0 then -1 else match s.[i] with ' ' | '\\t' | '\\n' | '\\r' -> finish (i - 1) | _ -> i\nin\nlet s_start = start 0 in\nlet s_end = finish (len - 1) in\nif s_start > s_end then \"\" else String.sub s s_start (s_end - s_start + 1)",
        "lines": [
          "let rec finish i =",
          "if i < 0 then -1 else match s.[i] with ' ' | '\\t' | '\\n' | '\\r' -> finish (i - 1) | _ -> i",
          "in",
          "let s_start = start 0 in",
          "let s_end = finish (len - 1) in",
          "if s_start > s_end then \"\" else String.sub s s_start (s_end - s_start + 1)"
        ],
        "start_line": 15,
        "end_line": 20,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/poetry_json_parser.ml"
      }
    ],
    "6896608d038d2613bb2e3e3e8b36da18": [
      {
        "hash": "6896608d038d2613bb2e3e3e8b36da18",
        "text": "if i < 0 then -1 else match s.[i] with ' ' | '\\t' | '\\n' | '\\r' -> finish (i - 1) | _ -> i\nin\nlet s_start = start 0 in\nlet s_end = finish (len - 1) in\nif s_start > s_end then \"\" else String.sub s s_start (s_end - s_start + 1)",
        "lines": [
          "if i < 0 then -1 else match s.[i] with ' ' | '\\t' | '\\n' | '\\r' -> finish (i - 1) | _ -> i",
          "in",
          "let s_start = start 0 in",
          "let s_end = finish (len - 1) in",
          "if s_start > s_end then \"\" else String.sub s s_start (s_end - s_start + 1)"
        ],
        "start_line": 13,
        "end_line": 17,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/data_loader_parser.ml"
      },
      {
        "hash": "6896608d038d2613bb2e3e3e8b36da18",
        "text": "if i < 0 then -1 else match s.[i] with ' ' | '\\t' | '\\n' | '\\r' -> finish (i - 1) | _ -> i\nin\nlet s_start = start 0 in\nlet s_end = finish (len - 1) in\nif s_start > s_end then \"\" else String.sub s s_start (s_end - s_start + 1)",
        "lines": [
          "if i < 0 then -1 else match s.[i] with ' ' | '\\t' | '\\n' | '\\r' -> finish (i - 1) | _ -> i",
          "in",
          "let s_start = start 0 in",
          "let s_end = finish (len - 1) in",
          "if s_start > s_end then \"\" else String.sub s s_start (s_end - s_start + 1)"
        ],
        "start_line": 16,
        "end_line": 20,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/poetry_json_parser.ml"
      }
    ],
    "388f84f18b9c601b31737c508f74b42a": [
      {
        "hash": "388f84f18b9c601b31737c508f74b42a",
        "text": "in\nlet s_start = start 0 in\nlet s_end = finish (len - 1) in\nif s_start > s_end then \"\" else String.sub s s_start (s_end - s_start + 1)",
        "lines": [
          "in",
          "let s_start = start 0 in",
          "let s_end = finish (len - 1) in",
          "if s_start > s_end then \"\" else String.sub s s_start (s_end - s_start + 1)"
        ],
        "start_line": 14,
        "end_line": 17,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/data_loader_parser.ml"
      },
      {
        "hash": "388f84f18b9c601b31737c508f74b42a",
        "text": "in\nlet s_start = start 0 in\nlet s_end = finish (len - 1) in\nif s_start > s_end then \"\" else String.sub s s_start (s_end - s_start + 1)",
        "lines": [
          "in",
          "let s_start = start 0 in",
          "let s_end = finish (len - 1) in",
          "if s_start > s_end then \"\" else String.sub s s_start (s_end - s_start + 1)"
        ],
        "start_line": 17,
        "end_line": 20,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/poetry_json_parser.ml"
      }
    ],
    "e9b9846d68eefc21fdfa4103618796d3": [
      {
        "hash": "e9b9846d68eefc21fdfa4103618796d3",
        "text": "let s_start = start 0 in\nlet s_end = finish (len - 1) in\nif s_start > s_end then \"\" else String.sub s s_start (s_end - s_start + 1)",
        "lines": [
          "let s_start = start 0 in",
          "let s_end = finish (len - 1) in",
          "if s_start > s_end then \"\" else String.sub s s_start (s_end - s_start + 1)"
        ],
        "start_line": 15,
        "end_line": 17,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/data_loader_parser.ml"
      },
      {
        "hash": "e9b9846d68eefc21fdfa4103618796d3",
        "text": "let s_start = start 0 in\nlet s_end = finish (len - 1) in\nif s_start > s_end then \"\" else String.sub s s_start (s_end - s_start + 1)",
        "lines": [
          "let s_start = start 0 in",
          "let s_end = finish (len - 1) in",
          "if s_start > s_end then \"\" else String.sub s s_start (s_end - s_start + 1)"
        ],
        "start_line": 18,
        "end_line": 20,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/poetry_json_parser.ml"
      }
    ],
    "893c0357d3f673209618bf648d75284c": [
      {
        "hash": "893c0357d3f673209618bf648d75284c",
        "text": "let make_compatible_positioned_token token_str value_opt filename line column =\nmatch convert_legacy_token_string token_str value_opt with\n| Some token ->\nlet position =\n{ Unified_token_core.filename; line; column; offset = 0 }\nin\nSome { Unified_token_core.token; position; metadata = None }\n| None -> None",
        "lines": [
          "let make_compatible_positioned_token token_str value_opt filename line column =",
          "match convert_legacy_token_string token_str value_opt with",
          "| Some token ->",
          "let position =",
          "{ Unified_token_core.filename; line; column; offset = 0 }",
          "in",
          "Some { Unified_token_core.token; position; metadata = None }",
          "| None -> None"
        ],
        "start_line": 35,
        "end_line": 42,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_core.ml"
      },
      {
        "hash": "893c0357d3f673209618bf648d75284c",
        "text": "let make_compatible_positioned_token token_str value_opt filename line column =\nmatch convert_legacy_token_string token_str value_opt with\n| Some token ->\nlet position =\n{ Unified_token_core.filename; line; column; offset = 0 }\nin\nSome { Unified_token_core.token; position; metadata = None }\n| None -> None",
        "lines": [
          "let make_compatible_positioned_token token_str value_opt filename line column =",
          "match convert_legacy_token_string token_str value_opt with",
          "| Some token ->",
          "let position =",
          "{ Unified_token_core.filename; line; column; offset = 0 }",
          "in",
          "Some { Unified_token_core.token; position; metadata = None }",
          "| None -> None"
        ],
        "start_line": 352,
        "end_line": 359,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      }
    ],
    "d2b250f1dfe099f86e304db39b5a42d0": [
      {
        "hash": "d2b250f1dfe099f86e304db39b5a42d0",
        "text": "match convert_legacy_token_string token_str value_opt with\n| Some token ->\nlet position =\n{ Unified_token_core.filename; line; column; offset = 0 }\nin\nSome { Unified_token_core.token; position; metadata = None }\n| None -> None",
        "lines": [
          "match convert_legacy_token_string token_str value_opt with",
          "| Some token ->",
          "let position =",
          "{ Unified_token_core.filename; line; column; offset = 0 }",
          "in",
          "Some { Unified_token_core.token; position; metadata = None }",
          "| None -> None"
        ],
        "start_line": 36,
        "end_line": 42,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_core.ml"
      },
      {
        "hash": "d2b250f1dfe099f86e304db39b5a42d0",
        "text": "match convert_legacy_token_string token_str value_opt with\n| Some token ->\nlet position =\n{ Unified_token_core.filename; line; column; offset = 0 }\nin\nSome { Unified_token_core.token; position; metadata = None }\n| None -> None",
        "lines": [
          "match convert_legacy_token_string token_str value_opt with",
          "| Some token ->",
          "let position =",
          "{ Unified_token_core.filename; line; column; offset = 0 }",
          "in",
          "Some { Unified_token_core.token; position; metadata = None }",
          "| None -> None"
        ],
        "start_line": 353,
        "end_line": 359,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      }
    ],
    "6f1768e24bc400de4658c4cf65dadd98": [
      {
        "hash": "6f1768e24bc400de4658c4cf65dadd98",
        "text": "| Some token ->\nlet position =\n{ Unified_token_core.filename; line; column; offset = 0 }\nin\nSome { Unified_token_core.token; position; metadata = None }\n| None -> None",
        "lines": [
          "| Some token ->",
          "let position =",
          "{ Unified_token_core.filename; line; column; offset = 0 }",
          "in",
          "Some { Unified_token_core.token; position; metadata = None }",
          "| None -> None"
        ],
        "start_line": 37,
        "end_line": 42,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_core.ml"
      },
      {
        "hash": "6f1768e24bc400de4658c4cf65dadd98",
        "text": "| Some token ->\nlet position =\n{ Unified_token_core.filename; line; column; offset = 0 }\nin\nSome { Unified_token_core.token; position; metadata = None }\n| None -> None",
        "lines": [
          "| Some token ->",
          "let position =",
          "{ Unified_token_core.filename; line; column; offset = 0 }",
          "in",
          "Some { Unified_token_core.token; position; metadata = None }",
          "| None -> None"
        ],
        "start_line": 354,
        "end_line": 359,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      }
    ],
    "3779746d963b01f0b31521b7d5cf82b1": [
      {
        "hash": "3779746d963b01f0b31521b7d5cf82b1",
        "text": "let position =\n{ Unified_token_core.filename; line; column; offset = 0 }\nin\nSome { Unified_token_core.token; position; metadata = None }\n| None -> None",
        "lines": [
          "let position =",
          "{ Unified_token_core.filename; line; column; offset = 0 }",
          "in",
          "Some { Unified_token_core.token; position; metadata = None }",
          "| None -> None"
        ],
        "start_line": 38,
        "end_line": 42,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_core.ml"
      },
      {
        "hash": "3779746d963b01f0b31521b7d5cf82b1",
        "text": "let position =\n{ Unified_token_core.filename; line; column; offset = 0 }\nin\nSome { Unified_token_core.token; position; metadata = None }\n| None -> None",
        "lines": [
          "let position =",
          "{ Unified_token_core.filename; line; column; offset = 0 }",
          "in",
          "Some { Unified_token_core.token; position; metadata = None }",
          "| None -> None"
        ],
        "start_line": 355,
        "end_line": 359,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      }
    ],
    "d2df37ec162320280303223a857a49a0": [
      {
        "hash": "d2df37ec162320280303223a857a49a0",
        "text": "{ Unified_token_core.filename; line; column; offset = 0 }\nin\nSome { Unified_token_core.token; position; metadata = None }\n| None -> None",
        "lines": [
          "{ Unified_token_core.filename; line; column; offset = 0 }",
          "in",
          "Some { Unified_token_core.token; position; metadata = None }",
          "| None -> None"
        ],
        "start_line": 39,
        "end_line": 42,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_core.ml"
      },
      {
        "hash": "d2df37ec162320280303223a857a49a0",
        "text": "{ Unified_token_core.filename; line; column; offset = 0 }\nin\nSome { Unified_token_core.token; position; metadata = None }\n| None -> None",
        "lines": [
          "{ Unified_token_core.filename; line; column; offset = 0 }",
          "in",
          "Some { Unified_token_core.token; position; metadata = None }",
          "| None -> None"
        ],
        "start_line": 356,
        "end_line": 359,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      }
    ],
    "dc800ae104b793814fcfe5960c47a797": [
      {
        "hash": "dc800ae104b793814fcfe5960c47a797",
        "text": "in\nSome { Unified_token_core.token; position; metadata = None }\n| None -> None",
        "lines": [
          "in",
          "Some { Unified_token_core.token; position; metadata = None }",
          "| None -> None"
        ],
        "start_line": 40,
        "end_line": 42,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_core.ml"
      },
      {
        "hash": "dc800ae104b793814fcfe5960c47a797",
        "text": "in\nSome { Unified_token_core.token; position; metadata = None }\n| None -> None",
        "lines": [
          "in",
          "Some { Unified_token_core.token; position; metadata = None }",
          "| None -> None"
        ],
        "start_line": 357,
        "end_line": 359,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      }
    ],
    "7a838f5a9303ebb8e9acf5c9f8731e67": [
      {
        "hash": "7a838f5a9303ebb8e9acf5c9f8731e67",
        "text": "| MixedLanguage of string * string * string\n| ImproperWordOrder of string * string * string\n| Unidiomatic of string * string * string\n| InconsistentStyle of string * string * string\n| ModernizationSuggestion of string * string * string",
        "lines": [
          "| MixedLanguage of string * string * string",
          "| ImproperWordOrder of string * string * string",
          "| Unidiomatic of string * string * string",
          "| InconsistentStyle of string * string * string",
          "| ModernizationSuggestion of string * string * string"
        ],
        "start_line": 20,
        "end_line": 24,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices.ml"
      },
      {
        "hash": "7a838f5a9303ebb8e9acf5c9f8731e67",
        "text": "| MixedLanguage of string * string * string\n| ImproperWordOrder of string * string * string\n| Unidiomatic of string * string * string\n| InconsistentStyle of string * string * string\n| ModernizationSuggestion of string * string * string",
        "lines": [
          "| MixedLanguage of string * string * string",
          "| ImproperWordOrder of string * string * string",
          "| Unidiomatic of string * string * string",
          "| InconsistentStyle of string * string * string",
          "| ModernizationSuggestion of string * string * string"
        ],
        "start_line": 5,
        "end_line": 9,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/types/practice_types.ml"
      }
    ],
    "efd1586b84d3ba74684c7f7c5ca4017c": [
      {
        "hash": "efd1586b84d3ba74684c7f7c5ca4017c",
        "text": "| ImproperWordOrder of string * string * string\n| Unidiomatic of string * string * string\n| InconsistentStyle of string * string * string\n| ModernizationSuggestion of string * string * string",
        "lines": [
          "| ImproperWordOrder of string * string * string",
          "| Unidiomatic of string * string * string",
          "| InconsistentStyle of string * string * string",
          "| ModernizationSuggestion of string * string * string"
        ],
        "start_line": 21,
        "end_line": 24,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices.ml"
      },
      {
        "hash": "efd1586b84d3ba74684c7f7c5ca4017c",
        "text": "| ImproperWordOrder of string * string * string\n| Unidiomatic of string * string * string\n| InconsistentStyle of string * string * string\n| ModernizationSuggestion of string * string * string",
        "lines": [
          "| ImproperWordOrder of string * string * string",
          "| Unidiomatic of string * string * string",
          "| InconsistentStyle of string * string * string",
          "| ModernizationSuggestion of string * string * string"
        ],
        "start_line": 6,
        "end_line": 9,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/types/practice_types.ml"
      }
    ],
    "038c7ea35462c23ff3d98d893c673ee0": [
      {
        "hash": "038c7ea35462c23ff3d98d893c673ee0",
        "text": "| Unidiomatic of string * string * string\n| InconsistentStyle of string * string * string\n| ModernizationSuggestion of string * string * string",
        "lines": [
          "| Unidiomatic of string * string * string",
          "| InconsistentStyle of string * string * string",
          "| ModernizationSuggestion of string * string * string"
        ],
        "start_line": 22,
        "end_line": 24,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices.ml"
      },
      {
        "hash": "038c7ea35462c23ff3d98d893c673ee0",
        "text": "| Unidiomatic of string * string * string\n| InconsistentStyle of string * string * string\n| ModernizationSuggestion of string * string * string",
        "lines": [
          "| Unidiomatic of string * string * string",
          "| InconsistentStyle of string * string * string",
          "| ModernizationSuggestion of string * string * string"
        ],
        "start_line": 7,
        "end_line": 9,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/types/practice_types.ml"
      }
    ],
    "7d46811f27b915529685d6a59cb9d018": [
      {
        "hash": "7d46811f27b915529685d6a59cb9d018",
        "text": "| Error\n| Warning\n| Info\n| Style",
        "lines": [
          "| Error",
          "| Warning",
          "| Info",
          "| Style"
        ],
        "start_line": 27,
        "end_line": 30,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices.ml"
      },
      {
        "hash": "7d46811f27b915529685d6a59cb9d018",
        "text": "| Error\n| Warning\n| Info\n| Style",
        "lines": [
          "| Error",
          "| Warning",
          "| Info",
          "| Style"
        ],
        "start_line": 5,
        "end_line": 8,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/types/severity_types.ml"
      }
    ],
    "96364fe82b7919a82e0213a1caa446f1": [
      {
        "hash": "96364fe82b7919a82e0213a1caa446f1",
        "text": "| Warning\n| Info\n| Style",
        "lines": [
          "| Warning",
          "| Info",
          "| Style"
        ],
        "start_line": 28,
        "end_line": 30,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices.ml"
      },
      {
        "hash": "96364fe82b7919a82e0213a1caa446f1",
        "text": "| Warning\n| Info\n| Style",
        "lines": [
          "| Warning",
          "| Info",
          "| Style"
        ],
        "start_line": 6,
        "end_line": 8,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/types/severity_types.ml"
      }
    ],
    "f54f903189b3e5cf0cb5ea5c29ccab9b": [
      {
        "hash": "f54f903189b3e5cf0cb5ea5c29ccab9b",
        "text": "severity : severity;\nmessage : string;\nsuggestion : string;\nconfidence : float;\nai_friendly : bool;\n}",
        "lines": [
          "severity : severity;",
          "message : string;",
          "suggestion : string;",
          "confidence : float;",
          "ai_friendly : bool;",
          "}"
        ],
        "start_line": 34,
        "end_line": 39,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices.ml"
      },
      {
        "hash": "f54f903189b3e5cf0cb5ea5c29ccab9b",
        "text": "severity : severity;\nmessage : string;\nsuggestion : string;\nconfidence : float;\nai_friendly : bool;\n}",
        "lines": [
          "severity : severity;",
          "message : string;",
          "suggestion : string;",
          "confidence : float;",
          "ai_friendly : bool;",
          "}"
        ],
        "start_line": 12,
        "end_line": 17,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/types/severity_types.ml"
      }
    ],
    "188d7cfa7e40b14854058ca5cebca6c2": [
      {
        "hash": "188d7cfa7e40b14854058ca5cebca6c2",
        "text": "message : string;\nsuggestion : string;\nconfidence : float;\nai_friendly : bool;\n}",
        "lines": [
          "message : string;",
          "suggestion : string;",
          "confidence : float;",
          "ai_friendly : bool;",
          "}"
        ],
        "start_line": 35,
        "end_line": 39,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices.ml"
      },
      {
        "hash": "188d7cfa7e40b14854058ca5cebca6c2",
        "text": "message : string;\nsuggestion : string;\nconfidence : float;\nai_friendly : bool;\n}",
        "lines": [
          "message : string;",
          "suggestion : string;",
          "confidence : float;",
          "ai_friendly : bool;",
          "}"
        ],
        "start_line": 13,
        "end_line": 17,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/types/severity_types.ml"
      }
    ],
    "71515e8c37efb0677dda546a1739ba47": [
      {
        "hash": "71515e8c37efb0677dda546a1739ba47",
        "text": "suggestion : string;\nconfidence : float;\nai_friendly : bool;\n}",
        "lines": [
          "suggestion : string;",
          "confidence : float;",
          "ai_friendly : bool;",
          "}"
        ],
        "start_line": 36,
        "end_line": 39,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices.ml"
      },
      {
        "hash": "71515e8c37efb0677dda546a1739ba47",
        "text": "suggestion : string;\nconfidence : float;\nai_friendly : bool;\n}",
        "lines": [
          "suggestion : string;",
          "confidence : float;",
          "ai_friendly : bool;",
          "}"
        ],
        "start_line": 14,
        "end_line": 17,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/types/severity_types.ml"
      }
    ],
    "19098334a1886c90ec454511cdcb8ef1": [
      {
        "hash": "19098334a1886c90ec454511cdcb8ef1",
        "text": "confidence : float;\nai_friendly : bool;\n}",
        "lines": [
          "confidence : float;",
          "ai_friendly : bool;",
          "}"
        ],
        "start_line": 37,
        "end_line": 39,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices.ml"
      },
      {
        "hash": "19098334a1886c90ec454511cdcb8ef1",
        "text": "confidence : float;\nai_friendly : bool;\n}",
        "lines": [
          "confidence : float;",
          "ai_friendly : bool;",
          "}"
        ],
        "start_line": 15,
        "end_line": 17,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/types/severity_types.ml"
      }
    ],
    "2bf3b86f7a0962278336de0092e2c8ea": [
      {
        "hash": "2bf3b86f7a0962278336de0092e2c8ea",
        "text": "let map_basic_keywords = function\n| \"let\" -> Some LetKeyword\n| \"rec\" -> Some RecKeyword\n| \"in\" -> Some InKeyword\n| \"fun\" -> Some FunKeyword\n| \"if\" -> Some IfKeyword\n| \"then\" -> Some ThenKeyword\n| \"else\" -> Some ElseKeyword\n| \"match\" -> Some MatchKeyword\n| \"with\" -> Some WithKeyword",
        "lines": [
          "let map_basic_keywords = function",
          "| \"let\" -> Some LetKeyword",
          "| \"rec\" -> Some RecKeyword",
          "| \"in\" -> Some InKeyword",
          "| \"fun\" -> Some FunKeyword",
          "| \"if\" -> Some IfKeyword",
          "| \"then\" -> Some ThenKeyword",
          "| \"else\" -> Some ElseKeyword",
          "| \"match\" -> Some MatchKeyword",
          "| \"with\" -> Some WithKeyword"
        ],
        "start_line": 220,
        "end_line": 229,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      },
      {
        "hash": "2bf3b86f7a0962278336de0092e2c8ea",
        "text": "let map_basic_keywords = function\n| \"let\" -> Some LetKeyword\n| \"rec\" -> Some RecKeyword\n| \"in\" -> Some InKeyword\n| \"fun\" -> Some FunKeyword\n| \"if\" -> Some IfKeyword\n| \"then\" -> Some ThenKeyword\n| \"else\" -> Some ElseKeyword\n| \"match\" -> Some MatchKeyword\n| \"with\" -> Some WithKeyword",
        "lines": [
          "let map_basic_keywords = function",
          "| \"let\" -> Some LetKeyword",
          "| \"rec\" -> Some RecKeyword",
          "| \"in\" -> Some InKeyword",
          "| \"fun\" -> Some FunKeyword",
          "| \"if\" -> Some IfKeyword",
          "| \"then\" -> Some ThenKeyword",
          "| \"else\" -> Some ElseKeyword",
          "| \"match\" -> Some MatchKeyword",
          "| \"with\" -> Some WithKeyword"
        ],
        "start_line": 12,
        "end_line": 21,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_keywords.ml"
      }
    ],
    "c34971449142c33341759b18d2e2a6bf": [
      {
        "hash": "c34971449142c33341759b18d2e2a6bf",
        "text": "| \"let\" -> Some LetKeyword\n| \"rec\" -> Some RecKeyword\n| \"in\" -> Some InKeyword\n| \"fun\" -> Some FunKeyword\n| \"if\" -> Some IfKeyword\n| \"then\" -> Some ThenKeyword\n| \"else\" -> Some ElseKeyword\n| \"match\" -> Some MatchKeyword\n| \"with\" -> Some WithKeyword\n| \"true\" -> Some TrueKeyword",
        "lines": [
          "| \"let\" -> Some LetKeyword",
          "| \"rec\" -> Some RecKeyword",
          "| \"in\" -> Some InKeyword",
          "| \"fun\" -> Some FunKeyword",
          "| \"if\" -> Some IfKeyword",
          "| \"then\" -> Some ThenKeyword",
          "| \"else\" -> Some ElseKeyword",
          "| \"match\" -> Some MatchKeyword",
          "| \"with\" -> Some WithKeyword",
          "| \"true\" -> Some TrueKeyword"
        ],
        "start_line": 221,
        "end_line": 230,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      },
      {
        "hash": "c34971449142c33341759b18d2e2a6bf",
        "text": "| \"let\" -> Some LetKeyword\n| \"rec\" -> Some RecKeyword\n| \"in\" -> Some InKeyword\n| \"fun\" -> Some FunKeyword\n| \"if\" -> Some IfKeyword\n| \"then\" -> Some ThenKeyword\n| \"else\" -> Some ElseKeyword\n| \"match\" -> Some MatchKeyword\n| \"with\" -> Some WithKeyword\n| \"true\" -> Some TrueKeyword",
        "lines": [
          "| \"let\" -> Some LetKeyword",
          "| \"rec\" -> Some RecKeyword",
          "| \"in\" -> Some InKeyword",
          "| \"fun\" -> Some FunKeyword",
          "| \"if\" -> Some IfKeyword",
          "| \"then\" -> Some ThenKeyword",
          "| \"else\" -> Some ElseKeyword",
          "| \"match\" -> Some MatchKeyword",
          "| \"with\" -> Some WithKeyword",
          "| \"true\" -> Some TrueKeyword"
        ],
        "start_line": 13,
        "end_line": 22,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_keywords.ml"
      }
    ],
    "8fc207a54054cf2db5837a82a931bcec": [
      {
        "hash": "8fc207a54054cf2db5837a82a931bcec",
        "text": "| \"rec\" -> Some RecKeyword\n| \"in\" -> Some InKeyword\n| \"fun\" -> Some FunKeyword\n| \"if\" -> Some IfKeyword\n| \"then\" -> Some ThenKeyword\n| \"else\" -> Some ElseKeyword\n| \"match\" -> Some MatchKeyword\n| \"with\" -> Some WithKeyword\n| \"true\" -> Some TrueKeyword\n| \"false\" -> Some FalseKeyword",
        "lines": [
          "| \"rec\" -> Some RecKeyword",
          "| \"in\" -> Some InKeyword",
          "| \"fun\" -> Some FunKeyword",
          "| \"if\" -> Some IfKeyword",
          "| \"then\" -> Some ThenKeyword",
          "| \"else\" -> Some ElseKeyword",
          "| \"match\" -> Some MatchKeyword",
          "| \"with\" -> Some WithKeyword",
          "| \"true\" -> Some TrueKeyword",
          "| \"false\" -> Some FalseKeyword"
        ],
        "start_line": 222,
        "end_line": 231,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      },
      {
        "hash": "8fc207a54054cf2db5837a82a931bcec",
        "text": "| \"rec\" -> Some RecKeyword\n| \"in\" -> Some InKeyword\n| \"fun\" -> Some FunKeyword\n| \"if\" -> Some IfKeyword\n| \"then\" -> Some ThenKeyword\n| \"else\" -> Some ElseKeyword\n| \"match\" -> Some MatchKeyword\n| \"with\" -> Some WithKeyword\n| \"true\" -> Some TrueKeyword\n| \"false\" -> Some FalseKeyword",
        "lines": [
          "| \"rec\" -> Some RecKeyword",
          "| \"in\" -> Some InKeyword",
          "| \"fun\" -> Some FunKeyword",
          "| \"if\" -> Some IfKeyword",
          "| \"then\" -> Some ThenKeyword",
          "| \"else\" -> Some ElseKeyword",
          "| \"match\" -> Some MatchKeyword",
          "| \"with\" -> Some WithKeyword",
          "| \"true\" -> Some TrueKeyword",
          "| \"false\" -> Some FalseKeyword"
        ],
        "start_line": 14,
        "end_line": 23,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_keywords.ml"
      }
    ],
    "8e580eba8c1332457bffe19685c91f1a": [
      {
        "hash": "8e580eba8c1332457bffe19685c91f1a",
        "text": "| \"in\" -> Some InKeyword\n| \"fun\" -> Some FunKeyword\n| \"if\" -> Some IfKeyword\n| \"then\" -> Some ThenKeyword\n| \"else\" -> Some ElseKeyword\n| \"match\" -> Some MatchKeyword\n| \"with\" -> Some WithKeyword\n| \"true\" -> Some TrueKeyword\n| \"false\" -> Some FalseKeyword\n| \"and\" -> Some AndKeyword",
        "lines": [
          "| \"in\" -> Some InKeyword",
          "| \"fun\" -> Some FunKeyword",
          "| \"if\" -> Some IfKeyword",
          "| \"then\" -> Some ThenKeyword",
          "| \"else\" -> Some ElseKeyword",
          "| \"match\" -> Some MatchKeyword",
          "| \"with\" -> Some WithKeyword",
          "| \"true\" -> Some TrueKeyword",
          "| \"false\" -> Some FalseKeyword",
          "| \"and\" -> Some AndKeyword"
        ],
        "start_line": 223,
        "end_line": 232,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      },
      {
        "hash": "8e580eba8c1332457bffe19685c91f1a",
        "text": "| \"in\" -> Some InKeyword\n| \"fun\" -> Some FunKeyword\n| \"if\" -> Some IfKeyword\n| \"then\" -> Some ThenKeyword\n| \"else\" -> Some ElseKeyword\n| \"match\" -> Some MatchKeyword\n| \"with\" -> Some WithKeyword\n| \"true\" -> Some TrueKeyword\n| \"false\" -> Some FalseKeyword\n| \"and\" -> Some AndKeyword",
        "lines": [
          "| \"in\" -> Some InKeyword",
          "| \"fun\" -> Some FunKeyword",
          "| \"if\" -> Some IfKeyword",
          "| \"then\" -> Some ThenKeyword",
          "| \"else\" -> Some ElseKeyword",
          "| \"match\" -> Some MatchKeyword",
          "| \"with\" -> Some WithKeyword",
          "| \"true\" -> Some TrueKeyword",
          "| \"false\" -> Some FalseKeyword",
          "| \"and\" -> Some AndKeyword"
        ],
        "start_line": 15,
        "end_line": 24,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_keywords.ml"
      }
    ],
    "e08931686fe45173764491258a06f79e": [
      {
        "hash": "e08931686fe45173764491258a06f79e",
        "text": "| \"fun\" -> Some FunKeyword\n| \"if\" -> Some IfKeyword\n| \"then\" -> Some ThenKeyword\n| \"else\" -> Some ElseKeyword\n| \"match\" -> Some MatchKeyword\n| \"with\" -> Some WithKeyword\n| \"true\" -> Some TrueKeyword\n| \"false\" -> Some FalseKeyword\n| \"and\" -> Some AndKeyword\n| \"or\" -> Some OrKeyword",
        "lines": [
          "| \"fun\" -> Some FunKeyword",
          "| \"if\" -> Some IfKeyword",
          "| \"then\" -> Some ThenKeyword",
          "| \"else\" -> Some ElseKeyword",
          "| \"match\" -> Some MatchKeyword",
          "| \"with\" -> Some WithKeyword",
          "| \"true\" -> Some TrueKeyword",
          "| \"false\" -> Some FalseKeyword",
          "| \"and\" -> Some AndKeyword",
          "| \"or\" -> Some OrKeyword"
        ],
        "start_line": 224,
        "end_line": 233,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      },
      {
        "hash": "e08931686fe45173764491258a06f79e",
        "text": "| \"fun\" -> Some FunKeyword\n| \"if\" -> Some IfKeyword\n| \"then\" -> Some ThenKeyword\n| \"else\" -> Some ElseKeyword\n| \"match\" -> Some MatchKeyword\n| \"with\" -> Some WithKeyword\n| \"true\" -> Some TrueKeyword\n| \"false\" -> Some FalseKeyword\n| \"and\" -> Some AndKeyword\n| \"or\" -> Some OrKeyword",
        "lines": [
          "| \"fun\" -> Some FunKeyword",
          "| \"if\" -> Some IfKeyword",
          "| \"then\" -> Some ThenKeyword",
          "| \"else\" -> Some ElseKeyword",
          "| \"match\" -> Some MatchKeyword",
          "| \"with\" -> Some WithKeyword",
          "| \"true\" -> Some TrueKeyword",
          "| \"false\" -> Some FalseKeyword",
          "| \"and\" -> Some AndKeyword",
          "| \"or\" -> Some OrKeyword"
        ],
        "start_line": 16,
        "end_line": 25,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_keywords.ml"
      }
    ],
    "2f9e00a87adc3a31d3d047d9cc625bab": [
      {
        "hash": "2f9e00a87adc3a31d3d047d9cc625bab",
        "text": "| \"if\" -> Some IfKeyword\n| \"then\" -> Some ThenKeyword\n| \"else\" -> Some ElseKeyword\n| \"match\" -> Some MatchKeyword\n| \"with\" -> Some WithKeyword\n| \"true\" -> Some TrueKeyword\n| \"false\" -> Some FalseKeyword\n| \"and\" -> Some AndKeyword\n| \"or\" -> Some OrKeyword\n| \"not\" -> Some NotKeyword",
        "lines": [
          "| \"if\" -> Some IfKeyword",
          "| \"then\" -> Some ThenKeyword",
          "| \"else\" -> Some ElseKeyword",
          "| \"match\" -> Some MatchKeyword",
          "| \"with\" -> Some WithKeyword",
          "| \"true\" -> Some TrueKeyword",
          "| \"false\" -> Some FalseKeyword",
          "| \"and\" -> Some AndKeyword",
          "| \"or\" -> Some OrKeyword",
          "| \"not\" -> Some NotKeyword"
        ],
        "start_line": 225,
        "end_line": 234,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      },
      {
        "hash": "2f9e00a87adc3a31d3d047d9cc625bab",
        "text": "| \"if\" -> Some IfKeyword\n| \"then\" -> Some ThenKeyword\n| \"else\" -> Some ElseKeyword\n| \"match\" -> Some MatchKeyword\n| \"with\" -> Some WithKeyword\n| \"true\" -> Some TrueKeyword\n| \"false\" -> Some FalseKeyword\n| \"and\" -> Some AndKeyword\n| \"or\" -> Some OrKeyword\n| \"not\" -> Some NotKeyword",
        "lines": [
          "| \"if\" -> Some IfKeyword",
          "| \"then\" -> Some ThenKeyword",
          "| \"else\" -> Some ElseKeyword",
          "| \"match\" -> Some MatchKeyword",
          "| \"with\" -> Some WithKeyword",
          "| \"true\" -> Some TrueKeyword",
          "| \"false\" -> Some FalseKeyword",
          "| \"and\" -> Some AndKeyword",
          "| \"or\" -> Some OrKeyword",
          "| \"not\" -> Some NotKeyword"
        ],
        "start_line": 17,
        "end_line": 26,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_keywords.ml"
      }
    ],
    "63dc5121acb3520fbbc5d4405aa85466": [
      {
        "hash": "63dc5121acb3520fbbc5d4405aa85466",
        "text": "| \"then\" -> Some ThenKeyword\n| \"else\" -> Some ElseKeyword\n| \"match\" -> Some MatchKeyword\n| \"with\" -> Some WithKeyword\n| \"true\" -> Some TrueKeyword\n| \"false\" -> Some FalseKeyword\n| \"and\" -> Some AndKeyword\n| \"or\" -> Some OrKeyword\n| \"not\" -> Some NotKeyword\n| \"type\" -> Some TypeKeyword",
        "lines": [
          "| \"then\" -> Some ThenKeyword",
          "| \"else\" -> Some ElseKeyword",
          "| \"match\" -> Some MatchKeyword",
          "| \"with\" -> Some WithKeyword",
          "| \"true\" -> Some TrueKeyword",
          "| \"false\" -> Some FalseKeyword",
          "| \"and\" -> Some AndKeyword",
          "| \"or\" -> Some OrKeyword",
          "| \"not\" -> Some NotKeyword",
          "| \"type\" -> Some TypeKeyword"
        ],
        "start_line": 226,
        "end_line": 235,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      },
      {
        "hash": "63dc5121acb3520fbbc5d4405aa85466",
        "text": "| \"then\" -> Some ThenKeyword\n| \"else\" -> Some ElseKeyword\n| \"match\" -> Some MatchKeyword\n| \"with\" -> Some WithKeyword\n| \"true\" -> Some TrueKeyword\n| \"false\" -> Some FalseKeyword\n| \"and\" -> Some AndKeyword\n| \"or\" -> Some OrKeyword\n| \"not\" -> Some NotKeyword\n| \"type\" -> Some TypeKeyword",
        "lines": [
          "| \"then\" -> Some ThenKeyword",
          "| \"else\" -> Some ElseKeyword",
          "| \"match\" -> Some MatchKeyword",
          "| \"with\" -> Some WithKeyword",
          "| \"true\" -> Some TrueKeyword",
          "| \"false\" -> Some FalseKeyword",
          "| \"and\" -> Some AndKeyword",
          "| \"or\" -> Some OrKeyword",
          "| \"not\" -> Some NotKeyword",
          "| \"type\" -> Some TypeKeyword"
        ],
        "start_line": 18,
        "end_line": 27,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_keywords.ml"
      }
    ],
    "c5a565f6cc0695517b0098368b249dce": [
      {
        "hash": "c5a565f6cc0695517b0098368b249dce",
        "text": "| \"else\" -> Some ElseKeyword\n| \"match\" -> Some MatchKeyword\n| \"with\" -> Some WithKeyword\n| \"true\" -> Some TrueKeyword\n| \"false\" -> Some FalseKeyword\n| \"and\" -> Some AndKeyword\n| \"or\" -> Some OrKeyword\n| \"not\" -> Some NotKeyword\n| \"type\" -> Some TypeKeyword\n| \"module\" -> Some ModuleKeyword",
        "lines": [
          "| \"else\" -> Some ElseKeyword",
          "| \"match\" -> Some MatchKeyword",
          "| \"with\" -> Some WithKeyword",
          "| \"true\" -> Some TrueKeyword",
          "| \"false\" -> Some FalseKeyword",
          "| \"and\" -> Some AndKeyword",
          "| \"or\" -> Some OrKeyword",
          "| \"not\" -> Some NotKeyword",
          "| \"type\" -> Some TypeKeyword",
          "| \"module\" -> Some ModuleKeyword"
        ],
        "start_line": 227,
        "end_line": 236,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      },
      {
        "hash": "c5a565f6cc0695517b0098368b249dce",
        "text": "| \"else\" -> Some ElseKeyword\n| \"match\" -> Some MatchKeyword\n| \"with\" -> Some WithKeyword\n| \"true\" -> Some TrueKeyword\n| \"false\" -> Some FalseKeyword\n| \"and\" -> Some AndKeyword\n| \"or\" -> Some OrKeyword\n| \"not\" -> Some NotKeyword\n| \"type\" -> Some TypeKeyword\n| \"module\" -> Some ModuleKeyword",
        "lines": [
          "| \"else\" -> Some ElseKeyword",
          "| \"match\" -> Some MatchKeyword",
          "| \"with\" -> Some WithKeyword",
          "| \"true\" -> Some TrueKeyword",
          "| \"false\" -> Some FalseKeyword",
          "| \"and\" -> Some AndKeyword",
          "| \"or\" -> Some OrKeyword",
          "| \"not\" -> Some NotKeyword",
          "| \"type\" -> Some TypeKeyword",
          "| \"module\" -> Some ModuleKeyword"
        ],
        "start_line": 19,
        "end_line": 28,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_keywords.ml"
      }
    ],
    "50d642cb163d6bb865d976786a7bbcb4": [
      {
        "hash": "50d642cb163d6bb865d976786a7bbcb4",
        "text": "| \"match\" -> Some MatchKeyword\n| \"with\" -> Some WithKeyword\n| \"true\" -> Some TrueKeyword\n| \"false\" -> Some FalseKeyword\n| \"and\" -> Some AndKeyword\n| \"or\" -> Some OrKeyword\n| \"not\" -> Some NotKeyword\n| \"type\" -> Some TypeKeyword\n| \"module\" -> Some ModuleKeyword\n| \"ref\" -> Some RefKeyword",
        "lines": [
          "| \"match\" -> Some MatchKeyword",
          "| \"with\" -> Some WithKeyword",
          "| \"true\" -> Some TrueKeyword",
          "| \"false\" -> Some FalseKeyword",
          "| \"and\" -> Some AndKeyword",
          "| \"or\" -> Some OrKeyword",
          "| \"not\" -> Some NotKeyword",
          "| \"type\" -> Some TypeKeyword",
          "| \"module\" -> Some ModuleKeyword",
          "| \"ref\" -> Some RefKeyword"
        ],
        "start_line": 228,
        "end_line": 237,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      },
      {
        "hash": "50d642cb163d6bb865d976786a7bbcb4",
        "text": "| \"match\" -> Some MatchKeyword\n| \"with\" -> Some WithKeyword\n| \"true\" -> Some TrueKeyword\n| \"false\" -> Some FalseKeyword\n| \"and\" -> Some AndKeyword\n| \"or\" -> Some OrKeyword\n| \"not\" -> Some NotKeyword\n| \"type\" -> Some TypeKeyword\n| \"module\" -> Some ModuleKeyword\n| \"ref\" -> Some RefKeyword",
        "lines": [
          "| \"match\" -> Some MatchKeyword",
          "| \"with\" -> Some WithKeyword",
          "| \"true\" -> Some TrueKeyword",
          "| \"false\" -> Some FalseKeyword",
          "| \"and\" -> Some AndKeyword",
          "| \"or\" -> Some OrKeyword",
          "| \"not\" -> Some NotKeyword",
          "| \"type\" -> Some TypeKeyword",
          "| \"module\" -> Some ModuleKeyword",
          "| \"ref\" -> Some RefKeyword"
        ],
        "start_line": 20,
        "end_line": 29,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_keywords.ml"
      }
    ],
    "2001ae96821575fe1ea1044a1f8e3534": [
      {
        "hash": "2001ae96821575fe1ea1044a1f8e3534",
        "text": "| \"with\" -> Some WithKeyword\n| \"true\" -> Some TrueKeyword\n| \"false\" -> Some FalseKeyword\n| \"and\" -> Some AndKeyword\n| \"or\" -> Some OrKeyword\n| \"not\" -> Some NotKeyword\n| \"type\" -> Some TypeKeyword\n| \"module\" -> Some ModuleKeyword\n| \"ref\" -> Some RefKeyword\n| \"as\" -> Some AsKeyword",
        "lines": [
          "| \"with\" -> Some WithKeyword",
          "| \"true\" -> Some TrueKeyword",
          "| \"false\" -> Some FalseKeyword",
          "| \"and\" -> Some AndKeyword",
          "| \"or\" -> Some OrKeyword",
          "| \"not\" -> Some NotKeyword",
          "| \"type\" -> Some TypeKeyword",
          "| \"module\" -> Some ModuleKeyword",
          "| \"ref\" -> Some RefKeyword",
          "| \"as\" -> Some AsKeyword"
        ],
        "start_line": 229,
        "end_line": 238,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      },
      {
        "hash": "2001ae96821575fe1ea1044a1f8e3534",
        "text": "| \"with\" -> Some WithKeyword\n| \"true\" -> Some TrueKeyword\n| \"false\" -> Some FalseKeyword\n| \"and\" -> Some AndKeyword\n| \"or\" -> Some OrKeyword\n| \"not\" -> Some NotKeyword\n| \"type\" -> Some TypeKeyword\n| \"module\" -> Some ModuleKeyword\n| \"ref\" -> Some RefKeyword\n| \"as\" -> Some AsKeyword",
        "lines": [
          "| \"with\" -> Some WithKeyword",
          "| \"true\" -> Some TrueKeyword",
          "| \"false\" -> Some FalseKeyword",
          "| \"and\" -> Some AndKeyword",
          "| \"or\" -> Some OrKeyword",
          "| \"not\" -> Some NotKeyword",
          "| \"type\" -> Some TypeKeyword",
          "| \"module\" -> Some ModuleKeyword",
          "| \"ref\" -> Some RefKeyword",
          "| \"as\" -> Some AsKeyword"
        ],
        "start_line": 21,
        "end_line": 30,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_keywords.ml"
      }
    ],
    "cfb34e13defdf76e035a805d342ccda7": [
      {
        "hash": "cfb34e13defdf76e035a805d342ccda7",
        "text": "| \"true\" -> Some TrueKeyword\n| \"false\" -> Some FalseKeyword\n| \"and\" -> Some AndKeyword\n| \"or\" -> Some OrKeyword\n| \"not\" -> Some NotKeyword\n| \"type\" -> Some TypeKeyword\n| \"module\" -> Some ModuleKeyword\n| \"ref\" -> Some RefKeyword\n| \"as\" -> Some AsKeyword\n| \"of\" -> Some OfKeyword",
        "lines": [
          "| \"true\" -> Some TrueKeyword",
          "| \"false\" -> Some FalseKeyword",
          "| \"and\" -> Some AndKeyword",
          "| \"or\" -> Some OrKeyword",
          "| \"not\" -> Some NotKeyword",
          "| \"type\" -> Some TypeKeyword",
          "| \"module\" -> Some ModuleKeyword",
          "| \"ref\" -> Some RefKeyword",
          "| \"as\" -> Some AsKeyword",
          "| \"of\" -> Some OfKeyword"
        ],
        "start_line": 230,
        "end_line": 239,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      },
      {
        "hash": "cfb34e13defdf76e035a805d342ccda7",
        "text": "| \"true\" -> Some TrueKeyword\n| \"false\" -> Some FalseKeyword\n| \"and\" -> Some AndKeyword\n| \"or\" -> Some OrKeyword\n| \"not\" -> Some NotKeyword\n| \"type\" -> Some TypeKeyword\n| \"module\" -> Some ModuleKeyword\n| \"ref\" -> Some RefKeyword\n| \"as\" -> Some AsKeyword\n| \"of\" -> Some OfKeyword",
        "lines": [
          "| \"true\" -> Some TrueKeyword",
          "| \"false\" -> Some FalseKeyword",
          "| \"and\" -> Some AndKeyword",
          "| \"or\" -> Some OrKeyword",
          "| \"not\" -> Some NotKeyword",
          "| \"type\" -> Some TypeKeyword",
          "| \"module\" -> Some ModuleKeyword",
          "| \"ref\" -> Some RefKeyword",
          "| \"as\" -> Some AsKeyword",
          "| \"of\" -> Some OfKeyword"
        ],
        "start_line": 22,
        "end_line": 31,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_keywords.ml"
      }
    ],
    "3277fe94e20b6db860756c961febdb66": [
      {
        "hash": "3277fe94e20b6db860756c961febdb66",
        "text": "| \"false\" -> Some FalseKeyword\n| \"and\" -> Some AndKeyword\n| \"or\" -> Some OrKeyword\n| \"not\" -> Some NotKeyword\n| \"type\" -> Some TypeKeyword\n| \"module\" -> Some ModuleKeyword\n| \"ref\" -> Some RefKeyword\n| \"as\" -> Some AsKeyword\n| \"of\" -> Some OfKeyword\n| _ -> None",
        "lines": [
          "| \"false\" -> Some FalseKeyword",
          "| \"and\" -> Some AndKeyword",
          "| \"or\" -> Some OrKeyword",
          "| \"not\" -> Some NotKeyword",
          "| \"type\" -> Some TypeKeyword",
          "| \"module\" -> Some ModuleKeyword",
          "| \"ref\" -> Some RefKeyword",
          "| \"as\" -> Some AsKeyword",
          "| \"of\" -> Some OfKeyword",
          "| _ -> None"
        ],
        "start_line": 231,
        "end_line": 240,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      },
      {
        "hash": "3277fe94e20b6db860756c961febdb66",
        "text": "| \"false\" -> Some FalseKeyword\n| \"and\" -> Some AndKeyword\n| \"or\" -> Some OrKeyword\n| \"not\" -> Some NotKeyword\n| \"type\" -> Some TypeKeyword\n| \"module\" -> Some ModuleKeyword\n| \"ref\" -> Some RefKeyword\n| \"as\" -> Some AsKeyword\n| \"of\" -> Some OfKeyword\n| _ -> None",
        "lines": [
          "| \"false\" -> Some FalseKeyword",
          "| \"and\" -> Some AndKeyword",
          "| \"or\" -> Some OrKeyword",
          "| \"not\" -> Some NotKeyword",
          "| \"type\" -> Some TypeKeyword",
          "| \"module\" -> Some ModuleKeyword",
          "| \"ref\" -> Some RefKeyword",
          "| \"as\" -> Some AsKeyword",
          "| \"of\" -> Some OfKeyword",
          "| _ -> None"
        ],
        "start_line": 23,
        "end_line": 32,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_keywords.ml"
      }
    ],
    "3fcdca11dae797da1c46974a5ea8cdfd": [
      {
        "hash": "3fcdca11dae797da1c46974a5ea8cdfd",
        "text": "| \"and\" -> Some AndKeyword\n| \"or\" -> Some OrKeyword\n| \"not\" -> Some NotKeyword\n| \"type\" -> Some TypeKeyword\n| \"module\" -> Some ModuleKeyword\n| \"ref\" -> Some RefKeyword\n| \"as\" -> Some AsKeyword\n| \"of\" -> Some OfKeyword\n| _ -> None",
        "lines": [
          "| \"and\" -> Some AndKeyword",
          "| \"or\" -> Some OrKeyword",
          "| \"not\" -> Some NotKeyword",
          "| \"type\" -> Some TypeKeyword",
          "| \"module\" -> Some ModuleKeyword",
          "| \"ref\" -> Some RefKeyword",
          "| \"as\" -> Some AsKeyword",
          "| \"of\" -> Some OfKeyword",
          "| _ -> None"
        ],
        "start_line": 232,
        "end_line": 240,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      },
      {
        "hash": "3fcdca11dae797da1c46974a5ea8cdfd",
        "text": "| \"and\" -> Some AndKeyword\n| \"or\" -> Some OrKeyword\n| \"not\" -> Some NotKeyword\n| \"type\" -> Some TypeKeyword\n| \"module\" -> Some ModuleKeyword\n| \"ref\" -> Some RefKeyword\n| \"as\" -> Some AsKeyword\n| \"of\" -> Some OfKeyword\n| _ -> None",
        "lines": [
          "| \"and\" -> Some AndKeyword",
          "| \"or\" -> Some OrKeyword",
          "| \"not\" -> Some NotKeyword",
          "| \"type\" -> Some TypeKeyword",
          "| \"module\" -> Some ModuleKeyword",
          "| \"ref\" -> Some RefKeyword",
          "| \"as\" -> Some AsKeyword",
          "| \"of\" -> Some OfKeyword",
          "| _ -> None"
        ],
        "start_line": 24,
        "end_line": 32,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_keywords.ml"
      }
    ],
    "258b7ac97cbaf397bd50273c5aff0330": [
      {
        "hash": "258b7ac97cbaf397bd50273c5aff0330",
        "text": "| \"or\" -> Some OrKeyword\n| \"not\" -> Some NotKeyword\n| \"type\" -> Some TypeKeyword\n| \"module\" -> Some ModuleKeyword\n| \"ref\" -> Some RefKeyword\n| \"as\" -> Some AsKeyword\n| \"of\" -> Some OfKeyword\n| _ -> None",
        "lines": [
          "| \"or\" -> Some OrKeyword",
          "| \"not\" -> Some NotKeyword",
          "| \"type\" -> Some TypeKeyword",
          "| \"module\" -> Some ModuleKeyword",
          "| \"ref\" -> Some RefKeyword",
          "| \"as\" -> Some AsKeyword",
          "| \"of\" -> Some OfKeyword",
          "| _ -> None"
        ],
        "start_line": 233,
        "end_line": 240,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      },
      {
        "hash": "258b7ac97cbaf397bd50273c5aff0330",
        "text": "| \"or\" -> Some OrKeyword\n| \"not\" -> Some NotKeyword\n| \"type\" -> Some TypeKeyword\n| \"module\" -> Some ModuleKeyword\n| \"ref\" -> Some RefKeyword\n| \"as\" -> Some AsKeyword\n| \"of\" -> Some OfKeyword\n| _ -> None",
        "lines": [
          "| \"or\" -> Some OrKeyword",
          "| \"not\" -> Some NotKeyword",
          "| \"type\" -> Some TypeKeyword",
          "| \"module\" -> Some ModuleKeyword",
          "| \"ref\" -> Some RefKeyword",
          "| \"as\" -> Some AsKeyword",
          "| \"of\" -> Some OfKeyword",
          "| _ -> None"
        ],
        "start_line": 25,
        "end_line": 32,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_keywords.ml"
      }
    ],
    "793b7ec63b580a4dc91d0a36ece2041a": [
      {
        "hash": "793b7ec63b580a4dc91d0a36ece2041a",
        "text": "| \"not\" -> Some NotKeyword\n| \"type\" -> Some TypeKeyword\n| \"module\" -> Some ModuleKeyword\n| \"ref\" -> Some RefKeyword\n| \"as\" -> Some AsKeyword\n| \"of\" -> Some OfKeyword\n| _ -> None",
        "lines": [
          "| \"not\" -> Some NotKeyword",
          "| \"type\" -> Some TypeKeyword",
          "| \"module\" -> Some ModuleKeyword",
          "| \"ref\" -> Some RefKeyword",
          "| \"as\" -> Some AsKeyword",
          "| \"of\" -> Some OfKeyword",
          "| _ -> None"
        ],
        "start_line": 234,
        "end_line": 240,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      },
      {
        "hash": "793b7ec63b580a4dc91d0a36ece2041a",
        "text": "| \"not\" -> Some NotKeyword\n| \"type\" -> Some TypeKeyword\n| \"module\" -> Some ModuleKeyword\n| \"ref\" -> Some RefKeyword\n| \"as\" -> Some AsKeyword\n| \"of\" -> Some OfKeyword\n| _ -> None",
        "lines": [
          "| \"not\" -> Some NotKeyword",
          "| \"type\" -> Some TypeKeyword",
          "| \"module\" -> Some ModuleKeyword",
          "| \"ref\" -> Some RefKeyword",
          "| \"as\" -> Some AsKeyword",
          "| \"of\" -> Some OfKeyword",
          "| _ -> None"
        ],
        "start_line": 26,
        "end_line": 32,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_keywords.ml"
      }
    ],
    "b8e53cbfbe1d47017089d0c4b08de006": [
      {
        "hash": "b8e53cbfbe1d47017089d0c4b08de006",
        "text": "| \"type\" -> Some TypeKeyword\n| \"module\" -> Some ModuleKeyword\n| \"ref\" -> Some RefKeyword\n| \"as\" -> Some AsKeyword\n| \"of\" -> Some OfKeyword\n| _ -> None",
        "lines": [
          "| \"type\" -> Some TypeKeyword",
          "| \"module\" -> Some ModuleKeyword",
          "| \"ref\" -> Some RefKeyword",
          "| \"as\" -> Some AsKeyword",
          "| \"of\" -> Some OfKeyword",
          "| _ -> None"
        ],
        "start_line": 235,
        "end_line": 240,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      },
      {
        "hash": "b8e53cbfbe1d47017089d0c4b08de006",
        "text": "| \"type\" -> Some TypeKeyword\n| \"module\" -> Some ModuleKeyword\n| \"ref\" -> Some RefKeyword\n| \"as\" -> Some AsKeyword\n| \"of\" -> Some OfKeyword\n| _ -> None",
        "lines": [
          "| \"type\" -> Some TypeKeyword",
          "| \"module\" -> Some ModuleKeyword",
          "| \"ref\" -> Some RefKeyword",
          "| \"as\" -> Some AsKeyword",
          "| \"of\" -> Some OfKeyword",
          "| _ -> None"
        ],
        "start_line": 27,
        "end_line": 32,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_keywords.ml"
      }
    ],
    "584a0b4e5cc740575eca740b5cda9c2b": [
      {
        "hash": "584a0b4e5cc740575eca740b5cda9c2b",
        "text": "| \"module\" -> Some ModuleKeyword\n| \"ref\" -> Some RefKeyword\n| \"as\" -> Some AsKeyword\n| \"of\" -> Some OfKeyword\n| _ -> None",
        "lines": [
          "| \"module\" -> Some ModuleKeyword",
          "| \"ref\" -> Some RefKeyword",
          "| \"as\" -> Some AsKeyword",
          "| \"of\" -> Some OfKeyword",
          "| _ -> None"
        ],
        "start_line": 236,
        "end_line": 240,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      },
      {
        "hash": "584a0b4e5cc740575eca740b5cda9c2b",
        "text": "| \"module\" -> Some ModuleKeyword\n| \"ref\" -> Some RefKeyword\n| \"as\" -> Some AsKeyword\n| \"of\" -> Some OfKeyword\n| _ -> None",
        "lines": [
          "| \"module\" -> Some ModuleKeyword",
          "| \"ref\" -> Some RefKeyword",
          "| \"as\" -> Some AsKeyword",
          "| \"of\" -> Some OfKeyword",
          "| _ -> None"
        ],
        "start_line": 28,
        "end_line": 32,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_keywords.ml"
      }
    ],
    "f0049b89adcb76374faed31c3ad851f8": [
      {
        "hash": "f0049b89adcb76374faed31c3ad851f8",
        "text": "| \"ref\" -> Some RefKeyword\n| \"as\" -> Some AsKeyword\n| \"of\" -> Some OfKeyword\n| _ -> None",
        "lines": [
          "| \"ref\" -> Some RefKeyword",
          "| \"as\" -> Some AsKeyword",
          "| \"of\" -> Some OfKeyword",
          "| _ -> None"
        ],
        "start_line": 237,
        "end_line": 240,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      },
      {
        "hash": "f0049b89adcb76374faed31c3ad851f8",
        "text": "| \"ref\" -> Some RefKeyword\n| \"as\" -> Some AsKeyword\n| \"of\" -> Some OfKeyword\n| _ -> None",
        "lines": [
          "| \"ref\" -> Some RefKeyword",
          "| \"as\" -> Some AsKeyword",
          "| \"of\" -> Some OfKeyword",
          "| _ -> None"
        ],
        "start_line": 29,
        "end_line": 32,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_keywords.ml"
      }
    ],
    "7d72bb9c053e08930888cc702b5e8637": [
      {
        "hash": "7d72bb9c053e08930888cc702b5e8637",
        "text": "| \"as\" -> Some AsKeyword\n| \"of\" -> Some OfKeyword\n| _ -> None",
        "lines": [
          "| \"as\" -> Some AsKeyword",
          "| \"of\" -> Some OfKeyword",
          "| _ -> None"
        ],
        "start_line": 238,
        "end_line": 240,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      },
      {
        "hash": "7d72bb9c053e08930888cc702b5e8637",
        "text": "| \"as\" -> Some AsKeyword\n| \"of\" -> Some OfKeyword\n| _ -> None",
        "lines": [
          "| \"as\" -> Some AsKeyword",
          "| \"of\" -> Some OfKeyword",
          "| _ -> None"
        ],
        "start_line": 30,
        "end_line": 32,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_keywords.ml"
      }
    ],
    "0be95cc5e3bbcb71ff289f6526ee6a1c": [
      {
        "hash": "0be95cc5e3bbcb71ff289f6526ee6a1c",
        "text": "let map_wenyan_keywords = function\n| \"HaveKeyword\" -> Some LetKeyword\n| \"SetKeyword\" -> Some LetKeyword\n| \"OneKeyword\" -> Some OneKeyword\n| \"NameKeyword\" -> Some AsKeyword\n| \"AlsoKeyword\" -> Some AndKeyword\n| \"ThenGetKeyword\" -> Some ThenKeyword\n| \"CallKeyword\" -> Some FunKeyword\n| \"ValueKeyword\" -> Some ValKeyword\n| \"AsForKeyword\" -> Some AsKeyword",
        "lines": [
          "let map_wenyan_keywords = function",
          "| \"HaveKeyword\" -> Some LetKeyword",
          "| \"SetKeyword\" -> Some LetKeyword",
          "| \"OneKeyword\" -> Some OneKeyword",
          "| \"NameKeyword\" -> Some AsKeyword",
          "| \"AlsoKeyword\" -> Some AndKeyword",
          "| \"ThenGetKeyword\" -> Some ThenKeyword",
          "| \"CallKeyword\" -> Some FunKeyword",
          "| \"ValueKeyword\" -> Some ValKeyword",
          "| \"AsForKeyword\" -> Some AsKeyword"
        ],
        "start_line": 243,
        "end_line": 252,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      },
      {
        "hash": "0be95cc5e3bbcb71ff289f6526ee6a1c",
        "text": "let map_wenyan_keywords = function\n| \"HaveKeyword\" -> Some LetKeyword\n| \"SetKeyword\" -> Some LetKeyword\n| \"OneKeyword\" -> Some OneKeyword\n| \"NameKeyword\" -> Some AsKeyword\n| \"AlsoKeyword\" -> Some AndKeyword\n| \"ThenGetKeyword\" -> Some ThenKeyword\n| \"CallKeyword\" -> Some FunKeyword\n| \"ValueKeyword\" -> Some ValKeyword\n| \"AsForKeyword\" -> Some AsKeyword",
        "lines": [
          "let map_wenyan_keywords = function",
          "| \"HaveKeyword\" -> Some LetKeyword",
          "| \"SetKeyword\" -> Some LetKeyword",
          "| \"OneKeyword\" -> Some OneKeyword",
          "| \"NameKeyword\" -> Some AsKeyword",
          "| \"AlsoKeyword\" -> Some AndKeyword",
          "| \"ThenGetKeyword\" -> Some ThenKeyword",
          "| \"CallKeyword\" -> Some FunKeyword",
          "| \"ValueKeyword\" -> Some ValKeyword",
          "| \"AsForKeyword\" -> Some AsKeyword"
        ],
        "start_line": 35,
        "end_line": 44,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_keywords.ml"
      }
    ],
    "3dab3a2ce430166604b0447944742d3e": [
      {
        "hash": "3dab3a2ce430166604b0447944742d3e",
        "text": "| \"HaveKeyword\" -> Some LetKeyword\n| \"SetKeyword\" -> Some LetKeyword\n| \"OneKeyword\" -> Some OneKeyword\n| \"NameKeyword\" -> Some AsKeyword\n| \"AlsoKeyword\" -> Some AndKeyword\n| \"ThenGetKeyword\" -> Some ThenKeyword\n| \"CallKeyword\" -> Some FunKeyword\n| \"ValueKeyword\" -> Some ValKeyword\n| \"AsForKeyword\" -> Some AsKeyword\n| \"NumberKeyword\" -> Some (ChineseNumberToken \"\")",
        "lines": [
          "| \"HaveKeyword\" -> Some LetKeyword",
          "| \"SetKeyword\" -> Some LetKeyword",
          "| \"OneKeyword\" -> Some OneKeyword",
          "| \"NameKeyword\" -> Some AsKeyword",
          "| \"AlsoKeyword\" -> Some AndKeyword",
          "| \"ThenGetKeyword\" -> Some ThenKeyword",
          "| \"CallKeyword\" -> Some FunKeyword",
          "| \"ValueKeyword\" -> Some ValKeyword",
          "| \"AsForKeyword\" -> Some AsKeyword",
          "| \"NumberKeyword\" -> Some (ChineseNumberToken \"\")"
        ],
        "start_line": 244,
        "end_line": 253,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      },
      {
        "hash": "3dab3a2ce430166604b0447944742d3e",
        "text": "| \"HaveKeyword\" -> Some LetKeyword\n| \"SetKeyword\" -> Some LetKeyword\n| \"OneKeyword\" -> Some OneKeyword\n| \"NameKeyword\" -> Some AsKeyword\n| \"AlsoKeyword\" -> Some AndKeyword\n| \"ThenGetKeyword\" -> Some ThenKeyword\n| \"CallKeyword\" -> Some FunKeyword\n| \"ValueKeyword\" -> Some ValKeyword\n| \"AsForKeyword\" -> Some AsKeyword\n| \"NumberKeyword\" -> Some (ChineseNumberToken \"\")",
        "lines": [
          "| \"HaveKeyword\" -> Some LetKeyword",
          "| \"SetKeyword\" -> Some LetKeyword",
          "| \"OneKeyword\" -> Some OneKeyword",
          "| \"NameKeyword\" -> Some AsKeyword",
          "| \"AlsoKeyword\" -> Some AndKeyword",
          "| \"ThenGetKeyword\" -> Some ThenKeyword",
          "| \"CallKeyword\" -> Some FunKeyword",
          "| \"ValueKeyword\" -> Some ValKeyword",
          "| \"AsForKeyword\" -> Some AsKeyword",
          "| \"NumberKeyword\" -> Some (ChineseNumberToken \"\")"
        ],
        "start_line": 36,
        "end_line": 45,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_keywords.ml"
      }
    ],
    "f3b475b37b22f61e403cd727a09c5c1b": [
      {
        "hash": "f3b475b37b22f61e403cd727a09c5c1b",
        "text": "| \"SetKeyword\" -> Some LetKeyword\n| \"OneKeyword\" -> Some OneKeyword\n| \"NameKeyword\" -> Some AsKeyword\n| \"AlsoKeyword\" -> Some AndKeyword\n| \"ThenGetKeyword\" -> Some ThenKeyword\n| \"CallKeyword\" -> Some FunKeyword\n| \"ValueKeyword\" -> Some ValKeyword\n| \"AsForKeyword\" -> Some AsKeyword\n| \"NumberKeyword\" -> Some (ChineseNumberToken \"\")\n| \"IfWenyanKeyword\" -> Some WenyanIfKeyword",
        "lines": [
          "| \"SetKeyword\" -> Some LetKeyword",
          "| \"OneKeyword\" -> Some OneKeyword",
          "| \"NameKeyword\" -> Some AsKeyword",
          "| \"AlsoKeyword\" -> Some AndKeyword",
          "| \"ThenGetKeyword\" -> Some ThenKeyword",
          "| \"CallKeyword\" -> Some FunKeyword",
          "| \"ValueKeyword\" -> Some ValKeyword",
          "| \"AsForKeyword\" -> Some AsKeyword",
          "| \"NumberKeyword\" -> Some (ChineseNumberToken \"\")",
          "| \"IfWenyanKeyword\" -> Some WenyanIfKeyword"
        ],
        "start_line": 245,
        "end_line": 254,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      },
      {
        "hash": "f3b475b37b22f61e403cd727a09c5c1b",
        "text": "| \"SetKeyword\" -> Some LetKeyword\n| \"OneKeyword\" -> Some OneKeyword\n| \"NameKeyword\" -> Some AsKeyword\n| \"AlsoKeyword\" -> Some AndKeyword\n| \"ThenGetKeyword\" -> Some ThenKeyword\n| \"CallKeyword\" -> Some FunKeyword\n| \"ValueKeyword\" -> Some ValKeyword\n| \"AsForKeyword\" -> Some AsKeyword\n| \"NumberKeyword\" -> Some (ChineseNumberToken \"\")\n| \"IfWenyanKeyword\" -> Some WenyanIfKeyword",
        "lines": [
          "| \"SetKeyword\" -> Some LetKeyword",
          "| \"OneKeyword\" -> Some OneKeyword",
          "| \"NameKeyword\" -> Some AsKeyword",
          "| \"AlsoKeyword\" -> Some AndKeyword",
          "| \"ThenGetKeyword\" -> Some ThenKeyword",
          "| \"CallKeyword\" -> Some FunKeyword",
          "| \"ValueKeyword\" -> Some ValKeyword",
          "| \"AsForKeyword\" -> Some AsKeyword",
          "| \"NumberKeyword\" -> Some (ChineseNumberToken \"\")",
          "| \"IfWenyanKeyword\" -> Some WenyanIfKeyword"
        ],
        "start_line": 37,
        "end_line": 46,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_keywords.ml"
      }
    ],
    "3fb020f80109c29d34bb2561585bc91a": [
      {
        "hash": "3fb020f80109c29d34bb2561585bc91a",
        "text": "| \"OneKeyword\" -> Some OneKeyword\n| \"NameKeyword\" -> Some AsKeyword\n| \"AlsoKeyword\" -> Some AndKeyword\n| \"ThenGetKeyword\" -> Some ThenKeyword\n| \"CallKeyword\" -> Some FunKeyword\n| \"ValueKeyword\" -> Some ValKeyword\n| \"AsForKeyword\" -> Some AsKeyword\n| \"NumberKeyword\" -> Some (ChineseNumberToken \"\")\n| \"IfWenyanKeyword\" -> Some WenyanIfKeyword\n| \"ThenWenyanKeyword\" -> Some WenyanThenKeyword",
        "lines": [
          "| \"OneKeyword\" -> Some OneKeyword",
          "| \"NameKeyword\" -> Some AsKeyword",
          "| \"AlsoKeyword\" -> Some AndKeyword",
          "| \"ThenGetKeyword\" -> Some ThenKeyword",
          "| \"CallKeyword\" -> Some FunKeyword",
          "| \"ValueKeyword\" -> Some ValKeyword",
          "| \"AsForKeyword\" -> Some AsKeyword",
          "| \"NumberKeyword\" -> Some (ChineseNumberToken \"\")",
          "| \"IfWenyanKeyword\" -> Some WenyanIfKeyword",
          "| \"ThenWenyanKeyword\" -> Some WenyanThenKeyword"
        ],
        "start_line": 246,
        "end_line": 255,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      },
      {
        "hash": "3fb020f80109c29d34bb2561585bc91a",
        "text": "| \"OneKeyword\" -> Some OneKeyword\n| \"NameKeyword\" -> Some AsKeyword\n| \"AlsoKeyword\" -> Some AndKeyword\n| \"ThenGetKeyword\" -> Some ThenKeyword\n| \"CallKeyword\" -> Some FunKeyword\n| \"ValueKeyword\" -> Some ValKeyword\n| \"AsForKeyword\" -> Some AsKeyword\n| \"NumberKeyword\" -> Some (ChineseNumberToken \"\")\n| \"IfWenyanKeyword\" -> Some WenyanIfKeyword\n| \"ThenWenyanKeyword\" -> Some WenyanThenKeyword",
        "lines": [
          "| \"OneKeyword\" -> Some OneKeyword",
          "| \"NameKeyword\" -> Some AsKeyword",
          "| \"AlsoKeyword\" -> Some AndKeyword",
          "| \"ThenGetKeyword\" -> Some ThenKeyword",
          "| \"CallKeyword\" -> Some FunKeyword",
          "| \"ValueKeyword\" -> Some ValKeyword",
          "| \"AsForKeyword\" -> Some AsKeyword",
          "| \"NumberKeyword\" -> Some (ChineseNumberToken \"\")",
          "| \"IfWenyanKeyword\" -> Some WenyanIfKeyword",
          "| \"ThenWenyanKeyword\" -> Some WenyanThenKeyword"
        ],
        "start_line": 38,
        "end_line": 47,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_keywords.ml"
      }
    ],
    "8f4bef00add13ea3851f7ca9f620038a": [
      {
        "hash": "8f4bef00add13ea3851f7ca9f620038a",
        "text": "| \"NameKeyword\" -> Some AsKeyword\n| \"AlsoKeyword\" -> Some AndKeyword\n| \"ThenGetKeyword\" -> Some ThenKeyword\n| \"CallKeyword\" -> Some FunKeyword\n| \"ValueKeyword\" -> Some ValKeyword\n| \"AsForKeyword\" -> Some AsKeyword\n| \"NumberKeyword\" -> Some (ChineseNumberToken \"\")\n| \"IfWenyanKeyword\" -> Some WenyanIfKeyword\n| \"ThenWenyanKeyword\" -> Some WenyanThenKeyword\n| _ -> None",
        "lines": [
          "| \"NameKeyword\" -> Some AsKeyword",
          "| \"AlsoKeyword\" -> Some AndKeyword",
          "| \"ThenGetKeyword\" -> Some ThenKeyword",
          "| \"CallKeyword\" -> Some FunKeyword",
          "| \"ValueKeyword\" -> Some ValKeyword",
          "| \"AsForKeyword\" -> Some AsKeyword",
          "| \"NumberKeyword\" -> Some (ChineseNumberToken \"\")",
          "| \"IfWenyanKeyword\" -> Some WenyanIfKeyword",
          "| \"ThenWenyanKeyword\" -> Some WenyanThenKeyword",
          "| _ -> None"
        ],
        "start_line": 247,
        "end_line": 256,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      },
      {
        "hash": "8f4bef00add13ea3851f7ca9f620038a",
        "text": "| \"NameKeyword\" -> Some AsKeyword\n| \"AlsoKeyword\" -> Some AndKeyword\n| \"ThenGetKeyword\" -> Some ThenKeyword\n| \"CallKeyword\" -> Some FunKeyword\n| \"ValueKeyword\" -> Some ValKeyword\n| \"AsForKeyword\" -> Some AsKeyword\n| \"NumberKeyword\" -> Some (ChineseNumberToken \"\")\n| \"IfWenyanKeyword\" -> Some WenyanIfKeyword\n| \"ThenWenyanKeyword\" -> Some WenyanThenKeyword\n| _ -> None",
        "lines": [
          "| \"NameKeyword\" -> Some AsKeyword",
          "| \"AlsoKeyword\" -> Some AndKeyword",
          "| \"ThenGetKeyword\" -> Some ThenKeyword",
          "| \"CallKeyword\" -> Some FunKeyword",
          "| \"ValueKeyword\" -> Some ValKeyword",
          "| \"AsForKeyword\" -> Some AsKeyword",
          "| \"NumberKeyword\" -> Some (ChineseNumberToken \"\")",
          "| \"IfWenyanKeyword\" -> Some WenyanIfKeyword",
          "| \"ThenWenyanKeyword\" -> Some WenyanThenKeyword",
          "| _ -> None"
        ],
        "start_line": 39,
        "end_line": 48,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_keywords.ml"
      }
    ],
    "5bde05b3b8af376cfefd3077458d0090": [
      {
        "hash": "5bde05b3b8af376cfefd3077458d0090",
        "text": "| \"AlsoKeyword\" -> Some AndKeyword\n| \"ThenGetKeyword\" -> Some ThenKeyword\n| \"CallKeyword\" -> Some FunKeyword\n| \"ValueKeyword\" -> Some ValKeyword\n| \"AsForKeyword\" -> Some AsKeyword\n| \"NumberKeyword\" -> Some (ChineseNumberToken \"\")\n| \"IfWenyanKeyword\" -> Some WenyanIfKeyword\n| \"ThenWenyanKeyword\" -> Some WenyanThenKeyword\n| _ -> None",
        "lines": [
          "| \"AlsoKeyword\" -> Some AndKeyword",
          "| \"ThenGetKeyword\" -> Some ThenKeyword",
          "| \"CallKeyword\" -> Some FunKeyword",
          "| \"ValueKeyword\" -> Some ValKeyword",
          "| \"AsForKeyword\" -> Some AsKeyword",
          "| \"NumberKeyword\" -> Some (ChineseNumberToken \"\")",
          "| \"IfWenyanKeyword\" -> Some WenyanIfKeyword",
          "| \"ThenWenyanKeyword\" -> Some WenyanThenKeyword",
          "| _ -> None"
        ],
        "start_line": 248,
        "end_line": 256,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      },
      {
        "hash": "5bde05b3b8af376cfefd3077458d0090",
        "text": "| \"AlsoKeyword\" -> Some AndKeyword\n| \"ThenGetKeyword\" -> Some ThenKeyword\n| \"CallKeyword\" -> Some FunKeyword\n| \"ValueKeyword\" -> Some ValKeyword\n| \"AsForKeyword\" -> Some AsKeyword\n| \"NumberKeyword\" -> Some (ChineseNumberToken \"\")\n| \"IfWenyanKeyword\" -> Some WenyanIfKeyword\n| \"ThenWenyanKeyword\" -> Some WenyanThenKeyword\n| _ -> None",
        "lines": [
          "| \"AlsoKeyword\" -> Some AndKeyword",
          "| \"ThenGetKeyword\" -> Some ThenKeyword",
          "| \"CallKeyword\" -> Some FunKeyword",
          "| \"ValueKeyword\" -> Some ValKeyword",
          "| \"AsForKeyword\" -> Some AsKeyword",
          "| \"NumberKeyword\" -> Some (ChineseNumberToken \"\")",
          "| \"IfWenyanKeyword\" -> Some WenyanIfKeyword",
          "| \"ThenWenyanKeyword\" -> Some WenyanThenKeyword",
          "| _ -> None"
        ],
        "start_line": 40,
        "end_line": 48,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_keywords.ml"
      }
    ],
    "c456a1e76880e450c3a8c379cc0c262c": [
      {
        "hash": "c456a1e76880e450c3a8c379cc0c262c",
        "text": "| \"ThenGetKeyword\" -> Some ThenKeyword\n| \"CallKeyword\" -> Some FunKeyword\n| \"ValueKeyword\" -> Some ValKeyword\n| \"AsForKeyword\" -> Some AsKeyword\n| \"NumberKeyword\" -> Some (ChineseNumberToken \"\")\n| \"IfWenyanKeyword\" -> Some WenyanIfKeyword\n| \"ThenWenyanKeyword\" -> Some WenyanThenKeyword\n| _ -> None",
        "lines": [
          "| \"ThenGetKeyword\" -> Some ThenKeyword",
          "| \"CallKeyword\" -> Some FunKeyword",
          "| \"ValueKeyword\" -> Some ValKeyword",
          "| \"AsForKeyword\" -> Some AsKeyword",
          "| \"NumberKeyword\" -> Some (ChineseNumberToken \"\")",
          "| \"IfWenyanKeyword\" -> Some WenyanIfKeyword",
          "| \"ThenWenyanKeyword\" -> Some WenyanThenKeyword",
          "| _ -> None"
        ],
        "start_line": 249,
        "end_line": 256,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      },
      {
        "hash": "c456a1e76880e450c3a8c379cc0c262c",
        "text": "| \"ThenGetKeyword\" -> Some ThenKeyword\n| \"CallKeyword\" -> Some FunKeyword\n| \"ValueKeyword\" -> Some ValKeyword\n| \"AsForKeyword\" -> Some AsKeyword\n| \"NumberKeyword\" -> Some (ChineseNumberToken \"\")\n| \"IfWenyanKeyword\" -> Some WenyanIfKeyword\n| \"ThenWenyanKeyword\" -> Some WenyanThenKeyword\n| _ -> None",
        "lines": [
          "| \"ThenGetKeyword\" -> Some ThenKeyword",
          "| \"CallKeyword\" -> Some FunKeyword",
          "| \"ValueKeyword\" -> Some ValKeyword",
          "| \"AsForKeyword\" -> Some AsKeyword",
          "| \"NumberKeyword\" -> Some (ChineseNumberToken \"\")",
          "| \"IfWenyanKeyword\" -> Some WenyanIfKeyword",
          "| \"ThenWenyanKeyword\" -> Some WenyanThenKeyword",
          "| _ -> None"
        ],
        "start_line": 41,
        "end_line": 48,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_keywords.ml"
      }
    ],
    "f7ad24edfdb79895b5698da7a25c779b": [
      {
        "hash": "f7ad24edfdb79895b5698da7a25c779b",
        "text": "| \"CallKeyword\" -> Some FunKeyword\n| \"ValueKeyword\" -> Some ValKeyword\n| \"AsForKeyword\" -> Some AsKeyword\n| \"NumberKeyword\" -> Some (ChineseNumberToken \"\")\n| \"IfWenyanKeyword\" -> Some WenyanIfKeyword\n| \"ThenWenyanKeyword\" -> Some WenyanThenKeyword\n| _ -> None",
        "lines": [
          "| \"CallKeyword\" -> Some FunKeyword",
          "| \"ValueKeyword\" -> Some ValKeyword",
          "| \"AsForKeyword\" -> Some AsKeyword",
          "| \"NumberKeyword\" -> Some (ChineseNumberToken \"\")",
          "| \"IfWenyanKeyword\" -> Some WenyanIfKeyword",
          "| \"ThenWenyanKeyword\" -> Some WenyanThenKeyword",
          "| _ -> None"
        ],
        "start_line": 250,
        "end_line": 256,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      },
      {
        "hash": "f7ad24edfdb79895b5698da7a25c779b",
        "text": "| \"CallKeyword\" -> Some FunKeyword\n| \"ValueKeyword\" -> Some ValKeyword\n| \"AsForKeyword\" -> Some AsKeyword\n| \"NumberKeyword\" -> Some (ChineseNumberToken \"\")\n| \"IfWenyanKeyword\" -> Some WenyanIfKeyword\n| \"ThenWenyanKeyword\" -> Some WenyanThenKeyword\n| _ -> None",
        "lines": [
          "| \"CallKeyword\" -> Some FunKeyword",
          "| \"ValueKeyword\" -> Some ValKeyword",
          "| \"AsForKeyword\" -> Some AsKeyword",
          "| \"NumberKeyword\" -> Some (ChineseNumberToken \"\")",
          "| \"IfWenyanKeyword\" -> Some WenyanIfKeyword",
          "| \"ThenWenyanKeyword\" -> Some WenyanThenKeyword",
          "| _ -> None"
        ],
        "start_line": 42,
        "end_line": 48,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_keywords.ml"
      }
    ],
    "1bdc7a5d620068184e20d23d62be0109": [
      {
        "hash": "1bdc7a5d620068184e20d23d62be0109",
        "text": "| \"ValueKeyword\" -> Some ValKeyword\n| \"AsForKeyword\" -> Some AsKeyword\n| \"NumberKeyword\" -> Some (ChineseNumberToken \"\")\n| \"IfWenyanKeyword\" -> Some WenyanIfKeyword\n| \"ThenWenyanKeyword\" -> Some WenyanThenKeyword\n| _ -> None",
        "lines": [
          "| \"ValueKeyword\" -> Some ValKeyword",
          "| \"AsForKeyword\" -> Some AsKeyword",
          "| \"NumberKeyword\" -> Some (ChineseNumberToken \"\")",
          "| \"IfWenyanKeyword\" -> Some WenyanIfKeyword",
          "| \"ThenWenyanKeyword\" -> Some WenyanThenKeyword",
          "| _ -> None"
        ],
        "start_line": 251,
        "end_line": 256,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      },
      {
        "hash": "1bdc7a5d620068184e20d23d62be0109",
        "text": "| \"ValueKeyword\" -> Some ValKeyword\n| \"AsForKeyword\" -> Some AsKeyword\n| \"NumberKeyword\" -> Some (ChineseNumberToken \"\")\n| \"IfWenyanKeyword\" -> Some WenyanIfKeyword\n| \"ThenWenyanKeyword\" -> Some WenyanThenKeyword\n| _ -> None",
        "lines": [
          "| \"ValueKeyword\" -> Some ValKeyword",
          "| \"AsForKeyword\" -> Some AsKeyword",
          "| \"NumberKeyword\" -> Some (ChineseNumberToken \"\")",
          "| \"IfWenyanKeyword\" -> Some WenyanIfKeyword",
          "| \"ThenWenyanKeyword\" -> Some WenyanThenKeyword",
          "| _ -> None"
        ],
        "start_line": 43,
        "end_line": 48,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_keywords.ml"
      }
    ],
    "8f9de26cc03cc2852b31f77f1ff350c4": [
      {
        "hash": "8f9de26cc03cc2852b31f77f1ff350c4",
        "text": "| \"AsForKeyword\" -> Some AsKeyword\n| \"NumberKeyword\" -> Some (ChineseNumberToken \"\")\n| \"IfWenyanKeyword\" -> Some WenyanIfKeyword\n| \"ThenWenyanKeyword\" -> Some WenyanThenKeyword\n| _ -> None",
        "lines": [
          "| \"AsForKeyword\" -> Some AsKeyword",
          "| \"NumberKeyword\" -> Some (ChineseNumberToken \"\")",
          "| \"IfWenyanKeyword\" -> Some WenyanIfKeyword",
          "| \"ThenWenyanKeyword\" -> Some WenyanThenKeyword",
          "| _ -> None"
        ],
        "start_line": 252,
        "end_line": 256,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      },
      {
        "hash": "8f9de26cc03cc2852b31f77f1ff350c4",
        "text": "| \"AsForKeyword\" -> Some AsKeyword\n| \"NumberKeyword\" -> Some (ChineseNumberToken \"\")\n| \"IfWenyanKeyword\" -> Some WenyanIfKeyword\n| \"ThenWenyanKeyword\" -> Some WenyanThenKeyword\n| _ -> None",
        "lines": [
          "| \"AsForKeyword\" -> Some AsKeyword",
          "| \"NumberKeyword\" -> Some (ChineseNumberToken \"\")",
          "| \"IfWenyanKeyword\" -> Some WenyanIfKeyword",
          "| \"ThenWenyanKeyword\" -> Some WenyanThenKeyword",
          "| _ -> None"
        ],
        "start_line": 44,
        "end_line": 48,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_keywords.ml"
      }
    ],
    "1e369ad0fa8908c24f16dacc19e390f5": [
      {
        "hash": "1e369ad0fa8908c24f16dacc19e390f5",
        "text": "| \"NumberKeyword\" -> Some (ChineseNumberToken \"\")\n| \"IfWenyanKeyword\" -> Some WenyanIfKeyword\n| \"ThenWenyanKeyword\" -> Some WenyanThenKeyword\n| _ -> None",
        "lines": [
          "| \"NumberKeyword\" -> Some (ChineseNumberToken \"\")",
          "| \"IfWenyanKeyword\" -> Some WenyanIfKeyword",
          "| \"ThenWenyanKeyword\" -> Some WenyanThenKeyword",
          "| _ -> None"
        ],
        "start_line": 253,
        "end_line": 256,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      },
      {
        "hash": "1e369ad0fa8908c24f16dacc19e390f5",
        "text": "| \"NumberKeyword\" -> Some (ChineseNumberToken \"\")\n| \"IfWenyanKeyword\" -> Some WenyanIfKeyword\n| \"ThenWenyanKeyword\" -> Some WenyanThenKeyword\n| _ -> None",
        "lines": [
          "| \"NumberKeyword\" -> Some (ChineseNumberToken \"\")",
          "| \"IfWenyanKeyword\" -> Some WenyanIfKeyword",
          "| \"ThenWenyanKeyword\" -> Some WenyanThenKeyword",
          "| _ -> None"
        ],
        "start_line": 45,
        "end_line": 48,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_keywords.ml"
      }
    ],
    "5f9b499ca327ec4ff36150a7d255a7c9": [
      {
        "hash": "5f9b499ca327ec4ff36150a7d255a7c9",
        "text": "| \"IfWenyanKeyword\" -> Some WenyanIfKeyword\n| \"ThenWenyanKeyword\" -> Some WenyanThenKeyword\n| _ -> None",
        "lines": [
          "| \"IfWenyanKeyword\" -> Some WenyanIfKeyword",
          "| \"ThenWenyanKeyword\" -> Some WenyanThenKeyword",
          "| _ -> None"
        ],
        "start_line": 254,
        "end_line": 256,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      },
      {
        "hash": "5f9b499ca327ec4ff36150a7d255a7c9",
        "text": "| \"IfWenyanKeyword\" -> Some WenyanIfKeyword\n| \"ThenWenyanKeyword\" -> Some WenyanThenKeyword\n| _ -> None",
        "lines": [
          "| \"IfWenyanKeyword\" -> Some WenyanIfKeyword",
          "| \"ThenWenyanKeyword\" -> Some WenyanThenKeyword",
          "| _ -> None"
        ],
        "start_line": 46,
        "end_line": 48,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_keywords.ml"
      }
    ],
    "b20429a389a9437c267e502b8a3dce4b": [
      {
        "hash": "b20429a389a9437c267e502b8a3dce4b",
        "text": "let map_classical_keywords = function\n| \"AncientDefineKeyword\" -> Some ClassicalFunctionKeyword\n| \"AncientObserveKeyword\" -> Some MatchKeyword\n| \"AncientIfKeyword\" -> Some ClassicalIfKeyword\n| \"AncientThenKeyword\" -> Some ClassicalThenKeyword\n| \"AncientListStartKeyword\" -> Some LeftBracket\n| \"AncientEndKeyword\" -> Some EndKeyword\n| \"AncientIsKeyword\" -> Some EqualOp\n| \"AncientArrowKeyword\" -> Some ArrowOp\n| _ -> None",
        "lines": [
          "let map_classical_keywords = function",
          "| \"AncientDefineKeyword\" -> Some ClassicalFunctionKeyword",
          "| \"AncientObserveKeyword\" -> Some MatchKeyword",
          "| \"AncientIfKeyword\" -> Some ClassicalIfKeyword",
          "| \"AncientThenKeyword\" -> Some ClassicalThenKeyword",
          "| \"AncientListStartKeyword\" -> Some LeftBracket",
          "| \"AncientEndKeyword\" -> Some EndKeyword",
          "| \"AncientIsKeyword\" -> Some EqualOp",
          "| \"AncientArrowKeyword\" -> Some ArrowOp",
          "| _ -> None"
        ],
        "start_line": 259,
        "end_line": 268,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      },
      {
        "hash": "b20429a389a9437c267e502b8a3dce4b",
        "text": "let map_classical_keywords = function\n| \"AncientDefineKeyword\" -> Some ClassicalFunctionKeyword\n| \"AncientObserveKeyword\" -> Some MatchKeyword\n| \"AncientIfKeyword\" -> Some ClassicalIfKeyword\n| \"AncientThenKeyword\" -> Some ClassicalThenKeyword\n| \"AncientListStartKeyword\" -> Some LeftBracket\n| \"AncientEndKeyword\" -> Some EndKeyword\n| \"AncientIsKeyword\" -> Some EqualOp\n| \"AncientArrowKeyword\" -> Some ArrowOp\n| _ -> None",
        "lines": [
          "let map_classical_keywords = function",
          "| \"AncientDefineKeyword\" -> Some ClassicalFunctionKeyword",
          "| \"AncientObserveKeyword\" -> Some MatchKeyword",
          "| \"AncientIfKeyword\" -> Some ClassicalIfKeyword",
          "| \"AncientThenKeyword\" -> Some ClassicalThenKeyword",
          "| \"AncientListStartKeyword\" -> Some LeftBracket",
          "| \"AncientEndKeyword\" -> Some EndKeyword",
          "| \"AncientIsKeyword\" -> Some EqualOp",
          "| \"AncientArrowKeyword\" -> Some ArrowOp",
          "| _ -> None"
        ],
        "start_line": 51,
        "end_line": 60,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_keywords.ml"
      }
    ],
    "a6303e799e290ad3d939c64a4c6508e0": [
      {
        "hash": "a6303e799e290ad3d939c64a4c6508e0",
        "text": "| \"AncientDefineKeyword\" -> Some ClassicalFunctionKeyword\n| \"AncientObserveKeyword\" -> Some MatchKeyword\n| \"AncientIfKeyword\" -> Some ClassicalIfKeyword\n| \"AncientThenKeyword\" -> Some ClassicalThenKeyword\n| \"AncientListStartKeyword\" -> Some LeftBracket\n| \"AncientEndKeyword\" -> Some EndKeyword\n| \"AncientIsKeyword\" -> Some EqualOp\n| \"AncientArrowKeyword\" -> Some ArrowOp\n| _ -> None",
        "lines": [
          "| \"AncientDefineKeyword\" -> Some ClassicalFunctionKeyword",
          "| \"AncientObserveKeyword\" -> Some MatchKeyword",
          "| \"AncientIfKeyword\" -> Some ClassicalIfKeyword",
          "| \"AncientThenKeyword\" -> Some ClassicalThenKeyword",
          "| \"AncientListStartKeyword\" -> Some LeftBracket",
          "| \"AncientEndKeyword\" -> Some EndKeyword",
          "| \"AncientIsKeyword\" -> Some EqualOp",
          "| \"AncientArrowKeyword\" -> Some ArrowOp",
          "| _ -> None"
        ],
        "start_line": 260,
        "end_line": 268,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      },
      {
        "hash": "a6303e799e290ad3d939c64a4c6508e0",
        "text": "| \"AncientDefineKeyword\" -> Some ClassicalFunctionKeyword\n| \"AncientObserveKeyword\" -> Some MatchKeyword\n| \"AncientIfKeyword\" -> Some ClassicalIfKeyword\n| \"AncientThenKeyword\" -> Some ClassicalThenKeyword\n| \"AncientListStartKeyword\" -> Some LeftBracket\n| \"AncientEndKeyword\" -> Some EndKeyword\n| \"AncientIsKeyword\" -> Some EqualOp\n| \"AncientArrowKeyword\" -> Some ArrowOp\n| _ -> None",
        "lines": [
          "| \"AncientDefineKeyword\" -> Some ClassicalFunctionKeyword",
          "| \"AncientObserveKeyword\" -> Some MatchKeyword",
          "| \"AncientIfKeyword\" -> Some ClassicalIfKeyword",
          "| \"AncientThenKeyword\" -> Some ClassicalThenKeyword",
          "| \"AncientListStartKeyword\" -> Some LeftBracket",
          "| \"AncientEndKeyword\" -> Some EndKeyword",
          "| \"AncientIsKeyword\" -> Some EqualOp",
          "| \"AncientArrowKeyword\" -> Some ArrowOp",
          "| _ -> None"
        ],
        "start_line": 52,
        "end_line": 60,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_keywords.ml"
      }
    ],
    "7742205ddf0034eac5154561262ed492": [
      {
        "hash": "7742205ddf0034eac5154561262ed492",
        "text": "| \"AncientObserveKeyword\" -> Some MatchKeyword\n| \"AncientIfKeyword\" -> Some ClassicalIfKeyword\n| \"AncientThenKeyword\" -> Some ClassicalThenKeyword\n| \"AncientListStartKeyword\" -> Some LeftBracket\n| \"AncientEndKeyword\" -> Some EndKeyword\n| \"AncientIsKeyword\" -> Some EqualOp\n| \"AncientArrowKeyword\" -> Some ArrowOp\n| _ -> None",
        "lines": [
          "| \"AncientObserveKeyword\" -> Some MatchKeyword",
          "| \"AncientIfKeyword\" -> Some ClassicalIfKeyword",
          "| \"AncientThenKeyword\" -> Some ClassicalThenKeyword",
          "| \"AncientListStartKeyword\" -> Some LeftBracket",
          "| \"AncientEndKeyword\" -> Some EndKeyword",
          "| \"AncientIsKeyword\" -> Some EqualOp",
          "| \"AncientArrowKeyword\" -> Some ArrowOp",
          "| _ -> None"
        ],
        "start_line": 261,
        "end_line": 268,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      },
      {
        "hash": "7742205ddf0034eac5154561262ed492",
        "text": "| \"AncientObserveKeyword\" -> Some MatchKeyword\n| \"AncientIfKeyword\" -> Some ClassicalIfKeyword\n| \"AncientThenKeyword\" -> Some ClassicalThenKeyword\n| \"AncientListStartKeyword\" -> Some LeftBracket\n| \"AncientEndKeyword\" -> Some EndKeyword\n| \"AncientIsKeyword\" -> Some EqualOp\n| \"AncientArrowKeyword\" -> Some ArrowOp\n| _ -> None",
        "lines": [
          "| \"AncientObserveKeyword\" -> Some MatchKeyword",
          "| \"AncientIfKeyword\" -> Some ClassicalIfKeyword",
          "| \"AncientThenKeyword\" -> Some ClassicalThenKeyword",
          "| \"AncientListStartKeyword\" -> Some LeftBracket",
          "| \"AncientEndKeyword\" -> Some EndKeyword",
          "| \"AncientIsKeyword\" -> Some EqualOp",
          "| \"AncientArrowKeyword\" -> Some ArrowOp",
          "| _ -> None"
        ],
        "start_line": 53,
        "end_line": 60,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_keywords.ml"
      }
    ],
    "f78651fe1775c51cb7589d1e99bdf46b": [
      {
        "hash": "f78651fe1775c51cb7589d1e99bdf46b",
        "text": "| \"AncientIfKeyword\" -> Some ClassicalIfKeyword\n| \"AncientThenKeyword\" -> Some ClassicalThenKeyword\n| \"AncientListStartKeyword\" -> Some LeftBracket\n| \"AncientEndKeyword\" -> Some EndKeyword\n| \"AncientIsKeyword\" -> Some EqualOp\n| \"AncientArrowKeyword\" -> Some ArrowOp\n| _ -> None",
        "lines": [
          "| \"AncientIfKeyword\" -> Some ClassicalIfKeyword",
          "| \"AncientThenKeyword\" -> Some ClassicalThenKeyword",
          "| \"AncientListStartKeyword\" -> Some LeftBracket",
          "| \"AncientEndKeyword\" -> Some EndKeyword",
          "| \"AncientIsKeyword\" -> Some EqualOp",
          "| \"AncientArrowKeyword\" -> Some ArrowOp",
          "| _ -> None"
        ],
        "start_line": 262,
        "end_line": 268,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      },
      {
        "hash": "f78651fe1775c51cb7589d1e99bdf46b",
        "text": "| \"AncientIfKeyword\" -> Some ClassicalIfKeyword\n| \"AncientThenKeyword\" -> Some ClassicalThenKeyword\n| \"AncientListStartKeyword\" -> Some LeftBracket\n| \"AncientEndKeyword\" -> Some EndKeyword\n| \"AncientIsKeyword\" -> Some EqualOp\n| \"AncientArrowKeyword\" -> Some ArrowOp\n| _ -> None",
        "lines": [
          "| \"AncientIfKeyword\" -> Some ClassicalIfKeyword",
          "| \"AncientThenKeyword\" -> Some ClassicalThenKeyword",
          "| \"AncientListStartKeyword\" -> Some LeftBracket",
          "| \"AncientEndKeyword\" -> Some EndKeyword",
          "| \"AncientIsKeyword\" -> Some EqualOp",
          "| \"AncientArrowKeyword\" -> Some ArrowOp",
          "| _ -> None"
        ],
        "start_line": 54,
        "end_line": 60,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_keywords.ml"
      }
    ],
    "c20d7db054ddc036d4be928787c45e24": [
      {
        "hash": "c20d7db054ddc036d4be928787c45e24",
        "text": "| \"AncientThenKeyword\" -> Some ClassicalThenKeyword\n| \"AncientListStartKeyword\" -> Some LeftBracket\n| \"AncientEndKeyword\" -> Some EndKeyword\n| \"AncientIsKeyword\" -> Some EqualOp\n| \"AncientArrowKeyword\" -> Some ArrowOp\n| _ -> None",
        "lines": [
          "| \"AncientThenKeyword\" -> Some ClassicalThenKeyword",
          "| \"AncientListStartKeyword\" -> Some LeftBracket",
          "| \"AncientEndKeyword\" -> Some EndKeyword",
          "| \"AncientIsKeyword\" -> Some EqualOp",
          "| \"AncientArrowKeyword\" -> Some ArrowOp",
          "| _ -> None"
        ],
        "start_line": 263,
        "end_line": 268,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      },
      {
        "hash": "c20d7db054ddc036d4be928787c45e24",
        "text": "| \"AncientThenKeyword\" -> Some ClassicalThenKeyword\n| \"AncientListStartKeyword\" -> Some LeftBracket\n| \"AncientEndKeyword\" -> Some EndKeyword\n| \"AncientIsKeyword\" -> Some EqualOp\n| \"AncientArrowKeyword\" -> Some ArrowOp\n| _ -> None",
        "lines": [
          "| \"AncientThenKeyword\" -> Some ClassicalThenKeyword",
          "| \"AncientListStartKeyword\" -> Some LeftBracket",
          "| \"AncientEndKeyword\" -> Some EndKeyword",
          "| \"AncientIsKeyword\" -> Some EqualOp",
          "| \"AncientArrowKeyword\" -> Some ArrowOp",
          "| _ -> None"
        ],
        "start_line": 55,
        "end_line": 60,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_keywords.ml"
      }
    ],
    "e633f1684710f8181dea9a6c9e24962e": [
      {
        "hash": "e633f1684710f8181dea9a6c9e24962e",
        "text": "| \"AncientListStartKeyword\" -> Some LeftBracket\n| \"AncientEndKeyword\" -> Some EndKeyword\n| \"AncientIsKeyword\" -> Some EqualOp\n| \"AncientArrowKeyword\" -> Some ArrowOp\n| _ -> None",
        "lines": [
          "| \"AncientListStartKeyword\" -> Some LeftBracket",
          "| \"AncientEndKeyword\" -> Some EndKeyword",
          "| \"AncientIsKeyword\" -> Some EqualOp",
          "| \"AncientArrowKeyword\" -> Some ArrowOp",
          "| _ -> None"
        ],
        "start_line": 264,
        "end_line": 268,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      },
      {
        "hash": "e633f1684710f8181dea9a6c9e24962e",
        "text": "| \"AncientListStartKeyword\" -> Some LeftBracket\n| \"AncientEndKeyword\" -> Some EndKeyword\n| \"AncientIsKeyword\" -> Some EqualOp\n| \"AncientArrowKeyword\" -> Some ArrowOp\n| _ -> None",
        "lines": [
          "| \"AncientListStartKeyword\" -> Some LeftBracket",
          "| \"AncientEndKeyword\" -> Some EndKeyword",
          "| \"AncientIsKeyword\" -> Some EqualOp",
          "| \"AncientArrowKeyword\" -> Some ArrowOp",
          "| _ -> None"
        ],
        "start_line": 56,
        "end_line": 60,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_keywords.ml"
      }
    ],
    "7752cc059d2c4ad56b1f2bbc05cc3490": [
      {
        "hash": "7752cc059d2c4ad56b1f2bbc05cc3490",
        "text": "| \"AncientEndKeyword\" -> Some EndKeyword\n| \"AncientIsKeyword\" -> Some EqualOp\n| \"AncientArrowKeyword\" -> Some ArrowOp\n| _ -> None",
        "lines": [
          "| \"AncientEndKeyword\" -> Some EndKeyword",
          "| \"AncientIsKeyword\" -> Some EqualOp",
          "| \"AncientArrowKeyword\" -> Some ArrowOp",
          "| _ -> None"
        ],
        "start_line": 265,
        "end_line": 268,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      },
      {
        "hash": "7752cc059d2c4ad56b1f2bbc05cc3490",
        "text": "| \"AncientEndKeyword\" -> Some EndKeyword\n| \"AncientIsKeyword\" -> Some EqualOp\n| \"AncientArrowKeyword\" -> Some ArrowOp\n| _ -> None",
        "lines": [
          "| \"AncientEndKeyword\" -> Some EndKeyword",
          "| \"AncientIsKeyword\" -> Some EqualOp",
          "| \"AncientArrowKeyword\" -> Some ArrowOp",
          "| _ -> None"
        ],
        "start_line": 57,
        "end_line": 60,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_keywords.ml"
      }
    ],
    "4ad54359ad451cb025201f88c4cf3d0b": [
      {
        "hash": "4ad54359ad451cb025201f88c4cf3d0b",
        "text": "| \"AncientIsKeyword\" -> Some EqualOp\n| \"AncientArrowKeyword\" -> Some ArrowOp\n| _ -> None",
        "lines": [
          "| \"AncientIsKeyword\" -> Some EqualOp",
          "| \"AncientArrowKeyword\" -> Some ArrowOp",
          "| _ -> None"
        ],
        "start_line": 266,
        "end_line": 268,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      },
      {
        "hash": "4ad54359ad451cb025201f88c4cf3d0b",
        "text": "| \"AncientIsKeyword\" -> Some EqualOp\n| \"AncientArrowKeyword\" -> Some ArrowOp\n| _ -> None",
        "lines": [
          "| \"AncientIsKeyword\" -> Some EqualOp",
          "| \"AncientArrowKeyword\" -> Some ArrowOp",
          "| _ -> None"
        ],
        "start_line": 58,
        "end_line": 60,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_keywords.ml"
      }
    ],
    "d8756045d093c797fb830533483923a1": [
      {
        "hash": "d8756045d093c797fb830533483923a1",
        "text": "let map_natural_language_keywords = function\n| \"DefineKeyword\" -> Some FunKeyword\n| \"AcceptKeyword\" -> Some InKeyword\n| \"ReturnWhenKeyword\" -> Some ThenKeyword\n| \"ElseReturnKeyword\" -> Some ElseKeyword\n| \"IsKeyword\" -> Some EqualOp\n| \"EqualToKeyword\" -> Some EqualOp\n| \"EmptyKeyword\" -> Some UnitToken\n| \"InputKeyword\" -> Some InKeyword\n| \"OutputKeyword\" -> Some ReturnKeyword",
        "lines": [
          "let map_natural_language_keywords = function",
          "| \"DefineKeyword\" -> Some FunKeyword",
          "| \"AcceptKeyword\" -> Some InKeyword",
          "| \"ReturnWhenKeyword\" -> Some ThenKeyword",
          "| \"ElseReturnKeyword\" -> Some ElseKeyword",
          "| \"IsKeyword\" -> Some EqualOp",
          "| \"EqualToKeyword\" -> Some EqualOp",
          "| \"EmptyKeyword\" -> Some UnitToken",
          "| \"InputKeyword\" -> Some InKeyword",
          "| \"OutputKeyword\" -> Some ReturnKeyword"
        ],
        "start_line": 271,
        "end_line": 280,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      },
      {
        "hash": "d8756045d093c797fb830533483923a1",
        "text": "let map_natural_language_keywords = function\n| \"DefineKeyword\" -> Some FunKeyword\n| \"AcceptKeyword\" -> Some InKeyword\n| \"ReturnWhenKeyword\" -> Some ThenKeyword\n| \"ElseReturnKeyword\" -> Some ElseKeyword\n| \"IsKeyword\" -> Some EqualOp\n| \"EqualToKeyword\" -> Some EqualOp\n| \"EmptyKeyword\" -> Some UnitToken\n| \"InputKeyword\" -> Some InKeyword\n| \"OutputKeyword\" -> Some ReturnKeyword",
        "lines": [
          "let map_natural_language_keywords = function",
          "| \"DefineKeyword\" -> Some FunKeyword",
          "| \"AcceptKeyword\" -> Some InKeyword",
          "| \"ReturnWhenKeyword\" -> Some ThenKeyword",
          "| \"ElseReturnKeyword\" -> Some ElseKeyword",
          "| \"IsKeyword\" -> Some EqualOp",
          "| \"EqualToKeyword\" -> Some EqualOp",
          "| \"EmptyKeyword\" -> Some UnitToken",
          "| \"InputKeyword\" -> Some InKeyword",
          "| \"OutputKeyword\" -> Some ReturnKeyword"
        ],
        "start_line": 63,
        "end_line": 72,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_keywords.ml"
      }
    ],
    "96ce151d347c813f90108624f5cd7424": [
      {
        "hash": "96ce151d347c813f90108624f5cd7424",
        "text": "| \"DefineKeyword\" -> Some FunKeyword\n| \"AcceptKeyword\" -> Some InKeyword\n| \"ReturnWhenKeyword\" -> Some ThenKeyword\n| \"ElseReturnKeyword\" -> Some ElseKeyword\n| \"IsKeyword\" -> Some EqualOp\n| \"EqualToKeyword\" -> Some EqualOp\n| \"EmptyKeyword\" -> Some UnitToken\n| \"InputKeyword\" -> Some InKeyword\n| \"OutputKeyword\" -> Some ReturnKeyword\n| _ -> None",
        "lines": [
          "| \"DefineKeyword\" -> Some FunKeyword",
          "| \"AcceptKeyword\" -> Some InKeyword",
          "| \"ReturnWhenKeyword\" -> Some ThenKeyword",
          "| \"ElseReturnKeyword\" -> Some ElseKeyword",
          "| \"IsKeyword\" -> Some EqualOp",
          "| \"EqualToKeyword\" -> Some EqualOp",
          "| \"EmptyKeyword\" -> Some UnitToken",
          "| \"InputKeyword\" -> Some InKeyword",
          "| \"OutputKeyword\" -> Some ReturnKeyword",
          "| _ -> None"
        ],
        "start_line": 272,
        "end_line": 281,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      },
      {
        "hash": "96ce151d347c813f90108624f5cd7424",
        "text": "| \"DefineKeyword\" -> Some FunKeyword\n| \"AcceptKeyword\" -> Some InKeyword\n| \"ReturnWhenKeyword\" -> Some ThenKeyword\n| \"ElseReturnKeyword\" -> Some ElseKeyword\n| \"IsKeyword\" -> Some EqualOp\n| \"EqualToKeyword\" -> Some EqualOp\n| \"EmptyKeyword\" -> Some UnitToken\n| \"InputKeyword\" -> Some InKeyword\n| \"OutputKeyword\" -> Some ReturnKeyword\n| _ -> None",
        "lines": [
          "| \"DefineKeyword\" -> Some FunKeyword",
          "| \"AcceptKeyword\" -> Some InKeyword",
          "| \"ReturnWhenKeyword\" -> Some ThenKeyword",
          "| \"ElseReturnKeyword\" -> Some ElseKeyword",
          "| \"IsKeyword\" -> Some EqualOp",
          "| \"EqualToKeyword\" -> Some EqualOp",
          "| \"EmptyKeyword\" -> Some UnitToken",
          "| \"InputKeyword\" -> Some InKeyword",
          "| \"OutputKeyword\" -> Some ReturnKeyword",
          "| _ -> None"
        ],
        "start_line": 64,
        "end_line": 73,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_keywords.ml"
      }
    ],
    "bb1bb52d25f7017a946aed15bc2e1beb": [
      {
        "hash": "bb1bb52d25f7017a946aed15bc2e1beb",
        "text": "| \"AcceptKeyword\" -> Some InKeyword\n| \"ReturnWhenKeyword\" -> Some ThenKeyword\n| \"ElseReturnKeyword\" -> Some ElseKeyword\n| \"IsKeyword\" -> Some EqualOp\n| \"EqualToKeyword\" -> Some EqualOp\n| \"EmptyKeyword\" -> Some UnitToken\n| \"InputKeyword\" -> Some InKeyword\n| \"OutputKeyword\" -> Some ReturnKeyword\n| _ -> None",
        "lines": [
          "| \"AcceptKeyword\" -> Some InKeyword",
          "| \"ReturnWhenKeyword\" -> Some ThenKeyword",
          "| \"ElseReturnKeyword\" -> Some ElseKeyword",
          "| \"IsKeyword\" -> Some EqualOp",
          "| \"EqualToKeyword\" -> Some EqualOp",
          "| \"EmptyKeyword\" -> Some UnitToken",
          "| \"InputKeyword\" -> Some InKeyword",
          "| \"OutputKeyword\" -> Some ReturnKeyword",
          "| _ -> None"
        ],
        "start_line": 273,
        "end_line": 281,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      },
      {
        "hash": "bb1bb52d25f7017a946aed15bc2e1beb",
        "text": "| \"AcceptKeyword\" -> Some InKeyword\n| \"ReturnWhenKeyword\" -> Some ThenKeyword\n| \"ElseReturnKeyword\" -> Some ElseKeyword\n| \"IsKeyword\" -> Some EqualOp\n| \"EqualToKeyword\" -> Some EqualOp\n| \"EmptyKeyword\" -> Some UnitToken\n| \"InputKeyword\" -> Some InKeyword\n| \"OutputKeyword\" -> Some ReturnKeyword\n| _ -> None",
        "lines": [
          "| \"AcceptKeyword\" -> Some InKeyword",
          "| \"ReturnWhenKeyword\" -> Some ThenKeyword",
          "| \"ElseReturnKeyword\" -> Some ElseKeyword",
          "| \"IsKeyword\" -> Some EqualOp",
          "| \"EqualToKeyword\" -> Some EqualOp",
          "| \"EmptyKeyword\" -> Some UnitToken",
          "| \"InputKeyword\" -> Some InKeyword",
          "| \"OutputKeyword\" -> Some ReturnKeyword",
          "| _ -> None"
        ],
        "start_line": 65,
        "end_line": 73,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_keywords.ml"
      }
    ],
    "c685a28506c67ab2e8d6ba6a4d1b5b19": [
      {
        "hash": "c685a28506c67ab2e8d6ba6a4d1b5b19",
        "text": "| \"ReturnWhenKeyword\" -> Some ThenKeyword\n| \"ElseReturnKeyword\" -> Some ElseKeyword\n| \"IsKeyword\" -> Some EqualOp\n| \"EqualToKeyword\" -> Some EqualOp\n| \"EmptyKeyword\" -> Some UnitToken\n| \"InputKeyword\" -> Some InKeyword\n| \"OutputKeyword\" -> Some ReturnKeyword\n| _ -> None",
        "lines": [
          "| \"ReturnWhenKeyword\" -> Some ThenKeyword",
          "| \"ElseReturnKeyword\" -> Some ElseKeyword",
          "| \"IsKeyword\" -> Some EqualOp",
          "| \"EqualToKeyword\" -> Some EqualOp",
          "| \"EmptyKeyword\" -> Some UnitToken",
          "| \"InputKeyword\" -> Some InKeyword",
          "| \"OutputKeyword\" -> Some ReturnKeyword",
          "| _ -> None"
        ],
        "start_line": 274,
        "end_line": 281,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      },
      {
        "hash": "c685a28506c67ab2e8d6ba6a4d1b5b19",
        "text": "| \"ReturnWhenKeyword\" -> Some ThenKeyword\n| \"ElseReturnKeyword\" -> Some ElseKeyword\n| \"IsKeyword\" -> Some EqualOp\n| \"EqualToKeyword\" -> Some EqualOp\n| \"EmptyKeyword\" -> Some UnitToken\n| \"InputKeyword\" -> Some InKeyword\n| \"OutputKeyword\" -> Some ReturnKeyword\n| _ -> None",
        "lines": [
          "| \"ReturnWhenKeyword\" -> Some ThenKeyword",
          "| \"ElseReturnKeyword\" -> Some ElseKeyword",
          "| \"IsKeyword\" -> Some EqualOp",
          "| \"EqualToKeyword\" -> Some EqualOp",
          "| \"EmptyKeyword\" -> Some UnitToken",
          "| \"InputKeyword\" -> Some InKeyword",
          "| \"OutputKeyword\" -> Some ReturnKeyword",
          "| _ -> None"
        ],
        "start_line": 66,
        "end_line": 73,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_keywords.ml"
      }
    ],
    "708b5b31521e04da9d1f7d6e2f094435": [
      {
        "hash": "708b5b31521e04da9d1f7d6e2f094435",
        "text": "| \"ElseReturnKeyword\" -> Some ElseKeyword\n| \"IsKeyword\" -> Some EqualOp\n| \"EqualToKeyword\" -> Some EqualOp\n| \"EmptyKeyword\" -> Some UnitToken\n| \"InputKeyword\" -> Some InKeyword\n| \"OutputKeyword\" -> Some ReturnKeyword\n| _ -> None",
        "lines": [
          "| \"ElseReturnKeyword\" -> Some ElseKeyword",
          "| \"IsKeyword\" -> Some EqualOp",
          "| \"EqualToKeyword\" -> Some EqualOp",
          "| \"EmptyKeyword\" -> Some UnitToken",
          "| \"InputKeyword\" -> Some InKeyword",
          "| \"OutputKeyword\" -> Some ReturnKeyword",
          "| _ -> None"
        ],
        "start_line": 275,
        "end_line": 281,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      },
      {
        "hash": "708b5b31521e04da9d1f7d6e2f094435",
        "text": "| \"ElseReturnKeyword\" -> Some ElseKeyword\n| \"IsKeyword\" -> Some EqualOp\n| \"EqualToKeyword\" -> Some EqualOp\n| \"EmptyKeyword\" -> Some UnitToken\n| \"InputKeyword\" -> Some InKeyword\n| \"OutputKeyword\" -> Some ReturnKeyword\n| _ -> None",
        "lines": [
          "| \"ElseReturnKeyword\" -> Some ElseKeyword",
          "| \"IsKeyword\" -> Some EqualOp",
          "| \"EqualToKeyword\" -> Some EqualOp",
          "| \"EmptyKeyword\" -> Some UnitToken",
          "| \"InputKeyword\" -> Some InKeyword",
          "| \"OutputKeyword\" -> Some ReturnKeyword",
          "| _ -> None"
        ],
        "start_line": 67,
        "end_line": 73,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_keywords.ml"
      }
    ],
    "519a5f494804d709defc67d2cd4343fd": [
      {
        "hash": "519a5f494804d709defc67d2cd4343fd",
        "text": "| \"IsKeyword\" -> Some EqualOp\n| \"EqualToKeyword\" -> Some EqualOp\n| \"EmptyKeyword\" -> Some UnitToken\n| \"InputKeyword\" -> Some InKeyword\n| \"OutputKeyword\" -> Some ReturnKeyword\n| _ -> None",
        "lines": [
          "| \"IsKeyword\" -> Some EqualOp",
          "| \"EqualToKeyword\" -> Some EqualOp",
          "| \"EmptyKeyword\" -> Some UnitToken",
          "| \"InputKeyword\" -> Some InKeyword",
          "| \"OutputKeyword\" -> Some ReturnKeyword",
          "| _ -> None"
        ],
        "start_line": 276,
        "end_line": 281,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      },
      {
        "hash": "519a5f494804d709defc67d2cd4343fd",
        "text": "| \"IsKeyword\" -> Some EqualOp\n| \"EqualToKeyword\" -> Some EqualOp\n| \"EmptyKeyword\" -> Some UnitToken\n| \"InputKeyword\" -> Some InKeyword\n| \"OutputKeyword\" -> Some ReturnKeyword\n| _ -> None",
        "lines": [
          "| \"IsKeyword\" -> Some EqualOp",
          "| \"EqualToKeyword\" -> Some EqualOp",
          "| \"EmptyKeyword\" -> Some UnitToken",
          "| \"InputKeyword\" -> Some InKeyword",
          "| \"OutputKeyword\" -> Some ReturnKeyword",
          "| _ -> None"
        ],
        "start_line": 68,
        "end_line": 73,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_keywords.ml"
      }
    ],
    "615d9d340eba6defdd317df0a3d44152": [
      {
        "hash": "615d9d340eba6defdd317df0a3d44152",
        "text": "| \"EqualToKeyword\" -> Some EqualOp\n| \"EmptyKeyword\" -> Some UnitToken\n| \"InputKeyword\" -> Some InKeyword\n| \"OutputKeyword\" -> Some ReturnKeyword\n| _ -> None",
        "lines": [
          "| \"EqualToKeyword\" -> Some EqualOp",
          "| \"EmptyKeyword\" -> Some UnitToken",
          "| \"InputKeyword\" -> Some InKeyword",
          "| \"OutputKeyword\" -> Some ReturnKeyword",
          "| _ -> None"
        ],
        "start_line": 277,
        "end_line": 281,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      },
      {
        "hash": "615d9d340eba6defdd317df0a3d44152",
        "text": "| \"EqualToKeyword\" -> Some EqualOp\n| \"EmptyKeyword\" -> Some UnitToken\n| \"InputKeyword\" -> Some InKeyword\n| \"OutputKeyword\" -> Some ReturnKeyword\n| _ -> None",
        "lines": [
          "| \"EqualToKeyword\" -> Some EqualOp",
          "| \"EmptyKeyword\" -> Some UnitToken",
          "| \"InputKeyword\" -> Some InKeyword",
          "| \"OutputKeyword\" -> Some ReturnKeyword",
          "| _ -> None"
        ],
        "start_line": 69,
        "end_line": 73,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_keywords.ml"
      }
    ],
    "ad7a2e743012263921eb71ce294f520e": [
      {
        "hash": "ad7a2e743012263921eb71ce294f520e",
        "text": "| \"EmptyKeyword\" -> Some UnitToken\n| \"InputKeyword\" -> Some InKeyword\n| \"OutputKeyword\" -> Some ReturnKeyword\n| _ -> None",
        "lines": [
          "| \"EmptyKeyword\" -> Some UnitToken",
          "| \"InputKeyword\" -> Some InKeyword",
          "| \"OutputKeyword\" -> Some ReturnKeyword",
          "| _ -> None"
        ],
        "start_line": 278,
        "end_line": 281,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      },
      {
        "hash": "ad7a2e743012263921eb71ce294f520e",
        "text": "| \"EmptyKeyword\" -> Some UnitToken\n| \"InputKeyword\" -> Some InKeyword\n| \"OutputKeyword\" -> Some ReturnKeyword\n| _ -> None",
        "lines": [
          "| \"EmptyKeyword\" -> Some UnitToken",
          "| \"InputKeyword\" -> Some InKeyword",
          "| \"OutputKeyword\" -> Some ReturnKeyword",
          "| _ -> None"
        ],
        "start_line": 70,
        "end_line": 73,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_keywords.ml"
      }
    ],
    "bd738ddb8ed0b3d449ad26576e913452": [
      {
        "hash": "bd738ddb8ed0b3d449ad26576e913452",
        "text": "| \"InputKeyword\" -> Some InKeyword\n| \"OutputKeyword\" -> Some ReturnKeyword\n| _ -> None",
        "lines": [
          "| \"InputKeyword\" -> Some InKeyword",
          "| \"OutputKeyword\" -> Some ReturnKeyword",
          "| _ -> None"
        ],
        "start_line": 279,
        "end_line": 281,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      },
      {
        "hash": "bd738ddb8ed0b3d449ad26576e913452",
        "text": "| \"InputKeyword\" -> Some InKeyword\n| \"OutputKeyword\" -> Some ReturnKeyword\n| _ -> None",
        "lines": [
          "| \"InputKeyword\" -> Some InKeyword",
          "| \"OutputKeyword\" -> Some ReturnKeyword",
          "| _ -> None"
        ],
        "start_line": 71,
        "end_line": 73,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_keywords.ml"
      }
    ],
    "72af5326a583f98c094117fcc19764b3": [
      {
        "hash": "72af5326a583f98c094117fcc19764b3",
        "text": "let map_type_keywords = function\n| \"IntTypeKeyword\" -> Some IntTypeKeyword\n| \"FloatTypeKeyword\" -> Some FloatTypeKeyword\n| \"StringTypeKeyword\" -> Some StringTypeKeyword\n| \"BoolTypeKeyword\" -> Some BoolTypeKeyword\n| \"UnitTypeKeyword\" -> Some UnitTypeKeyword\n| \"ListTypeKeyword\" -> Some ListTypeKeyword\n| \"ArrayTypeKeyword\" -> Some ArrayTypeKeyword\n| _ -> None",
        "lines": [
          "let map_type_keywords = function",
          "| \"IntTypeKeyword\" -> Some IntTypeKeyword",
          "| \"FloatTypeKeyword\" -> Some FloatTypeKeyword",
          "| \"StringTypeKeyword\" -> Some StringTypeKeyword",
          "| \"BoolTypeKeyword\" -> Some BoolTypeKeyword",
          "| \"UnitTypeKeyword\" -> Some UnitTypeKeyword",
          "| \"ListTypeKeyword\" -> Some ListTypeKeyword",
          "| \"ArrayTypeKeyword\" -> Some ArrayTypeKeyword",
          "| _ -> None"
        ],
        "start_line": 284,
        "end_line": 292,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      },
      {
        "hash": "72af5326a583f98c094117fcc19764b3",
        "text": "let map_type_keywords = function\n| \"IntTypeKeyword\" -> Some IntTypeKeyword\n| \"FloatTypeKeyword\" -> Some FloatTypeKeyword\n| \"StringTypeKeyword\" -> Some StringTypeKeyword\n| \"BoolTypeKeyword\" -> Some BoolTypeKeyword\n| \"UnitTypeKeyword\" -> Some UnitTypeKeyword\n| \"ListTypeKeyword\" -> Some ListTypeKeyword\n| \"ArrayTypeKeyword\" -> Some ArrayTypeKeyword\n| _ -> None",
        "lines": [
          "let map_type_keywords = function",
          "| \"IntTypeKeyword\" -> Some IntTypeKeyword",
          "| \"FloatTypeKeyword\" -> Some FloatTypeKeyword",
          "| \"StringTypeKeyword\" -> Some StringTypeKeyword",
          "| \"BoolTypeKeyword\" -> Some BoolTypeKeyword",
          "| \"UnitTypeKeyword\" -> Some UnitTypeKeyword",
          "| \"ListTypeKeyword\" -> Some ListTypeKeyword",
          "| \"ArrayTypeKeyword\" -> Some ArrayTypeKeyword",
          "| _ -> None"
        ],
        "start_line": 76,
        "end_line": 84,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_keywords.ml"
      }
    ],
    "c60822659264f7fd898ee1d5fcad5b85": [
      {
        "hash": "c60822659264f7fd898ee1d5fcad5b85",
        "text": "| \"IntTypeKeyword\" -> Some IntTypeKeyword\n| \"FloatTypeKeyword\" -> Some FloatTypeKeyword\n| \"StringTypeKeyword\" -> Some StringTypeKeyword\n| \"BoolTypeKeyword\" -> Some BoolTypeKeyword\n| \"UnitTypeKeyword\" -> Some UnitTypeKeyword\n| \"ListTypeKeyword\" -> Some ListTypeKeyword\n| \"ArrayTypeKeyword\" -> Some ArrayTypeKeyword\n| _ -> None",
        "lines": [
          "| \"IntTypeKeyword\" -> Some IntTypeKeyword",
          "| \"FloatTypeKeyword\" -> Some FloatTypeKeyword",
          "| \"StringTypeKeyword\" -> Some StringTypeKeyword",
          "| \"BoolTypeKeyword\" -> Some BoolTypeKeyword",
          "| \"UnitTypeKeyword\" -> Some UnitTypeKeyword",
          "| \"ListTypeKeyword\" -> Some ListTypeKeyword",
          "| \"ArrayTypeKeyword\" -> Some ArrayTypeKeyword",
          "| _ -> None"
        ],
        "start_line": 285,
        "end_line": 292,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      },
      {
        "hash": "c60822659264f7fd898ee1d5fcad5b85",
        "text": "| \"IntTypeKeyword\" -> Some IntTypeKeyword\n| \"FloatTypeKeyword\" -> Some FloatTypeKeyword\n| \"StringTypeKeyword\" -> Some StringTypeKeyword\n| \"BoolTypeKeyword\" -> Some BoolTypeKeyword\n| \"UnitTypeKeyword\" -> Some UnitTypeKeyword\n| \"ListTypeKeyword\" -> Some ListTypeKeyword\n| \"ArrayTypeKeyword\" -> Some ArrayTypeKeyword\n| _ -> None",
        "lines": [
          "| \"IntTypeKeyword\" -> Some IntTypeKeyword",
          "| \"FloatTypeKeyword\" -> Some FloatTypeKeyword",
          "| \"StringTypeKeyword\" -> Some StringTypeKeyword",
          "| \"BoolTypeKeyword\" -> Some BoolTypeKeyword",
          "| \"UnitTypeKeyword\" -> Some UnitTypeKeyword",
          "| \"ListTypeKeyword\" -> Some ListTypeKeyword",
          "| \"ArrayTypeKeyword\" -> Some ArrayTypeKeyword",
          "| _ -> None"
        ],
        "start_line": 77,
        "end_line": 84,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_keywords.ml"
      },
      {
        "hash": "c60822659264f7fd898ee1d5fcad5b85",
        "text": "| \"IntTypeKeyword\" -> Some IntTypeKeyword\n| \"FloatTypeKeyword\" -> Some FloatTypeKeyword\n| \"StringTypeKeyword\" -> Some StringTypeKeyword\n| \"BoolTypeKeyword\" -> Some BoolTypeKeyword\n| \"UnitTypeKeyword\" -> Some UnitTypeKeyword\n| \"ListTypeKeyword\" -> Some ListTypeKeyword\n| \"ArrayTypeKeyword\" -> Some ArrayTypeKeyword\n| _ -> None",
        "lines": [
          "| \"IntTypeKeyword\" -> Some IntTypeKeyword",
          "| \"FloatTypeKeyword\" -> Some FloatTypeKeyword",
          "| \"StringTypeKeyword\" -> Some StringTypeKeyword",
          "| \"BoolTypeKeyword\" -> Some BoolTypeKeyword",
          "| \"UnitTypeKeyword\" -> Some UnitTypeKeyword",
          "| \"ListTypeKeyword\" -> Some ListTypeKeyword",
          "| \"ArrayTypeKeyword\" -> Some ArrayTypeKeyword",
          "| _ -> None"
        ],
        "start_line": 192,
        "end_line": 199,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/unified_token_mapper.ml"
      }
    ],
    "7507caffe65e6fa4cb2b64d508db3784": [
      {
        "hash": "7507caffe65e6fa4cb2b64d508db3784",
        "text": "| \"FloatTypeKeyword\" -> Some FloatTypeKeyword\n| \"StringTypeKeyword\" -> Some StringTypeKeyword\n| \"BoolTypeKeyword\" -> Some BoolTypeKeyword\n| \"UnitTypeKeyword\" -> Some UnitTypeKeyword\n| \"ListTypeKeyword\" -> Some ListTypeKeyword\n| \"ArrayTypeKeyword\" -> Some ArrayTypeKeyword\n| _ -> None",
        "lines": [
          "| \"FloatTypeKeyword\" -> Some FloatTypeKeyword",
          "| \"StringTypeKeyword\" -> Some StringTypeKeyword",
          "| \"BoolTypeKeyword\" -> Some BoolTypeKeyword",
          "| \"UnitTypeKeyword\" -> Some UnitTypeKeyword",
          "| \"ListTypeKeyword\" -> Some ListTypeKeyword",
          "| \"ArrayTypeKeyword\" -> Some ArrayTypeKeyword",
          "| _ -> None"
        ],
        "start_line": 286,
        "end_line": 292,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      },
      {
        "hash": "7507caffe65e6fa4cb2b64d508db3784",
        "text": "| \"FloatTypeKeyword\" -> Some FloatTypeKeyword\n| \"StringTypeKeyword\" -> Some StringTypeKeyword\n| \"BoolTypeKeyword\" -> Some BoolTypeKeyword\n| \"UnitTypeKeyword\" -> Some UnitTypeKeyword\n| \"ListTypeKeyword\" -> Some ListTypeKeyword\n| \"ArrayTypeKeyword\" -> Some ArrayTypeKeyword\n| _ -> None",
        "lines": [
          "| \"FloatTypeKeyword\" -> Some FloatTypeKeyword",
          "| \"StringTypeKeyword\" -> Some StringTypeKeyword",
          "| \"BoolTypeKeyword\" -> Some BoolTypeKeyword",
          "| \"UnitTypeKeyword\" -> Some UnitTypeKeyword",
          "| \"ListTypeKeyword\" -> Some ListTypeKeyword",
          "| \"ArrayTypeKeyword\" -> Some ArrayTypeKeyword",
          "| _ -> None"
        ],
        "start_line": 78,
        "end_line": 84,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_keywords.ml"
      },
      {
        "hash": "7507caffe65e6fa4cb2b64d508db3784",
        "text": "| \"FloatTypeKeyword\" -> Some FloatTypeKeyword\n| \"StringTypeKeyword\" -> Some StringTypeKeyword\n| \"BoolTypeKeyword\" -> Some BoolTypeKeyword\n| \"UnitTypeKeyword\" -> Some UnitTypeKeyword\n| \"ListTypeKeyword\" -> Some ListTypeKeyword\n| \"ArrayTypeKeyword\" -> Some ArrayTypeKeyword\n| _ -> None",
        "lines": [
          "| \"FloatTypeKeyword\" -> Some FloatTypeKeyword",
          "| \"StringTypeKeyword\" -> Some StringTypeKeyword",
          "| \"BoolTypeKeyword\" -> Some BoolTypeKeyword",
          "| \"UnitTypeKeyword\" -> Some UnitTypeKeyword",
          "| \"ListTypeKeyword\" -> Some ListTypeKeyword",
          "| \"ArrayTypeKeyword\" -> Some ArrayTypeKeyword",
          "| _ -> None"
        ],
        "start_line": 193,
        "end_line": 199,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/unified_token_mapper.ml"
      }
    ],
    "5ef6b9cb46d9b6d17a947f4dc2a01efd": [
      {
        "hash": "5ef6b9cb46d9b6d17a947f4dc2a01efd",
        "text": "| \"StringTypeKeyword\" -> Some StringTypeKeyword\n| \"BoolTypeKeyword\" -> Some BoolTypeKeyword\n| \"UnitTypeKeyword\" -> Some UnitTypeKeyword\n| \"ListTypeKeyword\" -> Some ListTypeKeyword\n| \"ArrayTypeKeyword\" -> Some ArrayTypeKeyword\n| _ -> None",
        "lines": [
          "| \"StringTypeKeyword\" -> Some StringTypeKeyword",
          "| \"BoolTypeKeyword\" -> Some BoolTypeKeyword",
          "| \"UnitTypeKeyword\" -> Some UnitTypeKeyword",
          "| \"ListTypeKeyword\" -> Some ListTypeKeyword",
          "| \"ArrayTypeKeyword\" -> Some ArrayTypeKeyword",
          "| _ -> None"
        ],
        "start_line": 287,
        "end_line": 292,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      },
      {
        "hash": "5ef6b9cb46d9b6d17a947f4dc2a01efd",
        "text": "| \"StringTypeKeyword\" -> Some StringTypeKeyword\n| \"BoolTypeKeyword\" -> Some BoolTypeKeyword\n| \"UnitTypeKeyword\" -> Some UnitTypeKeyword\n| \"ListTypeKeyword\" -> Some ListTypeKeyword\n| \"ArrayTypeKeyword\" -> Some ArrayTypeKeyword\n| _ -> None",
        "lines": [
          "| \"StringTypeKeyword\" -> Some StringTypeKeyword",
          "| \"BoolTypeKeyword\" -> Some BoolTypeKeyword",
          "| \"UnitTypeKeyword\" -> Some UnitTypeKeyword",
          "| \"ListTypeKeyword\" -> Some ListTypeKeyword",
          "| \"ArrayTypeKeyword\" -> Some ArrayTypeKeyword",
          "| _ -> None"
        ],
        "start_line": 79,
        "end_line": 84,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_keywords.ml"
      },
      {
        "hash": "5ef6b9cb46d9b6d17a947f4dc2a01efd",
        "text": "| \"StringTypeKeyword\" -> Some StringTypeKeyword\n| \"BoolTypeKeyword\" -> Some BoolTypeKeyword\n| \"UnitTypeKeyword\" -> Some UnitTypeKeyword\n| \"ListTypeKeyword\" -> Some ListTypeKeyword\n| \"ArrayTypeKeyword\" -> Some ArrayTypeKeyword\n| _ -> None",
        "lines": [
          "| \"StringTypeKeyword\" -> Some StringTypeKeyword",
          "| \"BoolTypeKeyword\" -> Some BoolTypeKeyword",
          "| \"UnitTypeKeyword\" -> Some UnitTypeKeyword",
          "| \"ListTypeKeyword\" -> Some ListTypeKeyword",
          "| \"ArrayTypeKeyword\" -> Some ArrayTypeKeyword",
          "| _ -> None"
        ],
        "start_line": 194,
        "end_line": 199,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/unified_token_mapper.ml"
      }
    ],
    "28123e1ed564c26f401c351e89721628": [
      {
        "hash": "28123e1ed564c26f401c351e89721628",
        "text": "| \"BoolTypeKeyword\" -> Some BoolTypeKeyword\n| \"UnitTypeKeyword\" -> Some UnitTypeKeyword\n| \"ListTypeKeyword\" -> Some ListTypeKeyword\n| \"ArrayTypeKeyword\" -> Some ArrayTypeKeyword\n| _ -> None",
        "lines": [
          "| \"BoolTypeKeyword\" -> Some BoolTypeKeyword",
          "| \"UnitTypeKeyword\" -> Some UnitTypeKeyword",
          "| \"ListTypeKeyword\" -> Some ListTypeKeyword",
          "| \"ArrayTypeKeyword\" -> Some ArrayTypeKeyword",
          "| _ -> None"
        ],
        "start_line": 288,
        "end_line": 292,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      },
      {
        "hash": "28123e1ed564c26f401c351e89721628",
        "text": "| \"BoolTypeKeyword\" -> Some BoolTypeKeyword\n| \"UnitTypeKeyword\" -> Some UnitTypeKeyword\n| \"ListTypeKeyword\" -> Some ListTypeKeyword\n| \"ArrayTypeKeyword\" -> Some ArrayTypeKeyword\n| _ -> None",
        "lines": [
          "| \"BoolTypeKeyword\" -> Some BoolTypeKeyword",
          "| \"UnitTypeKeyword\" -> Some UnitTypeKeyword",
          "| \"ListTypeKeyword\" -> Some ListTypeKeyword",
          "| \"ArrayTypeKeyword\" -> Some ArrayTypeKeyword",
          "| _ -> None"
        ],
        "start_line": 80,
        "end_line": 84,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_keywords.ml"
      },
      {
        "hash": "28123e1ed564c26f401c351e89721628",
        "text": "| \"BoolTypeKeyword\" -> Some BoolTypeKeyword\n| \"UnitTypeKeyword\" -> Some UnitTypeKeyword\n| \"ListTypeKeyword\" -> Some ListTypeKeyword\n| \"ArrayTypeKeyword\" -> Some ArrayTypeKeyword\n| _ -> None",
        "lines": [
          "| \"BoolTypeKeyword\" -> Some BoolTypeKeyword",
          "| \"UnitTypeKeyword\" -> Some UnitTypeKeyword",
          "| \"ListTypeKeyword\" -> Some ListTypeKeyword",
          "| \"ArrayTypeKeyword\" -> Some ArrayTypeKeyword",
          "| _ -> None"
        ],
        "start_line": 195,
        "end_line": 199,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/unified_token_mapper.ml"
      }
    ],
    "7369c205ea16dd5fa4322b720bce5e8e": [
      {
        "hash": "7369c205ea16dd5fa4322b720bce5e8e",
        "text": "| \"UnitTypeKeyword\" -> Some UnitTypeKeyword\n| \"ListTypeKeyword\" -> Some ListTypeKeyword\n| \"ArrayTypeKeyword\" -> Some ArrayTypeKeyword\n| _ -> None",
        "lines": [
          "| \"UnitTypeKeyword\" -> Some UnitTypeKeyword",
          "| \"ListTypeKeyword\" -> Some ListTypeKeyword",
          "| \"ArrayTypeKeyword\" -> Some ArrayTypeKeyword",
          "| _ -> None"
        ],
        "start_line": 289,
        "end_line": 292,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      },
      {
        "hash": "7369c205ea16dd5fa4322b720bce5e8e",
        "text": "| \"UnitTypeKeyword\" -> Some UnitTypeKeyword\n| \"ListTypeKeyword\" -> Some ListTypeKeyword\n| \"ArrayTypeKeyword\" -> Some ArrayTypeKeyword\n| _ -> None",
        "lines": [
          "| \"UnitTypeKeyword\" -> Some UnitTypeKeyword",
          "| \"ListTypeKeyword\" -> Some ListTypeKeyword",
          "| \"ArrayTypeKeyword\" -> Some ArrayTypeKeyword",
          "| _ -> None"
        ],
        "start_line": 81,
        "end_line": 84,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_keywords.ml"
      },
      {
        "hash": "7369c205ea16dd5fa4322b720bce5e8e",
        "text": "| \"UnitTypeKeyword\" -> Some UnitTypeKeyword\n| \"ListTypeKeyword\" -> Some ListTypeKeyword\n| \"ArrayTypeKeyword\" -> Some ArrayTypeKeyword\n| _ -> None",
        "lines": [
          "| \"UnitTypeKeyword\" -> Some UnitTypeKeyword",
          "| \"ListTypeKeyword\" -> Some ListTypeKeyword",
          "| \"ArrayTypeKeyword\" -> Some ArrayTypeKeyword",
          "| _ -> None"
        ],
        "start_line": 196,
        "end_line": 199,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/unified_token_mapper.ml"
      }
    ],
    "7e189e284b8abbaa8d07810526ea6530": [
      {
        "hash": "7e189e284b8abbaa8d07810526ea6530",
        "text": "| \"ListTypeKeyword\" -> Some ListTypeKeyword\n| \"ArrayTypeKeyword\" -> Some ArrayTypeKeyword\n| _ -> None",
        "lines": [
          "| \"ListTypeKeyword\" -> Some ListTypeKeyword",
          "| \"ArrayTypeKeyword\" -> Some ArrayTypeKeyword",
          "| _ -> None"
        ],
        "start_line": 290,
        "end_line": 292,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      },
      {
        "hash": "7e189e284b8abbaa8d07810526ea6530",
        "text": "| \"ListTypeKeyword\" -> Some ListTypeKeyword\n| \"ArrayTypeKeyword\" -> Some ArrayTypeKeyword\n| _ -> None",
        "lines": [
          "| \"ListTypeKeyword\" -> Some ListTypeKeyword",
          "| \"ArrayTypeKeyword\" -> Some ArrayTypeKeyword",
          "| _ -> None"
        ],
        "start_line": 82,
        "end_line": 84,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_keywords.ml"
      },
      {
        "hash": "7e189e284b8abbaa8d07810526ea6530",
        "text": "| \"ListTypeKeyword\" -> Some ListTypeKeyword\n| \"ArrayTypeKeyword\" -> Some ArrayTypeKeyword\n| _ -> None",
        "lines": [
          "| \"ListTypeKeyword\" -> Some ListTypeKeyword",
          "| \"ArrayTypeKeyword\" -> Some ArrayTypeKeyword",
          "| _ -> None"
        ],
        "start_line": 197,
        "end_line": 199,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/unified_token_mapper.ml"
      }
    ],
    "e22bce1feb10bc66da717f271d7ea67a": [
      {
        "hash": "e22bce1feb10bc66da717f271d7ea67a",
        "text": "let map_poetry_keywords = function\n| \"RhymeKeyword\" -> None\n| \"ToneKeyword\" -> None\n| \"MeterKeyword\" -> None\n| \"ArtisticKeyword\" -> None\n| \"StyleKeyword\" -> None\n| \"FormKeyword\" -> None\n| \"PoetryKeyword\" -> None\n| _ -> None",
        "lines": [
          "let map_poetry_keywords = function",
          "| \"RhymeKeyword\" -> None",
          "| \"ToneKeyword\" -> None",
          "| \"MeterKeyword\" -> None",
          "| \"ArtisticKeyword\" -> None",
          "| \"StyleKeyword\" -> None",
          "| \"FormKeyword\" -> None",
          "| \"PoetryKeyword\" -> None",
          "| _ -> None"
        ],
        "start_line": 295,
        "end_line": 303,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      },
      {
        "hash": "e22bce1feb10bc66da717f271d7ea67a",
        "text": "let map_poetry_keywords = function\n| \"RhymeKeyword\" -> None\n| \"ToneKeyword\" -> None\n| \"MeterKeyword\" -> None\n| \"ArtisticKeyword\" -> None\n| \"StyleKeyword\" -> None\n| \"FormKeyword\" -> None\n| \"PoetryKeyword\" -> None\n| _ -> None",
        "lines": [
          "let map_poetry_keywords = function",
          "| \"RhymeKeyword\" -> None",
          "| \"ToneKeyword\" -> None",
          "| \"MeterKeyword\" -> None",
          "| \"ArtisticKeyword\" -> None",
          "| \"StyleKeyword\" -> None",
          "| \"FormKeyword\" -> None",
          "| \"PoetryKeyword\" -> None",
          "| _ -> None"
        ],
        "start_line": 87,
        "end_line": 95,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_keywords.ml"
      }
    ],
    "d83a48847533f9b7c285aae291885d7a": [
      {
        "hash": "d83a48847533f9b7c285aae291885d7a",
        "text": "| \"RhymeKeyword\" -> None\n| \"ToneKeyword\" -> None\n| \"MeterKeyword\" -> None\n| \"ArtisticKeyword\" -> None\n| \"StyleKeyword\" -> None\n| \"FormKeyword\" -> None\n| \"PoetryKeyword\" -> None\n| _ -> None",
        "lines": [
          "| \"RhymeKeyword\" -> None",
          "| \"ToneKeyword\" -> None",
          "| \"MeterKeyword\" -> None",
          "| \"ArtisticKeyword\" -> None",
          "| \"StyleKeyword\" -> None",
          "| \"FormKeyword\" -> None",
          "| \"PoetryKeyword\" -> None",
          "| _ -> None"
        ],
        "start_line": 296,
        "end_line": 303,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      },
      {
        "hash": "d83a48847533f9b7c285aae291885d7a",
        "text": "| \"RhymeKeyword\" -> None\n| \"ToneKeyword\" -> None\n| \"MeterKeyword\" -> None\n| \"ArtisticKeyword\" -> None\n| \"StyleKeyword\" -> None\n| \"FormKeyword\" -> None\n| \"PoetryKeyword\" -> None\n| _ -> None",
        "lines": [
          "| \"RhymeKeyword\" -> None",
          "| \"ToneKeyword\" -> None",
          "| \"MeterKeyword\" -> None",
          "| \"ArtisticKeyword\" -> None",
          "| \"StyleKeyword\" -> None",
          "| \"FormKeyword\" -> None",
          "| \"PoetryKeyword\" -> None",
          "| _ -> None"
        ],
        "start_line": 88,
        "end_line": 95,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_keywords.ml"
      }
    ],
    "298a46ad7a21866d60d159588d9cb122": [
      {
        "hash": "298a46ad7a21866d60d159588d9cb122",
        "text": "| \"ToneKeyword\" -> None\n| \"MeterKeyword\" -> None\n| \"ArtisticKeyword\" -> None\n| \"StyleKeyword\" -> None\n| \"FormKeyword\" -> None\n| \"PoetryKeyword\" -> None\n| _ -> None",
        "lines": [
          "| \"ToneKeyword\" -> None",
          "| \"MeterKeyword\" -> None",
          "| \"ArtisticKeyword\" -> None",
          "| \"StyleKeyword\" -> None",
          "| \"FormKeyword\" -> None",
          "| \"PoetryKeyword\" -> None",
          "| _ -> None"
        ],
        "start_line": 297,
        "end_line": 303,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      },
      {
        "hash": "298a46ad7a21866d60d159588d9cb122",
        "text": "| \"ToneKeyword\" -> None\n| \"MeterKeyword\" -> None\n| \"ArtisticKeyword\" -> None\n| \"StyleKeyword\" -> None\n| \"FormKeyword\" -> None\n| \"PoetryKeyword\" -> None\n| _ -> None",
        "lines": [
          "| \"ToneKeyword\" -> None",
          "| \"MeterKeyword\" -> None",
          "| \"ArtisticKeyword\" -> None",
          "| \"StyleKeyword\" -> None",
          "| \"FormKeyword\" -> None",
          "| \"PoetryKeyword\" -> None",
          "| _ -> None"
        ],
        "start_line": 89,
        "end_line": 95,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_keywords.ml"
      }
    ],
    "e7672d65d4e73509508e0ec49c2376b0": [
      {
        "hash": "e7672d65d4e73509508e0ec49c2376b0",
        "text": "| \"MeterKeyword\" -> None\n| \"ArtisticKeyword\" -> None\n| \"StyleKeyword\" -> None\n| \"FormKeyword\" -> None\n| \"PoetryKeyword\" -> None\n| _ -> None",
        "lines": [
          "| \"MeterKeyword\" -> None",
          "| \"ArtisticKeyword\" -> None",
          "| \"StyleKeyword\" -> None",
          "| \"FormKeyword\" -> None",
          "| \"PoetryKeyword\" -> None",
          "| _ -> None"
        ],
        "start_line": 298,
        "end_line": 303,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      },
      {
        "hash": "e7672d65d4e73509508e0ec49c2376b0",
        "text": "| \"MeterKeyword\" -> None\n| \"ArtisticKeyword\" -> None\n| \"StyleKeyword\" -> None\n| \"FormKeyword\" -> None\n| \"PoetryKeyword\" -> None\n| _ -> None",
        "lines": [
          "| \"MeterKeyword\" -> None",
          "| \"ArtisticKeyword\" -> None",
          "| \"StyleKeyword\" -> None",
          "| \"FormKeyword\" -> None",
          "| \"PoetryKeyword\" -> None",
          "| _ -> None"
        ],
        "start_line": 90,
        "end_line": 95,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_keywords.ml"
      }
    ],
    "13864981ce41a76e00649c061e70c75c": [
      {
        "hash": "13864981ce41a76e00649c061e70c75c",
        "text": "| \"ArtisticKeyword\" -> None\n| \"StyleKeyword\" -> None\n| \"FormKeyword\" -> None\n| \"PoetryKeyword\" -> None\n| _ -> None",
        "lines": [
          "| \"ArtisticKeyword\" -> None",
          "| \"StyleKeyword\" -> None",
          "| \"FormKeyword\" -> None",
          "| \"PoetryKeyword\" -> None",
          "| _ -> None"
        ],
        "start_line": 299,
        "end_line": 303,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      },
      {
        "hash": "13864981ce41a76e00649c061e70c75c",
        "text": "| \"ArtisticKeyword\" -> None\n| \"StyleKeyword\" -> None\n| \"FormKeyword\" -> None\n| \"PoetryKeyword\" -> None\n| _ -> None",
        "lines": [
          "| \"ArtisticKeyword\" -> None",
          "| \"StyleKeyword\" -> None",
          "| \"FormKeyword\" -> None",
          "| \"PoetryKeyword\" -> None",
          "| _ -> None"
        ],
        "start_line": 91,
        "end_line": 95,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_keywords.ml"
      }
    ],
    "9936526ab9415b646f19c2e9770ef6e3": [
      {
        "hash": "9936526ab9415b646f19c2e9770ef6e3",
        "text": "| \"StyleKeyword\" -> None\n| \"FormKeyword\" -> None\n| \"PoetryKeyword\" -> None\n| _ -> None",
        "lines": [
          "| \"StyleKeyword\" -> None",
          "| \"FormKeyword\" -> None",
          "| \"PoetryKeyword\" -> None",
          "| _ -> None"
        ],
        "start_line": 300,
        "end_line": 303,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      },
      {
        "hash": "9936526ab9415b646f19c2e9770ef6e3",
        "text": "| \"StyleKeyword\" -> None\n| \"FormKeyword\" -> None\n| \"PoetryKeyword\" -> None\n| _ -> None",
        "lines": [
          "| \"StyleKeyword\" -> None",
          "| \"FormKeyword\" -> None",
          "| \"PoetryKeyword\" -> None",
          "| _ -> None"
        ],
        "start_line": 92,
        "end_line": 95,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_keywords.ml"
      }
    ],
    "8c451ed3c13d6fb67b3ae7c0b8821f56": [
      {
        "hash": "8c451ed3c13d6fb67b3ae7c0b8821f56",
        "text": "| \"FormKeyword\" -> None\n| \"PoetryKeyword\" -> None\n| _ -> None",
        "lines": [
          "| \"FormKeyword\" -> None",
          "| \"PoetryKeyword\" -> None",
          "| _ -> None"
        ],
        "start_line": 301,
        "end_line": 303,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      },
      {
        "hash": "8c451ed3c13d6fb67b3ae7c0b8821f56",
        "text": "| \"FormKeyword\" -> None\n| \"PoetryKeyword\" -> None\n| _ -> None",
        "lines": [
          "| \"FormKeyword\" -> None",
          "| \"PoetryKeyword\" -> None",
          "| _ -> None"
        ],
        "start_line": 93,
        "end_line": 95,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_keywords.ml"
      }
    ],
    "a325d5aaedfef779fbb6916b17331f91": [
      {
        "hash": "a325d5aaedfef779fbb6916b17331f91",
        "text": "let map_misc_keywords = function\n| \"TryKeyword\" -> Some TryKeyword\n| \"CatchKeyword\" -> None\n| \"FinallyKeyword\" -> None\n| \"ThrowKeyword\" -> Some RaiseKeyword\n| \"EndKeyword\" -> Some EndKeyword\n| \"WhileKeyword\" -> Some WhileKeyword\n| \"ForKeyword\" -> Some ForKeyword\n| \"DoKeyword\" -> Some DoKeyword\n| \"BreakKeyword\" -> Some BreakKeyword",
        "lines": [
          "let map_misc_keywords = function",
          "| \"TryKeyword\" -> Some TryKeyword",
          "| \"CatchKeyword\" -> None",
          "| \"FinallyKeyword\" -> None",
          "| \"ThrowKeyword\" -> Some RaiseKeyword",
          "| \"EndKeyword\" -> Some EndKeyword",
          "| \"WhileKeyword\" -> Some WhileKeyword",
          "| \"ForKeyword\" -> Some ForKeyword",
          "| \"DoKeyword\" -> Some DoKeyword",
          "| \"BreakKeyword\" -> Some BreakKeyword"
        ],
        "start_line": 306,
        "end_line": 315,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      },
      {
        "hash": "a325d5aaedfef779fbb6916b17331f91",
        "text": "let map_misc_keywords = function\n| \"TryKeyword\" -> Some TryKeyword\n| \"CatchKeyword\" -> None\n| \"FinallyKeyword\" -> None\n| \"ThrowKeyword\" -> Some RaiseKeyword\n| \"EndKeyword\" -> Some EndKeyword\n| \"WhileKeyword\" -> Some WhileKeyword\n| \"ForKeyword\" -> Some ForKeyword\n| \"DoKeyword\" -> Some DoKeyword\n| \"BreakKeyword\" -> Some BreakKeyword",
        "lines": [
          "let map_misc_keywords = function",
          "| \"TryKeyword\" -> Some TryKeyword",
          "| \"CatchKeyword\" -> None",
          "| \"FinallyKeyword\" -> None",
          "| \"ThrowKeyword\" -> Some RaiseKeyword",
          "| \"EndKeyword\" -> Some EndKeyword",
          "| \"WhileKeyword\" -> Some WhileKeyword",
          "| \"ForKeyword\" -> Some ForKeyword",
          "| \"DoKeyword\" -> Some DoKeyword",
          "| \"BreakKeyword\" -> Some BreakKeyword"
        ],
        "start_line": 98,
        "end_line": 107,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_keywords.ml"
      }
    ],
    "b5d111cd98b66cafc12bde909754e01f": [
      {
        "hash": "b5d111cd98b66cafc12bde909754e01f",
        "text": "| \"TryKeyword\" -> Some TryKeyword\n| \"CatchKeyword\" -> None\n| \"FinallyKeyword\" -> None\n| \"ThrowKeyword\" -> Some RaiseKeyword\n| \"EndKeyword\" -> Some EndKeyword\n| \"WhileKeyword\" -> Some WhileKeyword\n| \"ForKeyword\" -> Some ForKeyword\n| \"DoKeyword\" -> Some DoKeyword\n| \"BreakKeyword\" -> Some BreakKeyword\n| \"ContinueKeyword\" -> Some ContinueKeyword",
        "lines": [
          "| \"TryKeyword\" -> Some TryKeyword",
          "| \"CatchKeyword\" -> None",
          "| \"FinallyKeyword\" -> None",
          "| \"ThrowKeyword\" -> Some RaiseKeyword",
          "| \"EndKeyword\" -> Some EndKeyword",
          "| \"WhileKeyword\" -> Some WhileKeyword",
          "| \"ForKeyword\" -> Some ForKeyword",
          "| \"DoKeyword\" -> Some DoKeyword",
          "| \"BreakKeyword\" -> Some BreakKeyword",
          "| \"ContinueKeyword\" -> Some ContinueKeyword"
        ],
        "start_line": 307,
        "end_line": 316,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      },
      {
        "hash": "b5d111cd98b66cafc12bde909754e01f",
        "text": "| \"TryKeyword\" -> Some TryKeyword\n| \"CatchKeyword\" -> None\n| \"FinallyKeyword\" -> None\n| \"ThrowKeyword\" -> Some RaiseKeyword\n| \"EndKeyword\" -> Some EndKeyword\n| \"WhileKeyword\" -> Some WhileKeyword\n| \"ForKeyword\" -> Some ForKeyword\n| \"DoKeyword\" -> Some DoKeyword\n| \"BreakKeyword\" -> Some BreakKeyword\n| \"ContinueKeyword\" -> Some ContinueKeyword",
        "lines": [
          "| \"TryKeyword\" -> Some TryKeyword",
          "| \"CatchKeyword\" -> None",
          "| \"FinallyKeyword\" -> None",
          "| \"ThrowKeyword\" -> Some RaiseKeyword",
          "| \"EndKeyword\" -> Some EndKeyword",
          "| \"WhileKeyword\" -> Some WhileKeyword",
          "| \"ForKeyword\" -> Some ForKeyword",
          "| \"DoKeyword\" -> Some DoKeyword",
          "| \"BreakKeyword\" -> Some BreakKeyword",
          "| \"ContinueKeyword\" -> Some ContinueKeyword"
        ],
        "start_line": 99,
        "end_line": 108,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_keywords.ml"
      }
    ],
    "aaf947585473db15b8315812122c653c": [
      {
        "hash": "aaf947585473db15b8315812122c653c",
        "text": "| \"CatchKeyword\" -> None\n| \"FinallyKeyword\" -> None\n| \"ThrowKeyword\" -> Some RaiseKeyword\n| \"EndKeyword\" -> Some EndKeyword\n| \"WhileKeyword\" -> Some WhileKeyword\n| \"ForKeyword\" -> Some ForKeyword\n| \"DoKeyword\" -> Some DoKeyword\n| \"BreakKeyword\" -> Some BreakKeyword\n| \"ContinueKeyword\" -> Some ContinueKeyword\n| \"ReturnKeyword\" -> Some ReturnKeyword",
        "lines": [
          "| \"CatchKeyword\" -> None",
          "| \"FinallyKeyword\" -> None",
          "| \"ThrowKeyword\" -> Some RaiseKeyword",
          "| \"EndKeyword\" -> Some EndKeyword",
          "| \"WhileKeyword\" -> Some WhileKeyword",
          "| \"ForKeyword\" -> Some ForKeyword",
          "| \"DoKeyword\" -> Some DoKeyword",
          "| \"BreakKeyword\" -> Some BreakKeyword",
          "| \"ContinueKeyword\" -> Some ContinueKeyword",
          "| \"ReturnKeyword\" -> Some ReturnKeyword"
        ],
        "start_line": 308,
        "end_line": 317,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      },
      {
        "hash": "aaf947585473db15b8315812122c653c",
        "text": "| \"CatchKeyword\" -> None\n| \"FinallyKeyword\" -> None\n| \"ThrowKeyword\" -> Some RaiseKeyword\n| \"EndKeyword\" -> Some EndKeyword\n| \"WhileKeyword\" -> Some WhileKeyword\n| \"ForKeyword\" -> Some ForKeyword\n| \"DoKeyword\" -> Some DoKeyword\n| \"BreakKeyword\" -> Some BreakKeyword\n| \"ContinueKeyword\" -> Some ContinueKeyword\n| \"ReturnKeyword\" -> Some ReturnKeyword",
        "lines": [
          "| \"CatchKeyword\" -> None",
          "| \"FinallyKeyword\" -> None",
          "| \"ThrowKeyword\" -> Some RaiseKeyword",
          "| \"EndKeyword\" -> Some EndKeyword",
          "| \"WhileKeyword\" -> Some WhileKeyword",
          "| \"ForKeyword\" -> Some ForKeyword",
          "| \"DoKeyword\" -> Some DoKeyword",
          "| \"BreakKeyword\" -> Some BreakKeyword",
          "| \"ContinueKeyword\" -> Some ContinueKeyword",
          "| \"ReturnKeyword\" -> Some ReturnKeyword"
        ],
        "start_line": 100,
        "end_line": 109,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_keywords.ml"
      }
    ],
    "7144e721fde5250d068f3dc983c6cfb8": [
      {
        "hash": "7144e721fde5250d068f3dc983c6cfb8",
        "text": "| \"FinallyKeyword\" -> None\n| \"ThrowKeyword\" -> Some RaiseKeyword\n| \"EndKeyword\" -> Some EndKeyword\n| \"WhileKeyword\" -> Some WhileKeyword\n| \"ForKeyword\" -> Some ForKeyword\n| \"DoKeyword\" -> Some DoKeyword\n| \"BreakKeyword\" -> Some BreakKeyword\n| \"ContinueKeyword\" -> Some ContinueKeyword\n| \"ReturnKeyword\" -> Some ReturnKeyword\n| \"ValKeyword\" -> Some ValKeyword",
        "lines": [
          "| \"FinallyKeyword\" -> None",
          "| \"ThrowKeyword\" -> Some RaiseKeyword",
          "| \"EndKeyword\" -> Some EndKeyword",
          "| \"WhileKeyword\" -> Some WhileKeyword",
          "| \"ForKeyword\" -> Some ForKeyword",
          "| \"DoKeyword\" -> Some DoKeyword",
          "| \"BreakKeyword\" -> Some BreakKeyword",
          "| \"ContinueKeyword\" -> Some ContinueKeyword",
          "| \"ReturnKeyword\" -> Some ReturnKeyword",
          "| \"ValKeyword\" -> Some ValKeyword"
        ],
        "start_line": 309,
        "end_line": 318,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      },
      {
        "hash": "7144e721fde5250d068f3dc983c6cfb8",
        "text": "| \"FinallyKeyword\" -> None\n| \"ThrowKeyword\" -> Some RaiseKeyword\n| \"EndKeyword\" -> Some EndKeyword\n| \"WhileKeyword\" -> Some WhileKeyword\n| \"ForKeyword\" -> Some ForKeyword\n| \"DoKeyword\" -> Some DoKeyword\n| \"BreakKeyword\" -> Some BreakKeyword\n| \"ContinueKeyword\" -> Some ContinueKeyword\n| \"ReturnKeyword\" -> Some ReturnKeyword\n| \"ValKeyword\" -> Some ValKeyword",
        "lines": [
          "| \"FinallyKeyword\" -> None",
          "| \"ThrowKeyword\" -> Some RaiseKeyword",
          "| \"EndKeyword\" -> Some EndKeyword",
          "| \"WhileKeyword\" -> Some WhileKeyword",
          "| \"ForKeyword\" -> Some ForKeyword",
          "| \"DoKeyword\" -> Some DoKeyword",
          "| \"BreakKeyword\" -> Some BreakKeyword",
          "| \"ContinueKeyword\" -> Some ContinueKeyword",
          "| \"ReturnKeyword\" -> Some ReturnKeyword",
          "| \"ValKeyword\" -> Some ValKeyword"
        ],
        "start_line": 101,
        "end_line": 110,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_keywords.ml"
      }
    ],
    "247e06ddd7b1c9b5c9b90a10c0d04047": [
      {
        "hash": "247e06ddd7b1c9b5c9b90a10c0d04047",
        "text": "| \"ThrowKeyword\" -> Some RaiseKeyword\n| \"EndKeyword\" -> Some EndKeyword\n| \"WhileKeyword\" -> Some WhileKeyword\n| \"ForKeyword\" -> Some ForKeyword\n| \"DoKeyword\" -> Some DoKeyword\n| \"BreakKeyword\" -> Some BreakKeyword\n| \"ContinueKeyword\" -> Some ContinueKeyword\n| \"ReturnKeyword\" -> Some ReturnKeyword\n| \"ValKeyword\" -> Some ValKeyword\n| \"OneKeyword\" -> Some OneKeyword",
        "lines": [
          "| \"ThrowKeyword\" -> Some RaiseKeyword",
          "| \"EndKeyword\" -> Some EndKeyword",
          "| \"WhileKeyword\" -> Some WhileKeyword",
          "| \"ForKeyword\" -> Some ForKeyword",
          "| \"DoKeyword\" -> Some DoKeyword",
          "| \"BreakKeyword\" -> Some BreakKeyword",
          "| \"ContinueKeyword\" -> Some ContinueKeyword",
          "| \"ReturnKeyword\" -> Some ReturnKeyword",
          "| \"ValKeyword\" -> Some ValKeyword",
          "| \"OneKeyword\" -> Some OneKeyword"
        ],
        "start_line": 310,
        "end_line": 319,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      },
      {
        "hash": "247e06ddd7b1c9b5c9b90a10c0d04047",
        "text": "| \"ThrowKeyword\" -> Some RaiseKeyword\n| \"EndKeyword\" -> Some EndKeyword\n| \"WhileKeyword\" -> Some WhileKeyword\n| \"ForKeyword\" -> Some ForKeyword\n| \"DoKeyword\" -> Some DoKeyword\n| \"BreakKeyword\" -> Some BreakKeyword\n| \"ContinueKeyword\" -> Some ContinueKeyword\n| \"ReturnKeyword\" -> Some ReturnKeyword\n| \"ValKeyword\" -> Some ValKeyword\n| \"OneKeyword\" -> Some OneKeyword",
        "lines": [
          "| \"ThrowKeyword\" -> Some RaiseKeyword",
          "| \"EndKeyword\" -> Some EndKeyword",
          "| \"WhileKeyword\" -> Some WhileKeyword",
          "| \"ForKeyword\" -> Some ForKeyword",
          "| \"DoKeyword\" -> Some DoKeyword",
          "| \"BreakKeyword\" -> Some BreakKeyword",
          "| \"ContinueKeyword\" -> Some ContinueKeyword",
          "| \"ReturnKeyword\" -> Some ReturnKeyword",
          "| \"ValKeyword\" -> Some ValKeyword",
          "| \"OneKeyword\" -> Some OneKeyword"
        ],
        "start_line": 102,
        "end_line": 111,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_keywords.ml"
      }
    ],
    "117c5109ebbfcbed9d3933e4a9e0aef8": [
      {
        "hash": "117c5109ebbfcbed9d3933e4a9e0aef8",
        "text": "| \"EndKeyword\" -> Some EndKeyword\n| \"WhileKeyword\" -> Some WhileKeyword\n| \"ForKeyword\" -> Some ForKeyword\n| \"DoKeyword\" -> Some DoKeyword\n| \"BreakKeyword\" -> Some BreakKeyword\n| \"ContinueKeyword\" -> Some ContinueKeyword\n| \"ReturnKeyword\" -> Some ReturnKeyword\n| \"ValKeyword\" -> Some ValKeyword\n| \"OneKeyword\" -> Some OneKeyword\n| _ -> None",
        "lines": [
          "| \"EndKeyword\" -> Some EndKeyword",
          "| \"WhileKeyword\" -> Some WhileKeyword",
          "| \"ForKeyword\" -> Some ForKeyword",
          "| \"DoKeyword\" -> Some DoKeyword",
          "| \"BreakKeyword\" -> Some BreakKeyword",
          "| \"ContinueKeyword\" -> Some ContinueKeyword",
          "| \"ReturnKeyword\" -> Some ReturnKeyword",
          "| \"ValKeyword\" -> Some ValKeyword",
          "| \"OneKeyword\" -> Some OneKeyword",
          "| _ -> None"
        ],
        "start_line": 311,
        "end_line": 320,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      },
      {
        "hash": "117c5109ebbfcbed9d3933e4a9e0aef8",
        "text": "| \"EndKeyword\" -> Some EndKeyword\n| \"WhileKeyword\" -> Some WhileKeyword\n| \"ForKeyword\" -> Some ForKeyword\n| \"DoKeyword\" -> Some DoKeyword\n| \"BreakKeyword\" -> Some BreakKeyword\n| \"ContinueKeyword\" -> Some ContinueKeyword\n| \"ReturnKeyword\" -> Some ReturnKeyword\n| \"ValKeyword\" -> Some ValKeyword\n| \"OneKeyword\" -> Some OneKeyword\n| _ -> None",
        "lines": [
          "| \"EndKeyword\" -> Some EndKeyword",
          "| \"WhileKeyword\" -> Some WhileKeyword",
          "| \"ForKeyword\" -> Some ForKeyword",
          "| \"DoKeyword\" -> Some DoKeyword",
          "| \"BreakKeyword\" -> Some BreakKeyword",
          "| \"ContinueKeyword\" -> Some ContinueKeyword",
          "| \"ReturnKeyword\" -> Some ReturnKeyword",
          "| \"ValKeyword\" -> Some ValKeyword",
          "| \"OneKeyword\" -> Some OneKeyword",
          "| _ -> None"
        ],
        "start_line": 103,
        "end_line": 112,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_keywords.ml"
      }
    ],
    "b034f8939b6b8fc5131f7ee22892b66d": [
      {
        "hash": "b034f8939b6b8fc5131f7ee22892b66d",
        "text": "| \"WhileKeyword\" -> Some WhileKeyword\n| \"ForKeyword\" -> Some ForKeyword\n| \"DoKeyword\" -> Some DoKeyword\n| \"BreakKeyword\" -> Some BreakKeyword\n| \"ContinueKeyword\" -> Some ContinueKeyword\n| \"ReturnKeyword\" -> Some ReturnKeyword\n| \"ValKeyword\" -> Some ValKeyword\n| \"OneKeyword\" -> Some OneKeyword\n| _ -> None",
        "lines": [
          "| \"WhileKeyword\" -> Some WhileKeyword",
          "| \"ForKeyword\" -> Some ForKeyword",
          "| \"DoKeyword\" -> Some DoKeyword",
          "| \"BreakKeyword\" -> Some BreakKeyword",
          "| \"ContinueKeyword\" -> Some ContinueKeyword",
          "| \"ReturnKeyword\" -> Some ReturnKeyword",
          "| \"ValKeyword\" -> Some ValKeyword",
          "| \"OneKeyword\" -> Some OneKeyword",
          "| _ -> None"
        ],
        "start_line": 312,
        "end_line": 320,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      },
      {
        "hash": "b034f8939b6b8fc5131f7ee22892b66d",
        "text": "| \"WhileKeyword\" -> Some WhileKeyword\n| \"ForKeyword\" -> Some ForKeyword\n| \"DoKeyword\" -> Some DoKeyword\n| \"BreakKeyword\" -> Some BreakKeyword\n| \"ContinueKeyword\" -> Some ContinueKeyword\n| \"ReturnKeyword\" -> Some ReturnKeyword\n| \"ValKeyword\" -> Some ValKeyword\n| \"OneKeyword\" -> Some OneKeyword\n| _ -> None",
        "lines": [
          "| \"WhileKeyword\" -> Some WhileKeyword",
          "| \"ForKeyword\" -> Some ForKeyword",
          "| \"DoKeyword\" -> Some DoKeyword",
          "| \"BreakKeyword\" -> Some BreakKeyword",
          "| \"ContinueKeyword\" -> Some ContinueKeyword",
          "| \"ReturnKeyword\" -> Some ReturnKeyword",
          "| \"ValKeyword\" -> Some ValKeyword",
          "| \"OneKeyword\" -> Some OneKeyword",
          "| _ -> None"
        ],
        "start_line": 104,
        "end_line": 112,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_keywords.ml"
      }
    ],
    "2ae3f9dc3f5245fdc3556c15476389f7": [
      {
        "hash": "2ae3f9dc3f5245fdc3556c15476389f7",
        "text": "| \"ForKeyword\" -> Some ForKeyword\n| \"DoKeyword\" -> Some DoKeyword\n| \"BreakKeyword\" -> Some BreakKeyword\n| \"ContinueKeyword\" -> Some ContinueKeyword\n| \"ReturnKeyword\" -> Some ReturnKeyword\n| \"ValKeyword\" -> Some ValKeyword\n| \"OneKeyword\" -> Some OneKeyword\n| _ -> None",
        "lines": [
          "| \"ForKeyword\" -> Some ForKeyword",
          "| \"DoKeyword\" -> Some DoKeyword",
          "| \"BreakKeyword\" -> Some BreakKeyword",
          "| \"ContinueKeyword\" -> Some ContinueKeyword",
          "| \"ReturnKeyword\" -> Some ReturnKeyword",
          "| \"ValKeyword\" -> Some ValKeyword",
          "| \"OneKeyword\" -> Some OneKeyword",
          "| _ -> None"
        ],
        "start_line": 313,
        "end_line": 320,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      },
      {
        "hash": "2ae3f9dc3f5245fdc3556c15476389f7",
        "text": "| \"ForKeyword\" -> Some ForKeyword\n| \"DoKeyword\" -> Some DoKeyword\n| \"BreakKeyword\" -> Some BreakKeyword\n| \"ContinueKeyword\" -> Some ContinueKeyword\n| \"ReturnKeyword\" -> Some ReturnKeyword\n| \"ValKeyword\" -> Some ValKeyword\n| \"OneKeyword\" -> Some OneKeyword\n| _ -> None",
        "lines": [
          "| \"ForKeyword\" -> Some ForKeyword",
          "| \"DoKeyword\" -> Some DoKeyword",
          "| \"BreakKeyword\" -> Some BreakKeyword",
          "| \"ContinueKeyword\" -> Some ContinueKeyword",
          "| \"ReturnKeyword\" -> Some ReturnKeyword",
          "| \"ValKeyword\" -> Some ValKeyword",
          "| \"OneKeyword\" -> Some OneKeyword",
          "| _ -> None"
        ],
        "start_line": 105,
        "end_line": 112,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_keywords.ml"
      }
    ],
    "49548da49d470d5f832cd8e3fcf10c47": [
      {
        "hash": "49548da49d470d5f832cd8e3fcf10c47",
        "text": "| \"DoKeyword\" -> Some DoKeyword\n| \"BreakKeyword\" -> Some BreakKeyword\n| \"ContinueKeyword\" -> Some ContinueKeyword\n| \"ReturnKeyword\" -> Some ReturnKeyword\n| \"ValKeyword\" -> Some ValKeyword\n| \"OneKeyword\" -> Some OneKeyword\n| _ -> None",
        "lines": [
          "| \"DoKeyword\" -> Some DoKeyword",
          "| \"BreakKeyword\" -> Some BreakKeyword",
          "| \"ContinueKeyword\" -> Some ContinueKeyword",
          "| \"ReturnKeyword\" -> Some ReturnKeyword",
          "| \"ValKeyword\" -> Some ValKeyword",
          "| \"OneKeyword\" -> Some OneKeyword",
          "| _ -> None"
        ],
        "start_line": 314,
        "end_line": 320,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      },
      {
        "hash": "49548da49d470d5f832cd8e3fcf10c47",
        "text": "| \"DoKeyword\" -> Some DoKeyword\n| \"BreakKeyword\" -> Some BreakKeyword\n| \"ContinueKeyword\" -> Some ContinueKeyword\n| \"ReturnKeyword\" -> Some ReturnKeyword\n| \"ValKeyword\" -> Some ValKeyword\n| \"OneKeyword\" -> Some OneKeyword\n| _ -> None",
        "lines": [
          "| \"DoKeyword\" -> Some DoKeyword",
          "| \"BreakKeyword\" -> Some BreakKeyword",
          "| \"ContinueKeyword\" -> Some ContinueKeyword",
          "| \"ReturnKeyword\" -> Some ReturnKeyword",
          "| \"ValKeyword\" -> Some ValKeyword",
          "| \"OneKeyword\" -> Some OneKeyword",
          "| _ -> None"
        ],
        "start_line": 106,
        "end_line": 112,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_keywords.ml"
      }
    ],
    "3862f7ead188efaa6f11b8f04ef3ca43": [
      {
        "hash": "3862f7ead188efaa6f11b8f04ef3ca43",
        "text": "| \"BreakKeyword\" -> Some BreakKeyword\n| \"ContinueKeyword\" -> Some ContinueKeyword\n| \"ReturnKeyword\" -> Some ReturnKeyword\n| \"ValKeyword\" -> Some ValKeyword\n| \"OneKeyword\" -> Some OneKeyword\n| _ -> None",
        "lines": [
          "| \"BreakKeyword\" -> Some BreakKeyword",
          "| \"ContinueKeyword\" -> Some ContinueKeyword",
          "| \"ReturnKeyword\" -> Some ReturnKeyword",
          "| \"ValKeyword\" -> Some ValKeyword",
          "| \"OneKeyword\" -> Some OneKeyword",
          "| _ -> None"
        ],
        "start_line": 315,
        "end_line": 320,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      },
      {
        "hash": "3862f7ead188efaa6f11b8f04ef3ca43",
        "text": "| \"BreakKeyword\" -> Some BreakKeyword\n| \"ContinueKeyword\" -> Some ContinueKeyword\n| \"ReturnKeyword\" -> Some ReturnKeyword\n| \"ValKeyword\" -> Some ValKeyword\n| \"OneKeyword\" -> Some OneKeyword\n| _ -> None",
        "lines": [
          "| \"BreakKeyword\" -> Some BreakKeyword",
          "| \"ContinueKeyword\" -> Some ContinueKeyword",
          "| \"ReturnKeyword\" -> Some ReturnKeyword",
          "| \"ValKeyword\" -> Some ValKeyword",
          "| \"OneKeyword\" -> Some OneKeyword",
          "| _ -> None"
        ],
        "start_line": 107,
        "end_line": 112,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_keywords.ml"
      }
    ],
    "4d23524242d08066d662b3dbaf8bd4d8": [
      {
        "hash": "4d23524242d08066d662b3dbaf8bd4d8",
        "text": "| \"ContinueKeyword\" -> Some ContinueKeyword\n| \"ReturnKeyword\" -> Some ReturnKeyword\n| \"ValKeyword\" -> Some ValKeyword\n| \"OneKeyword\" -> Some OneKeyword\n| _ -> None",
        "lines": [
          "| \"ContinueKeyword\" -> Some ContinueKeyword",
          "| \"ReturnKeyword\" -> Some ReturnKeyword",
          "| \"ValKeyword\" -> Some ValKeyword",
          "| \"OneKeyword\" -> Some OneKeyword",
          "| _ -> None"
        ],
        "start_line": 316,
        "end_line": 320,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      },
      {
        "hash": "4d23524242d08066d662b3dbaf8bd4d8",
        "text": "| \"ContinueKeyword\" -> Some ContinueKeyword\n| \"ReturnKeyword\" -> Some ReturnKeyword\n| \"ValKeyword\" -> Some ValKeyword\n| \"OneKeyword\" -> Some OneKeyword\n| _ -> None",
        "lines": [
          "| \"ContinueKeyword\" -> Some ContinueKeyword",
          "| \"ReturnKeyword\" -> Some ReturnKeyword",
          "| \"ValKeyword\" -> Some ValKeyword",
          "| \"OneKeyword\" -> Some OneKeyword",
          "| _ -> None"
        ],
        "start_line": 108,
        "end_line": 112,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_keywords.ml"
      }
    ],
    "2d9573ec05271b157f248717cc3688bc": [
      {
        "hash": "2d9573ec05271b157f248717cc3688bc",
        "text": "| \"ReturnKeyword\" -> Some ReturnKeyword\n| \"ValKeyword\" -> Some ValKeyword\n| \"OneKeyword\" -> Some OneKeyword\n| _ -> None",
        "lines": [
          "| \"ReturnKeyword\" -> Some ReturnKeyword",
          "| \"ValKeyword\" -> Some ValKeyword",
          "| \"OneKeyword\" -> Some OneKeyword",
          "| _ -> None"
        ],
        "start_line": 317,
        "end_line": 320,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      },
      {
        "hash": "2d9573ec05271b157f248717cc3688bc",
        "text": "| \"ReturnKeyword\" -> Some ReturnKeyword\n| \"ValKeyword\" -> Some ValKeyword\n| \"OneKeyword\" -> Some OneKeyword\n| _ -> None",
        "lines": [
          "| \"ReturnKeyword\" -> Some ReturnKeyword",
          "| \"ValKeyword\" -> Some ValKeyword",
          "| \"OneKeyword\" -> Some OneKeyword",
          "| _ -> None"
        ],
        "start_line": 109,
        "end_line": 112,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_keywords.ml"
      }
    ],
    "b1b380b15645b372a4db0fcf96cbace4": [
      {
        "hash": "b1b380b15645b372a4db0fcf96cbace4",
        "text": "| \"ValKeyword\" -> Some ValKeyword\n| \"OneKeyword\" -> Some OneKeyword\n| _ -> None",
        "lines": [
          "| \"ValKeyword\" -> Some ValKeyword",
          "| \"OneKeyword\" -> Some OneKeyword",
          "| _ -> None"
        ],
        "start_line": 318,
        "end_line": 320,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_unified.ml"
      },
      {
        "hash": "b1b380b15645b372a4db0fcf96cbace4",
        "text": "| \"ValKeyword\" -> Some ValKeyword\n| \"OneKeyword\" -> Some OneKeyword\n| _ -> None",
        "lines": [
          "| \"ValKeyword\" -> Some ValKeyword",
          "| \"OneKeyword\" -> Some OneKeyword",
          "| _ -> None"
        ],
        "start_line": 110,
        "end_line": 112,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/token_compatibility_keywords.ml"
      }
    ],
    "588c8ff5356a8854e003663b9a9165aa": [
      {
        "hash": "588c8ff5356a8854e003663b9a9165aa",
        "text": "let small_test_number = 100\nlet large_test_number = 999999\nlet factorial_test_input = 5\nlet factorial_expected_result = 120\nlet sum_1_to_100 = 5050\nend",
        "lines": [
          "let small_test_number = 100",
          "let large_test_number = 999999",
          "let factorial_test_input = 5",
          "let factorial_expected_result = 120",
          "let sum_1_to_100 = 5050",
          "end"
        ],
        "start_line": 29,
        "end_line": 34,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/constants.ml"
      },
      {
        "hash": "588c8ff5356a8854e003663b9a9165aa",
        "text": "let small_test_number = 100\nlet large_test_number = 999999\nlet factorial_test_input = 5\nlet factorial_expected_result = 120\nlet sum_1_to_100 = 5050\nend",
        "lines": [
          "let small_test_number = 100",
          "let large_test_number = 999999",
          "let factorial_test_input = 5",
          "let factorial_expected_result = 120",
          "let sum_1_to_100 = 5050",
          "end"
        ],
        "start_line": 76,
        "end_line": 81,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/constants/core_constants.ml"
      }
    ],
    "a69e8108bc2d234fede2bd4ebfd96511": [
      {
        "hash": "a69e8108bc2d234fede2bd4ebfd96511",
        "text": "let large_test_number = 999999\nlet factorial_test_input = 5\nlet factorial_expected_result = 120\nlet sum_1_to_100 = 5050\nend",
        "lines": [
          "let large_test_number = 999999",
          "let factorial_test_input = 5",
          "let factorial_expected_result = 120",
          "let sum_1_to_100 = 5050",
          "end"
        ],
        "start_line": 30,
        "end_line": 34,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/constants.ml"
      },
      {
        "hash": "a69e8108bc2d234fede2bd4ebfd96511",
        "text": "let large_test_number = 999999\nlet factorial_test_input = 5\nlet factorial_expected_result = 120\nlet sum_1_to_100 = 5050\nend",
        "lines": [
          "let large_test_number = 999999",
          "let factorial_test_input = 5",
          "let factorial_expected_result = 120",
          "let sum_1_to_100 = 5050",
          "end"
        ],
        "start_line": 77,
        "end_line": 81,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/constants/core_constants.ml"
      }
    ],
    "8bfe0d921cf082da2ff6de795fdcae73": [
      {
        "hash": "8bfe0d921cf082da2ff6de795fdcae73",
        "text": "let factorial_test_input = 5\nlet factorial_expected_result = 120\nlet sum_1_to_100 = 5050\nend",
        "lines": [
          "let factorial_test_input = 5",
          "let factorial_expected_result = 120",
          "let sum_1_to_100 = 5050",
          "end"
        ],
        "start_line": 31,
        "end_line": 34,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/constants.ml"
      },
      {
        "hash": "8bfe0d921cf082da2ff6de795fdcae73",
        "text": "let factorial_test_input = 5\nlet factorial_expected_result = 120\nlet sum_1_to_100 = 5050\nend",
        "lines": [
          "let factorial_test_input = 5",
          "let factorial_expected_result = 120",
          "let sum_1_to_100 = 5050",
          "end"
        ],
        "start_line": 78,
        "end_line": 81,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/constants/core_constants.ml"
      }
    ],
    "d930d938d19382423f6e5f331be58a04": [
      {
        "hash": "d930d938d19382423f6e5f331be58a04",
        "text": "let factorial_expected_result = 120\nlet sum_1_to_100 = 5050\nend",
        "lines": [
          "let factorial_expected_result = 120",
          "let sum_1_to_100 = 5050",
          "end"
        ],
        "start_line": 32,
        "end_line": 34,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/constants.ml"
      },
      {
        "hash": "d930d938d19382423f6e5f331be58a04",
        "text": "let factorial_expected_result = 120\nlet sum_1_to_100 = 5050\nend",
        "lines": [
          "let factorial_expected_result = 120",
          "let sum_1_to_100 = 5050",
          "end"
        ],
        "start_line": 79,
        "end_line": 81,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/constants/core_constants.ml"
      }
    ],
    "6404d49da5f250d2247a8cbc779cb2d7": [
      {
        "hash": "6404d49da5f250d2247a8cbc779cb2d7",
        "text": "let max_verse_length = 32\nlet max_poem_lines = 100\nlet default_rhyme_scheme_length = 8\nend",
        "lines": [
          "let max_verse_length = 32",
          "let max_poem_lines = 100",
          "let default_rhyme_scheme_length = 8",
          "end"
        ],
        "start_line": 170,
        "end_line": 173,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/constants.ml"
      },
      {
        "hash": "6404d49da5f250d2247a8cbc779cb2d7",
        "text": "let max_verse_length = 32\nlet max_poem_lines = 100\nlet default_rhyme_scheme_length = 8\nend",
        "lines": [
          "let max_verse_length = 32",
          "let max_poem_lines = 100",
          "let default_rhyme_scheme_length = 8",
          "end"
        ],
        "start_line": 69,
        "end_line": 72,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/constants/core_constants.ml"
      }
    ],
    "541735fdae1f9c245749a8a21913c1f6": [
      {
        "hash": "541735fdae1f9c245749a8a21913c1f6",
        "text": "let max_poem_lines = 100\nlet default_rhyme_scheme_length = 8\nend",
        "lines": [
          "let max_poem_lines = 100",
          "let default_rhyme_scheme_length = 8",
          "end"
        ],
        "start_line": 171,
        "end_line": 173,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/constants.ml"
      },
      {
        "hash": "541735fdae1f9c245749a8a21913c1f6",
        "text": "let max_poem_lines = 100\nlet default_rhyme_scheme_length = 8\nend",
        "lines": [
          "let max_poem_lines = 100",
          "let default_rhyme_scheme_length = 8",
          "end"
        ],
        "start_line": 70,
        "end_line": 72,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/constants/core_constants.ml"
      }
    ],
    "52c99bc5032dfff14ee9ef7d45e87f8e": [
      {
        "hash": "52c99bc5032dfff14ee9ef7d45e87f8e",
        "text": "let type_complexity_basic = 1\nlet type_complexity_composite = 2\nend",
        "lines": [
          "let type_complexity_basic = 1",
          "let type_complexity_composite = 2",
          "end"
        ],
        "start_line": 193,
        "end_line": 195,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/constants.ml"
      },
      {
        "hash": "52c99bc5032dfff14ee9ef7d45e87f8e",
        "text": "let type_complexity_basic = 1\nlet type_complexity_composite = 2\nend",
        "lines": [
          "let type_complexity_basic = 1",
          "let type_complexity_composite = 2",
          "end"
        ],
        "start_line": 29,
        "end_line": 31,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/constants/core_constants.ml"
      }
    ],
    "eecf281aa7bc310da0e285275cce112e": [
      {
        "hash": "eecf281aa7bc310da0e285275cce112e",
        "text": "let subtract = \"luoyan_subtract\"\nlet multiply = \"luoyan_multiply\"\nlet divide = \"luoyan_divide\"\nlet modulo = \"luoyan_modulo\"\nlet equal = \"luoyan_equal\"\nlet not_equal = \"luoyan_not_equal\"\nlet less_than = \"luoyan_less_than\"\nlet greater_than = \"luoyan_greater_than\"\nlet less_equal = \"luoyan_less_equal\"\nlet greater_equal = \"luoyan_greater_equal\"",
        "lines": [
          "let subtract = \"luoyan_subtract\"",
          "let multiply = \"luoyan_multiply\"",
          "let divide = \"luoyan_divide\"",
          "let modulo = \"luoyan_modulo\"",
          "let equal = \"luoyan_equal\"",
          "let not_equal = \"luoyan_not_equal\"",
          "let less_than = \"luoyan_less_than\"",
          "let greater_than = \"luoyan_greater_than\"",
          "let less_equal = \"luoyan_less_equal\"",
          "let greater_equal = \"luoyan_greater_equal\""
        ],
        "start_line": 200,
        "end_line": 209,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/constants.ml"
      },
      {
        "hash": "eecf281aa7bc310da0e285275cce112e",
        "text": "let subtract = \"luoyan_subtract\"\nlet multiply = \"luoyan_multiply\"\nlet divide = \"luoyan_divide\"\nlet modulo = \"luoyan_modulo\"\nlet equal = \"luoyan_equal\"\nlet not_equal = \"luoyan_not_equal\"\nlet less_than = \"luoyan_less_than\"\nlet greater_than = \"luoyan_greater_than\"\nlet less_equal = \"luoyan_less_equal\"\nlet greater_equal = \"luoyan_greater_equal\"",
        "lines": [
          "let subtract = \"luoyan_subtract\"",
          "let multiply = \"luoyan_multiply\"",
          "let divide = \"luoyan_divide\"",
          "let modulo = \"luoyan_modulo\"",
          "let equal = \"luoyan_equal\"",
          "let not_equal = \"luoyan_not_equal\"",
          "let less_than = \"luoyan_less_than\"",
          "let greater_than = \"luoyan_greater_than\"",
          "let less_equal = \"luoyan_less_equal\"",
          "let greater_equal = \"luoyan_greater_equal\""
        ],
        "start_line": 6,
        "end_line": 15,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/constants/runtime_constants.ml"
      }
    ],
    "6785c36d112868f2b34951e53cf42502": [
      {
        "hash": "6785c36d112868f2b34951e53cf42502",
        "text": "let multiply = \"luoyan_multiply\"\nlet divide = \"luoyan_divide\"\nlet modulo = \"luoyan_modulo\"\nlet equal = \"luoyan_equal\"\nlet not_equal = \"luoyan_not_equal\"\nlet less_than = \"luoyan_less_than\"\nlet greater_than = \"luoyan_greater_than\"\nlet less_equal = \"luoyan_less_equal\"\nlet greater_equal = \"luoyan_greater_equal\"\nlet logical_and = \"luoyan_logical_and\"",
        "lines": [
          "let multiply = \"luoyan_multiply\"",
          "let divide = \"luoyan_divide\"",
          "let modulo = \"luoyan_modulo\"",
          "let equal = \"luoyan_equal\"",
          "let not_equal = \"luoyan_not_equal\"",
          "let less_than = \"luoyan_less_than\"",
          "let greater_than = \"luoyan_greater_than\"",
          "let less_equal = \"luoyan_less_equal\"",
          "let greater_equal = \"luoyan_greater_equal\"",
          "let logical_and = \"luoyan_logical_and\""
        ],
        "start_line": 201,
        "end_line": 210,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/constants.ml"
      },
      {
        "hash": "6785c36d112868f2b34951e53cf42502",
        "text": "let multiply = \"luoyan_multiply\"\nlet divide = \"luoyan_divide\"\nlet modulo = \"luoyan_modulo\"\nlet equal = \"luoyan_equal\"\nlet not_equal = \"luoyan_not_equal\"\nlet less_than = \"luoyan_less_than\"\nlet greater_than = \"luoyan_greater_than\"\nlet less_equal = \"luoyan_less_equal\"\nlet greater_equal = \"luoyan_greater_equal\"\nlet logical_and = \"luoyan_logical_and\"",
        "lines": [
          "let multiply = \"luoyan_multiply\"",
          "let divide = \"luoyan_divide\"",
          "let modulo = \"luoyan_modulo\"",
          "let equal = \"luoyan_equal\"",
          "let not_equal = \"luoyan_not_equal\"",
          "let less_than = \"luoyan_less_than\"",
          "let greater_than = \"luoyan_greater_than\"",
          "let less_equal = \"luoyan_less_equal\"",
          "let greater_equal = \"luoyan_greater_equal\"",
          "let logical_and = \"luoyan_logical_and\""
        ],
        "start_line": 7,
        "end_line": 16,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/constants/runtime_constants.ml"
      }
    ],
    "8a8b4dc49e9befd7d9315a3bbdf4dd47": [
      {
        "hash": "8a8b4dc49e9befd7d9315a3bbdf4dd47",
        "text": "let divide = \"luoyan_divide\"\nlet modulo = \"luoyan_modulo\"\nlet equal = \"luoyan_equal\"\nlet not_equal = \"luoyan_not_equal\"\nlet less_than = \"luoyan_less_than\"\nlet greater_than = \"luoyan_greater_than\"\nlet less_equal = \"luoyan_less_equal\"\nlet greater_equal = \"luoyan_greater_equal\"\nlet logical_and = \"luoyan_logical_and\"\nlet logical_or = \"luoyan_logical_or\"",
        "lines": [
          "let divide = \"luoyan_divide\"",
          "let modulo = \"luoyan_modulo\"",
          "let equal = \"luoyan_equal\"",
          "let not_equal = \"luoyan_not_equal\"",
          "let less_than = \"luoyan_less_than\"",
          "let greater_than = \"luoyan_greater_than\"",
          "let less_equal = \"luoyan_less_equal\"",
          "let greater_equal = \"luoyan_greater_equal\"",
          "let logical_and = \"luoyan_logical_and\"",
          "let logical_or = \"luoyan_logical_or\""
        ],
        "start_line": 202,
        "end_line": 211,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/constants.ml"
      },
      {
        "hash": "8a8b4dc49e9befd7d9315a3bbdf4dd47",
        "text": "let divide = \"luoyan_divide\"\nlet modulo = \"luoyan_modulo\"\nlet equal = \"luoyan_equal\"\nlet not_equal = \"luoyan_not_equal\"\nlet less_than = \"luoyan_less_than\"\nlet greater_than = \"luoyan_greater_than\"\nlet less_equal = \"luoyan_less_equal\"\nlet greater_equal = \"luoyan_greater_equal\"\nlet logical_and = \"luoyan_logical_and\"\nlet logical_or = \"luoyan_logical_or\"",
        "lines": [
          "let divide = \"luoyan_divide\"",
          "let modulo = \"luoyan_modulo\"",
          "let equal = \"luoyan_equal\"",
          "let not_equal = \"luoyan_not_equal\"",
          "let less_than = \"luoyan_less_than\"",
          "let greater_than = \"luoyan_greater_than\"",
          "let less_equal = \"luoyan_less_equal\"",
          "let greater_equal = \"luoyan_greater_equal\"",
          "let logical_and = \"luoyan_logical_and\"",
          "let logical_or = \"luoyan_logical_or\""
        ],
        "start_line": 8,
        "end_line": 17,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/constants/runtime_constants.ml"
      }
    ],
    "5ec6a3f9334583643c318109cf247d0f": [
      {
        "hash": "5ec6a3f9334583643c318109cf247d0f",
        "text": "let modulo = \"luoyan_modulo\"\nlet equal = \"luoyan_equal\"\nlet not_equal = \"luoyan_not_equal\"\nlet less_than = \"luoyan_less_than\"\nlet greater_than = \"luoyan_greater_than\"\nlet less_equal = \"luoyan_less_equal\"\nlet greater_equal = \"luoyan_greater_equal\"\nlet logical_and = \"luoyan_logical_and\"\nlet logical_or = \"luoyan_logical_or\"\nlet concat = \"luoyan_concat\"",
        "lines": [
          "let modulo = \"luoyan_modulo\"",
          "let equal = \"luoyan_equal\"",
          "let not_equal = \"luoyan_not_equal\"",
          "let less_than = \"luoyan_less_than\"",
          "let greater_than = \"luoyan_greater_than\"",
          "let less_equal = \"luoyan_less_equal\"",
          "let greater_equal = \"luoyan_greater_equal\"",
          "let logical_and = \"luoyan_logical_and\"",
          "let logical_or = \"luoyan_logical_or\"",
          "let concat = \"luoyan_concat\""
        ],
        "start_line": 203,
        "end_line": 212,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/constants.ml"
      },
      {
        "hash": "5ec6a3f9334583643c318109cf247d0f",
        "text": "let modulo = \"luoyan_modulo\"\nlet equal = \"luoyan_equal\"\nlet not_equal = \"luoyan_not_equal\"\nlet less_than = \"luoyan_less_than\"\nlet greater_than = \"luoyan_greater_than\"\nlet less_equal = \"luoyan_less_equal\"\nlet greater_equal = \"luoyan_greater_equal\"\nlet logical_and = \"luoyan_logical_and\"\nlet logical_or = \"luoyan_logical_or\"\nlet concat = \"luoyan_concat\"",
        "lines": [
          "let modulo = \"luoyan_modulo\"",
          "let equal = \"luoyan_equal\"",
          "let not_equal = \"luoyan_not_equal\"",
          "let less_than = \"luoyan_less_than\"",
          "let greater_than = \"luoyan_greater_than\"",
          "let less_equal = \"luoyan_less_equal\"",
          "let greater_equal = \"luoyan_greater_equal\"",
          "let logical_and = \"luoyan_logical_and\"",
          "let logical_or = \"luoyan_logical_or\"",
          "let concat = \"luoyan_concat\""
        ],
        "start_line": 9,
        "end_line": 18,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/constants/runtime_constants.ml"
      }
    ],
    "a7566e7c789f848b8e8542884696002d": [
      {
        "hash": "a7566e7c789f848b8e8542884696002d",
        "text": "let enable_cache () = cache_enabled := true\nlet disable_cache () = cache_enabled := false\nlet is_cache_enabled () = !cache_enabled",
        "lines": [
          "let enable_cache () = cache_enabled := true",
          "let disable_cache () = cache_enabled := false",
          "let is_cache_enabled () = !cache_enabled"
        ],
        "start_line": 92,
        "end_line": 94,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/types_cache.ml"
      },
      {
        "hash": "a7566e7c789f848b8e8542884696002d",
        "text": "let enable_cache () = cache_enabled := true\nlet disable_cache () = cache_enabled := false\nlet is_cache_enabled () = !cache_enabled",
        "lines": [
          "let enable_cache () = cache_enabled := true",
          "let disable_cache () = cache_enabled := false",
          "let is_cache_enabled () = !cache_enabled"
        ],
        "start_line": 239,
        "end_line": 241,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_rhyme_data.ml"
      }
    ],
    "7aadc13bb38971cc028f4c4762c229f2": [
      {
        "hash": "7aadc13bb38971cc028f4c4762c229f2",
        "text": "[]\n| Yojson.Json_error msg ->\nPrintf.eprintf \"警告: JSON解析错误: %s\\n\" msg;\n[]\nend",
        "lines": [
          "[]",
          "| Yojson.Json_error msg ->",
          "Printf.eprintf \"警告: JSON解析错误: %s\\n\" msg;",
          "[]",
          "end"
        ],
        "start_line": 89,
        "end_line": 93,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/unicode/unicode_types.ml"
      },
      {
        "hash": "7aadc13bb38971cc028f4c4762c229f2",
        "text": "[]\n| Yojson.Json_error msg ->\nPrintf.eprintf \"警告: JSON解析错误: %s\\n\" msg;\n[]\nend",
        "lines": [
          "[]",
          "| Yojson.Json_error msg ->",
          "Printf.eprintf \"警告: JSON解析错误: %s\\n\" msg;",
          "[]",
          "end"
        ],
        "start_line": 271,
        "end_line": 275,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/ze_sheng/hui_rhyme_data.ml"
      }
    ],
    "018c6c40ebd08ba4d7ad8bc1c34b70fa": [
      {
        "hash": "018c6c40ebd08ba4d7ad8bc1c34b70fa",
        "text": "| Yojson.Json_error msg ->\nPrintf.eprintf \"警告: JSON解析错误: %s\\n\" msg;\n[]\nend",
        "lines": [
          "| Yojson.Json_error msg ->",
          "Printf.eprintf \"警告: JSON解析错误: %s\\n\" msg;",
          "[]",
          "end"
        ],
        "start_line": 90,
        "end_line": 93,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/unicode/unicode_types.ml"
      },
      {
        "hash": "018c6c40ebd08ba4d7ad8bc1c34b70fa",
        "text": "| Yojson.Json_error msg ->\nPrintf.eprintf \"警告: JSON解析错误: %s\\n\" msg;\n[]\nend",
        "lines": [
          "| Yojson.Json_error msg ->",
          "Printf.eprintf \"警告: JSON解析错误: %s\\n\" msg;",
          "[]",
          "end"
        ],
        "start_line": 272,
        "end_line": 275,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/ze_sheng/hui_rhyme_data.ml"
      }
    ],
    "94e4f75429ca3ed0169ea8b56286cc2b": [
      {
        "hash": "94e4f75429ca3ed0169ea8b56286cc2b",
        "text": "Printf.eprintf \"警告: JSON解析错误: %s\\n\" msg;\n[]\nend",
        "lines": [
          "Printf.eprintf \"警告: JSON解析错误: %s\\n\" msg;",
          "[]",
          "end"
        ],
        "start_line": 91,
        "end_line": 93,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/unicode/unicode_types.ml"
      },
      {
        "hash": "94e4f75429ca3ed0169ea8b56286cc2b",
        "text": "Printf.eprintf \"警告: JSON解析错误: %s\\n\" msg;\n[]\nend",
        "lines": [
          "Printf.eprintf \"警告: JSON解析错误: %s\\n\" msg;",
          "[]",
          "end"
        ],
        "start_line": 273,
        "end_line": 275,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/ze_sheng/hui_rhyme_data.ml"
      }
    ],
    "327ca2aca49397a1b9e8a6a45776e850": [
      {
        "hash": "327ca2aca49397a1b9e8a6a45776e850",
        "text": "match Legacy.find_char_by_name char_name with\n| Some char_str -> (\nmatch Legacy.find_triple_by_char char_str with\n| Some triple -> (triple.byte1, triple.byte2, triple.byte3)\n| None -> (0, 0, 0))\n| None -> (0, 0, 0)",
        "lines": [
          "match Legacy.find_char_by_name char_name with",
          "| Some char_str -> (",
          "match Legacy.find_triple_by_char char_str with",
          "| Some triple -> (triple.byte1, triple.byte2, triple.byte3)",
          "| None -> (0, 0, 0))",
          "| None -> (0, 0, 0)"
        ],
        "start_line": 7,
        "end_line": 12,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/unicode/char_byte_definitions.ml"
      },
      {
        "hash": "327ca2aca49397a1b9e8a6a45776e850",
        "text": "match Legacy.find_char_by_name char_name with\n| Some char_str -> (\nmatch Legacy.find_triple_by_char char_str with\n| Some triple -> (triple.byte1, triple.byte2, triple.byte3)\n| None -> (0, 0, 0))\n| None -> (0, 0, 0)",
        "lines": [
          "match Legacy.find_char_by_name char_name with",
          "| Some char_str -> (",
          "match Legacy.find_triple_by_char char_str with",
          "| Some triple -> (triple.byte1, triple.byte2, triple.byte3)",
          "| None -> (0, 0, 0))",
          "| None -> (0, 0, 0)"
        ],
        "start_line": 29,
        "end_line": 34,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/unicode/unicode_constants_unified.ml"
      }
    ],
    "59dead408e1d3dbca5f3d7377cdd7116": [
      {
        "hash": "59dead408e1d3dbca5f3d7377cdd7116",
        "text": "| Some char_str -> (\nmatch Legacy.find_triple_by_char char_str with\n| Some triple -> (triple.byte1, triple.byte2, triple.byte3)\n| None -> (0, 0, 0))\n| None -> (0, 0, 0)",
        "lines": [
          "| Some char_str -> (",
          "match Legacy.find_triple_by_char char_str with",
          "| Some triple -> (triple.byte1, triple.byte2, triple.byte3)",
          "| None -> (0, 0, 0))",
          "| None -> (0, 0, 0)"
        ],
        "start_line": 8,
        "end_line": 12,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/unicode/char_byte_definitions.ml"
      },
      {
        "hash": "59dead408e1d3dbca5f3d7377cdd7116",
        "text": "| Some char_str -> (\nmatch Legacy.find_triple_by_char char_str with\n| Some triple -> (triple.byte1, triple.byte2, triple.byte3)\n| None -> (0, 0, 0))\n| None -> (0, 0, 0)",
        "lines": [
          "| Some char_str -> (",
          "match Legacy.find_triple_by_char char_str with",
          "| Some triple -> (triple.byte1, triple.byte2, triple.byte3)",
          "| None -> (0, 0, 0))",
          "| None -> (0, 0, 0)"
        ],
        "start_line": 30,
        "end_line": 34,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/unicode/unicode_constants_unified.ml"
      }
    ],
    "cc5a265c341b19fe09df3c844f487d77": [
      {
        "hash": "cc5a265c341b19fe09df3c844f487d77",
        "text": "match Legacy.find_triple_by_char char_str with\n| Some triple -> (triple.byte1, triple.byte2, triple.byte3)\n| None -> (0, 0, 0))\n| None -> (0, 0, 0)",
        "lines": [
          "match Legacy.find_triple_by_char char_str with",
          "| Some triple -> (triple.byte1, triple.byte2, triple.byte3)",
          "| None -> (0, 0, 0))",
          "| None -> (0, 0, 0)"
        ],
        "start_line": 9,
        "end_line": 12,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/unicode/char_byte_definitions.ml"
      },
      {
        "hash": "cc5a265c341b19fe09df3c844f487d77",
        "text": "match Legacy.find_triple_by_char char_str with\n| Some triple -> (triple.byte1, triple.byte2, triple.byte3)\n| None -> (0, 0, 0))\n| None -> (0, 0, 0)",
        "lines": [
          "match Legacy.find_triple_by_char char_str with",
          "| Some triple -> (triple.byte1, triple.byte2, triple.byte3)",
          "| None -> (0, 0, 0))",
          "| None -> (0, 0, 0)"
        ],
        "start_line": 31,
        "end_line": 34,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/unicode/unicode_constants_unified.ml"
      }
    ],
    "e96676e2a2a6b2fa217417eae99e0f02": [
      {
        "hash": "e96676e2a2a6b2fa217417eae99e0f02",
        "text": "| Some triple -> (triple.byte1, triple.byte2, triple.byte3)\n| None -> (0, 0, 0))\n| None -> (0, 0, 0)",
        "lines": [
          "| Some triple -> (triple.byte1, triple.byte2, triple.byte3)",
          "| None -> (0, 0, 0))",
          "| None -> (0, 0, 0)"
        ],
        "start_line": 10,
        "end_line": 12,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/unicode/char_byte_definitions.ml"
      },
      {
        "hash": "e96676e2a2a6b2fa217417eae99e0f02",
        "text": "| Some triple -> (triple.byte1, triple.byte2, triple.byte3)\n| None -> (0, 0, 0))\n| None -> (0, 0, 0)",
        "lines": [
          "| Some triple -> (triple.byte1, triple.byte2, triple.byte3)",
          "| None -> (0, 0, 0))",
          "| None -> (0, 0, 0)"
        ],
        "start_line": 32,
        "end_line": 34,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/unicode/unicode_constants_unified.ml"
      },
      {
        "hash": "e96676e2a2a6b2fa217417eae99e0f02",
        "text": "| Some triple -> (triple.byte1, triple.byte2, triple.byte3)\n| None -> (0, 0, 0))\n| None -> (0, 0, 0)",
        "lines": [
          "| Some triple -> (triple.byte1, triple.byte2, triple.byte3)",
          "| None -> (0, 0, 0))",
          "| None -> (0, 0, 0)"
        ],
        "start_line": 126,
        "end_line": 128,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/unicode/unicode_mapping.ml"
      }
    ],
    "79405fa8e5af3f758d697fa9d4a29b80": [
      {
        "hash": "79405fa8e5af3f758d697fa9d4a29b80",
        "text": "let fullwidth_semicolon_bytes = (0xEF, 0xBC, 0x9B)\nlet fullwidth_pipe_bytes = (0xEF, 0xBD, 0x9C)\nend",
        "lines": [
          "let fullwidth_semicolon_bytes = (0xEF, 0xBC, 0x9B)",
          "let fullwidth_pipe_bytes = (0xEF, 0xBD, 0x9C)",
          "end"
        ],
        "start_line": 40,
        "end_line": 42,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/unicode/char_byte_definitions.ml"
      },
      {
        "hash": "79405fa8e5af3f758d697fa9d4a29b80",
        "text": "let fullwidth_semicolon_bytes = (0xEF, 0xBC, 0x9B)\nlet fullwidth_pipe_bytes = (0xEF, 0xBD, 0x9C)\nend",
        "lines": [
          "let fullwidth_semicolon_bytes = (0xEF, 0xBC, 0x9B)",
          "let fullwidth_pipe_bytes = (0xEF, 0xBD, 0x9C)",
          "end"
        ],
        "start_line": 229,
        "end_line": 231,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/unicode/unicode_constants_unified.ml"
      }
    ],
    "ed17188ab9d51d0b8a2819e6b61bdd98": [
      {
        "hash": "ed17188ab9d51d0b8a2819e6b61bdd98",
        "text": "@author 骆言技术债务清理团队\n@version 1.0\n@since 2025-07-20 Issue #708 重构 *)",
        "lines": [
          "@author 骆言技术债务清理团队",
          "@version 1.0",
          "@since 2025-07-20 Issue #708 重构 *)"
        ],
        "start_line": 5,
        "end_line": 7,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/string_processing/collection_formatting.ml"
      },
      {
        "hash": "ed17188ab9d51d0b8a2819e6b61bdd98",
        "text": "@author 骆言技术债务清理团队\n@version 1.0\n@since 2025-07-20 Issue #708 重构 *)",
        "lines": [
          "@author 骆言技术债务清理团队",
          "@version 1.0",
          "@since 2025-07-20 Issue #708 重构 *)"
        ],
        "start_line": 5,
        "end_line": 7,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/string_processing/style_formatting.ml"
      },
      {
        "hash": "ed17188ab9d51d0b8a2819e6b61bdd98",
        "text": "@author 骆言技术债务清理团队\n@version 1.0\n@since 2025-07-20 Issue #708 重构 *)",
        "lines": [
          "@author 骆言技术债务清理团队",
          "@version 1.0",
          "@since 2025-07-20 Issue #708 重构 *)"
        ],
        "start_line": 5,
        "end_line": 7,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/string_processing/core_string_ops.ml"
      },
      {
        "hash": "ed17188ab9d51d0b8a2819e6b61bdd98",
        "text": "@author 骆言技术债务清理团队\n@version 1.0\n@since 2025-07-20 Issue #708 重构 *)",
        "lines": [
          "@author 骆言技术债务清理团队",
          "@version 1.0",
          "@since 2025-07-20 Issue #708 重构 *)"
        ],
        "start_line": 5,
        "end_line": 7,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/string_processing/buffer_helpers.ml"
      }
    ],
    "ff8a206e9c7c64a20627c1ec01088c18": [
      {
        "hash": "ff8a206e9c7c64a20627c1ec01088c18",
        "text": "@author 骆言技术债务清理团队\n@version 2.0\n@since 2025-07-22 Issue #864 Printf.sprintf统一化完成 *)",
        "lines": [
          "@author 骆言技术债务清理团队",
          "@version 2.0",
          "@since 2025-07-22 Issue #864 Printf.sprintf统一化完成 *)"
        ],
        "start_line": 9,
        "end_line": 11,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/string_processing/report_formatting.ml"
      },
      {
        "hash": "ff8a206e9c7c64a20627c1ec01088c18",
        "text": "@author 骆言技术债务清理团队\n@version 2.0\n@since 2025-07-22 Issue #864 Printf.sprintf统一化完成 *)",
        "lines": [
          "@author 骆言技术债务清理团队",
          "@version 2.0",
          "@since 2025-07-22 Issue #864 Printf.sprintf统一化完成 *)"
        ],
        "start_line": 9,
        "end_line": 11,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/string_processing/c_codegen_formatting.ml"
      }
    ],
    "922145eb57aa8c1c20d1eb0c08d8aa44": [
      {
        "hash": "922145eb57aa8c1c20d1eb0c08d8aa44",
        "text": "let unterminated_chinese_comment = \"Unterminated Chinese comment\"\nlet unterminated_string = \"Unterminated string\"\nlet unterminated_quoted_identifier = \"未闭合的引用标识符\"\nlet invalid_char_in_quoted_identifier = \"引用标识符中的无效字符\"",
        "lines": [
          "let unterminated_chinese_comment = \"Unterminated Chinese comment\"",
          "let unterminated_string = \"Unterminated string\"",
          "let unterminated_quoted_identifier = \"未闭合的引用标识符\"",
          "let invalid_char_in_quoted_identifier = \"引用标识符中的无效字符\""
        ],
        "start_line": 34,
        "end_line": 37,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/utils/unified_error_formatter.ml"
      },
      {
        "hash": "922145eb57aa8c1c20d1eb0c08d8aa44",
        "text": "let unterminated_chinese_comment = \"Unterminated Chinese comment\"\nlet unterminated_string = \"Unterminated string\"\nlet unterminated_quoted_identifier = \"未闭合的引用标识符\"\nlet invalid_char_in_quoted_identifier = \"引用标识符中的无效字符\"",
        "lines": [
          "let unterminated_chinese_comment = \"Unterminated Chinese comment\"",
          "let unterminated_string = \"Unterminated string\"",
          "let unterminated_quoted_identifier = \"未闭合的引用标识符\"",
          "let invalid_char_in_quoted_identifier = \"引用标识符中的无效字符\""
        ],
        "start_line": 16,
        "end_line": 19,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/constants/error_constants.ml"
      }
    ],
    "9a0234dfc01f02aa897388f267e8eec8": [
      {
        "hash": "9a0234dfc01f02aa897388f267e8eec8",
        "text": "let unterminated_string = \"Unterminated string\"\nlet unterminated_quoted_identifier = \"未闭合的引用标识符\"\nlet invalid_char_in_quoted_identifier = \"引用标识符中的无效字符\"",
        "lines": [
          "let unterminated_string = \"Unterminated string\"",
          "let unterminated_quoted_identifier = \"未闭合的引用标识符\"",
          "let invalid_char_in_quoted_identifier = \"引用标识符中的无效字符\""
        ],
        "start_line": 35,
        "end_line": 37,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/utils/unified_error_formatter.ml"
      },
      {
        "hash": "9a0234dfc01f02aa897388f267e8eec8",
        "text": "let unterminated_string = \"Unterminated string\"\nlet unterminated_quoted_identifier = \"未闭合的引用标识符\"\nlet invalid_char_in_quoted_identifier = \"引用标识符中的无效字符\"",
        "lines": [
          "let unterminated_string = \"Unterminated string\"",
          "let unterminated_quoted_identifier = \"未闭合的引用标识符\"",
          "let invalid_char_in_quoted_identifier = \"引用标识符中的无效字符\""
        ],
        "start_line": 17,
        "end_line": 19,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/constants/error_constants.ml"
      }
    ],
    "6ca119fd1e5128b19c7a4c1d14133afa": [
      {
        "hash": "6ca119fd1e5128b19c7a4c1d14133afa",
        "text": "let ancient_list_syntax_error =\njoin_with_separator \"\\n\"\n[\n\"请使用古雅体列表语法替代 [...]。\";\n\"空列表：空空如也\";\n\"有元素的列表：列开始 元素1 其一 元素2 其二 元素3 其三 列结束\";\n\"模式匹配：有首有尾 首名为「变量名」尾名为「尾部变量名」\";\n]",
        "lines": [
          "let ancient_list_syntax_error =",
          "join_with_separator \"\\n\"",
          "[",
          "\"请使用古雅体列表语法替代 [...]。\";",
          "\"空列表：空空如也\";",
          "\"有元素的列表：列开始 元素1 其一 元素2 其二 元素3 其三 列结束\";",
          "\"模式匹配：有首有尾 首名为「变量名」尾名为「尾部变量名」\";",
          "]"
        ],
        "start_line": 89,
        "end_line": 96,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/utils/unified_error_formatter.ml"
      },
      {
        "hash": "6ca119fd1e5128b19c7a4c1d14133afa",
        "text": "let ancient_list_syntax_error =\njoin_with_separator \"\\n\"\n[\n\"请使用古雅体列表语法替代 [...]。\";\n\"空列表：空空如也\";\n\"有元素的列表：列开始 元素1 其一 元素2 其二 元素3 其三 列结束\";\n\"模式匹配：有首有尾 首名为「变量名」尾名为「尾部变量名」\";\n]",
        "lines": [
          "let ancient_list_syntax_error =",
          "join_with_separator \"\\n\"",
          "[",
          "\"请使用古雅体列表语法替代 [...]。\";",
          "\"空列表：空空如也\";",
          "\"有元素的列表：列开始 元素1 其一 元素2 其二 元素3 其三 列结束\";",
          "\"模式匹配：有首有尾 首名为「变量名」尾名为「尾部变量名」\";",
          "]"
        ],
        "start_line": 52,
        "end_line": 59,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/constants/error_constants.ml"
      }
    ],
    "10988d500d38587d8baf012ab1509df8": [
      {
        "hash": "10988d500d38587d8baf012ab1509df8",
        "text": "join_with_separator \"\\n\"\n[\n\"请使用古雅体列表语法替代 [...]。\";\n\"空列表：空空如也\";\n\"有元素的列表：列开始 元素1 其一 元素2 其二 元素3 其三 列结束\";\n\"模式匹配：有首有尾 首名为「变量名」尾名为「尾部变量名」\";\n]",
        "lines": [
          "join_with_separator \"\\n\"",
          "[",
          "\"请使用古雅体列表语法替代 [...]。\";",
          "\"空列表：空空如也\";",
          "\"有元素的列表：列开始 元素1 其一 元素2 其二 元素3 其三 列结束\";",
          "\"模式匹配：有首有尾 首名为「变量名」尾名为「尾部变量名」\";",
          "]"
        ],
        "start_line": 90,
        "end_line": 96,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/utils/unified_error_formatter.ml"
      },
      {
        "hash": "10988d500d38587d8baf012ab1509df8",
        "text": "join_with_separator \"\\n\"\n[\n\"请使用古雅体列表语法替代 [...]。\";\n\"空列表：空空如也\";\n\"有元素的列表：列开始 元素1 其一 元素2 其二 元素3 其三 列结束\";\n\"模式匹配：有首有尾 首名为「变量名」尾名为「尾部变量名」\";\n]",
        "lines": [
          "join_with_separator \"\\n\"",
          "[",
          "\"请使用古雅体列表语法替代 [...]。\";",
          "\"空列表：空空如也\";",
          "\"有元素的列表：列开始 元素1 其一 元素2 其二 元素3 其三 列结束\";",
          "\"模式匹配：有首有尾 首名为「变量名」尾名为「尾部变量名」\";",
          "]"
        ],
        "start_line": 53,
        "end_line": 59,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/constants/error_constants.ml"
      }
    ],
    "cbf0f2f7e83d07119971f6db281c735c": [
      {
        "hash": "cbf0f2f7e83d07119971f6db281c735c",
        "text": "[\n\"请使用古雅体列表语法替代 [...]。\";\n\"空列表：空空如也\";\n\"有元素的列表：列开始 元素1 其一 元素2 其二 元素3 其三 列结束\";\n\"模式匹配：有首有尾 首名为「变量名」尾名为「尾部变量名」\";\n]",
        "lines": [
          "[",
          "\"请使用古雅体列表语法替代 [...]。\";",
          "\"空列表：空空如也\";",
          "\"有元素的列表：列开始 元素1 其一 元素2 其二 元素3 其三 列结束\";",
          "\"模式匹配：有首有尾 首名为「变量名」尾名为「尾部变量名」\";",
          "]"
        ],
        "start_line": 91,
        "end_line": 96,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/utils/unified_error_formatter.ml"
      },
      {
        "hash": "cbf0f2f7e83d07119971f6db281c735c",
        "text": "[\n\"请使用古雅体列表语法替代 [...]。\";\n\"空列表：空空如也\";\n\"有元素的列表：列开始 元素1 其一 元素2 其二 元素3 其三 列结束\";\n\"模式匹配：有首有尾 首名为「变量名」尾名为「尾部变量名」\";\n]",
        "lines": [
          "[",
          "\"请使用古雅体列表语法替代 [...]。\";",
          "\"空列表：空空如也\";",
          "\"有元素的列表：列开始 元素1 其一 元素2 其二 元素3 其三 列结束\";",
          "\"模式匹配：有首有尾 首名为「变量名」尾名为「尾部变量名」\";",
          "]"
        ],
        "start_line": 54,
        "end_line": 59,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/constants/error_constants.ml"
      }
    ],
    "7e7c4d1a806f94de074ad064954456ab": [
      {
        "hash": "7e7c4d1a806f94de074ad064954456ab",
        "text": "\"请使用古雅体列表语法替代 [...]。\";\n\"空列表：空空如也\";\n\"有元素的列表：列开始 元素1 其一 元素2 其二 元素3 其三 列结束\";\n\"模式匹配：有首有尾 首名为「变量名」尾名为「尾部变量名」\";\n]",
        "lines": [
          "\"请使用古雅体列表语法替代 [...]。\";",
          "\"空列表：空空如也\";",
          "\"有元素的列表：列开始 元素1 其一 元素2 其二 元素3 其三 列结束\";",
          "\"模式匹配：有首有尾 首名为「变量名」尾名为「尾部变量名」\";",
          "]"
        ],
        "start_line": 92,
        "end_line": 96,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/utils/unified_error_formatter.ml"
      },
      {
        "hash": "7e7c4d1a806f94de074ad064954456ab",
        "text": "\"请使用古雅体列表语法替代 [...]。\";\n\"空列表：空空如也\";\n\"有元素的列表：列开始 元素1 其一 元素2 其二 元素3 其三 列结束\";\n\"模式匹配：有首有尾 首名为「变量名」尾名为「尾部变量名」\";\n]",
        "lines": [
          "\"请使用古雅体列表语法替代 [...]。\";",
          "\"空列表：空空如也\";",
          "\"有元素的列表：列开始 元素1 其一 元素2 其二 元素3 其三 列结束\";",
          "\"模式匹配：有首有尾 首名为「变量名」尾名为「尾部变量名」\";",
          "]"
        ],
        "start_line": 55,
        "end_line": 59,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/constants/error_constants.ml"
      }
    ],
    "e6c8f7d744ff23d623500027c173bb11": [
      {
        "hash": "e6c8f7d744ff23d623500027c173bb11",
        "text": "\"空列表：空空如也\";\n\"有元素的列表：列开始 元素1 其一 元素2 其二 元素3 其三 列结束\";\n\"模式匹配：有首有尾 首名为「变量名」尾名为「尾部变量名」\";\n]",
        "lines": [
          "\"空列表：空空如也\";",
          "\"有元素的列表：列开始 元素1 其一 元素2 其二 元素3 其三 列结束\";",
          "\"模式匹配：有首有尾 首名为「变量名」尾名为「尾部变量名」\";",
          "]"
        ],
        "start_line": 93,
        "end_line": 96,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/utils/unified_error_formatter.ml"
      },
      {
        "hash": "e6c8f7d744ff23d623500027c173bb11",
        "text": "\"空列表：空空如也\";\n\"有元素的列表：列开始 元素1 其一 元素2 其二 元素3 其三 列结束\";\n\"模式匹配：有首有尾 首名为「变量名」尾名为「尾部变量名」\";\n]",
        "lines": [
          "\"空列表：空空如也\";",
          "\"有元素的列表：列开始 元素1 其一 元素2 其二 元素3 其三 列结束\";",
          "\"模式匹配：有首有尾 首名为「变量名」尾名为「尾部变量名」\";",
          "]"
        ],
        "start_line": 56,
        "end_line": 59,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/constants/error_constants.ml"
      }
    ],
    "33a238ce65e3d08602bf5410422167bc": [
      {
        "hash": "33a238ce65e3d08602bf5410422167bc",
        "text": "\"有元素的列表：列开始 元素1 其一 元素2 其二 元素3 其三 列结束\";\n\"模式匹配：有首有尾 首名为「变量名」尾名为「尾部变量名」\";\n]",
        "lines": [
          "\"有元素的列表：列开始 元素1 其一 元素2 其二 元素3 其三 列结束\";",
          "\"模式匹配：有首有尾 首名为「变量名」尾名为「尾部变量名」\";",
          "]"
        ],
        "start_line": 94,
        "end_line": 96,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/utils/unified_error_formatter.ml"
      },
      {
        "hash": "33a238ce65e3d08602bf5410422167bc",
        "text": "\"有元素的列表：列开始 元素1 其一 元素2 其二 元素3 其三 列结束\";\n\"模式匹配：有首有尾 首名为「变量名」尾名为「尾部变量名」\";\n]",
        "lines": [
          "\"有元素的列表：列开始 元素1 其一 元素2 其二 元素3 其三 列结束\";",
          "\"模式匹配：有首有尾 首名为「变量名」尾名为「尾部变量名」\";",
          "]"
        ],
        "start_line": 57,
        "end_line": 59,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/constants/error_constants.ml"
      }
    ],
    "42f3c5da586ab06c5bea6a985221afe6": [
      {
        "hash": "42f3c5da586ab06c5bea6a985221afe6",
        "text": "let character_should_exist char = concat_strings [ \"字符 \"; char; \" 应该存在\" ]\nlet character_should_not_exist char = concat_strings [ \"字符 \"; char; \" 不应该存在\" ]\nlet character_rhyme_group char = concat_strings [ \"字符 \"; char; \" 应属于鱼韵\" ]",
        "lines": [
          "let character_should_exist char = concat_strings [ \"字符 \"; char; \" 应该存在\" ]",
          "let character_should_not_exist char = concat_strings [ \"字符 \"; char; \" 不应该存在\" ]",
          "let character_rhyme_group char = concat_strings [ \"字符 \"; char; \" 应属于鱼韵\" ]"
        ],
        "start_line": 155,
        "end_line": 157,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/utils/unified_error_formatter.ml"
      },
      {
        "hash": "42f3c5da586ab06c5bea6a985221afe6",
        "text": "let character_should_exist char = concat_strings [ \"字符 \"; char; \" 应该存在\" ]\nlet character_should_not_exist char = concat_strings [ \"字符 \"; char; \" 不应该存在\" ]\nlet character_rhyme_group char = concat_strings [ \"字符 \"; char; \" 应属于鱼韵\" ]",
        "lines": [
          "let character_should_exist char = concat_strings [ \"字符 \"; char; \" 应该存在\" ]",
          "let character_should_not_exist char = concat_strings [ \"字符 \"; char; \" 不应该存在\" ]",
          "let character_rhyme_group char = concat_strings [ \"字符 \"; char; \" 应属于鱼韵\" ]"
        ],
        "start_line": 45,
        "end_line": 47,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/utils/formatting/error_formatter.ml"
      }
    ],
    "4a11d29753f0f6f524559527215dcf1e": [
      {
        "hash": "4a11d29753f0f6f524559527215dcf1e",
        "text": "parallelism_required = true;\nrhythm_weight = 0.3;\n}",
        "lines": [
          "parallelism_required = true;",
          "rhythm_weight = 0.3;",
          "}"
        ],
        "start_line": 10,
        "end_line": 12,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_standards.ml"
      },
      {
        "hash": "4a11d29753f0f6f524559527215dcf1e",
        "text": "parallelism_required = true;\nrhythm_weight = 0.3;\n}",
        "lines": [
          "parallelism_required = true;",
          "rhythm_weight = 0.3;",
          "}"
        ],
        "start_line": 544,
        "end_line": 546,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_artistic_core.ml"
      }
    ],
    "bbcca186aa1c4ad497f07c1cd4414cb0": [
      {
        "hash": "bbcca186aa1c4ad497f07c1cd4414cb0",
        "text": "let imagery_score = evaluate_imagery verse in\nlet rhythm_score = evaluate_rhythm verse in\nlet elegance_score = evaluate_elegance verse in",
        "lines": [
          "let imagery_score = evaluate_imagery verse in",
          "let rhythm_score = evaluate_rhythm verse in",
          "let elegance_score = evaluate_elegance verse in"
        ],
        "start_line": 32,
        "end_line": 34,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/artistic_guidance.ml"
      },
      {
        "hash": "bbcca186aa1c4ad497f07c1cd4414cb0",
        "text": "let imagery_score = evaluate_imagery verse in\nlet rhythm_score = evaluate_rhythm verse in\nlet elegance_score = evaluate_elegance verse in",
        "lines": [
          "let imagery_score = evaluate_imagery verse in",
          "let rhythm_score = evaluate_rhythm verse in",
          "let elegance_score = evaluate_elegance verse in"
        ],
        "start_line": 71,
        "end_line": 73,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/artistic_guidance.ml"
      },
      {
        "hash": "bbcca186aa1c4ad497f07c1cd4414cb0",
        "text": "let imagery_score = evaluate_imagery verse in\nlet rhythm_score = evaluate_rhythm verse in\nlet elegance_score = evaluate_elegance verse in",
        "lines": [
          "let imagery_score = evaluate_imagery verse in",
          "let rhythm_score = evaluate_rhythm verse in",
          "let elegance_score = evaluate_elegance verse in"
        ],
        "start_line": 86,
        "end_line": 88,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/form_evaluators.ml"
      },
      {
        "hash": "bbcca186aa1c4ad497f07c1cd4414cb0",
        "text": "let imagery_score = evaluate_imagery verse in\nlet rhythm_score = evaluate_rhythm verse in\nlet elegance_score = evaluate_elegance verse in",
        "lines": [
          "let imagery_score = evaluate_imagery verse in",
          "let rhythm_score = evaluate_rhythm verse in",
          "let elegance_score = evaluate_elegance verse in"
        ],
        "start_line": 337,
        "end_line": 339,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_artistic_core.ml"
      }
    ],
    "c7053e5e265e8ab62dd17600cbbee602": [
      {
        "hash": "c7053e5e265e8ab62dd17600cbbee602",
        "text": "imagery = imagery_score;\nrhythm = rhythm_score;\nelegance = elegance_score;\n}\nin",
        "lines": [
          "imagery = imagery_score;",
          "rhythm = rhythm_score;",
          "elegance = elegance_score;",
          "}",
          "in"
        ],
        "start_line": 41,
        "end_line": 45,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/artistic_guidance.ml"
      },
      {
        "hash": "c7053e5e265e8ab62dd17600cbbee602",
        "text": "imagery = imagery_score;\nrhythm = rhythm_score;\nelegance = elegance_score;\n}\nin",
        "lines": [
          "imagery = imagery_score;",
          "rhythm = rhythm_score;",
          "elegance = elegance_score;",
          "}",
          "in"
        ],
        "start_line": 81,
        "end_line": 85,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/artistic_guidance.ml"
      },
      {
        "hash": "c7053e5e265e8ab62dd17600cbbee602",
        "text": "imagery = imagery_score;\nrhythm = rhythm_score;\nelegance = elegance_score;\n}\nin",
        "lines": [
          "imagery = imagery_score;",
          "rhythm = rhythm_score;",
          "elegance = elegance_score;",
          "}",
          "in"
        ],
        "start_line": 95,
        "end_line": 99,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/form_evaluators.ml"
      }
    ],
    "feb2546cabd16c7732fd8c72401a3d21": [
      {
        "hash": "feb2546cabd16c7732fd8c72401a3d21",
        "text": "rhythm = rhythm_score;\nelegance = elegance_score;\n}\nin",
        "lines": [
          "rhythm = rhythm_score;",
          "elegance = elegance_score;",
          "}",
          "in"
        ],
        "start_line": 42,
        "end_line": 45,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/artistic_guidance.ml"
      },
      {
        "hash": "feb2546cabd16c7732fd8c72401a3d21",
        "text": "rhythm = rhythm_score;\nelegance = elegance_score;\n}\nin",
        "lines": [
          "rhythm = rhythm_score;",
          "elegance = elegance_score;",
          "}",
          "in"
        ],
        "start_line": 82,
        "end_line": 85,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/artistic_guidance.ml"
      },
      {
        "hash": "feb2546cabd16c7732fd8c72401a3d21",
        "text": "rhythm = rhythm_score;\nelegance = elegance_score;\n}\nin",
        "lines": [
          "rhythm = rhythm_score;",
          "elegance = elegance_score;",
          "}",
          "in"
        ],
        "start_line": 96,
        "end_line": 99,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/form_evaluators.ml"
      }
    ],
    "99d59a6e5f1d2a09556715a2cd172a63": [
      {
        "hash": "99d59a6e5f1d2a09556715a2cd172a63",
        "text": "elegance = elegance_score;\n}\nin",
        "lines": [
          "elegance = elegance_score;",
          "}",
          "in"
        ],
        "start_line": 43,
        "end_line": 45,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/artistic_guidance.ml"
      },
      {
        "hash": "99d59a6e5f1d2a09556715a2cd172a63",
        "text": "elegance = elegance_score;\n}\nin",
        "lines": [
          "elegance = elegance_score;",
          "}",
          "in"
        ],
        "start_line": 83,
        "end_line": 85,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/artistic_guidance.ml"
      },
      {
        "hash": "99d59a6e5f1d2a09556715a2cd172a63",
        "text": "elegance = elegance_score;\n}\nin",
        "lines": [
          "elegance = elegance_score;",
          "}",
          "in"
        ],
        "start_line": 97,
        "end_line": 99,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/form_evaluators.ml"
      }
    ],
    "d2a9baa98fc413bf96a368002bb2ceea": [
      {
        "hash": "d2a9baa98fc413bf96a368002bb2ceea",
        "text": "let rhyme_score = evaluate_rhyme_harmony verse in\nlet tone_score = evaluate_tonal_balance verse None in\nlet imagery_score = evaluate_imagery verse in\nlet rhythm_score = evaluate_rhythm verse in\nlet elegance_score = evaluate_elegance verse in",
        "lines": [
          "let rhyme_score = evaluate_rhyme_harmony verse in",
          "let tone_score = evaluate_tonal_balance verse None in",
          "let imagery_score = evaluate_imagery verse in",
          "let rhythm_score = evaluate_rhythm verse in",
          "let elegance_score = evaluate_elegance verse in"
        ],
        "start_line": 69,
        "end_line": 73,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/artistic_guidance.ml"
      },
      {
        "hash": "d2a9baa98fc413bf96a368002bb2ceea",
        "text": "let rhyme_score = evaluate_rhyme_harmony verse in\nlet tone_score = evaluate_tonal_balance verse None in\nlet imagery_score = evaluate_imagery verse in\nlet rhythm_score = evaluate_rhythm verse in\nlet elegance_score = evaluate_elegance verse in",
        "lines": [
          "let rhyme_score = evaluate_rhyme_harmony verse in",
          "let tone_score = evaluate_tonal_balance verse None in",
          "let imagery_score = evaluate_imagery verse in",
          "let rhythm_score = evaluate_rhythm verse in",
          "let elegance_score = evaluate_elegance verse in"
        ],
        "start_line": 84,
        "end_line": 88,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/form_evaluators.ml"
      }
    ],
    "ff5c1050bef6db61ff9aa4fee8ebb071": [
      {
        "hash": "ff5c1050bef6db61ff9aa4fee8ebb071",
        "text": "let tone_score = evaluate_tonal_balance verse None in\nlet imagery_score = evaluate_imagery verse in\nlet rhythm_score = evaluate_rhythm verse in\nlet elegance_score = evaluate_elegance verse in",
        "lines": [
          "let tone_score = evaluate_tonal_balance verse None in",
          "let imagery_score = evaluate_imagery verse in",
          "let rhythm_score = evaluate_rhythm verse in",
          "let elegance_score = evaluate_elegance verse in"
        ],
        "start_line": 70,
        "end_line": 73,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/artistic_guidance.ml"
      },
      {
        "hash": "ff5c1050bef6db61ff9aa4fee8ebb071",
        "text": "let tone_score = evaluate_tonal_balance verse None in\nlet imagery_score = evaluate_imagery verse in\nlet rhythm_score = evaluate_rhythm verse in\nlet elegance_score = evaluate_elegance verse in",
        "lines": [
          "let tone_score = evaluate_tonal_balance verse None in",
          "let imagery_score = evaluate_imagery verse in",
          "let rhythm_score = evaluate_rhythm verse in",
          "let elegance_score = evaluate_elegance verse in"
        ],
        "start_line": 85,
        "end_line": 88,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/form_evaluators.ml"
      }
    ],
    "d11eedb1330df9d15d256907d2ed7624": [
      {
        "hash": "d11eedb1330df9d15d256907d2ed7624",
        "text": "type rhyme_category =\n| PingSheng\n| ZeSheng\n| ShangSheng\n| QuSheng\n| RuSheng",
        "lines": [
          "type rhyme_category =",
          "| PingSheng",
          "| ZeSheng",
          "| ShangSheng",
          "| QuSheng",
          "| RuSheng"
        ],
        "start_line": 8,
        "end_line": 13,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_types.ml"
      },
      {
        "hash": "d11eedb1330df9d15d256907d2ed7624",
        "text": "type rhyme_category =\n| PingSheng\n| ZeSheng\n| ShangSheng\n| QuSheng\n| RuSheng",
        "lines": [
          "type rhyme_category =",
          "| PingSheng",
          "| ZeSheng",
          "| ShangSheng",
          "| QuSheng",
          "| RuSheng"
        ],
        "start_line": 15,
        "end_line": 20,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_types_consolidated.ml"
      },
      {
        "hash": "d11eedb1330df9d15d256907d2ed7624",
        "text": "type rhyme_category =\n| PingSheng\n| ZeSheng\n| ShangSheng\n| QuSheng\n| RuSheng",
        "lines": [
          "type rhyme_category =",
          "| PingSheng",
          "| ZeSheng",
          "| ShangSheng",
          "| QuSheng",
          "| RuSheng"
        ],
        "start_line": 15,
        "end_line": 20,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      },
      {
        "hash": "d11eedb1330df9d15d256907d2ed7624",
        "text": "type rhyme_category =\n| PingSheng\n| ZeSheng\n| ShangSheng\n| QuSheng\n| RuSheng",
        "lines": [
          "type rhyme_category =",
          "| PingSheng",
          "| ZeSheng",
          "| ShangSheng",
          "| QuSheng",
          "| RuSheng"
        ],
        "start_line": 9,
        "end_line": 14,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_core_types.ml"
      },
      {
        "hash": "d11eedb1330df9d15d256907d2ed7624",
        "text": "type rhyme_category =\n| PingSheng\n| ZeSheng\n| ShangSheng\n| QuSheng\n| RuSheng",
        "lines": [
          "type rhyme_category =",
          "| PingSheng",
          "| ZeSheng",
          "| ShangSheng",
          "| QuSheng",
          "| RuSheng"
        ],
        "start_line": 10,
        "end_line": 15,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_types.ml"
      },
      {
        "hash": "d11eedb1330df9d15d256907d2ed7624",
        "text": "type rhyme_category =\n| PingSheng\n| ZeSheng\n| ShangSheng\n| QuSheng\n| RuSheng",
        "lines": [
          "type rhyme_category =",
          "| PingSheng",
          "| ZeSheng",
          "| ShangSheng",
          "| QuSheng",
          "| RuSheng"
        ],
        "start_line": 14,
        "end_line": 19,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/expanded_rhyme_data.ml"
      },
      {
        "hash": "d11eedb1330df9d15d256907d2ed7624",
        "text": "type rhyme_category =\n| PingSheng\n| ZeSheng\n| ShangSheng\n| QuSheng\n| RuSheng",
        "lines": [
          "type rhyme_category =",
          "| PingSheng",
          "| ZeSheng",
          "| ShangSheng",
          "| QuSheng",
          "| RuSheng"
        ],
        "start_line": 10,
        "end_line": 15,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/an_yun_data.ml"
      },
      {
        "hash": "d11eedb1330df9d15d256907d2ed7624",
        "text": "type rhyme_category =\n| PingSheng\n| ZeSheng\n| ShangSheng\n| QuSheng\n| RuSheng",
        "lines": [
          "type rhyme_category =",
          "| PingSheng",
          "| ZeSheng",
          "| ShangSheng",
          "| QuSheng",
          "| RuSheng"
        ],
        "start_line": 12,
        "end_line": 17,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/rhyme_group_types.ml"
      },
      {
        "hash": "d11eedb1330df9d15d256907d2ed7624",
        "text": "type rhyme_category =\n| PingSheng\n| ZeSheng\n| ShangSheng\n| QuSheng\n| RuSheng",
        "lines": [
          "type rhyme_category =",
          "| PingSheng",
          "| ZeSheng",
          "| ShangSheng",
          "| QuSheng",
          "| RuSheng"
        ],
        "start_line": 13,
        "end_line": 18,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/ping_sheng/feng_rhyme_data.ml"
      },
      {
        "hash": "d11eedb1330df9d15d256907d2ed7624",
        "text": "type rhyme_category =\n| PingSheng\n| ZeSheng\n| ShangSheng\n| QuSheng\n| RuSheng",
        "lines": [
          "type rhyme_category =",
          "| PingSheng",
          "| ZeSheng",
          "| ShangSheng",
          "| QuSheng",
          "| RuSheng"
        ],
        "start_line": 10,
        "end_line": 15,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/ze_sheng/yue_rhyme_data.ml"
      },
      {
        "hash": "d11eedb1330df9d15d256907d2ed7624",
        "text": "type rhyme_category =\n| PingSheng\n| ZeSheng\n| ShangSheng\n| QuSheng\n| RuSheng",
        "lines": [
          "type rhyme_category =",
          "| PingSheng",
          "| ZeSheng",
          "| ShangSheng",
          "| QuSheng",
          "| RuSheng"
        ],
        "start_line": 10,
        "end_line": 15,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/ze_sheng/hui_rhyme_data.ml"
      },
      {
        "hash": "d11eedb1330df9d15d256907d2ed7624",
        "text": "type rhyme_category =\n| PingSheng\n| ZeSheng\n| ShangSheng\n| QuSheng\n| RuSheng",
        "lines": [
          "type rhyme_category =",
          "| PingSheng",
          "| ZeSheng",
          "| ShangSheng",
          "| QuSheng",
          "| RuSheng"
        ],
        "start_line": 10,
        "end_line": 15,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/ze_sheng/jiang_rhyme_data.ml"
      }
    ],
    "9b88262c2e5b52c2bef82e1216e33620": [
      {
        "hash": "9b88262c2e5b52c2bef82e1216e33620",
        "text": "| PingSheng\n| ZeSheng\n| ShangSheng\n| QuSheng\n| RuSheng",
        "lines": [
          "| PingSheng",
          "| ZeSheng",
          "| ShangSheng",
          "| QuSheng",
          "| RuSheng"
        ],
        "start_line": 9,
        "end_line": 13,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_types.ml"
      },
      {
        "hash": "9b88262c2e5b52c2bef82e1216e33620",
        "text": "| PingSheng\n| ZeSheng\n| ShangSheng\n| QuSheng\n| RuSheng",
        "lines": [
          "| PingSheng",
          "| ZeSheng",
          "| ShangSheng",
          "| QuSheng",
          "| RuSheng"
        ],
        "start_line": 16,
        "end_line": 20,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_types_consolidated.ml"
      },
      {
        "hash": "9b88262c2e5b52c2bef82e1216e33620",
        "text": "| PingSheng\n| ZeSheng\n| ShangSheng\n| QuSheng\n| RuSheng",
        "lines": [
          "| PingSheng",
          "| ZeSheng",
          "| ShangSheng",
          "| QuSheng",
          "| RuSheng"
        ],
        "start_line": 16,
        "end_line": 20,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      },
      {
        "hash": "9b88262c2e5b52c2bef82e1216e33620",
        "text": "| PingSheng\n| ZeSheng\n| ShangSheng\n| QuSheng\n| RuSheng",
        "lines": [
          "| PingSheng",
          "| ZeSheng",
          "| ShangSheng",
          "| QuSheng",
          "| RuSheng"
        ],
        "start_line": 10,
        "end_line": 14,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_core_types.ml"
      },
      {
        "hash": "9b88262c2e5b52c2bef82e1216e33620",
        "text": "| PingSheng\n| ZeSheng\n| ShangSheng\n| QuSheng\n| RuSheng",
        "lines": [
          "| PingSheng",
          "| ZeSheng",
          "| ShangSheng",
          "| QuSheng",
          "| RuSheng"
        ],
        "start_line": 11,
        "end_line": 15,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_types.ml"
      },
      {
        "hash": "9b88262c2e5b52c2bef82e1216e33620",
        "text": "| PingSheng\n| ZeSheng\n| ShangSheng\n| QuSheng\n| RuSheng",
        "lines": [
          "| PingSheng",
          "| ZeSheng",
          "| ShangSheng",
          "| QuSheng",
          "| RuSheng"
        ],
        "start_line": 14,
        "end_line": 18,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_api.ml"
      },
      {
        "hash": "9b88262c2e5b52c2bef82e1216e33620",
        "text": "| PingSheng\n| ZeSheng\n| ShangSheng\n| QuSheng\n| RuSheng",
        "lines": [
          "| PingSheng",
          "| ZeSheng",
          "| ShangSheng",
          "| QuSheng",
          "| RuSheng"
        ],
        "start_line": 15,
        "end_line": 19,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/expanded_rhyme_data.ml"
      },
      {
        "hash": "9b88262c2e5b52c2bef82e1216e33620",
        "text": "| PingSheng\n| ZeSheng\n| ShangSheng\n| QuSheng\n| RuSheng",
        "lines": [
          "| PingSheng",
          "| ZeSheng",
          "| ShangSheng",
          "| QuSheng",
          "| RuSheng"
        ],
        "start_line": 11,
        "end_line": 15,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/an_yun_data.ml"
      },
      {
        "hash": "9b88262c2e5b52c2bef82e1216e33620",
        "text": "| PingSheng\n| ZeSheng\n| ShangSheng\n| QuSheng\n| RuSheng",
        "lines": [
          "| PingSheng",
          "| ZeSheng",
          "| ShangSheng",
          "| QuSheng",
          "| RuSheng"
        ],
        "start_line": 13,
        "end_line": 17,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/rhyme_group_types.ml"
      },
      {
        "hash": "9b88262c2e5b52c2bef82e1216e33620",
        "text": "| PingSheng\n| ZeSheng\n| ShangSheng\n| QuSheng\n| RuSheng",
        "lines": [
          "| PingSheng",
          "| ZeSheng",
          "| ShangSheng",
          "| QuSheng",
          "| RuSheng"
        ],
        "start_line": 14,
        "end_line": 18,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/ping_sheng/feng_rhyme_data.ml"
      },
      {
        "hash": "9b88262c2e5b52c2bef82e1216e33620",
        "text": "| PingSheng\n| ZeSheng\n| ShangSheng\n| QuSheng\n| RuSheng",
        "lines": [
          "| PingSheng",
          "| ZeSheng",
          "| ShangSheng",
          "| QuSheng",
          "| RuSheng"
        ],
        "start_line": 11,
        "end_line": 15,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/ze_sheng/yue_rhyme_data.ml"
      },
      {
        "hash": "9b88262c2e5b52c2bef82e1216e33620",
        "text": "| PingSheng\n| ZeSheng\n| ShangSheng\n| QuSheng\n| RuSheng",
        "lines": [
          "| PingSheng",
          "| ZeSheng",
          "| ShangSheng",
          "| QuSheng",
          "| RuSheng"
        ],
        "start_line": 11,
        "end_line": 15,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/ze_sheng/hui_rhyme_data.ml"
      },
      {
        "hash": "9b88262c2e5b52c2bef82e1216e33620",
        "text": "| PingSheng\n| ZeSheng\n| ShangSheng\n| QuSheng\n| RuSheng",
        "lines": [
          "| PingSheng",
          "| ZeSheng",
          "| ShangSheng",
          "| QuSheng",
          "| RuSheng"
        ],
        "start_line": 11,
        "end_line": 15,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/ze_sheng/jiang_rhyme_data.ml"
      }
    ],
    "d38c231798cbfa2061f1001bae59f95e": [
      {
        "hash": "d38c231798cbfa2061f1001bae59f95e",
        "text": "| ZeSheng\n| ShangSheng\n| QuSheng\n| RuSheng",
        "lines": [
          "| ZeSheng",
          "| ShangSheng",
          "| QuSheng",
          "| RuSheng"
        ],
        "start_line": 10,
        "end_line": 13,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_types.ml"
      },
      {
        "hash": "d38c231798cbfa2061f1001bae59f95e",
        "text": "| ZeSheng\n| ShangSheng\n| QuSheng\n| RuSheng",
        "lines": [
          "| ZeSheng",
          "| ShangSheng",
          "| QuSheng",
          "| RuSheng"
        ],
        "start_line": 17,
        "end_line": 20,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_types_consolidated.ml"
      },
      {
        "hash": "d38c231798cbfa2061f1001bae59f95e",
        "text": "| ZeSheng\n| ShangSheng\n| QuSheng\n| RuSheng",
        "lines": [
          "| ZeSheng",
          "| ShangSheng",
          "| QuSheng",
          "| RuSheng"
        ],
        "start_line": 17,
        "end_line": 20,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      },
      {
        "hash": "d38c231798cbfa2061f1001bae59f95e",
        "text": "| ZeSheng\n| ShangSheng\n| QuSheng\n| RuSheng",
        "lines": [
          "| ZeSheng",
          "| ShangSheng",
          "| QuSheng",
          "| RuSheng"
        ],
        "start_line": 11,
        "end_line": 14,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_core_types.ml"
      },
      {
        "hash": "d38c231798cbfa2061f1001bae59f95e",
        "text": "| ZeSheng\n| ShangSheng\n| QuSheng\n| RuSheng",
        "lines": [
          "| ZeSheng",
          "| ShangSheng",
          "| QuSheng",
          "| RuSheng"
        ],
        "start_line": 12,
        "end_line": 15,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_types.ml"
      },
      {
        "hash": "d38c231798cbfa2061f1001bae59f95e",
        "text": "| ZeSheng\n| ShangSheng\n| QuSheng\n| RuSheng",
        "lines": [
          "| ZeSheng",
          "| ShangSheng",
          "| QuSheng",
          "| RuSheng"
        ],
        "start_line": 15,
        "end_line": 18,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_api.ml"
      },
      {
        "hash": "d38c231798cbfa2061f1001bae59f95e",
        "text": "| ZeSheng\n| ShangSheng\n| QuSheng\n| RuSheng",
        "lines": [
          "| ZeSheng",
          "| ShangSheng",
          "| QuSheng",
          "| RuSheng"
        ],
        "start_line": 16,
        "end_line": 19,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/expanded_rhyme_data.ml"
      },
      {
        "hash": "d38c231798cbfa2061f1001bae59f95e",
        "text": "| ZeSheng\n| ShangSheng\n| QuSheng\n| RuSheng",
        "lines": [
          "| ZeSheng",
          "| ShangSheng",
          "| QuSheng",
          "| RuSheng"
        ],
        "start_line": 12,
        "end_line": 15,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/an_yun_data.ml"
      },
      {
        "hash": "d38c231798cbfa2061f1001bae59f95e",
        "text": "| ZeSheng\n| ShangSheng\n| QuSheng\n| RuSheng",
        "lines": [
          "| ZeSheng",
          "| ShangSheng",
          "| QuSheng",
          "| RuSheng"
        ],
        "start_line": 14,
        "end_line": 17,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/rhyme_group_types.ml"
      },
      {
        "hash": "d38c231798cbfa2061f1001bae59f95e",
        "text": "| ZeSheng\n| ShangSheng\n| QuSheng\n| RuSheng",
        "lines": [
          "| ZeSheng",
          "| ShangSheng",
          "| QuSheng",
          "| RuSheng"
        ],
        "start_line": 15,
        "end_line": 18,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/ping_sheng/feng_rhyme_data.ml"
      },
      {
        "hash": "d38c231798cbfa2061f1001bae59f95e",
        "text": "| ZeSheng\n| ShangSheng\n| QuSheng\n| RuSheng",
        "lines": [
          "| ZeSheng",
          "| ShangSheng",
          "| QuSheng",
          "| RuSheng"
        ],
        "start_line": 12,
        "end_line": 15,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/ze_sheng/yue_rhyme_data.ml"
      },
      {
        "hash": "d38c231798cbfa2061f1001bae59f95e",
        "text": "| ZeSheng\n| ShangSheng\n| QuSheng\n| RuSheng",
        "lines": [
          "| ZeSheng",
          "| ShangSheng",
          "| QuSheng",
          "| RuSheng"
        ],
        "start_line": 12,
        "end_line": 15,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/ze_sheng/hui_rhyme_data.ml"
      },
      {
        "hash": "d38c231798cbfa2061f1001bae59f95e",
        "text": "| ZeSheng\n| ShangSheng\n| QuSheng\n| RuSheng",
        "lines": [
          "| ZeSheng",
          "| ShangSheng",
          "| QuSheng",
          "| RuSheng"
        ],
        "start_line": 12,
        "end_line": 15,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/ze_sheng/jiang_rhyme_data.ml"
      }
    ],
    "b7b60e158ec3239e750df92505c75a43": [
      {
        "hash": "b7b60e158ec3239e750df92505c75a43",
        "text": "| ShangSheng\n| QuSheng\n| RuSheng",
        "lines": [
          "| ShangSheng",
          "| QuSheng",
          "| RuSheng"
        ],
        "start_line": 11,
        "end_line": 13,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_types.ml"
      },
      {
        "hash": "b7b60e158ec3239e750df92505c75a43",
        "text": "| ShangSheng\n| QuSheng\n| RuSheng",
        "lines": [
          "| ShangSheng",
          "| QuSheng",
          "| RuSheng"
        ],
        "start_line": 18,
        "end_line": 20,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_types_consolidated.ml"
      },
      {
        "hash": "b7b60e158ec3239e750df92505c75a43",
        "text": "| ShangSheng\n| QuSheng\n| RuSheng",
        "lines": [
          "| ShangSheng",
          "| QuSheng",
          "| RuSheng"
        ],
        "start_line": 18,
        "end_line": 20,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      },
      {
        "hash": "b7b60e158ec3239e750df92505c75a43",
        "text": "| ShangSheng\n| QuSheng\n| RuSheng",
        "lines": [
          "| ShangSheng",
          "| QuSheng",
          "| RuSheng"
        ],
        "start_line": 12,
        "end_line": 14,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_core_types.ml"
      },
      {
        "hash": "b7b60e158ec3239e750df92505c75a43",
        "text": "| ShangSheng\n| QuSheng\n| RuSheng",
        "lines": [
          "| ShangSheng",
          "| QuSheng",
          "| RuSheng"
        ],
        "start_line": 13,
        "end_line": 15,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_types.ml"
      },
      {
        "hash": "b7b60e158ec3239e750df92505c75a43",
        "text": "| ShangSheng\n| QuSheng\n| RuSheng",
        "lines": [
          "| ShangSheng",
          "| QuSheng",
          "| RuSheng"
        ],
        "start_line": 16,
        "end_line": 18,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_api.ml"
      },
      {
        "hash": "b7b60e158ec3239e750df92505c75a43",
        "text": "| ShangSheng\n| QuSheng\n| RuSheng",
        "lines": [
          "| ShangSheng",
          "| QuSheng",
          "| RuSheng"
        ],
        "start_line": 17,
        "end_line": 19,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/expanded_rhyme_data.ml"
      },
      {
        "hash": "b7b60e158ec3239e750df92505c75a43",
        "text": "| ShangSheng\n| QuSheng\n| RuSheng",
        "lines": [
          "| ShangSheng",
          "| QuSheng",
          "| RuSheng"
        ],
        "start_line": 13,
        "end_line": 15,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/an_yun_data.ml"
      },
      {
        "hash": "b7b60e158ec3239e750df92505c75a43",
        "text": "| ShangSheng\n| QuSheng\n| RuSheng",
        "lines": [
          "| ShangSheng",
          "| QuSheng",
          "| RuSheng"
        ],
        "start_line": 15,
        "end_line": 17,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/rhyme_group_types.ml"
      },
      {
        "hash": "b7b60e158ec3239e750df92505c75a43",
        "text": "| ShangSheng\n| QuSheng\n| RuSheng",
        "lines": [
          "| ShangSheng",
          "| QuSheng",
          "| RuSheng"
        ],
        "start_line": 16,
        "end_line": 18,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/ping_sheng/feng_rhyme_data.ml"
      },
      {
        "hash": "b7b60e158ec3239e750df92505c75a43",
        "text": "| ShangSheng\n| QuSheng\n| RuSheng",
        "lines": [
          "| ShangSheng",
          "| QuSheng",
          "| RuSheng"
        ],
        "start_line": 13,
        "end_line": 15,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/ze_sheng/yue_rhyme_data.ml"
      },
      {
        "hash": "b7b60e158ec3239e750df92505c75a43",
        "text": "| ShangSheng\n| QuSheng\n| RuSheng",
        "lines": [
          "| ShangSheng",
          "| QuSheng",
          "| RuSheng"
        ],
        "start_line": 13,
        "end_line": 15,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/ze_sheng/hui_rhyme_data.ml"
      },
      {
        "hash": "b7b60e158ec3239e750df92505c75a43",
        "text": "| ShangSheng\n| QuSheng\n| RuSheng",
        "lines": [
          "| ShangSheng",
          "| QuSheng",
          "| RuSheng"
        ],
        "start_line": 13,
        "end_line": 15,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/ze_sheng/jiang_rhyme_data.ml"
      }
    ],
    "c588587b72070ca3d12c625acc817c29": [
      {
        "hash": "c588587b72070ca3d12c625acc817c29",
        "text": "| YuRhyme\n| HuaRhyme\n| FengRhyme\n| YueRhyme\n| JiangRhyme\n| HuiRhyme\n| UnknownRhyme",
        "lines": [
          "| YuRhyme",
          "| HuaRhyme",
          "| FengRhyme",
          "| YueRhyme",
          "| JiangRhyme",
          "| HuiRhyme",
          "| UnknownRhyme"
        ],
        "start_line": 23,
        "end_line": 29,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_types.ml"
      },
      {
        "hash": "c588587b72070ca3d12c625acc817c29",
        "text": "| YuRhyme\n| HuaRhyme\n| FengRhyme\n| YueRhyme\n| JiangRhyme\n| HuiRhyme\n| UnknownRhyme",
        "lines": [
          "| YuRhyme",
          "| HuaRhyme",
          "| FengRhyme",
          "| YueRhyme",
          "| JiangRhyme",
          "| HuiRhyme",
          "| UnknownRhyme"
        ],
        "start_line": 28,
        "end_line": 34,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_types_consolidated.ml"
      },
      {
        "hash": "c588587b72070ca3d12c625acc817c29",
        "text": "| YuRhyme\n| HuaRhyme\n| FengRhyme\n| YueRhyme\n| JiangRhyme\n| HuiRhyme\n| UnknownRhyme",
        "lines": [
          "| YuRhyme",
          "| HuaRhyme",
          "| FengRhyme",
          "| YueRhyme",
          "| JiangRhyme",
          "| HuiRhyme",
          "| UnknownRhyme"
        ],
        "start_line": 20,
        "end_line": 26,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_data_loader.ml"
      }
    ],
    "249bc9bee7633e3f5c93bacde9a1a580": [
      {
        "hash": "249bc9bee7633e3f5c93bacde9a1a580",
        "text": "| HuaRhyme\n| FengRhyme\n| YueRhyme\n| JiangRhyme\n| HuiRhyme\n| UnknownRhyme",
        "lines": [
          "| HuaRhyme",
          "| FengRhyme",
          "| YueRhyme",
          "| JiangRhyme",
          "| HuiRhyme",
          "| UnknownRhyme"
        ],
        "start_line": 24,
        "end_line": 29,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_types.ml"
      },
      {
        "hash": "249bc9bee7633e3f5c93bacde9a1a580",
        "text": "| HuaRhyme\n| FengRhyme\n| YueRhyme\n| JiangRhyme\n| HuiRhyme\n| UnknownRhyme",
        "lines": [
          "| HuaRhyme",
          "| FengRhyme",
          "| YueRhyme",
          "| JiangRhyme",
          "| HuiRhyme",
          "| UnknownRhyme"
        ],
        "start_line": 29,
        "end_line": 34,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_types_consolidated.ml"
      },
      {
        "hash": "249bc9bee7633e3f5c93bacde9a1a580",
        "text": "| HuaRhyme\n| FengRhyme\n| YueRhyme\n| JiangRhyme\n| HuiRhyme\n| UnknownRhyme",
        "lines": [
          "| HuaRhyme",
          "| FengRhyme",
          "| YueRhyme",
          "| JiangRhyme",
          "| HuiRhyme",
          "| UnknownRhyme"
        ],
        "start_line": 21,
        "end_line": 26,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_data_loader.ml"
      }
    ],
    "a1d4fc32a63db226281413c62e7d5113": [
      {
        "hash": "a1d4fc32a63db226281413c62e7d5113",
        "text": "| FengRhyme\n| YueRhyme\n| JiangRhyme\n| HuiRhyme\n| UnknownRhyme",
        "lines": [
          "| FengRhyme",
          "| YueRhyme",
          "| JiangRhyme",
          "| HuiRhyme",
          "| UnknownRhyme"
        ],
        "start_line": 25,
        "end_line": 29,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_types.ml"
      },
      {
        "hash": "a1d4fc32a63db226281413c62e7d5113",
        "text": "| FengRhyme\n| YueRhyme\n| JiangRhyme\n| HuiRhyme\n| UnknownRhyme",
        "lines": [
          "| FengRhyme",
          "| YueRhyme",
          "| JiangRhyme",
          "| HuiRhyme",
          "| UnknownRhyme"
        ],
        "start_line": 30,
        "end_line": 34,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_types_consolidated.ml"
      },
      {
        "hash": "a1d4fc32a63db226281413c62e7d5113",
        "text": "| FengRhyme\n| YueRhyme\n| JiangRhyme\n| HuiRhyme\n| UnknownRhyme",
        "lines": [
          "| FengRhyme",
          "| YueRhyme",
          "| JiangRhyme",
          "| HuiRhyme",
          "| UnknownRhyme"
        ],
        "start_line": 22,
        "end_line": 26,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_data_loader.ml"
      }
    ],
    "5969d9cf53a4f47e9915f94f47f04087": [
      {
        "hash": "5969d9cf53a4f47e9915f94f47f04087",
        "text": "| YueRhyme\n| JiangRhyme\n| HuiRhyme\n| UnknownRhyme",
        "lines": [
          "| YueRhyme",
          "| JiangRhyme",
          "| HuiRhyme",
          "| UnknownRhyme"
        ],
        "start_line": 26,
        "end_line": 29,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_types.ml"
      },
      {
        "hash": "5969d9cf53a4f47e9915f94f47f04087",
        "text": "| YueRhyme\n| JiangRhyme\n| HuiRhyme\n| UnknownRhyme",
        "lines": [
          "| YueRhyme",
          "| JiangRhyme",
          "| HuiRhyme",
          "| UnknownRhyme"
        ],
        "start_line": 31,
        "end_line": 34,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_types_consolidated.ml"
      },
      {
        "hash": "5969d9cf53a4f47e9915f94f47f04087",
        "text": "| YueRhyme\n| JiangRhyme\n| HuiRhyme\n| UnknownRhyme",
        "lines": [
          "| YueRhyme",
          "| JiangRhyme",
          "| HuiRhyme",
          "| UnknownRhyme"
        ],
        "start_line": 23,
        "end_line": 26,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_data_loader.ml"
      }
    ],
    "c3e63cf0d3e799e51a6d834c371bd6fa": [
      {
        "hash": "c3e63cf0d3e799e51a6d834c371bd6fa",
        "text": "| JiangRhyme\n| HuiRhyme\n| UnknownRhyme",
        "lines": [
          "| JiangRhyme",
          "| HuiRhyme",
          "| UnknownRhyme"
        ],
        "start_line": 27,
        "end_line": 29,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_types.ml"
      },
      {
        "hash": "c3e63cf0d3e799e51a6d834c371bd6fa",
        "text": "| JiangRhyme\n| HuiRhyme\n| UnknownRhyme",
        "lines": [
          "| JiangRhyme",
          "| HuiRhyme",
          "| UnknownRhyme"
        ],
        "start_line": 32,
        "end_line": 34,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_types_consolidated.ml"
      },
      {
        "hash": "c3e63cf0d3e799e51a6d834c371bd6fa",
        "text": "| JiangRhyme\n| HuiRhyme\n| UnknownRhyme",
        "lines": [
          "| JiangRhyme",
          "| HuiRhyme",
          "| UnknownRhyme"
        ],
        "start_line": 34,
        "end_line": 36,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      },
      {
        "hash": "c3e63cf0d3e799e51a6d834c371bd6fa",
        "text": "| JiangRhyme\n| HuiRhyme\n| UnknownRhyme",
        "lines": [
          "| JiangRhyme",
          "| HuiRhyme",
          "| UnknownRhyme"
        ],
        "start_line": 28,
        "end_line": 30,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_core_types.ml"
      },
      {
        "hash": "c3e63cf0d3e799e51a6d834c371bd6fa",
        "text": "| JiangRhyme\n| HuiRhyme\n| UnknownRhyme",
        "lines": [
          "| JiangRhyme",
          "| HuiRhyme",
          "| UnknownRhyme"
        ],
        "start_line": 29,
        "end_line": 31,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_types.ml"
      },
      {
        "hash": "c3e63cf0d3e799e51a6d834c371bd6fa",
        "text": "| JiangRhyme\n| HuiRhyme\n| UnknownRhyme",
        "lines": [
          "| JiangRhyme",
          "| HuiRhyme",
          "| UnknownRhyme"
        ],
        "start_line": 31,
        "end_line": 33,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_api.ml"
      },
      {
        "hash": "c3e63cf0d3e799e51a6d834c371bd6fa",
        "text": "| JiangRhyme\n| HuiRhyme\n| UnknownRhyme",
        "lines": [
          "| JiangRhyme",
          "| HuiRhyme",
          "| UnknownRhyme"
        ],
        "start_line": 24,
        "end_line": 26,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_data_loader.ml"
      },
      {
        "hash": "c3e63cf0d3e799e51a6d834c371bd6fa",
        "text": "| JiangRhyme\n| HuiRhyme\n| UnknownRhyme",
        "lines": [
          "| JiangRhyme",
          "| HuiRhyme",
          "| UnknownRhyme"
        ],
        "start_line": 32,
        "end_line": 34,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/expanded_rhyme_data.ml"
      },
      {
        "hash": "c3e63cf0d3e799e51a6d834c371bd6fa",
        "text": "| JiangRhyme\n| HuiRhyme\n| UnknownRhyme",
        "lines": [
          "| JiangRhyme",
          "| HuiRhyme",
          "| UnknownRhyme"
        ],
        "start_line": 33,
        "end_line": 35,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/rhyme_group_types.ml"
      },
      {
        "hash": "c3e63cf0d3e799e51a6d834c371bd6fa",
        "text": "| JiangRhyme\n| HuiRhyme\n| UnknownRhyme",
        "lines": [
          "| JiangRhyme",
          "| HuiRhyme",
          "| UnknownRhyme"
        ],
        "start_line": 31,
        "end_line": 33,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/ping_sheng/feng_rhyme_data.ml"
      },
      {
        "hash": "c3e63cf0d3e799e51a6d834c371bd6fa",
        "text": "| JiangRhyme\n| HuiRhyme\n| UnknownRhyme",
        "lines": [
          "| JiangRhyme",
          "| HuiRhyme",
          "| UnknownRhyme"
        ],
        "start_line": 28,
        "end_line": 30,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/ze_sheng/yue_rhyme_data.ml"
      },
      {
        "hash": "c3e63cf0d3e799e51a6d834c371bd6fa",
        "text": "| JiangRhyme\n| HuiRhyme\n| UnknownRhyme",
        "lines": [
          "| JiangRhyme",
          "| HuiRhyme",
          "| UnknownRhyme"
        ],
        "start_line": 28,
        "end_line": 30,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/ze_sheng/hui_rhyme_data.ml"
      },
      {
        "hash": "c3e63cf0d3e799e51a6d834c371bd6fa",
        "text": "| JiangRhyme\n| HuiRhyme\n| UnknownRhyme",
        "lines": [
          "| JiangRhyme",
          "| HuiRhyme",
          "| UnknownRhyme"
        ],
        "start_line": 28,
        "end_line": 30,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/ze_sheng/jiang_rhyme_data.ml"
      }
    ],
    "2cefd36ac6b05178741b679760c18576": [
      {
        "hash": "2cefd36ac6b05178741b679760c18576",
        "text": "type rhyme_analysis_report = {\nverse : string;\nrhyme_ending : char option;\nrhyme_group : rhyme_group;\nrhyme_category : rhyme_category;\nchar_analysis : (char * rhyme_category * rhyme_group) list;\n}",
        "lines": [
          "type rhyme_analysis_report = {",
          "verse : string;",
          "rhyme_ending : char option;",
          "rhyme_group : rhyme_group;",
          "rhyme_category : rhyme_category;",
          "char_analysis : (char * rhyme_category * rhyme_group) list;",
          "}"
        ],
        "start_line": 34,
        "end_line": 40,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_types.ml"
      },
      {
        "hash": "2cefd36ac6b05178741b679760c18576",
        "text": "type rhyme_analysis_report = {\nverse : string;\nrhyme_ending : char option;\nrhyme_group : rhyme_group;\nrhyme_category : rhyme_category;\nchar_analysis : (char * rhyme_category * rhyme_group) list;\n}",
        "lines": [
          "type rhyme_analysis_report = {",
          "verse : string;",
          "rhyme_ending : char option;",
          "rhyme_group : rhyme_group;",
          "rhyme_category : rhyme_category;",
          "char_analysis : (char * rhyme_category * rhyme_group) list;",
          "}"
        ],
        "start_line": 36,
        "end_line": 42,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_types_consolidated.ml"
      },
      {
        "hash": "2cefd36ac6b05178741b679760c18576",
        "text": "type rhyme_analysis_report = {\nverse : string;\nrhyme_ending : char option;\nrhyme_group : rhyme_group;\nrhyme_category : rhyme_category;\nchar_analysis : (char * rhyme_category * rhyme_group) list;\n}",
        "lines": [
          "type rhyme_analysis_report = {",
          "verse : string;",
          "rhyme_ending : char option;",
          "rhyme_group : rhyme_group;",
          "rhyme_category : rhyme_category;",
          "char_analysis : (char * rhyme_category * rhyme_group) list;",
          "}"
        ],
        "start_line": 75,
        "end_line": 81,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_pattern.ml"
      },
      {
        "hash": "2cefd36ac6b05178741b679760c18576",
        "text": "type rhyme_analysis_report = {\nverse : string;\nrhyme_ending : char option;\nrhyme_group : rhyme_group;\nrhyme_category : rhyme_category;\nchar_analysis : (char * rhyme_category * rhyme_group) list;\n}",
        "lines": [
          "type rhyme_analysis_report = {",
          "verse : string;",
          "rhyme_ending : char option;",
          "rhyme_group : rhyme_group;",
          "rhyme_category : rhyme_category;",
          "char_analysis : (char * rhyme_category * rhyme_group) list;",
          "}"
        ],
        "start_line": 33,
        "end_line": 39,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_core_types.ml"
      }
    ],
    "1ce172042ae99174f94771e4d3b5ee92": [
      {
        "hash": "1ce172042ae99174f94771e4d3b5ee92",
        "text": "verse : string;\nrhyme_ending : char option;\nrhyme_group : rhyme_group;\nrhyme_category : rhyme_category;\nchar_analysis : (char * rhyme_category * rhyme_group) list;\n}",
        "lines": [
          "verse : string;",
          "rhyme_ending : char option;",
          "rhyme_group : rhyme_group;",
          "rhyme_category : rhyme_category;",
          "char_analysis : (char * rhyme_category * rhyme_group) list;",
          "}"
        ],
        "start_line": 35,
        "end_line": 40,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_types.ml"
      },
      {
        "hash": "1ce172042ae99174f94771e4d3b5ee92",
        "text": "verse : string;\nrhyme_ending : char option;\nrhyme_group : rhyme_group;\nrhyme_category : rhyme_category;\nchar_analysis : (char * rhyme_category * rhyme_group) list;\n}",
        "lines": [
          "verse : string;",
          "rhyme_ending : char option;",
          "rhyme_group : rhyme_group;",
          "rhyme_category : rhyme_category;",
          "char_analysis : (char * rhyme_category * rhyme_group) list;",
          "}"
        ],
        "start_line": 37,
        "end_line": 42,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_types_consolidated.ml"
      },
      {
        "hash": "1ce172042ae99174f94771e4d3b5ee92",
        "text": "verse : string;\nrhyme_ending : char option;\nrhyme_group : rhyme_group;\nrhyme_category : rhyme_category;\nchar_analysis : (char * rhyme_category * rhyme_group) list;\n}",
        "lines": [
          "verse : string;",
          "rhyme_ending : char option;",
          "rhyme_group : rhyme_group;",
          "rhyme_category : rhyme_category;",
          "char_analysis : (char * rhyme_category * rhyme_group) list;",
          "}"
        ],
        "start_line": 76,
        "end_line": 81,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_pattern.ml"
      },
      {
        "hash": "1ce172042ae99174f94771e4d3b5ee92",
        "text": "verse : string;\nrhyme_ending : char option;\nrhyme_group : rhyme_group;\nrhyme_category : rhyme_category;\nchar_analysis : (char * rhyme_category * rhyme_group) list;\n}",
        "lines": [
          "verse : string;",
          "rhyme_ending : char option;",
          "rhyme_group : rhyme_group;",
          "rhyme_category : rhyme_category;",
          "char_analysis : (char * rhyme_category * rhyme_group) list;",
          "}"
        ],
        "start_line": 34,
        "end_line": 39,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_core_types.ml"
      }
    ],
    "33d581b1162a92817877d47fab0f7327": [
      {
        "hash": "33d581b1162a92817877d47fab0f7327",
        "text": "rhyme_ending : char option;\nrhyme_group : rhyme_group;\nrhyme_category : rhyme_category;\nchar_analysis : (char * rhyme_category * rhyme_group) list;\n}",
        "lines": [
          "rhyme_ending : char option;",
          "rhyme_group : rhyme_group;",
          "rhyme_category : rhyme_category;",
          "char_analysis : (char * rhyme_category * rhyme_group) list;",
          "}"
        ],
        "start_line": 36,
        "end_line": 40,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_types.ml"
      },
      {
        "hash": "33d581b1162a92817877d47fab0f7327",
        "text": "rhyme_ending : char option;\nrhyme_group : rhyme_group;\nrhyme_category : rhyme_category;\nchar_analysis : (char * rhyme_category * rhyme_group) list;\n}",
        "lines": [
          "rhyme_ending : char option;",
          "rhyme_group : rhyme_group;",
          "rhyme_category : rhyme_category;",
          "char_analysis : (char * rhyme_category * rhyme_group) list;",
          "}"
        ],
        "start_line": 38,
        "end_line": 42,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_types_consolidated.ml"
      },
      {
        "hash": "33d581b1162a92817877d47fab0f7327",
        "text": "rhyme_ending : char option;\nrhyme_group : rhyme_group;\nrhyme_category : rhyme_category;\nchar_analysis : (char * rhyme_category * rhyme_group) list;\n}",
        "lines": [
          "rhyme_ending : char option;",
          "rhyme_group : rhyme_group;",
          "rhyme_category : rhyme_category;",
          "char_analysis : (char * rhyme_category * rhyme_group) list;",
          "}"
        ],
        "start_line": 77,
        "end_line": 81,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_pattern.ml"
      },
      {
        "hash": "33d581b1162a92817877d47fab0f7327",
        "text": "rhyme_ending : char option;\nrhyme_group : rhyme_group;\nrhyme_category : rhyme_category;\nchar_analysis : (char * rhyme_category * rhyme_group) list;\n}",
        "lines": [
          "rhyme_ending : char option;",
          "rhyme_group : rhyme_group;",
          "rhyme_category : rhyme_category;",
          "char_analysis : (char * rhyme_category * rhyme_group) list;",
          "}"
        ],
        "start_line": 35,
        "end_line": 39,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_core_types.ml"
      }
    ],
    "10fe612720519b6faa641cab2b5bc9af": [
      {
        "hash": "10fe612720519b6faa641cab2b5bc9af",
        "text": "rhyme_group : rhyme_group;\nrhyme_category : rhyme_category;\nchar_analysis : (char * rhyme_category * rhyme_group) list;\n}",
        "lines": [
          "rhyme_group : rhyme_group;",
          "rhyme_category : rhyme_category;",
          "char_analysis : (char * rhyme_category * rhyme_group) list;",
          "}"
        ],
        "start_line": 37,
        "end_line": 40,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_types.ml"
      },
      {
        "hash": "10fe612720519b6faa641cab2b5bc9af",
        "text": "rhyme_group : rhyme_group;\nrhyme_category : rhyme_category;\nchar_analysis : (char * rhyme_category * rhyme_group) list;\n}",
        "lines": [
          "rhyme_group : rhyme_group;",
          "rhyme_category : rhyme_category;",
          "char_analysis : (char * rhyme_category * rhyme_group) list;",
          "}"
        ],
        "start_line": 39,
        "end_line": 42,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_types_consolidated.ml"
      },
      {
        "hash": "10fe612720519b6faa641cab2b5bc9af",
        "text": "rhyme_group : rhyme_group;\nrhyme_category : rhyme_category;\nchar_analysis : (char * rhyme_category * rhyme_group) list;\n}",
        "lines": [
          "rhyme_group : rhyme_group;",
          "rhyme_category : rhyme_category;",
          "char_analysis : (char * rhyme_category * rhyme_group) list;",
          "}"
        ],
        "start_line": 78,
        "end_line": 81,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_pattern.ml"
      },
      {
        "hash": "10fe612720519b6faa641cab2b5bc9af",
        "text": "rhyme_group : rhyme_group;\nrhyme_category : rhyme_category;\nchar_analysis : (char * rhyme_category * rhyme_group) list;\n}",
        "lines": [
          "rhyme_group : rhyme_group;",
          "rhyme_category : rhyme_category;",
          "char_analysis : (char * rhyme_category * rhyme_group) list;",
          "}"
        ],
        "start_line": 36,
        "end_line": 39,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_core_types.ml"
      }
    ],
    "e9d2636d08bfa1f223d5df4807c54038": [
      {
        "hash": "e9d2636d08bfa1f223d5df4807c54038",
        "text": "rhyme_category : rhyme_category;\nchar_analysis : (char * rhyme_category * rhyme_group) list;\n}",
        "lines": [
          "rhyme_category : rhyme_category;",
          "char_analysis : (char * rhyme_category * rhyme_group) list;",
          "}"
        ],
        "start_line": 38,
        "end_line": 40,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_types.ml"
      },
      {
        "hash": "e9d2636d08bfa1f223d5df4807c54038",
        "text": "rhyme_category : rhyme_category;\nchar_analysis : (char * rhyme_category * rhyme_group) list;\n}",
        "lines": [
          "rhyme_category : rhyme_category;",
          "char_analysis : (char * rhyme_category * rhyme_group) list;",
          "}"
        ],
        "start_line": 40,
        "end_line": 42,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_types_consolidated.ml"
      },
      {
        "hash": "e9d2636d08bfa1f223d5df4807c54038",
        "text": "rhyme_category : rhyme_category;\nchar_analysis : (char * rhyme_category * rhyme_group) list;\n}",
        "lines": [
          "rhyme_category : rhyme_category;",
          "char_analysis : (char * rhyme_category * rhyme_group) list;",
          "}"
        ],
        "start_line": 79,
        "end_line": 81,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_pattern.ml"
      },
      {
        "hash": "e9d2636d08bfa1f223d5df4807c54038",
        "text": "rhyme_category : rhyme_category;\nchar_analysis : (char * rhyme_category * rhyme_group) list;\n}",
        "lines": [
          "rhyme_category : rhyme_category;",
          "char_analysis : (char * rhyme_category * rhyme_group) list;",
          "}"
        ],
        "start_line": 37,
        "end_line": 39,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_core_types.ml"
      }
    ],
    "ba14c39c99b6e5bc4ea167e66cc467c6": [
      {
        "hash": "ba14c39c99b6e5bc4ea167e66cc467c6",
        "text": "type poem_rhyme_analysis = {\nverses : string list;\nverse_reports : rhyme_analysis_report list;\nrhyme_groups : rhyme_group list;\nrhyme_categories : rhyme_category list;\nrhyme_quality : float;\nrhyme_consistency : bool;\n}",
        "lines": [
          "type poem_rhyme_analysis = {",
          "verses : string list;",
          "verse_reports : rhyme_analysis_report list;",
          "rhyme_groups : rhyme_group list;",
          "rhyme_categories : rhyme_category list;",
          "rhyme_quality : float;",
          "rhyme_consistency : bool;",
          "}"
        ],
        "start_line": 43,
        "end_line": 50,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_types.ml"
      },
      {
        "hash": "ba14c39c99b6e5bc4ea167e66cc467c6",
        "text": "type poem_rhyme_analysis = {\nverses : string list;\nverse_reports : rhyme_analysis_report list;\nrhyme_groups : rhyme_group list;\nrhyme_categories : rhyme_category list;\nrhyme_quality : float;\nrhyme_consistency : bool;\n}",
        "lines": [
          "type poem_rhyme_analysis = {",
          "verses : string list;",
          "verse_reports : rhyme_analysis_report list;",
          "rhyme_groups : rhyme_group list;",
          "rhyme_categories : rhyme_category list;",
          "rhyme_quality : float;",
          "rhyme_consistency : bool;",
          "}"
        ],
        "start_line": 44,
        "end_line": 51,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_types_consolidated.ml"
      },
      {
        "hash": "ba14c39c99b6e5bc4ea167e66cc467c6",
        "text": "type poem_rhyme_analysis = {\nverses : string list;\nverse_reports : rhyme_analysis_report list;\nrhyme_groups : rhyme_group list;\nrhyme_categories : rhyme_category list;\nrhyme_quality : float;\nrhyme_consistency : bool;\n}",
        "lines": [
          "type poem_rhyme_analysis = {",
          "verses : string list;",
          "verse_reports : rhyme_analysis_report list;",
          "rhyme_groups : rhyme_group list;",
          "rhyme_categories : rhyme_category list;",
          "rhyme_quality : float;",
          "rhyme_consistency : bool;",
          "}"
        ],
        "start_line": 109,
        "end_line": 116,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_pattern.ml"
      },
      {
        "hash": "ba14c39c99b6e5bc4ea167e66cc467c6",
        "text": "type poem_rhyme_analysis = {\nverses : string list;\nverse_reports : rhyme_analysis_report list;\nrhyme_groups : rhyme_group list;\nrhyme_categories : rhyme_category list;\nrhyme_quality : float;\nrhyme_consistency : bool;\n}",
        "lines": [
          "type poem_rhyme_analysis = {",
          "verses : string list;",
          "verse_reports : rhyme_analysis_report list;",
          "rhyme_groups : rhyme_group list;",
          "rhyme_categories : rhyme_category list;",
          "rhyme_quality : float;",
          "rhyme_consistency : bool;",
          "}"
        ],
        "start_line": 42,
        "end_line": 49,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_core_types.ml"
      }
    ],
    "c50ae9a8373a3778b2cf447ff8c91b32": [
      {
        "hash": "c50ae9a8373a3778b2cf447ff8c91b32",
        "text": "verses : string list;\nverse_reports : rhyme_analysis_report list;\nrhyme_groups : rhyme_group list;\nrhyme_categories : rhyme_category list;\nrhyme_quality : float;\nrhyme_consistency : bool;\n}",
        "lines": [
          "verses : string list;",
          "verse_reports : rhyme_analysis_report list;",
          "rhyme_groups : rhyme_group list;",
          "rhyme_categories : rhyme_category list;",
          "rhyme_quality : float;",
          "rhyme_consistency : bool;",
          "}"
        ],
        "start_line": 44,
        "end_line": 50,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_types.ml"
      },
      {
        "hash": "c50ae9a8373a3778b2cf447ff8c91b32",
        "text": "verses : string list;\nverse_reports : rhyme_analysis_report list;\nrhyme_groups : rhyme_group list;\nrhyme_categories : rhyme_category list;\nrhyme_quality : float;\nrhyme_consistency : bool;\n}",
        "lines": [
          "verses : string list;",
          "verse_reports : rhyme_analysis_report list;",
          "rhyme_groups : rhyme_group list;",
          "rhyme_categories : rhyme_category list;",
          "rhyme_quality : float;",
          "rhyme_consistency : bool;",
          "}"
        ],
        "start_line": 45,
        "end_line": 51,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_types_consolidated.ml"
      },
      {
        "hash": "c50ae9a8373a3778b2cf447ff8c91b32",
        "text": "verses : string list;\nverse_reports : rhyme_analysis_report list;\nrhyme_groups : rhyme_group list;\nrhyme_categories : rhyme_category list;\nrhyme_quality : float;\nrhyme_consistency : bool;\n}",
        "lines": [
          "verses : string list;",
          "verse_reports : rhyme_analysis_report list;",
          "rhyme_groups : rhyme_group list;",
          "rhyme_categories : rhyme_category list;",
          "rhyme_quality : float;",
          "rhyme_consistency : bool;",
          "}"
        ],
        "start_line": 110,
        "end_line": 116,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_pattern.ml"
      },
      {
        "hash": "c50ae9a8373a3778b2cf447ff8c91b32",
        "text": "verses : string list;\nverse_reports : rhyme_analysis_report list;\nrhyme_groups : rhyme_group list;\nrhyme_categories : rhyme_category list;\nrhyme_quality : float;\nrhyme_consistency : bool;\n}",
        "lines": [
          "verses : string list;",
          "verse_reports : rhyme_analysis_report list;",
          "rhyme_groups : rhyme_group list;",
          "rhyme_categories : rhyme_category list;",
          "rhyme_quality : float;",
          "rhyme_consistency : bool;",
          "}"
        ],
        "start_line": 43,
        "end_line": 49,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_core_types.ml"
      }
    ],
    "38d28ab02b4f4c7304473ba4bcdf93a5": [
      {
        "hash": "38d28ab02b4f4c7304473ba4bcdf93a5",
        "text": "verse_reports : rhyme_analysis_report list;\nrhyme_groups : rhyme_group list;\nrhyme_categories : rhyme_category list;\nrhyme_quality : float;\nrhyme_consistency : bool;\n}",
        "lines": [
          "verse_reports : rhyme_analysis_report list;",
          "rhyme_groups : rhyme_group list;",
          "rhyme_categories : rhyme_category list;",
          "rhyme_quality : float;",
          "rhyme_consistency : bool;",
          "}"
        ],
        "start_line": 45,
        "end_line": 50,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_types.ml"
      },
      {
        "hash": "38d28ab02b4f4c7304473ba4bcdf93a5",
        "text": "verse_reports : rhyme_analysis_report list;\nrhyme_groups : rhyme_group list;\nrhyme_categories : rhyme_category list;\nrhyme_quality : float;\nrhyme_consistency : bool;\n}",
        "lines": [
          "verse_reports : rhyme_analysis_report list;",
          "rhyme_groups : rhyme_group list;",
          "rhyme_categories : rhyme_category list;",
          "rhyme_quality : float;",
          "rhyme_consistency : bool;",
          "}"
        ],
        "start_line": 46,
        "end_line": 51,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_types_consolidated.ml"
      },
      {
        "hash": "38d28ab02b4f4c7304473ba4bcdf93a5",
        "text": "verse_reports : rhyme_analysis_report list;\nrhyme_groups : rhyme_group list;\nrhyme_categories : rhyme_category list;\nrhyme_quality : float;\nrhyme_consistency : bool;\n}",
        "lines": [
          "verse_reports : rhyme_analysis_report list;",
          "rhyme_groups : rhyme_group list;",
          "rhyme_categories : rhyme_category list;",
          "rhyme_quality : float;",
          "rhyme_consistency : bool;",
          "}"
        ],
        "start_line": 111,
        "end_line": 116,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_pattern.ml"
      },
      {
        "hash": "38d28ab02b4f4c7304473ba4bcdf93a5",
        "text": "verse_reports : rhyme_analysis_report list;\nrhyme_groups : rhyme_group list;\nrhyme_categories : rhyme_category list;\nrhyme_quality : float;\nrhyme_consistency : bool;\n}",
        "lines": [
          "verse_reports : rhyme_analysis_report list;",
          "rhyme_groups : rhyme_group list;",
          "rhyme_categories : rhyme_category list;",
          "rhyme_quality : float;",
          "rhyme_consistency : bool;",
          "}"
        ],
        "start_line": 44,
        "end_line": 49,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_core_types.ml"
      }
    ],
    "b9dcca6e60295148495221041de2b985": [
      {
        "hash": "b9dcca6e60295148495221041de2b985",
        "text": "rhyme_groups : rhyme_group list;\nrhyme_categories : rhyme_category list;\nrhyme_quality : float;\nrhyme_consistency : bool;\n}",
        "lines": [
          "rhyme_groups : rhyme_group list;",
          "rhyme_categories : rhyme_category list;",
          "rhyme_quality : float;",
          "rhyme_consistency : bool;",
          "}"
        ],
        "start_line": 46,
        "end_line": 50,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_types.ml"
      },
      {
        "hash": "b9dcca6e60295148495221041de2b985",
        "text": "rhyme_groups : rhyme_group list;\nrhyme_categories : rhyme_category list;\nrhyme_quality : float;\nrhyme_consistency : bool;\n}",
        "lines": [
          "rhyme_groups : rhyme_group list;",
          "rhyme_categories : rhyme_category list;",
          "rhyme_quality : float;",
          "rhyme_consistency : bool;",
          "}"
        ],
        "start_line": 47,
        "end_line": 51,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_types_consolidated.ml"
      },
      {
        "hash": "b9dcca6e60295148495221041de2b985",
        "text": "rhyme_groups : rhyme_group list;\nrhyme_categories : rhyme_category list;\nrhyme_quality : float;\nrhyme_consistency : bool;\n}",
        "lines": [
          "rhyme_groups : rhyme_group list;",
          "rhyme_categories : rhyme_category list;",
          "rhyme_quality : float;",
          "rhyme_consistency : bool;",
          "}"
        ],
        "start_line": 112,
        "end_line": 116,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_pattern.ml"
      },
      {
        "hash": "b9dcca6e60295148495221041de2b985",
        "text": "rhyme_groups : rhyme_group list;\nrhyme_categories : rhyme_category list;\nrhyme_quality : float;\nrhyme_consistency : bool;\n}",
        "lines": [
          "rhyme_groups : rhyme_group list;",
          "rhyme_categories : rhyme_category list;",
          "rhyme_quality : float;",
          "rhyme_consistency : bool;",
          "}"
        ],
        "start_line": 45,
        "end_line": 49,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_core_types.ml"
      }
    ],
    "8eee96dca321a785658dd31ebbd08a47": [
      {
        "hash": "8eee96dca321a785658dd31ebbd08a47",
        "text": "rhyme_categories : rhyme_category list;\nrhyme_quality : float;\nrhyme_consistency : bool;\n}",
        "lines": [
          "rhyme_categories : rhyme_category list;",
          "rhyme_quality : float;",
          "rhyme_consistency : bool;",
          "}"
        ],
        "start_line": 47,
        "end_line": 50,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_types.ml"
      },
      {
        "hash": "8eee96dca321a785658dd31ebbd08a47",
        "text": "rhyme_categories : rhyme_category list;\nrhyme_quality : float;\nrhyme_consistency : bool;\n}",
        "lines": [
          "rhyme_categories : rhyme_category list;",
          "rhyme_quality : float;",
          "rhyme_consistency : bool;",
          "}"
        ],
        "start_line": 48,
        "end_line": 51,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_types_consolidated.ml"
      },
      {
        "hash": "8eee96dca321a785658dd31ebbd08a47",
        "text": "rhyme_categories : rhyme_category list;\nrhyme_quality : float;\nrhyme_consistency : bool;\n}",
        "lines": [
          "rhyme_categories : rhyme_category list;",
          "rhyme_quality : float;",
          "rhyme_consistency : bool;",
          "}"
        ],
        "start_line": 113,
        "end_line": 116,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_pattern.ml"
      },
      {
        "hash": "8eee96dca321a785658dd31ebbd08a47",
        "text": "rhyme_categories : rhyme_category list;\nrhyme_quality : float;\nrhyme_consistency : bool;\n}",
        "lines": [
          "rhyme_categories : rhyme_category list;",
          "rhyme_quality : float;",
          "rhyme_consistency : bool;",
          "}"
        ],
        "start_line": 46,
        "end_line": 49,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_core_types.ml"
      }
    ],
    "ea0ccc748c6989513997fd422499ec7b": [
      {
        "hash": "ea0ccc748c6989513997fd422499ec7b",
        "text": "rhyme_quality : float;\nrhyme_consistency : bool;\n}",
        "lines": [
          "rhyme_quality : float;",
          "rhyme_consistency : bool;",
          "}"
        ],
        "start_line": 48,
        "end_line": 50,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_types.ml"
      },
      {
        "hash": "ea0ccc748c6989513997fd422499ec7b",
        "text": "rhyme_quality : float;\nrhyme_consistency : bool;\n}",
        "lines": [
          "rhyme_quality : float;",
          "rhyme_consistency : bool;",
          "}"
        ],
        "start_line": 49,
        "end_line": 51,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_types_consolidated.ml"
      },
      {
        "hash": "ea0ccc748c6989513997fd422499ec7b",
        "text": "rhyme_quality : float;\nrhyme_consistency : bool;\n}",
        "lines": [
          "rhyme_quality : float;",
          "rhyme_consistency : bool;",
          "}"
        ],
        "start_line": 114,
        "end_line": 116,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_pattern.ml"
      },
      {
        "hash": "ea0ccc748c6989513997fd422499ec7b",
        "text": "rhyme_quality : float;\nrhyme_consistency : bool;\n}",
        "lines": [
          "rhyme_quality : float;",
          "rhyme_consistency : bool;",
          "}"
        ],
        "start_line": 47,
        "end_line": 49,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_core_types.ml"
      }
    ],
    "8bd2304282570251a657c3436571d8ea": [
      {
        "hash": "8bd2304282570251a657c3436571d8ea",
        "text": "let rhyme_category_to_string = function\n| PingSheng -> \"平声\"\n| ZeSheng -> \"仄声\"\n| ShangSheng -> \"上声\"\n| QuSheng -> \"去声\"\n| RuSheng -> \"入声\"",
        "lines": [
          "let rhyme_category_to_string = function",
          "| PingSheng -> \"平声\"",
          "| ZeSheng -> \"仄声\"",
          "| ShangSheng -> \"上声\"",
          "| QuSheng -> \"去声\"",
          "| RuSheng -> \"入声\""
        ],
        "start_line": 55,
        "end_line": 60,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_types.ml"
      },
      {
        "hash": "8bd2304282570251a657c3436571d8ea",
        "text": "let rhyme_category_to_string = function\n| PingSheng -> \"平声\"\n| ZeSheng -> \"仄声\"\n| ShangSheng -> \"上声\"\n| QuSheng -> \"去声\"\n| RuSheng -> \"入声\"",
        "lines": [
          "let rhyme_category_to_string = function",
          "| PingSheng -> \"平声\"",
          "| ZeSheng -> \"仄声\"",
          "| ShangSheng -> \"上声\"",
          "| QuSheng -> \"去声\"",
          "| RuSheng -> \"入声\""
        ],
        "start_line": 163,
        "end_line": 168,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_types_consolidated.ml"
      },
      {
        "hash": "8bd2304282570251a657c3436571d8ea",
        "text": "let rhyme_category_to_string = function\n| PingSheng -> \"平声\"\n| ZeSheng -> \"仄声\"\n| ShangSheng -> \"上声\"\n| QuSheng -> \"去声\"\n| RuSheng -> \"入声\"",
        "lines": [
          "let rhyme_category_to_string = function",
          "| PingSheng -> \"平声\"",
          "| ZeSheng -> \"仄声\"",
          "| ShangSheng -> \"上声\"",
          "| QuSheng -> \"去声\"",
          "| RuSheng -> \"入声\""
        ],
        "start_line": 69,
        "end_line": 74,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_core_types.ml"
      }
    ],
    "75fde132638bf39c3ee50675fb397668": [
      {
        "hash": "75fde132638bf39c3ee50675fb397668",
        "text": "| PingSheng -> \"平声\"\n| ZeSheng -> \"仄声\"\n| ShangSheng -> \"上声\"\n| QuSheng -> \"去声\"\n| RuSheng -> \"入声\"",
        "lines": [
          "| PingSheng -> \"平声\"",
          "| ZeSheng -> \"仄声\"",
          "| ShangSheng -> \"上声\"",
          "| QuSheng -> \"去声\"",
          "| RuSheng -> \"入声\""
        ],
        "start_line": 56,
        "end_line": 60,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_types.ml"
      },
      {
        "hash": "75fde132638bf39c3ee50675fb397668",
        "text": "| PingSheng -> \"平声\"\n| ZeSheng -> \"仄声\"\n| ShangSheng -> \"上声\"\n| QuSheng -> \"去声\"\n| RuSheng -> \"入声\"",
        "lines": [
          "| PingSheng -> \"平声\"",
          "| ZeSheng -> \"仄声\"",
          "| ShangSheng -> \"上声\"",
          "| QuSheng -> \"去声\"",
          "| RuSheng -> \"入声\""
        ],
        "start_line": 164,
        "end_line": 168,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_types_consolidated.ml"
      },
      {
        "hash": "75fde132638bf39c3ee50675fb397668",
        "text": "| PingSheng -> \"平声\"\n| ZeSheng -> \"仄声\"\n| ShangSheng -> \"上声\"\n| QuSheng -> \"去声\"\n| RuSheng -> \"入声\"",
        "lines": [
          "| PingSheng -> \"平声\"",
          "| ZeSheng -> \"仄声\"",
          "| ShangSheng -> \"上声\"",
          "| QuSheng -> \"去声\"",
          "| RuSheng -> \"入声\""
        ],
        "start_line": 70,
        "end_line": 74,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_core_types.ml"
      },
      {
        "hash": "75fde132638bf39c3ee50675fb397668",
        "text": "| PingSheng -> \"平声\"\n| ZeSheng -> \"仄声\"\n| ShangSheng -> \"上声\"\n| QuSheng -> \"去声\"\n| RuSheng -> \"入声\"",
        "lines": [
          "| PingSheng -> \"平声\"",
          "| ZeSheng -> \"仄声\"",
          "| ShangSheng -> \"上声\"",
          "| QuSheng -> \"去声\"",
          "| RuSheng -> \"入声\""
        ],
        "start_line": 53,
        "end_line": 57,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/rhyme_group_types.ml"
      }
    ],
    "678b5be0a65ab8b54ced8a4a439cbf58": [
      {
        "hash": "678b5be0a65ab8b54ced8a4a439cbf58",
        "text": "| ZeSheng -> \"仄声\"\n| ShangSheng -> \"上声\"\n| QuSheng -> \"去声\"\n| RuSheng -> \"入声\"",
        "lines": [
          "| ZeSheng -> \"仄声\"",
          "| ShangSheng -> \"上声\"",
          "| QuSheng -> \"去声\"",
          "| RuSheng -> \"入声\""
        ],
        "start_line": 57,
        "end_line": 60,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_types.ml"
      },
      {
        "hash": "678b5be0a65ab8b54ced8a4a439cbf58",
        "text": "| ZeSheng -> \"仄声\"\n| ShangSheng -> \"上声\"\n| QuSheng -> \"去声\"\n| RuSheng -> \"入声\"",
        "lines": [
          "| ZeSheng -> \"仄声\"",
          "| ShangSheng -> \"上声\"",
          "| QuSheng -> \"去声\"",
          "| RuSheng -> \"入声\""
        ],
        "start_line": 165,
        "end_line": 168,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_types_consolidated.ml"
      },
      {
        "hash": "678b5be0a65ab8b54ced8a4a439cbf58",
        "text": "| ZeSheng -> \"仄声\"\n| ShangSheng -> \"上声\"\n| QuSheng -> \"去声\"\n| RuSheng -> \"入声\"",
        "lines": [
          "| ZeSheng -> \"仄声\"",
          "| ShangSheng -> \"上声\"",
          "| QuSheng -> \"去声\"",
          "| RuSheng -> \"入声\""
        ],
        "start_line": 71,
        "end_line": 74,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_core_types.ml"
      },
      {
        "hash": "678b5be0a65ab8b54ced8a4a439cbf58",
        "text": "| ZeSheng -> \"仄声\"\n| ShangSheng -> \"上声\"\n| QuSheng -> \"去声\"\n| RuSheng -> \"入声\"",
        "lines": [
          "| ZeSheng -> \"仄声\"",
          "| ShangSheng -> \"上声\"",
          "| QuSheng -> \"去声\"",
          "| RuSheng -> \"入声\""
        ],
        "start_line": 54,
        "end_line": 57,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/rhyme_group_types.ml"
      }
    ],
    "9d2efc2f753c358f9c7e4a86b9ac96c2": [
      {
        "hash": "9d2efc2f753c358f9c7e4a86b9ac96c2",
        "text": "| ShangSheng -> \"上声\"\n| QuSheng -> \"去声\"\n| RuSheng -> \"入声\"",
        "lines": [
          "| ShangSheng -> \"上声\"",
          "| QuSheng -> \"去声\"",
          "| RuSheng -> \"入声\""
        ],
        "start_line": 58,
        "end_line": 60,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_types.ml"
      },
      {
        "hash": "9d2efc2f753c358f9c7e4a86b9ac96c2",
        "text": "| ShangSheng -> \"上声\"\n| QuSheng -> \"去声\"\n| RuSheng -> \"入声\"",
        "lines": [
          "| ShangSheng -> \"上声\"",
          "| QuSheng -> \"去声\"",
          "| RuSheng -> \"入声\""
        ],
        "start_line": 166,
        "end_line": 168,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_types_consolidated.ml"
      },
      {
        "hash": "9d2efc2f753c358f9c7e4a86b9ac96c2",
        "text": "| ShangSheng -> \"上声\"\n| QuSheng -> \"去声\"\n| RuSheng -> \"入声\"",
        "lines": [
          "| ShangSheng -> \"上声\"",
          "| QuSheng -> \"去声\"",
          "| RuSheng -> \"入声\""
        ],
        "start_line": 72,
        "end_line": 74,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_core_types.ml"
      },
      {
        "hash": "9d2efc2f753c358f9c7e4a86b9ac96c2",
        "text": "| ShangSheng -> \"上声\"\n| QuSheng -> \"去声\"\n| RuSheng -> \"入声\"",
        "lines": [
          "| ShangSheng -> \"上声\"",
          "| QuSheng -> \"去声\"",
          "| RuSheng -> \"入声\""
        ],
        "start_line": 55,
        "end_line": 57,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/rhyme_group_types.ml"
      }
    ],
    "a092ddbf4dec25c57d93ea5da23bb52e": [
      {
        "hash": "a092ddbf4dec25c57d93ea5da23bb52e",
        "text": "| JiangRhyme -> \"江韵\"\n| HuiRhyme -> \"灰韵\"\n| UnknownRhyme -> \"未知\"",
        "lines": [
          "| JiangRhyme -> \"江韵\"",
          "| HuiRhyme -> \"灰韵\"",
          "| UnknownRhyme -> \"未知\""
        ],
        "start_line": 74,
        "end_line": 76,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_types.ml"
      },
      {
        "hash": "a092ddbf4dec25c57d93ea5da23bb52e",
        "text": "| JiangRhyme -> \"江韵\"\n| HuiRhyme -> \"灰韵\"\n| UnknownRhyme -> \"未知\"",
        "lines": [
          "| JiangRhyme -> \"江韵\"",
          "| HuiRhyme -> \"灰韵\"",
          "| UnknownRhyme -> \"未知\""
        ],
        "start_line": 88,
        "end_line": 90,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_core_types.ml"
      }
    ],
    "5383808984f9eb560fb2ddaafd9cfc18": [
      {
        "hash": "5383808984f9eb560fb2ddaafd9cfc18",
        "text": "let group_consistency =\nif List.length unique_groups <= 1 then 1.0\nelse if List.length unique_groups = 2 then 0.7\nelse 0.4\nin",
        "lines": [
          "let group_consistency =",
          "if List.length unique_groups <= 1 then 1.0",
          "else if List.length unique_groups = 2 then 0.7",
          "else 0.4",
          "in"
        ],
        "start_line": 21,
        "end_line": 25,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_scoring.ml"
      },
      {
        "hash": "5383808984f9eb560fb2ddaafd9cfc18",
        "text": "let group_consistency =\nif List.length unique_groups <= 1 then 1.0\nelse if List.length unique_groups = 2 then 0.7\nelse 0.4\nin",
        "lines": [
          "let group_consistency =",
          "if List.length unique_groups <= 1 then 1.0",
          "else if List.length unique_groups = 2 then 0.7",
          "else 0.4",
          "in"
        ],
        "start_line": 89,
        "end_line": 93,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_validation.ml"
      }
    ],
    "3874573768a68917682b0211f7341f66": [
      {
        "hash": "3874573768a68917682b0211f7341f66",
        "text": "if List.length unique_groups <= 1 then 1.0\nelse if List.length unique_groups = 2 then 0.7\nelse 0.4\nin",
        "lines": [
          "if List.length unique_groups <= 1 then 1.0",
          "else if List.length unique_groups = 2 then 0.7",
          "else 0.4",
          "in"
        ],
        "start_line": 22,
        "end_line": 25,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_scoring.ml"
      },
      {
        "hash": "3874573768a68917682b0211f7341f66",
        "text": "if List.length unique_groups <= 1 then 1.0\nelse if List.length unique_groups = 2 then 0.7\nelse 0.4\nin",
        "lines": [
          "if List.length unique_groups <= 1 then 1.0",
          "else if List.length unique_groups = 2 then 0.7",
          "else 0.4",
          "in"
        ],
        "start_line": 90,
        "end_line": 93,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_validation.ml"
      }
    ],
    "6a80b155a0b1380365fcc2007cb31530": [
      {
        "hash": "6a80b155a0b1380365fcc2007cb31530",
        "text": "else if List.length unique_groups = 2 then 0.7\nelse 0.4\nin",
        "lines": [
          "else if List.length unique_groups = 2 then 0.7",
          "else 0.4",
          "in"
        ],
        "start_line": 23,
        "end_line": 25,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_scoring.ml"
      },
      {
        "hash": "6a80b155a0b1380365fcc2007cb31530",
        "text": "else if List.length unique_groups = 2 then 0.7\nelse 0.4\nin",
        "lines": [
          "else if List.length unique_groups = 2 then 0.7",
          "else 0.4",
          "in"
        ],
        "start_line": 91,
        "end_line": 93,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_validation.ml"
      }
    ],
    "c65cc5a2259f54d76cfc2bbecc6949ca": [
      {
        "hash": "c65cc5a2259f54d76cfc2bbecc6949ca",
        "text": "let category_consistency =\nif List.length unique_categories <= 1 then 1.0\nelse if List.length unique_categories = 2 then 0.8\nelse 0.5\nin",
        "lines": [
          "let category_consistency =",
          "if List.length unique_categories <= 1 then 1.0",
          "else if List.length unique_categories = 2 then 0.8",
          "else 0.5",
          "in"
        ],
        "start_line": 27,
        "end_line": 31,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_scoring.ml"
      },
      {
        "hash": "c65cc5a2259f54d76cfc2bbecc6949ca",
        "text": "let category_consistency =\nif List.length unique_categories <= 1 then 1.0\nelse if List.length unique_categories = 2 then 0.8\nelse 0.5\nin",
        "lines": [
          "let category_consistency =",
          "if List.length unique_categories <= 1 then 1.0",
          "else if List.length unique_categories = 2 then 0.8",
          "else 0.5",
          "in"
        ],
        "start_line": 95,
        "end_line": 99,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_validation.ml"
      }
    ],
    "5ef35838c561aaf678dbb4917f535bf9": [
      {
        "hash": "5ef35838c561aaf678dbb4917f535bf9",
        "text": "if List.length unique_categories <= 1 then 1.0\nelse if List.length unique_categories = 2 then 0.8\nelse 0.5\nin",
        "lines": [
          "if List.length unique_categories <= 1 then 1.0",
          "else if List.length unique_categories = 2 then 0.8",
          "else 0.5",
          "in"
        ],
        "start_line": 28,
        "end_line": 31,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_scoring.ml"
      },
      {
        "hash": "5ef35838c561aaf678dbb4917f535bf9",
        "text": "if List.length unique_categories <= 1 then 1.0\nelse if List.length unique_categories = 2 then 0.8\nelse 0.5\nin",
        "lines": [
          "if List.length unique_categories <= 1 then 1.0",
          "else if List.length unique_categories = 2 then 0.8",
          "else 0.5",
          "in"
        ],
        "start_line": 96,
        "end_line": 99,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_validation.ml"
      }
    ],
    "f6c3d9353fe04c6383895ffac2c967c6": [
      {
        "hash": "f6c3d9353fe04c6383895ffac2c967c6",
        "text": "else if List.length unique_categories = 2 then 0.8\nelse 0.5\nin",
        "lines": [
          "else if List.length unique_categories = 2 then 0.8",
          "else 0.5",
          "in"
        ],
        "start_line": 29,
        "end_line": 31,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_scoring.ml"
      },
      {
        "hash": "f6c3d9353fe04c6383895ffac2c967c6",
        "text": "else if List.length unique_categories = 2 then 0.8\nelse 0.5\nin",
        "lines": [
          "else if List.length unique_categories = 2 then 0.8",
          "else 0.5",
          "in"
        ],
        "start_line": 97,
        "end_line": 99,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_validation.ml"
      }
    ],
    "d2dc35316f1f28de8f48a9133969ad3c": [
      {
        "hash": "d2dc35316f1f28de8f48a9133969ad3c",
        "text": "@author 骆言诗词编程团队\n@version 2.0 - 整合版本\n@since 2025-07-24 *)",
        "lines": [
          "@author 骆言诗词编程团队",
          "@version 2.0 - 整合版本",
          "@since 2025-07-24 *)"
        ],
        "start_line": 9,
        "end_line": 11,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_types_consolidated.ml"
      },
      {
        "hash": "d2dc35316f1f28de8f48a9133969ad3c",
        "text": "@author 骆言诗词编程团队\n@version 2.0 - 整合版本\n@since 2025-07-24 *)",
        "lines": [
          "@author 骆言诗词编程团队",
          "@version 2.0 - 整合版本",
          "@since 2025-07-24 *)"
        ],
        "start_line": 6,
        "end_line": 8,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_rhyme_core.ml"
      },
      {
        "hash": "d2dc35316f1f28de8f48a9133969ad3c",
        "text": "@author 骆言诗词编程团队\n@version 2.0 - 整合版本\n@since 2025-07-24 *)",
        "lines": [
          "@author 骆言诗词编程团队",
          "@version 2.0 - 整合版本",
          "@since 2025-07-24 *)"
        ],
        "start_line": 6,
        "end_line": 8,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_artistic_core.ml"
      },
      {
        "hash": "d2dc35316f1f28de8f48a9133969ad3c",
        "text": "@author 骆言诗词编程团队\n@version 2.0 - 整合版本\n@since 2025-07-24 *)",
        "lines": [
          "@author 骆言诗词编程团队",
          "@version 2.0 - 整合版本",
          "@since 2025-07-24 *)"
        ],
        "start_line": 6,
        "end_line": 8,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_rhyme_data.ml"
      }
    ],
    "0b4c05f6722c255241ee121464d139a2": [
      {
        "hash": "0b4c05f6722c255241ee121464d139a2",
        "text": "type rhyme_group =\n| AnRhyme\n| SiRhyme\n| TianRhyme\n| WangRhyme\n| QuRhyme\n| YuRhyme\n| HuaRhyme\n| FengRhyme\n| YueRhyme",
        "lines": [
          "type rhyme_group =",
          "| AnRhyme",
          "| SiRhyme",
          "| TianRhyme",
          "| WangRhyme",
          "| QuRhyme",
          "| YuRhyme",
          "| HuaRhyme",
          "| FengRhyme",
          "| YueRhyme"
        ],
        "start_line": 22,
        "end_line": 31,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_types_consolidated.ml"
      },
      {
        "hash": "0b4c05f6722c255241ee121464d139a2",
        "text": "type rhyme_group =\n| AnRhyme\n| SiRhyme\n| TianRhyme\n| WangRhyme\n| QuRhyme\n| YuRhyme\n| HuaRhyme\n| FengRhyme\n| YueRhyme",
        "lines": [
          "type rhyme_group =",
          "| AnRhyme",
          "| SiRhyme",
          "| TianRhyme",
          "| WangRhyme",
          "| QuRhyme",
          "| YuRhyme",
          "| HuaRhyme",
          "| FengRhyme",
          "| YueRhyme"
        ],
        "start_line": 23,
        "end_line": 32,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      },
      {
        "hash": "0b4c05f6722c255241ee121464d139a2",
        "text": "type rhyme_group =\n| AnRhyme\n| SiRhyme\n| TianRhyme\n| WangRhyme\n| QuRhyme\n| YuRhyme\n| HuaRhyme\n| FengRhyme\n| YueRhyme",
        "lines": [
          "type rhyme_group =",
          "| AnRhyme",
          "| SiRhyme",
          "| TianRhyme",
          "| WangRhyme",
          "| QuRhyme",
          "| YuRhyme",
          "| HuaRhyme",
          "| FengRhyme",
          "| YueRhyme"
        ],
        "start_line": 17,
        "end_line": 26,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_core_types.ml"
      },
      {
        "hash": "0b4c05f6722c255241ee121464d139a2",
        "text": "type rhyme_group =\n| AnRhyme\n| SiRhyme\n| TianRhyme\n| WangRhyme\n| QuRhyme\n| YuRhyme\n| HuaRhyme\n| FengRhyme\n| YueRhyme",
        "lines": [
          "type rhyme_group =",
          "| AnRhyme",
          "| SiRhyme",
          "| TianRhyme",
          "| WangRhyme",
          "| QuRhyme",
          "| YuRhyme",
          "| HuaRhyme",
          "| FengRhyme",
          "| YueRhyme"
        ],
        "start_line": 18,
        "end_line": 27,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_types.ml"
      },
      {
        "hash": "0b4c05f6722c255241ee121464d139a2",
        "text": "type rhyme_group =\n| AnRhyme\n| SiRhyme\n| TianRhyme\n| WangRhyme\n| QuRhyme\n| YuRhyme\n| HuaRhyme\n| FengRhyme\n| YueRhyme",
        "lines": [
          "type rhyme_group =",
          "| AnRhyme",
          "| SiRhyme",
          "| TianRhyme",
          "| WangRhyme",
          "| QuRhyme",
          "| YuRhyme",
          "| HuaRhyme",
          "| FengRhyme",
          "| YueRhyme"
        ],
        "start_line": 14,
        "end_line": 23,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_data_loader.ml"
      },
      {
        "hash": "0b4c05f6722c255241ee121464d139a2",
        "text": "type rhyme_group =\n| AnRhyme\n| SiRhyme\n| TianRhyme\n| WangRhyme\n| QuRhyme\n| YuRhyme\n| HuaRhyme\n| FengRhyme\n| YueRhyme",
        "lines": [
          "type rhyme_group =",
          "| AnRhyme",
          "| SiRhyme",
          "| TianRhyme",
          "| WangRhyme",
          "| QuRhyme",
          "| YuRhyme",
          "| HuaRhyme",
          "| FengRhyme",
          "| YueRhyme"
        ],
        "start_line": 21,
        "end_line": 30,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/expanded_rhyme_data.ml"
      },
      {
        "hash": "0b4c05f6722c255241ee121464d139a2",
        "text": "type rhyme_group =\n| AnRhyme\n| SiRhyme\n| TianRhyme\n| WangRhyme\n| QuRhyme\n| YuRhyme\n| HuaRhyme\n| FengRhyme\n| YueRhyme",
        "lines": [
          "type rhyme_group =",
          "| AnRhyme",
          "| SiRhyme",
          "| TianRhyme",
          "| WangRhyme",
          "| QuRhyme",
          "| YuRhyme",
          "| HuaRhyme",
          "| FengRhyme",
          "| YueRhyme"
        ],
        "start_line": 22,
        "end_line": 31,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/rhyme_group_types.ml"
      },
      {
        "hash": "0b4c05f6722c255241ee121464d139a2",
        "text": "type rhyme_group =\n| AnRhyme\n| SiRhyme\n| TianRhyme\n| WangRhyme\n| QuRhyme\n| YuRhyme\n| HuaRhyme\n| FengRhyme\n| YueRhyme",
        "lines": [
          "type rhyme_group =",
          "| AnRhyme",
          "| SiRhyme",
          "| TianRhyme",
          "| WangRhyme",
          "| QuRhyme",
          "| YuRhyme",
          "| HuaRhyme",
          "| FengRhyme",
          "| YueRhyme"
        ],
        "start_line": 20,
        "end_line": 29,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/ping_sheng/feng_rhyme_data.ml"
      },
      {
        "hash": "0b4c05f6722c255241ee121464d139a2",
        "text": "type rhyme_group =\n| AnRhyme\n| SiRhyme\n| TianRhyme\n| WangRhyme\n| QuRhyme\n| YuRhyme\n| HuaRhyme\n| FengRhyme\n| YueRhyme",
        "lines": [
          "type rhyme_group =",
          "| AnRhyme",
          "| SiRhyme",
          "| TianRhyme",
          "| WangRhyme",
          "| QuRhyme",
          "| YuRhyme",
          "| HuaRhyme",
          "| FengRhyme",
          "| YueRhyme"
        ],
        "start_line": 17,
        "end_line": 26,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/ze_sheng/yue_rhyme_data.ml"
      },
      {
        "hash": "0b4c05f6722c255241ee121464d139a2",
        "text": "type rhyme_group =\n| AnRhyme\n| SiRhyme\n| TianRhyme\n| WangRhyme\n| QuRhyme\n| YuRhyme\n| HuaRhyme\n| FengRhyme\n| YueRhyme",
        "lines": [
          "type rhyme_group =",
          "| AnRhyme",
          "| SiRhyme",
          "| TianRhyme",
          "| WangRhyme",
          "| QuRhyme",
          "| YuRhyme",
          "| HuaRhyme",
          "| FengRhyme",
          "| YueRhyme"
        ],
        "start_line": 17,
        "end_line": 26,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/ze_sheng/hui_rhyme_data.ml"
      },
      {
        "hash": "0b4c05f6722c255241ee121464d139a2",
        "text": "type rhyme_group =\n| AnRhyme\n| SiRhyme\n| TianRhyme\n| WangRhyme\n| QuRhyme\n| YuRhyme\n| HuaRhyme\n| FengRhyme\n| YueRhyme",
        "lines": [
          "type rhyme_group =",
          "| AnRhyme",
          "| SiRhyme",
          "| TianRhyme",
          "| WangRhyme",
          "| QuRhyme",
          "| YuRhyme",
          "| HuaRhyme",
          "| FengRhyme",
          "| YueRhyme"
        ],
        "start_line": 17,
        "end_line": 26,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/ze_sheng/jiang_rhyme_data.ml"
      }
    ],
    "8c702c7ca2294d724c07975ce23b0cbd": [
      {
        "hash": "8c702c7ca2294d724c07975ce23b0cbd",
        "text": "| AnRhyme\n| SiRhyme\n| TianRhyme\n| WangRhyme\n| QuRhyme\n| YuRhyme\n| HuaRhyme\n| FengRhyme\n| YueRhyme\n| JiangRhyme",
        "lines": [
          "| AnRhyme",
          "| SiRhyme",
          "| TianRhyme",
          "| WangRhyme",
          "| QuRhyme",
          "| YuRhyme",
          "| HuaRhyme",
          "| FengRhyme",
          "| YueRhyme",
          "| JiangRhyme"
        ],
        "start_line": 23,
        "end_line": 32,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_types_consolidated.ml"
      },
      {
        "hash": "8c702c7ca2294d724c07975ce23b0cbd",
        "text": "| AnRhyme\n| SiRhyme\n| TianRhyme\n| WangRhyme\n| QuRhyme\n| YuRhyme\n| HuaRhyme\n| FengRhyme\n| YueRhyme\n| JiangRhyme",
        "lines": [
          "| AnRhyme",
          "| SiRhyme",
          "| TianRhyme",
          "| WangRhyme",
          "| QuRhyme",
          "| YuRhyme",
          "| HuaRhyme",
          "| FengRhyme",
          "| YueRhyme",
          "| JiangRhyme"
        ],
        "start_line": 15,
        "end_line": 24,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_data_loader.ml"
      }
    ],
    "6cbd82fdc88360a0ee117030d36fca11": [
      {
        "hash": "6cbd82fdc88360a0ee117030d36fca11",
        "text": "| SiRhyme\n| TianRhyme\n| WangRhyme\n| QuRhyme\n| YuRhyme\n| HuaRhyme\n| FengRhyme\n| YueRhyme\n| JiangRhyme\n| HuiRhyme",
        "lines": [
          "| SiRhyme",
          "| TianRhyme",
          "| WangRhyme",
          "| QuRhyme",
          "| YuRhyme",
          "| HuaRhyme",
          "| FengRhyme",
          "| YueRhyme",
          "| JiangRhyme",
          "| HuiRhyme"
        ],
        "start_line": 24,
        "end_line": 33,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_types_consolidated.ml"
      },
      {
        "hash": "6cbd82fdc88360a0ee117030d36fca11",
        "text": "| SiRhyme\n| TianRhyme\n| WangRhyme\n| QuRhyme\n| YuRhyme\n| HuaRhyme\n| FengRhyme\n| YueRhyme\n| JiangRhyme\n| HuiRhyme",
        "lines": [
          "| SiRhyme",
          "| TianRhyme",
          "| WangRhyme",
          "| QuRhyme",
          "| YuRhyme",
          "| HuaRhyme",
          "| FengRhyme",
          "| YueRhyme",
          "| JiangRhyme",
          "| HuiRhyme"
        ],
        "start_line": 16,
        "end_line": 25,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_data_loader.ml"
      }
    ],
    "2d6f7dc83de8410234313705b408a2d5": [
      {
        "hash": "2d6f7dc83de8410234313705b408a2d5",
        "text": "| TianRhyme\n| WangRhyme\n| QuRhyme\n| YuRhyme\n| HuaRhyme\n| FengRhyme\n| YueRhyme\n| JiangRhyme\n| HuiRhyme\n| UnknownRhyme",
        "lines": [
          "| TianRhyme",
          "| WangRhyme",
          "| QuRhyme",
          "| YuRhyme",
          "| HuaRhyme",
          "| FengRhyme",
          "| YueRhyme",
          "| JiangRhyme",
          "| HuiRhyme",
          "| UnknownRhyme"
        ],
        "start_line": 25,
        "end_line": 34,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_types_consolidated.ml"
      },
      {
        "hash": "2d6f7dc83de8410234313705b408a2d5",
        "text": "| TianRhyme\n| WangRhyme\n| QuRhyme\n| YuRhyme\n| HuaRhyme\n| FengRhyme\n| YueRhyme\n| JiangRhyme\n| HuiRhyme\n| UnknownRhyme",
        "lines": [
          "| TianRhyme",
          "| WangRhyme",
          "| QuRhyme",
          "| YuRhyme",
          "| HuaRhyme",
          "| FengRhyme",
          "| YueRhyme",
          "| JiangRhyme",
          "| HuiRhyme",
          "| UnknownRhyme"
        ],
        "start_line": 17,
        "end_line": 26,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_data_loader.ml"
      }
    ],
    "f60387a74b6e16a3f2ae081beeed9537": [
      {
        "hash": "f60387a74b6e16a3f2ae081beeed9537",
        "text": "| WangRhyme\n| QuRhyme\n| YuRhyme\n| HuaRhyme\n| FengRhyme\n| YueRhyme\n| JiangRhyme\n| HuiRhyme\n| UnknownRhyme",
        "lines": [
          "| WangRhyme",
          "| QuRhyme",
          "| YuRhyme",
          "| HuaRhyme",
          "| FengRhyme",
          "| YueRhyme",
          "| JiangRhyme",
          "| HuiRhyme",
          "| UnknownRhyme"
        ],
        "start_line": 26,
        "end_line": 34,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_types_consolidated.ml"
      },
      {
        "hash": "f60387a74b6e16a3f2ae081beeed9537",
        "text": "| WangRhyme\n| QuRhyme\n| YuRhyme\n| HuaRhyme\n| FengRhyme\n| YueRhyme\n| JiangRhyme\n| HuiRhyme\n| UnknownRhyme",
        "lines": [
          "| WangRhyme",
          "| QuRhyme",
          "| YuRhyme",
          "| HuaRhyme",
          "| FengRhyme",
          "| YueRhyme",
          "| JiangRhyme",
          "| HuiRhyme",
          "| UnknownRhyme"
        ],
        "start_line": 18,
        "end_line": 26,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_data_loader.ml"
      }
    ],
    "281acdacf3f4b3c24c26d7b491c0e505": [
      {
        "hash": "281acdacf3f4b3c24c26d7b491c0e505",
        "text": "| QuRhyme\n| YuRhyme\n| HuaRhyme\n| FengRhyme\n| YueRhyme\n| JiangRhyme\n| HuiRhyme\n| UnknownRhyme",
        "lines": [
          "| QuRhyme",
          "| YuRhyme",
          "| HuaRhyme",
          "| FengRhyme",
          "| YueRhyme",
          "| JiangRhyme",
          "| HuiRhyme",
          "| UnknownRhyme"
        ],
        "start_line": 27,
        "end_line": 34,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_types_consolidated.ml"
      },
      {
        "hash": "281acdacf3f4b3c24c26d7b491c0e505",
        "text": "| QuRhyme\n| YuRhyme\n| HuaRhyme\n| FengRhyme\n| YueRhyme\n| JiangRhyme\n| HuiRhyme\n| UnknownRhyme",
        "lines": [
          "| QuRhyme",
          "| YuRhyme",
          "| HuaRhyme",
          "| FengRhyme",
          "| YueRhyme",
          "| JiangRhyme",
          "| HuiRhyme",
          "| UnknownRhyme"
        ],
        "start_line": 19,
        "end_line": 26,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_data_loader.ml"
      }
    ],
    "916d0e10bddd12d29624033f0233e98d": [
      {
        "hash": "916d0e10bddd12d29624033f0233e98d",
        "text": "type artistic_dimension =\n| RhymeHarmony\n| TonalBalance\n| Parallelism\n| Imagery\n| Rhythm\n| Elegance\n| ClassicalElegance\n| ModernInnovation\n| CulturalDepth",
        "lines": [
          "type artistic_dimension =",
          "| RhymeHarmony",
          "| TonalBalance",
          "| Parallelism",
          "| Imagery",
          "| Rhythm",
          "| Elegance",
          "| ClassicalElegance",
          "| ModernInnovation",
          "| CulturalDepth"
        ],
        "start_line": 55,
        "end_line": 64,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_types_consolidated.ml"
      },
      {
        "hash": "916d0e10bddd12d29624033f0233e98d",
        "text": "type artistic_dimension =\n| RhymeHarmony\n| TonalBalance\n| Parallelism\n| Imagery\n| Rhythm\n| Elegance\n| ClassicalElegance\n| ModernInnovation\n| CulturalDepth",
        "lines": [
          "type artistic_dimension =",
          "| RhymeHarmony",
          "| TonalBalance",
          "| Parallelism",
          "| Imagery",
          "| Rhythm",
          "| Elegance",
          "| ClassicalElegance",
          "| ModernInnovation",
          "| CulturalDepth"
        ],
        "start_line": 4,
        "end_line": 13,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/artistic_types.ml"
      }
    ],
    "eef1a677d4ed4d1e9cf41c272060480d": [
      {
        "hash": "eef1a677d4ed4d1e9cf41c272060480d",
        "text": "| RhymeHarmony\n| TonalBalance\n| Parallelism\n| Imagery\n| Rhythm\n| Elegance\n| ClassicalElegance\n| ModernInnovation\n| CulturalDepth\n| EmotionalResonance",
        "lines": [
          "| RhymeHarmony",
          "| TonalBalance",
          "| Parallelism",
          "| Imagery",
          "| Rhythm",
          "| Elegance",
          "| ClassicalElegance",
          "| ModernInnovation",
          "| CulturalDepth",
          "| EmotionalResonance"
        ],
        "start_line": 56,
        "end_line": 65,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_types_consolidated.ml"
      },
      {
        "hash": "eef1a677d4ed4d1e9cf41c272060480d",
        "text": "| RhymeHarmony\n| TonalBalance\n| Parallelism\n| Imagery\n| Rhythm\n| Elegance\n| ClassicalElegance\n| ModernInnovation\n| CulturalDepth\n| EmotionalResonance",
        "lines": [
          "| RhymeHarmony",
          "| TonalBalance",
          "| Parallelism",
          "| Imagery",
          "| Rhythm",
          "| Elegance",
          "| ClassicalElegance",
          "| ModernInnovation",
          "| CulturalDepth",
          "| EmotionalResonance"
        ],
        "start_line": 5,
        "end_line": 14,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/artistic_types.ml"
      }
    ],
    "9a93b0b33ccfae980a141f19d625c5dd": [
      {
        "hash": "9a93b0b33ccfae980a141f19d625c5dd",
        "text": "| TonalBalance\n| Parallelism\n| Imagery\n| Rhythm\n| Elegance\n| ClassicalElegance\n| ModernInnovation\n| CulturalDepth\n| EmotionalResonance\n| IntellectualDepth",
        "lines": [
          "| TonalBalance",
          "| Parallelism",
          "| Imagery",
          "| Rhythm",
          "| Elegance",
          "| ClassicalElegance",
          "| ModernInnovation",
          "| CulturalDepth",
          "| EmotionalResonance",
          "| IntellectualDepth"
        ],
        "start_line": 57,
        "end_line": 66,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_types_consolidated.ml"
      },
      {
        "hash": "9a93b0b33ccfae980a141f19d625c5dd",
        "text": "| TonalBalance\n| Parallelism\n| Imagery\n| Rhythm\n| Elegance\n| ClassicalElegance\n| ModernInnovation\n| CulturalDepth\n| EmotionalResonance\n| IntellectualDepth",
        "lines": [
          "| TonalBalance",
          "| Parallelism",
          "| Imagery",
          "| Rhythm",
          "| Elegance",
          "| ClassicalElegance",
          "| ModernInnovation",
          "| CulturalDepth",
          "| EmotionalResonance",
          "| IntellectualDepth"
        ],
        "start_line": 6,
        "end_line": 15,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/artistic_types.ml"
      }
    ],
    "e88d0a86587161d1c0d27a217802f944": [
      {
        "hash": "e88d0a86587161d1c0d27a217802f944",
        "text": "| Parallelism\n| Imagery\n| Rhythm\n| Elegance\n| ClassicalElegance\n| ModernInnovation\n| CulturalDepth\n| EmotionalResonance\n| IntellectualDepth",
        "lines": [
          "| Parallelism",
          "| Imagery",
          "| Rhythm",
          "| Elegance",
          "| ClassicalElegance",
          "| ModernInnovation",
          "| CulturalDepth",
          "| EmotionalResonance",
          "| IntellectualDepth"
        ],
        "start_line": 58,
        "end_line": 66,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_types_consolidated.ml"
      },
      {
        "hash": "e88d0a86587161d1c0d27a217802f944",
        "text": "| Parallelism\n| Imagery\n| Rhythm\n| Elegance\n| ClassicalElegance\n| ModernInnovation\n| CulturalDepth\n| EmotionalResonance\n| IntellectualDepth",
        "lines": [
          "| Parallelism",
          "| Imagery",
          "| Rhythm",
          "| Elegance",
          "| ClassicalElegance",
          "| ModernInnovation",
          "| CulturalDepth",
          "| EmotionalResonance",
          "| IntellectualDepth"
        ],
        "start_line": 7,
        "end_line": 15,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/artistic_types.ml"
      }
    ],
    "9a72a112af620019ff0530c583a434ef": [
      {
        "hash": "9a72a112af620019ff0530c583a434ef",
        "text": "| Imagery\n| Rhythm\n| Elegance\n| ClassicalElegance\n| ModernInnovation\n| CulturalDepth\n| EmotionalResonance\n| IntellectualDepth",
        "lines": [
          "| Imagery",
          "| Rhythm",
          "| Elegance",
          "| ClassicalElegance",
          "| ModernInnovation",
          "| CulturalDepth",
          "| EmotionalResonance",
          "| IntellectualDepth"
        ],
        "start_line": 59,
        "end_line": 66,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_types_consolidated.ml"
      },
      {
        "hash": "9a72a112af620019ff0530c583a434ef",
        "text": "| Imagery\n| Rhythm\n| Elegance\n| ClassicalElegance\n| ModernInnovation\n| CulturalDepth\n| EmotionalResonance\n| IntellectualDepth",
        "lines": [
          "| Imagery",
          "| Rhythm",
          "| Elegance",
          "| ClassicalElegance",
          "| ModernInnovation",
          "| CulturalDepth",
          "| EmotionalResonance",
          "| IntellectualDepth"
        ],
        "start_line": 8,
        "end_line": 15,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/artistic_types.ml"
      }
    ],
    "9bd85ff6207e42611c561d7815116e63": [
      {
        "hash": "9bd85ff6207e42611c561d7815116e63",
        "text": "| Rhythm\n| Elegance\n| ClassicalElegance\n| ModernInnovation\n| CulturalDepth\n| EmotionalResonance\n| IntellectualDepth",
        "lines": [
          "| Rhythm",
          "| Elegance",
          "| ClassicalElegance",
          "| ModernInnovation",
          "| CulturalDepth",
          "| EmotionalResonance",
          "| IntellectualDepth"
        ],
        "start_line": 60,
        "end_line": 66,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_types_consolidated.ml"
      },
      {
        "hash": "9bd85ff6207e42611c561d7815116e63",
        "text": "| Rhythm\n| Elegance\n| ClassicalElegance\n| ModernInnovation\n| CulturalDepth\n| EmotionalResonance\n| IntellectualDepth",
        "lines": [
          "| Rhythm",
          "| Elegance",
          "| ClassicalElegance",
          "| ModernInnovation",
          "| CulturalDepth",
          "| EmotionalResonance",
          "| IntellectualDepth"
        ],
        "start_line": 9,
        "end_line": 15,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/artistic_types.ml"
      }
    ],
    "d8beffdc5ec1e0a45f3bc8d4849e3cf3": [
      {
        "hash": "d8beffdc5ec1e0a45f3bc8d4849e3cf3",
        "text": "| Elegance\n| ClassicalElegance\n| ModernInnovation\n| CulturalDepth\n| EmotionalResonance\n| IntellectualDepth",
        "lines": [
          "| Elegance",
          "| ClassicalElegance",
          "| ModernInnovation",
          "| CulturalDepth",
          "| EmotionalResonance",
          "| IntellectualDepth"
        ],
        "start_line": 61,
        "end_line": 66,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_types_consolidated.ml"
      },
      {
        "hash": "d8beffdc5ec1e0a45f3bc8d4849e3cf3",
        "text": "| Elegance\n| ClassicalElegance\n| ModernInnovation\n| CulturalDepth\n| EmotionalResonance\n| IntellectualDepth",
        "lines": [
          "| Elegance",
          "| ClassicalElegance",
          "| ModernInnovation",
          "| CulturalDepth",
          "| EmotionalResonance",
          "| IntellectualDepth"
        ],
        "start_line": 10,
        "end_line": 15,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/artistic_types.ml"
      }
    ],
    "302023b84909c507535247c9f21c1d86": [
      {
        "hash": "302023b84909c507535247c9f21c1d86",
        "text": "| ClassicalElegance\n| ModernInnovation\n| CulturalDepth\n| EmotionalResonance\n| IntellectualDepth",
        "lines": [
          "| ClassicalElegance",
          "| ModernInnovation",
          "| CulturalDepth",
          "| EmotionalResonance",
          "| IntellectualDepth"
        ],
        "start_line": 62,
        "end_line": 66,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_types_consolidated.ml"
      },
      {
        "hash": "302023b84909c507535247c9f21c1d86",
        "text": "| ClassicalElegance\n| ModernInnovation\n| CulturalDepth\n| EmotionalResonance\n| IntellectualDepth",
        "lines": [
          "| ClassicalElegance",
          "| ModernInnovation",
          "| CulturalDepth",
          "| EmotionalResonance",
          "| IntellectualDepth"
        ],
        "start_line": 11,
        "end_line": 15,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/artistic_types.ml"
      }
    ],
    "a3763d9623c961cab1d0c56618b2940a": [
      {
        "hash": "a3763d9623c961cab1d0c56618b2940a",
        "text": "| ModernInnovation\n| CulturalDepth\n| EmotionalResonance\n| IntellectualDepth",
        "lines": [
          "| ModernInnovation",
          "| CulturalDepth",
          "| EmotionalResonance",
          "| IntellectualDepth"
        ],
        "start_line": 63,
        "end_line": 66,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_types_consolidated.ml"
      },
      {
        "hash": "a3763d9623c961cab1d0c56618b2940a",
        "text": "| ModernInnovation\n| CulturalDepth\n| EmotionalResonance\n| IntellectualDepth",
        "lines": [
          "| ModernInnovation",
          "| CulturalDepth",
          "| EmotionalResonance",
          "| IntellectualDepth"
        ],
        "start_line": 12,
        "end_line": 15,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/artistic_types.ml"
      }
    ],
    "f706fbd3b3f25696f946bb7d5ffadd63": [
      {
        "hash": "f706fbd3b3f25696f946bb7d5ffadd63",
        "text": "| CulturalDepth\n| EmotionalResonance\n| IntellectualDepth",
        "lines": [
          "| CulturalDepth",
          "| EmotionalResonance",
          "| IntellectualDepth"
        ],
        "start_line": 64,
        "end_line": 66,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_types_consolidated.ml"
      },
      {
        "hash": "f706fbd3b3f25696f946bb7d5ffadd63",
        "text": "| CulturalDepth\n| EmotionalResonance\n| IntellectualDepth",
        "lines": [
          "| CulturalDepth",
          "| EmotionalResonance",
          "| IntellectualDepth"
        ],
        "start_line": 13,
        "end_line": 15,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/artistic_types.ml"
      }
    ],
    "14ea49f8f2d1ad38edaff20df797008e": [
      {
        "hash": "14ea49f8f2d1ad38edaff20df797008e",
        "text": "type artistic_report = {\nverse : string;\nrhyme_score : float;\ntone_score : float;\nparallelism_score : float;\nimagery_score : float;\nrhythm_score : float;\nelegance_score : float;\noverall_grade : evaluation_grade;\nsuggestions : string list;",
        "lines": [
          "type artistic_report = {",
          "verse : string;",
          "rhyme_score : float;",
          "tone_score : float;",
          "parallelism_score : float;",
          "imagery_score : float;",
          "rhythm_score : float;",
          "elegance_score : float;",
          "overall_grade : evaluation_grade;",
          "suggestions : string list;"
        ],
        "start_line": 70,
        "end_line": 79,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_types_consolidated.ml"
      },
      {
        "hash": "14ea49f8f2d1ad38edaff20df797008e",
        "text": "type artistic_report = {\nverse : string;\nrhyme_score : float;\ntone_score : float;\nparallelism_score : float;\nimagery_score : float;\nrhythm_score : float;\nelegance_score : float;\noverall_grade : evaluation_grade;\nsuggestions : string list;",
        "lines": [
          "type artistic_report = {",
          "verse : string;",
          "rhyme_score : float;",
          "tone_score : float;",
          "parallelism_score : float;",
          "imagery_score : float;",
          "rhythm_score : float;",
          "elegance_score : float;",
          "overall_grade : evaluation_grade;",
          "suggestions : string list;"
        ],
        "start_line": 24,
        "end_line": 33,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/artistic_types.ml"
      }
    ],
    "ad41d3f241982615307c1201cd554579": [
      {
        "hash": "ad41d3f241982615307c1201cd554579",
        "text": "verse : string;\nrhyme_score : float;\ntone_score : float;\nparallelism_score : float;\nimagery_score : float;\nrhythm_score : float;\nelegance_score : float;\noverall_grade : evaluation_grade;\nsuggestions : string list;\n}",
        "lines": [
          "verse : string;",
          "rhyme_score : float;",
          "tone_score : float;",
          "parallelism_score : float;",
          "imagery_score : float;",
          "rhythm_score : float;",
          "elegance_score : float;",
          "overall_grade : evaluation_grade;",
          "suggestions : string list;",
          "}"
        ],
        "start_line": 71,
        "end_line": 80,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_types_consolidated.ml"
      },
      {
        "hash": "ad41d3f241982615307c1201cd554579",
        "text": "verse : string;\nrhyme_score : float;\ntone_score : float;\nparallelism_score : float;\nimagery_score : float;\nrhythm_score : float;\nelegance_score : float;\noverall_grade : evaluation_grade;\nsuggestions : string list;\n}",
        "lines": [
          "verse : string;",
          "rhyme_score : float;",
          "tone_score : float;",
          "parallelism_score : float;",
          "imagery_score : float;",
          "rhythm_score : float;",
          "elegance_score : float;",
          "overall_grade : evaluation_grade;",
          "suggestions : string list;",
          "}"
        ],
        "start_line": 25,
        "end_line": 34,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/artistic_types.ml"
      }
    ],
    "5d2817bd8a7c440a95595d28e15690b4": [
      {
        "hash": "5d2817bd8a7c440a95595d28e15690b4",
        "text": "rhyme_score : float;\ntone_score : float;\nparallelism_score : float;\nimagery_score : float;\nrhythm_score : float;\nelegance_score : float;\noverall_grade : evaluation_grade;\nsuggestions : string list;\n}",
        "lines": [
          "rhyme_score : float;",
          "tone_score : float;",
          "parallelism_score : float;",
          "imagery_score : float;",
          "rhythm_score : float;",
          "elegance_score : float;",
          "overall_grade : evaluation_grade;",
          "suggestions : string list;",
          "}"
        ],
        "start_line": 72,
        "end_line": 80,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_types_consolidated.ml"
      },
      {
        "hash": "5d2817bd8a7c440a95595d28e15690b4",
        "text": "rhyme_score : float;\ntone_score : float;\nparallelism_score : float;\nimagery_score : float;\nrhythm_score : float;\nelegance_score : float;\noverall_grade : evaluation_grade;\nsuggestions : string list;\n}",
        "lines": [
          "rhyme_score : float;",
          "tone_score : float;",
          "parallelism_score : float;",
          "imagery_score : float;",
          "rhythm_score : float;",
          "elegance_score : float;",
          "overall_grade : evaluation_grade;",
          "suggestions : string list;",
          "}"
        ],
        "start_line": 26,
        "end_line": 34,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/artistic_types.ml"
      }
    ],
    "d37d39fcbb79accbb451a8563f14c7be": [
      {
        "hash": "d37d39fcbb79accbb451a8563f14c7be",
        "text": "tone_score : float;\nparallelism_score : float;\nimagery_score : float;\nrhythm_score : float;\nelegance_score : float;\noverall_grade : evaluation_grade;\nsuggestions : string list;\n}",
        "lines": [
          "tone_score : float;",
          "parallelism_score : float;",
          "imagery_score : float;",
          "rhythm_score : float;",
          "elegance_score : float;",
          "overall_grade : evaluation_grade;",
          "suggestions : string list;",
          "}"
        ],
        "start_line": 73,
        "end_line": 80,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_types_consolidated.ml"
      },
      {
        "hash": "d37d39fcbb79accbb451a8563f14c7be",
        "text": "tone_score : float;\nparallelism_score : float;\nimagery_score : float;\nrhythm_score : float;\nelegance_score : float;\noverall_grade : evaluation_grade;\nsuggestions : string list;\n}",
        "lines": [
          "tone_score : float;",
          "parallelism_score : float;",
          "imagery_score : float;",
          "rhythm_score : float;",
          "elegance_score : float;",
          "overall_grade : evaluation_grade;",
          "suggestions : string list;",
          "}"
        ],
        "start_line": 27,
        "end_line": 34,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/artistic_types.ml"
      }
    ],
    "b80b5a6ab20ebdd06c658bcbeda07802": [
      {
        "hash": "b80b5a6ab20ebdd06c658bcbeda07802",
        "text": "parallelism_score : float;\nimagery_score : float;\nrhythm_score : float;\nelegance_score : float;\noverall_grade : evaluation_grade;\nsuggestions : string list;\n}",
        "lines": [
          "parallelism_score : float;",
          "imagery_score : float;",
          "rhythm_score : float;",
          "elegance_score : float;",
          "overall_grade : evaluation_grade;",
          "suggestions : string list;",
          "}"
        ],
        "start_line": 74,
        "end_line": 80,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_types_consolidated.ml"
      },
      {
        "hash": "b80b5a6ab20ebdd06c658bcbeda07802",
        "text": "parallelism_score : float;\nimagery_score : float;\nrhythm_score : float;\nelegance_score : float;\noverall_grade : evaluation_grade;\nsuggestions : string list;\n}",
        "lines": [
          "parallelism_score : float;",
          "imagery_score : float;",
          "rhythm_score : float;",
          "elegance_score : float;",
          "overall_grade : evaluation_grade;",
          "suggestions : string list;",
          "}"
        ],
        "start_line": 28,
        "end_line": 34,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/artistic_types.ml"
      }
    ],
    "7a97d3575def312d7431251f2fc16917": [
      {
        "hash": "7a97d3575def312d7431251f2fc16917",
        "text": "imagery_score : float;\nrhythm_score : float;\nelegance_score : float;\noverall_grade : evaluation_grade;\nsuggestions : string list;\n}",
        "lines": [
          "imagery_score : float;",
          "rhythm_score : float;",
          "elegance_score : float;",
          "overall_grade : evaluation_grade;",
          "suggestions : string list;",
          "}"
        ],
        "start_line": 75,
        "end_line": 80,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_types_consolidated.ml"
      },
      {
        "hash": "7a97d3575def312d7431251f2fc16917",
        "text": "imagery_score : float;\nrhythm_score : float;\nelegance_score : float;\noverall_grade : evaluation_grade;\nsuggestions : string list;\n}",
        "lines": [
          "imagery_score : float;",
          "rhythm_score : float;",
          "elegance_score : float;",
          "overall_grade : evaluation_grade;",
          "suggestions : string list;",
          "}"
        ],
        "start_line": 29,
        "end_line": 34,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/artistic_types.ml"
      }
    ],
    "f2e3044193021b28ddffc557ee7a8b51": [
      {
        "hash": "f2e3044193021b28ddffc557ee7a8b51",
        "text": "rhythm_score : float;\nelegance_score : float;\noverall_grade : evaluation_grade;\nsuggestions : string list;\n}",
        "lines": [
          "rhythm_score : float;",
          "elegance_score : float;",
          "overall_grade : evaluation_grade;",
          "suggestions : string list;",
          "}"
        ],
        "start_line": 76,
        "end_line": 80,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_types_consolidated.ml"
      },
      {
        "hash": "f2e3044193021b28ddffc557ee7a8b51",
        "text": "rhythm_score : float;\nelegance_score : float;\noverall_grade : evaluation_grade;\nsuggestions : string list;\n}",
        "lines": [
          "rhythm_score : float;",
          "elegance_score : float;",
          "overall_grade : evaluation_grade;",
          "suggestions : string list;",
          "}"
        ],
        "start_line": 30,
        "end_line": 34,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/artistic_types.ml"
      }
    ],
    "fbadc77ef494a97785cab40e2c36577b": [
      {
        "hash": "fbadc77ef494a97785cab40e2c36577b",
        "text": "elegance_score : float;\noverall_grade : evaluation_grade;\nsuggestions : string list;\n}",
        "lines": [
          "elegance_score : float;",
          "overall_grade : evaluation_grade;",
          "suggestions : string list;",
          "}"
        ],
        "start_line": 77,
        "end_line": 80,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_types_consolidated.ml"
      },
      {
        "hash": "fbadc77ef494a97785cab40e2c36577b",
        "text": "elegance_score : float;\noverall_grade : evaluation_grade;\nsuggestions : string list;\n}",
        "lines": [
          "elegance_score : float;",
          "overall_grade : evaluation_grade;",
          "suggestions : string list;",
          "}"
        ],
        "start_line": 31,
        "end_line": 34,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/artistic_types.ml"
      }
    ],
    "52ebcd3aab5dbdf2e7366147d83872e9": [
      {
        "hash": "52ebcd3aab5dbdf2e7366147d83872e9",
        "text": "overall_grade : evaluation_grade;\nsuggestions : string list;\n}",
        "lines": [
          "overall_grade : evaluation_grade;",
          "suggestions : string list;",
          "}"
        ],
        "start_line": 78,
        "end_line": 80,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_types_consolidated.ml"
      },
      {
        "hash": "52ebcd3aab5dbdf2e7366147d83872e9",
        "text": "overall_grade : evaluation_grade;\nsuggestions : string list;\n}",
        "lines": [
          "overall_grade : evaluation_grade;",
          "suggestions : string list;",
          "}"
        ],
        "start_line": 32,
        "end_line": 34,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/artistic_types.ml"
      }
    ],
    "2c2a9afe5196b9a434ba9f6b377ef7c3": [
      {
        "hash": "2c2a9afe5196b9a434ba9f6b377ef7c3",
        "text": "type artistic_scores = {\nrhyme_harmony : float;\ntonal_balance : float;\nparallelism : float;\nimagery : float;\nrhythm : float;\nelegance : float;\n}",
        "lines": [
          "type artistic_scores = {",
          "rhyme_harmony : float;",
          "tonal_balance : float;",
          "parallelism : float;",
          "imagery : float;",
          "rhythm : float;",
          "elegance : float;",
          "}"
        ],
        "start_line": 82,
        "end_line": 89,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_types_consolidated.ml"
      },
      {
        "hash": "2c2a9afe5196b9a434ba9f6b377ef7c3",
        "text": "type artistic_scores = {\nrhyme_harmony : float;\ntonal_balance : float;\nparallelism : float;\nimagery : float;\nrhythm : float;\nelegance : float;\n}",
        "lines": [
          "type artistic_scores = {",
          "rhyme_harmony : float;",
          "tonal_balance : float;",
          "parallelism : float;",
          "imagery : float;",
          "rhythm : float;",
          "elegance : float;",
          "}"
        ],
        "start_line": 37,
        "end_line": 44,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/artistic_types.ml"
      }
    ],
    "444903798c2a03dc9f3e74321a365080": [
      {
        "hash": "444903798c2a03dc9f3e74321a365080",
        "text": "rhyme_harmony : float;\ntonal_balance : float;\nparallelism : float;\nimagery : float;\nrhythm : float;\nelegance : float;\n}",
        "lines": [
          "rhyme_harmony : float;",
          "tonal_balance : float;",
          "parallelism : float;",
          "imagery : float;",
          "rhythm : float;",
          "elegance : float;",
          "}"
        ],
        "start_line": 83,
        "end_line": 89,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_types_consolidated.ml"
      },
      {
        "hash": "444903798c2a03dc9f3e74321a365080",
        "text": "rhyme_harmony : float;\ntonal_balance : float;\nparallelism : float;\nimagery : float;\nrhythm : float;\nelegance : float;\n}",
        "lines": [
          "rhyme_harmony : float;",
          "tonal_balance : float;",
          "parallelism : float;",
          "imagery : float;",
          "rhythm : float;",
          "elegance : float;",
          "}"
        ],
        "start_line": 38,
        "end_line": 44,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/artistic_types.ml"
      }
    ],
    "f05c96e06bc8207557940216ccc376ef": [
      {
        "hash": "f05c96e06bc8207557940216ccc376ef",
        "text": "tonal_balance : float;\nparallelism : float;\nimagery : float;\nrhythm : float;\nelegance : float;\n}",
        "lines": [
          "tonal_balance : float;",
          "parallelism : float;",
          "imagery : float;",
          "rhythm : float;",
          "elegance : float;",
          "}"
        ],
        "start_line": 84,
        "end_line": 89,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_types_consolidated.ml"
      },
      {
        "hash": "f05c96e06bc8207557940216ccc376ef",
        "text": "tonal_balance : float;\nparallelism : float;\nimagery : float;\nrhythm : float;\nelegance : float;\n}",
        "lines": [
          "tonal_balance : float;",
          "parallelism : float;",
          "imagery : float;",
          "rhythm : float;",
          "elegance : float;",
          "}"
        ],
        "start_line": 39,
        "end_line": 44,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/artistic_types.ml"
      }
    ],
    "b6ef81ec7222bf5c574d7702f32664fa": [
      {
        "hash": "b6ef81ec7222bf5c574d7702f32664fa",
        "text": "parallelism : float;\nimagery : float;\nrhythm : float;\nelegance : float;\n}",
        "lines": [
          "parallelism : float;",
          "imagery : float;",
          "rhythm : float;",
          "elegance : float;",
          "}"
        ],
        "start_line": 85,
        "end_line": 89,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_types_consolidated.ml"
      },
      {
        "hash": "b6ef81ec7222bf5c574d7702f32664fa",
        "text": "parallelism : float;\nimagery : float;\nrhythm : float;\nelegance : float;\n}",
        "lines": [
          "parallelism : float;",
          "imagery : float;",
          "rhythm : float;",
          "elegance : float;",
          "}"
        ],
        "start_line": 40,
        "end_line": 44,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/artistic_types.ml"
      }
    ],
    "7d4cd423455e3a4dbd3354d12d32350a": [
      {
        "hash": "7d4cd423455e3a4dbd3354d12d32350a",
        "text": "imagery : float;\nrhythm : float;\nelegance : float;\n}",
        "lines": [
          "imagery : float;",
          "rhythm : float;",
          "elegance : float;",
          "}"
        ],
        "start_line": 86,
        "end_line": 89,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_types_consolidated.ml"
      },
      {
        "hash": "7d4cd423455e3a4dbd3354d12d32350a",
        "text": "imagery : float;\nrhythm : float;\nelegance : float;\n}",
        "lines": [
          "imagery : float;",
          "rhythm : float;",
          "elegance : float;",
          "}"
        ],
        "start_line": 41,
        "end_line": 44,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/artistic_types.ml"
      }
    ],
    "076a6b95cdedcf41182f4882327bdcac": [
      {
        "hash": "076a6b95cdedcf41182f4882327bdcac",
        "text": "rhythm : float;\nelegance : float;\n}",
        "lines": [
          "rhythm : float;",
          "elegance : float;",
          "}"
        ],
        "start_line": 87,
        "end_line": 89,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_types_consolidated.ml"
      },
      {
        "hash": "076a6b95cdedcf41182f4882327bdcac",
        "text": "rhythm : float;\nelegance : float;\n}",
        "lines": [
          "rhythm : float;",
          "elegance : float;",
          "}"
        ],
        "start_line": 42,
        "end_line": 44,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/artistic_types.ml"
      }
    ],
    "715456f33b970d9c11efeeb92bce787e": [
      {
        "hash": "715456f33b970d9c11efeeb92bce787e",
        "text": "type poetry_form =\n| SiYanPianTi\n| WuYanLuShi\n| QiYanJueJu\n| CiPai of string\n| ModernPoetry\n| SiYanParallelProse",
        "lines": [
          "type poetry_form =",
          "| SiYanPianTi",
          "| WuYanLuShi",
          "| QiYanJueJu",
          "| CiPai of string",
          "| ModernPoetry",
          "| SiYanParallelProse"
        ],
        "start_line": 93,
        "end_line": 99,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_types_consolidated.ml"
      },
      {
        "hash": "715456f33b970d9c11efeeb92bce787e",
        "text": "type poetry_form =\n| SiYanPianTi\n| WuYanLuShi\n| QiYanJueJu\n| CiPai of string\n| ModernPoetry\n| SiYanParallelProse",
        "lines": [
          "type poetry_form =",
          "| SiYanPianTi",
          "| WuYanLuShi",
          "| QiYanJueJu",
          "| CiPai of string",
          "| ModernPoetry",
          "| SiYanParallelProse"
        ],
        "start_line": 48,
        "end_line": 54,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/artistic_types.ml"
      }
    ],
    "5e34b3744998544c3cc5487322d62722": [
      {
        "hash": "5e34b3744998544c3cc5487322d62722",
        "text": "| SiYanPianTi\n| WuYanLuShi\n| QiYanJueJu\n| CiPai of string\n| ModernPoetry\n| SiYanParallelProse",
        "lines": [
          "| SiYanPianTi",
          "| WuYanLuShi",
          "| QiYanJueJu",
          "| CiPai of string",
          "| ModernPoetry",
          "| SiYanParallelProse"
        ],
        "start_line": 94,
        "end_line": 99,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_types_consolidated.ml"
      },
      {
        "hash": "5e34b3744998544c3cc5487322d62722",
        "text": "| SiYanPianTi\n| WuYanLuShi\n| QiYanJueJu\n| CiPai of string\n| ModernPoetry\n| SiYanParallelProse",
        "lines": [
          "| SiYanPianTi",
          "| WuYanLuShi",
          "| QiYanJueJu",
          "| CiPai of string",
          "| ModernPoetry",
          "| SiYanParallelProse"
        ],
        "start_line": 49,
        "end_line": 54,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/artistic_types.ml"
      }
    ],
    "6100be577e758d645ea4490e0eadbe30": [
      {
        "hash": "6100be577e758d645ea4490e0eadbe30",
        "text": "| WuYanLuShi\n| QiYanJueJu\n| CiPai of string\n| ModernPoetry\n| SiYanParallelProse",
        "lines": [
          "| WuYanLuShi",
          "| QiYanJueJu",
          "| CiPai of string",
          "| ModernPoetry",
          "| SiYanParallelProse"
        ],
        "start_line": 95,
        "end_line": 99,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_types_consolidated.ml"
      },
      {
        "hash": "6100be577e758d645ea4490e0eadbe30",
        "text": "| WuYanLuShi\n| QiYanJueJu\n| CiPai of string\n| ModernPoetry\n| SiYanParallelProse",
        "lines": [
          "| WuYanLuShi",
          "| QiYanJueJu",
          "| CiPai of string",
          "| ModernPoetry",
          "| SiYanParallelProse"
        ],
        "start_line": 50,
        "end_line": 54,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/artistic_types.ml"
      }
    ],
    "f961aeffbdf2d63ea27b55f94e5d27eb": [
      {
        "hash": "f961aeffbdf2d63ea27b55f94e5d27eb",
        "text": "| QiYanJueJu\n| CiPai of string\n| ModernPoetry\n| SiYanParallelProse",
        "lines": [
          "| QiYanJueJu",
          "| CiPai of string",
          "| ModernPoetry",
          "| SiYanParallelProse"
        ],
        "start_line": 96,
        "end_line": 99,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_types_consolidated.ml"
      },
      {
        "hash": "f961aeffbdf2d63ea27b55f94e5d27eb",
        "text": "| QiYanJueJu\n| CiPai of string\n| ModernPoetry\n| SiYanParallelProse",
        "lines": [
          "| QiYanJueJu",
          "| CiPai of string",
          "| ModernPoetry",
          "| SiYanParallelProse"
        ],
        "start_line": 51,
        "end_line": 54,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/artistic_types.ml"
      }
    ],
    "0c5d8559058e7439c0752895a45cd699": [
      {
        "hash": "0c5d8559058e7439c0752895a45cd699",
        "text": "| CiPai of string\n| ModernPoetry\n| SiYanParallelProse",
        "lines": [
          "| CiPai of string",
          "| ModernPoetry",
          "| SiYanParallelProse"
        ],
        "start_line": 97,
        "end_line": 99,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_types_consolidated.ml"
      },
      {
        "hash": "0c5d8559058e7439c0752895a45cd699",
        "text": "| CiPai of string\n| ModernPoetry\n| SiYanParallelProse",
        "lines": [
          "| CiPai of string",
          "| ModernPoetry",
          "| SiYanParallelProse"
        ],
        "start_line": 52,
        "end_line": 54,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/artistic_types.ml"
      }
    ],
    "98f71957339ef18b2d83d2897af37de5": [
      {
        "hash": "98f71957339ef18b2d83d2897af37de5",
        "text": "type siyan_artistic_standards = {\nchar_count : int;\ntone_pattern : bool list;\nparallelism_required : bool;\nrhythm_weight : float;\n}",
        "lines": [
          "type siyan_artistic_standards = {",
          "char_count : int;",
          "tone_pattern : bool list;",
          "parallelism_required : bool;",
          "rhythm_weight : float;",
          "}"
        ],
        "start_line": 101,
        "end_line": 106,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_types_consolidated.ml"
      },
      {
        "hash": "98f71957339ef18b2d83d2897af37de5",
        "text": "type siyan_artistic_standards = {\nchar_count : int;\ntone_pattern : bool list;\nparallelism_required : bool;\nrhythm_weight : float;\n}",
        "lines": [
          "type siyan_artistic_standards = {",
          "char_count : int;",
          "tone_pattern : bool list;",
          "parallelism_required : bool;",
          "rhythm_weight : float;",
          "}"
        ],
        "start_line": 56,
        "end_line": 61,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/artistic_types.ml"
      }
    ],
    "229e1cd0c2d78d4f1fbaa334ba8e6ae8": [
      {
        "hash": "229e1cd0c2d78d4f1fbaa334ba8e6ae8",
        "text": "char_count : int;\ntone_pattern : bool list;\nparallelism_required : bool;\nrhythm_weight : float;\n}",
        "lines": [
          "char_count : int;",
          "tone_pattern : bool list;",
          "parallelism_required : bool;",
          "rhythm_weight : float;",
          "}"
        ],
        "start_line": 102,
        "end_line": 106,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_types_consolidated.ml"
      },
      {
        "hash": "229e1cd0c2d78d4f1fbaa334ba8e6ae8",
        "text": "char_count : int;\ntone_pattern : bool list;\nparallelism_required : bool;\nrhythm_weight : float;\n}",
        "lines": [
          "char_count : int;",
          "tone_pattern : bool list;",
          "parallelism_required : bool;",
          "rhythm_weight : float;",
          "}"
        ],
        "start_line": 57,
        "end_line": 61,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/artistic_types.ml"
      }
    ],
    "e492e9fbadc2d788b387345f4f4bd28c": [
      {
        "hash": "e492e9fbadc2d788b387345f4f4bd28c",
        "text": "tone_pattern : bool list;\nparallelism_required : bool;\nrhythm_weight : float;\n}",
        "lines": [
          "tone_pattern : bool list;",
          "parallelism_required : bool;",
          "rhythm_weight : float;",
          "}"
        ],
        "start_line": 103,
        "end_line": 106,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_types_consolidated.ml"
      },
      {
        "hash": "e492e9fbadc2d788b387345f4f4bd28c",
        "text": "tone_pattern : bool list;\nparallelism_required : bool;\nrhythm_weight : float;\n}",
        "lines": [
          "tone_pattern : bool list;",
          "parallelism_required : bool;",
          "rhythm_weight : float;",
          "}"
        ],
        "start_line": 58,
        "end_line": 61,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/artistic_types.ml"
      }
    ],
    "7d89b8ddaa058f3160e4299a90445a84": [
      {
        "hash": "7d89b8ddaa058f3160e4299a90445a84",
        "text": "parallelism_required : bool;\nrhythm_weight : float;\n}",
        "lines": [
          "parallelism_required : bool;",
          "rhythm_weight : float;",
          "}"
        ],
        "start_line": 104,
        "end_line": 106,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_types_consolidated.ml"
      },
      {
        "hash": "7d89b8ddaa058f3160e4299a90445a84",
        "text": "parallelism_required : bool;\nrhythm_weight : float;\n}",
        "lines": [
          "parallelism_required : bool;",
          "rhythm_weight : float;",
          "}"
        ],
        "start_line": 59,
        "end_line": 61,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/artistic_types.ml"
      }
    ],
    "5de43f8c67741cb14bdf7048271e0861": [
      {
        "hash": "5de43f8c67741cb14bdf7048271e0861",
        "text": "type wuyan_lushi_standards = {\nline_count : int;\nchar_per_line : int;\nrhyme_scheme : bool array;\nparallelism_required : bool array;\ntone_pattern : bool list list;\nrhythm_weight : float;\n}",
        "lines": [
          "type wuyan_lushi_standards = {",
          "line_count : int;",
          "char_per_line : int;",
          "rhyme_scheme : bool array;",
          "parallelism_required : bool array;",
          "tone_pattern : bool list list;",
          "rhythm_weight : float;",
          "}"
        ],
        "start_line": 108,
        "end_line": 115,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_types_consolidated.ml"
      },
      {
        "hash": "5de43f8c67741cb14bdf7048271e0861",
        "text": "type wuyan_lushi_standards = {\nline_count : int;\nchar_per_line : int;\nrhyme_scheme : bool array;\nparallelism_required : bool array;\ntone_pattern : bool list list;\nrhythm_weight : float;\n}",
        "lines": [
          "type wuyan_lushi_standards = {",
          "line_count : int;",
          "char_per_line : int;",
          "rhyme_scheme : bool array;",
          "parallelism_required : bool array;",
          "tone_pattern : bool list list;",
          "rhythm_weight : float;",
          "}"
        ],
        "start_line": 64,
        "end_line": 71,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/artistic_types.ml"
      }
    ],
    "3438cb8dc5d7a32d02652ef1b7e35cf1": [
      {
        "hash": "3438cb8dc5d7a32d02652ef1b7e35cf1",
        "text": "line_count : int;\nchar_per_line : int;\nrhyme_scheme : bool array;\nparallelism_required : bool array;\ntone_pattern : bool list list;\nrhythm_weight : float;\n}",
        "lines": [
          "line_count : int;",
          "char_per_line : int;",
          "rhyme_scheme : bool array;",
          "parallelism_required : bool array;",
          "tone_pattern : bool list list;",
          "rhythm_weight : float;",
          "}"
        ],
        "start_line": 109,
        "end_line": 115,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_types_consolidated.ml"
      },
      {
        "hash": "3438cb8dc5d7a32d02652ef1b7e35cf1",
        "text": "line_count : int;\nchar_per_line : int;\nrhyme_scheme : bool array;\nparallelism_required : bool array;\ntone_pattern : bool list list;\nrhythm_weight : float;\n}",
        "lines": [
          "line_count : int;",
          "char_per_line : int;",
          "rhyme_scheme : bool array;",
          "parallelism_required : bool array;",
          "tone_pattern : bool list list;",
          "rhythm_weight : float;",
          "}"
        ],
        "start_line": 118,
        "end_line": 124,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_types_consolidated.ml"
      },
      {
        "hash": "3438cb8dc5d7a32d02652ef1b7e35cf1",
        "text": "line_count : int;\nchar_per_line : int;\nrhyme_scheme : bool array;\nparallelism_required : bool array;\ntone_pattern : bool list list;\nrhythm_weight : float;\n}",
        "lines": [
          "line_count : int;",
          "char_per_line : int;",
          "rhyme_scheme : bool array;",
          "parallelism_required : bool array;",
          "tone_pattern : bool list list;",
          "rhythm_weight : float;",
          "}"
        ],
        "start_line": 65,
        "end_line": 71,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/artistic_types.ml"
      },
      {
        "hash": "3438cb8dc5d7a32d02652ef1b7e35cf1",
        "text": "line_count : int;\nchar_per_line : int;\nrhyme_scheme : bool array;\nparallelism_required : bool array;\ntone_pattern : bool list list;\nrhythm_weight : float;\n}",
        "lines": [
          "line_count : int;",
          "char_per_line : int;",
          "rhyme_scheme : bool array;",
          "parallelism_required : bool array;",
          "tone_pattern : bool list list;",
          "rhythm_weight : float;",
          "}"
        ],
        "start_line": 75,
        "end_line": 81,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/artistic_types.ml"
      }
    ],
    "17fe879fcbd30b26908c619d7b0d7ae5": [
      {
        "hash": "17fe879fcbd30b26908c619d7b0d7ae5",
        "text": "char_per_line : int;\nrhyme_scheme : bool array;\nparallelism_required : bool array;\ntone_pattern : bool list list;\nrhythm_weight : float;\n}",
        "lines": [
          "char_per_line : int;",
          "rhyme_scheme : bool array;",
          "parallelism_required : bool array;",
          "tone_pattern : bool list list;",
          "rhythm_weight : float;",
          "}"
        ],
        "start_line": 110,
        "end_line": 115,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_types_consolidated.ml"
      },
      {
        "hash": "17fe879fcbd30b26908c619d7b0d7ae5",
        "text": "char_per_line : int;\nrhyme_scheme : bool array;\nparallelism_required : bool array;\ntone_pattern : bool list list;\nrhythm_weight : float;\n}",
        "lines": [
          "char_per_line : int;",
          "rhyme_scheme : bool array;",
          "parallelism_required : bool array;",
          "tone_pattern : bool list list;",
          "rhythm_weight : float;",
          "}"
        ],
        "start_line": 119,
        "end_line": 124,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_types_consolidated.ml"
      },
      {
        "hash": "17fe879fcbd30b26908c619d7b0d7ae5",
        "text": "char_per_line : int;\nrhyme_scheme : bool array;\nparallelism_required : bool array;\ntone_pattern : bool list list;\nrhythm_weight : float;\n}",
        "lines": [
          "char_per_line : int;",
          "rhyme_scheme : bool array;",
          "parallelism_required : bool array;",
          "tone_pattern : bool list list;",
          "rhythm_weight : float;",
          "}"
        ],
        "start_line": 66,
        "end_line": 71,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/artistic_types.ml"
      },
      {
        "hash": "17fe879fcbd30b26908c619d7b0d7ae5",
        "text": "char_per_line : int;\nrhyme_scheme : bool array;\nparallelism_required : bool array;\ntone_pattern : bool list list;\nrhythm_weight : float;\n}",
        "lines": [
          "char_per_line : int;",
          "rhyme_scheme : bool array;",
          "parallelism_required : bool array;",
          "tone_pattern : bool list list;",
          "rhythm_weight : float;",
          "}"
        ],
        "start_line": 76,
        "end_line": 81,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/artistic_types.ml"
      }
    ],
    "8a41b2388a54d698a28b13278c46edf9": [
      {
        "hash": "8a41b2388a54d698a28b13278c46edf9",
        "text": "rhyme_scheme : bool array;\nparallelism_required : bool array;\ntone_pattern : bool list list;\nrhythm_weight : float;\n}",
        "lines": [
          "rhyme_scheme : bool array;",
          "parallelism_required : bool array;",
          "tone_pattern : bool list list;",
          "rhythm_weight : float;",
          "}"
        ],
        "start_line": 111,
        "end_line": 115,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_types_consolidated.ml"
      },
      {
        "hash": "8a41b2388a54d698a28b13278c46edf9",
        "text": "rhyme_scheme : bool array;\nparallelism_required : bool array;\ntone_pattern : bool list list;\nrhythm_weight : float;\n}",
        "lines": [
          "rhyme_scheme : bool array;",
          "parallelism_required : bool array;",
          "tone_pattern : bool list list;",
          "rhythm_weight : float;",
          "}"
        ],
        "start_line": 120,
        "end_line": 124,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_types_consolidated.ml"
      },
      {
        "hash": "8a41b2388a54d698a28b13278c46edf9",
        "text": "rhyme_scheme : bool array;\nparallelism_required : bool array;\ntone_pattern : bool list list;\nrhythm_weight : float;\n}",
        "lines": [
          "rhyme_scheme : bool array;",
          "parallelism_required : bool array;",
          "tone_pattern : bool list list;",
          "rhythm_weight : float;",
          "}"
        ],
        "start_line": 67,
        "end_line": 71,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/artistic_types.ml"
      },
      {
        "hash": "8a41b2388a54d698a28b13278c46edf9",
        "text": "rhyme_scheme : bool array;\nparallelism_required : bool array;\ntone_pattern : bool list list;\nrhythm_weight : float;\n}",
        "lines": [
          "rhyme_scheme : bool array;",
          "parallelism_required : bool array;",
          "tone_pattern : bool list list;",
          "rhythm_weight : float;",
          "}"
        ],
        "start_line": 77,
        "end_line": 81,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/artistic_types.ml"
      }
    ],
    "c306f56ed932f71bd00ca463458c61a0": [
      {
        "hash": "c306f56ed932f71bd00ca463458c61a0",
        "text": "parallelism_required : bool array;\ntone_pattern : bool list list;\nrhythm_weight : float;\n}",
        "lines": [
          "parallelism_required : bool array;",
          "tone_pattern : bool list list;",
          "rhythm_weight : float;",
          "}"
        ],
        "start_line": 112,
        "end_line": 115,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_types_consolidated.ml"
      },
      {
        "hash": "c306f56ed932f71bd00ca463458c61a0",
        "text": "parallelism_required : bool array;\ntone_pattern : bool list list;\nrhythm_weight : float;\n}",
        "lines": [
          "parallelism_required : bool array;",
          "tone_pattern : bool list list;",
          "rhythm_weight : float;",
          "}"
        ],
        "start_line": 121,
        "end_line": 124,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_types_consolidated.ml"
      },
      {
        "hash": "c306f56ed932f71bd00ca463458c61a0",
        "text": "parallelism_required : bool array;\ntone_pattern : bool list list;\nrhythm_weight : float;\n}",
        "lines": [
          "parallelism_required : bool array;",
          "tone_pattern : bool list list;",
          "rhythm_weight : float;",
          "}"
        ],
        "start_line": 68,
        "end_line": 71,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/artistic_types.ml"
      },
      {
        "hash": "c306f56ed932f71bd00ca463458c61a0",
        "text": "parallelism_required : bool array;\ntone_pattern : bool list list;\nrhythm_weight : float;\n}",
        "lines": [
          "parallelism_required : bool array;",
          "tone_pattern : bool list list;",
          "rhythm_weight : float;",
          "}"
        ],
        "start_line": 78,
        "end_line": 81,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/artistic_types.ml"
      }
    ],
    "31460e5e29e5c93fb580f478b480009c": [
      {
        "hash": "31460e5e29e5c93fb580f478b480009c",
        "text": "tone_pattern : bool list list;\nrhythm_weight : float;\n}",
        "lines": [
          "tone_pattern : bool list list;",
          "rhythm_weight : float;",
          "}"
        ],
        "start_line": 113,
        "end_line": 115,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_types_consolidated.ml"
      },
      {
        "hash": "31460e5e29e5c93fb580f478b480009c",
        "text": "tone_pattern : bool list list;\nrhythm_weight : float;\n}",
        "lines": [
          "tone_pattern : bool list list;",
          "rhythm_weight : float;",
          "}"
        ],
        "start_line": 122,
        "end_line": 124,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_types_consolidated.ml"
      },
      {
        "hash": "31460e5e29e5c93fb580f478b480009c",
        "text": "tone_pattern : bool list list;\nrhythm_weight : float;\n}",
        "lines": [
          "tone_pattern : bool list list;",
          "rhythm_weight : float;",
          "}"
        ],
        "start_line": 69,
        "end_line": 71,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/artistic_types.ml"
      },
      {
        "hash": "31460e5e29e5c93fb580f478b480009c",
        "text": "tone_pattern : bool list list;\nrhythm_weight : float;\n}",
        "lines": [
          "tone_pattern : bool list list;",
          "rhythm_weight : float;",
          "}"
        ],
        "start_line": 79,
        "end_line": 81,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/artistic_types.ml"
      }
    ],
    "11f437c7886583bb78403b6813506ae5": [
      {
        "hash": "11f437c7886583bb78403b6813506ae5",
        "text": "type qiyan_jueju_standards = {\nline_count : int;\nchar_per_line : int;\nrhyme_scheme : bool array;\nparallelism_required : bool array;\ntone_pattern : bool list list;\nrhythm_weight : float;\n}",
        "lines": [
          "type qiyan_jueju_standards = {",
          "line_count : int;",
          "char_per_line : int;",
          "rhyme_scheme : bool array;",
          "parallelism_required : bool array;",
          "tone_pattern : bool list list;",
          "rhythm_weight : float;",
          "}"
        ],
        "start_line": 117,
        "end_line": 124,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_types_consolidated.ml"
      },
      {
        "hash": "11f437c7886583bb78403b6813506ae5",
        "text": "type qiyan_jueju_standards = {\nline_count : int;\nchar_per_line : int;\nrhyme_scheme : bool array;\nparallelism_required : bool array;\ntone_pattern : bool list list;\nrhythm_weight : float;\n}",
        "lines": [
          "type qiyan_jueju_standards = {",
          "line_count : int;",
          "char_per_line : int;",
          "rhyme_scheme : bool array;",
          "parallelism_required : bool array;",
          "tone_pattern : bool list list;",
          "rhythm_weight : float;",
          "}"
        ],
        "start_line": 74,
        "end_line": 81,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/artistic_types.ml"
      }
    ],
    "772962b5f7ca79c255d7932741ce0a93": [
      {
        "hash": "772962b5f7ca79c255d7932741ce0a93",
        "text": "let rhyme_group_to_string = function\n| AnRhyme -> \"安韵\"\n| SiRhyme -> \"思韵\"\n| TianRhyme -> \"天韵\"\n| WangRhyme -> \"望韵\"\n| QuRhyme -> \"去韵\"\n| YuRhyme -> \"鱼韵\"\n| HuaRhyme -> \"花韵\"\n| FengRhyme -> \"风韵\"\n| YueRhyme -> \"月韵\"",
        "lines": [
          "let rhyme_group_to_string = function",
          "| AnRhyme -> \"安韵\"",
          "| SiRhyme -> \"思韵\"",
          "| TianRhyme -> \"天韵\"",
          "| WangRhyme -> \"望韵\"",
          "| QuRhyme -> \"去韵\"",
          "| YuRhyme -> \"鱼韵\"",
          "| HuaRhyme -> \"花韵\"",
          "| FengRhyme -> \"风韵\"",
          "| YueRhyme -> \"月韵\""
        ],
        "start_line": 170,
        "end_line": 179,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_types_consolidated.ml"
      },
      {
        "hash": "772962b5f7ca79c255d7932741ce0a93",
        "text": "let rhyme_group_to_string = function\n| AnRhyme -> \"安韵\"\n| SiRhyme -> \"思韵\"\n| TianRhyme -> \"天韵\"\n| WangRhyme -> \"望韵\"\n| QuRhyme -> \"去韵\"\n| YuRhyme -> \"鱼韵\"\n| HuaRhyme -> \"花韵\"\n| FengRhyme -> \"风韵\"\n| YueRhyme -> \"月韵\"",
        "lines": [
          "let rhyme_group_to_string = function",
          "| AnRhyme -> \"安韵\"",
          "| SiRhyme -> \"思韵\"",
          "| TianRhyme -> \"天韵\"",
          "| WangRhyme -> \"望韵\"",
          "| QuRhyme -> \"去韵\"",
          "| YuRhyme -> \"鱼韵\"",
          "| HuaRhyme -> \"花韵\"",
          "| FengRhyme -> \"风韵\"",
          "| YueRhyme -> \"月韵\""
        ],
        "start_line": 77,
        "end_line": 86,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_core_types.ml"
      }
    ],
    "3660f1a03b2d07c696f6b960b1c2d4aa": [
      {
        "hash": "3660f1a03b2d07c696f6b960b1c2d4aa",
        "text": "| AnRhyme -> \"安韵\"\n| SiRhyme -> \"思韵\"\n| TianRhyme -> \"天韵\"\n| WangRhyme -> \"望韵\"\n| QuRhyme -> \"去韵\"\n| YuRhyme -> \"鱼韵\"\n| HuaRhyme -> \"花韵\"\n| FengRhyme -> \"风韵\"\n| YueRhyme -> \"月韵\"\n| JiangRhyme -> \"江韵\"",
        "lines": [
          "| AnRhyme -> \"安韵\"",
          "| SiRhyme -> \"思韵\"",
          "| TianRhyme -> \"天韵\"",
          "| WangRhyme -> \"望韵\"",
          "| QuRhyme -> \"去韵\"",
          "| YuRhyme -> \"鱼韵\"",
          "| HuaRhyme -> \"花韵\"",
          "| FengRhyme -> \"风韵\"",
          "| YueRhyme -> \"月韵\"",
          "| JiangRhyme -> \"江韵\""
        ],
        "start_line": 171,
        "end_line": 180,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_types_consolidated.ml"
      },
      {
        "hash": "3660f1a03b2d07c696f6b960b1c2d4aa",
        "text": "| AnRhyme -> \"安韵\"\n| SiRhyme -> \"思韵\"\n| TianRhyme -> \"天韵\"\n| WangRhyme -> \"望韵\"\n| QuRhyme -> \"去韵\"\n| YuRhyme -> \"鱼韵\"\n| HuaRhyme -> \"花韵\"\n| FengRhyme -> \"风韵\"\n| YueRhyme -> \"月韵\"\n| JiangRhyme -> \"江韵\"",
        "lines": [
          "| AnRhyme -> \"安韵\"",
          "| SiRhyme -> \"思韵\"",
          "| TianRhyme -> \"天韵\"",
          "| WangRhyme -> \"望韵\"",
          "| QuRhyme -> \"去韵\"",
          "| YuRhyme -> \"鱼韵\"",
          "| HuaRhyme -> \"花韵\"",
          "| FengRhyme -> \"风韵\"",
          "| YueRhyme -> \"月韵\"",
          "| JiangRhyme -> \"江韵\""
        ],
        "start_line": 243,
        "end_line": 252,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/consolidated_rhyme_data.ml"
      },
      {
        "hash": "3660f1a03b2d07c696f6b960b1c2d4aa",
        "text": "| AnRhyme -> \"安韵\"\n| SiRhyme -> \"思韵\"\n| TianRhyme -> \"天韵\"\n| WangRhyme -> \"望韵\"\n| QuRhyme -> \"去韵\"\n| YuRhyme -> \"鱼韵\"\n| HuaRhyme -> \"花韵\"\n| FengRhyme -> \"风韵\"\n| YueRhyme -> \"月韵\"\n| JiangRhyme -> \"江韵\"",
        "lines": [
          "| AnRhyme -> \"安韵\"",
          "| SiRhyme -> \"思韵\"",
          "| TianRhyme -> \"天韵\"",
          "| WangRhyme -> \"望韵\"",
          "| QuRhyme -> \"去韵\"",
          "| YuRhyme -> \"鱼韵\"",
          "| HuaRhyme -> \"花韵\"",
          "| FengRhyme -> \"风韵\"",
          "| YueRhyme -> \"月韵\"",
          "| JiangRhyme -> \"江韵\""
        ],
        "start_line": 136,
        "end_line": 145,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/unified_rhyme_api.ml"
      }
    ],
    "67be9ae7df933344d4aa37ccec26b110": [
      {
        "hash": "67be9ae7df933344d4aa37ccec26b110",
        "text": "| SiRhyme -> \"思韵\"\n| TianRhyme -> \"天韵\"\n| WangRhyme -> \"望韵\"\n| QuRhyme -> \"去韵\"\n| YuRhyme -> \"鱼韵\"\n| HuaRhyme -> \"花韵\"\n| FengRhyme -> \"风韵\"\n| YueRhyme -> \"月韵\"\n| JiangRhyme -> \"江韵\"\n| HuiRhyme -> \"灰韵\"",
        "lines": [
          "| SiRhyme -> \"思韵\"",
          "| TianRhyme -> \"天韵\"",
          "| WangRhyme -> \"望韵\"",
          "| QuRhyme -> \"去韵\"",
          "| YuRhyme -> \"鱼韵\"",
          "| HuaRhyme -> \"花韵\"",
          "| FengRhyme -> \"风韵\"",
          "| YueRhyme -> \"月韵\"",
          "| JiangRhyme -> \"江韵\"",
          "| HuiRhyme -> \"灰韵\""
        ],
        "start_line": 172,
        "end_line": 181,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_types_consolidated.ml"
      },
      {
        "hash": "67be9ae7df933344d4aa37ccec26b110",
        "text": "| SiRhyme -> \"思韵\"\n| TianRhyme -> \"天韵\"\n| WangRhyme -> \"望韵\"\n| QuRhyme -> \"去韵\"\n| YuRhyme -> \"鱼韵\"\n| HuaRhyme -> \"花韵\"\n| FengRhyme -> \"风韵\"\n| YueRhyme -> \"月韵\"\n| JiangRhyme -> \"江韵\"\n| HuiRhyme -> \"灰韵\"",
        "lines": [
          "| SiRhyme -> \"思韵\"",
          "| TianRhyme -> \"天韵\"",
          "| WangRhyme -> \"望韵\"",
          "| QuRhyme -> \"去韵\"",
          "| YuRhyme -> \"鱼韵\"",
          "| HuaRhyme -> \"花韵\"",
          "| FengRhyme -> \"风韵\"",
          "| YueRhyme -> \"月韵\"",
          "| JiangRhyme -> \"江韵\"",
          "| HuiRhyme -> \"灰韵\""
        ],
        "start_line": 137,
        "end_line": 146,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/unified_rhyme_api.ml"
      }
    ],
    "ea46f6eb10545e6b21e15ad7c9ca7cda": [
      {
        "hash": "ea46f6eb10545e6b21e15ad7c9ca7cda",
        "text": "| TianRhyme -> \"天韵\"\n| WangRhyme -> \"望韵\"\n| QuRhyme -> \"去韵\"\n| YuRhyme -> \"鱼韵\"\n| HuaRhyme -> \"花韵\"\n| FengRhyme -> \"风韵\"\n| YueRhyme -> \"月韵\"\n| JiangRhyme -> \"江韵\"\n| HuiRhyme -> \"灰韵\"\n| UnknownRhyme -> \"未知韵\"",
        "lines": [
          "| TianRhyme -> \"天韵\"",
          "| WangRhyme -> \"望韵\"",
          "| QuRhyme -> \"去韵\"",
          "| YuRhyme -> \"鱼韵\"",
          "| HuaRhyme -> \"花韵\"",
          "| FengRhyme -> \"风韵\"",
          "| YueRhyme -> \"月韵\"",
          "| JiangRhyme -> \"江韵\"",
          "| HuiRhyme -> \"灰韵\"",
          "| UnknownRhyme -> \"未知韵\""
        ],
        "start_line": 173,
        "end_line": 182,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_types_consolidated.ml"
      },
      {
        "hash": "ea46f6eb10545e6b21e15ad7c9ca7cda",
        "text": "| TianRhyme -> \"天韵\"\n| WangRhyme -> \"望韵\"\n| QuRhyme -> \"去韵\"\n| YuRhyme -> \"鱼韵\"\n| HuaRhyme -> \"花韵\"\n| FengRhyme -> \"风韵\"\n| YueRhyme -> \"月韵\"\n| JiangRhyme -> \"江韵\"\n| HuiRhyme -> \"灰韵\"\n| UnknownRhyme -> \"未知韵\"",
        "lines": [
          "| TianRhyme -> \"天韵\"",
          "| WangRhyme -> \"望韵\"",
          "| QuRhyme -> \"去韵\"",
          "| YuRhyme -> \"鱼韵\"",
          "| HuaRhyme -> \"花韵\"",
          "| FengRhyme -> \"风韵\"",
          "| YueRhyme -> \"月韵\"",
          "| JiangRhyme -> \"江韵\"",
          "| HuiRhyme -> \"灰韵\"",
          "| UnknownRhyme -> \"未知韵\""
        ],
        "start_line": 138,
        "end_line": 147,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/unified_rhyme_api.ml"
      }
    ],
    "74eed57e0cc02eb011a0b870b64b08b9": [
      {
        "hash": "74eed57e0cc02eb011a0b870b64b08b9",
        "text": "| JiangRhyme -> \"江韵\"\n| HuiRhyme -> \"灰韵\"\n| UnknownRhyme -> \"未知韵\"",
        "lines": [
          "| JiangRhyme -> \"江韵\"",
          "| HuiRhyme -> \"灰韵\"",
          "| UnknownRhyme -> \"未知韵\""
        ],
        "start_line": 180,
        "end_line": 182,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_types_consolidated.ml"
      },
      {
        "hash": "74eed57e0cc02eb011a0b870b64b08b9",
        "text": "| JiangRhyme -> \"江韵\"\n| HuiRhyme -> \"灰韵\"\n| UnknownRhyme -> \"未知韵\"",
        "lines": [
          "| JiangRhyme -> \"江韵\"",
          "| HuiRhyme -> \"灰韵\"",
          "| UnknownRhyme -> \"未知韵\""
        ],
        "start_line": 71,
        "end_line": 73,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/rhyme_group_types.ml"
      }
    ],
    "3c8fc8097302efbe2f8427c40ca192ff": [
      {
        "hash": "3c8fc8097302efbe2f8427c40ca192ff",
        "text": "verse;\nrhyme_score = 0.0;\ntone_score = 0.0;\nparallelism_score = 0.0;\nimagery_score = 0.0;\nrhythm_score = 0.0;\nelegance_score = 0.0;\noverall_grade = Poor;\nsuggestions = [];\n}",
        "lines": [
          "verse;",
          "rhyme_score = 0.0;",
          "tone_score = 0.0;",
          "parallelism_score = 0.0;",
          "imagery_score = 0.0;",
          "rhythm_score = 0.0;",
          "elegance_score = 0.0;",
          "overall_grade = Poor;",
          "suggestions = [];",
          "}"
        ],
        "start_line": 224,
        "end_line": 233,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_types_consolidated.ml"
      },
      {
        "hash": "3c8fc8097302efbe2f8427c40ca192ff",
        "text": "verse;\nrhyme_score = 0.0;\ntone_score = 0.0;\nparallelism_score = 0.0;\nimagery_score = 0.0;\nrhythm_score = 0.0;\nelegance_score = 0.0;\noverall_grade = Poor;\nsuggestions = [];\n}",
        "lines": [
          "verse;",
          "rhyme_score = 0.0;",
          "tone_score = 0.0;",
          "parallelism_score = 0.0;",
          "imagery_score = 0.0;",
          "rhythm_score = 0.0;",
          "elegance_score = 0.0;",
          "overall_grade = Poor;",
          "suggestions = [];",
          "}"
        ],
        "start_line": 113,
        "end_line": 122,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/artistic_types.ml"
      }
    ],
    "d62816fdaedbf49aa77ce42bb8250ce7": [
      {
        "hash": "d62816fdaedbf49aa77ce42bb8250ce7",
        "text": "rhyme_score = 0.0;\ntone_score = 0.0;\nparallelism_score = 0.0;\nimagery_score = 0.0;\nrhythm_score = 0.0;\nelegance_score = 0.0;\noverall_grade = Poor;\nsuggestions = [];\n}",
        "lines": [
          "rhyme_score = 0.0;",
          "tone_score = 0.0;",
          "parallelism_score = 0.0;",
          "imagery_score = 0.0;",
          "rhythm_score = 0.0;",
          "elegance_score = 0.0;",
          "overall_grade = Poor;",
          "suggestions = [];",
          "}"
        ],
        "start_line": 225,
        "end_line": 233,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_types_consolidated.ml"
      },
      {
        "hash": "d62816fdaedbf49aa77ce42bb8250ce7",
        "text": "rhyme_score = 0.0;\ntone_score = 0.0;\nparallelism_score = 0.0;\nimagery_score = 0.0;\nrhythm_score = 0.0;\nelegance_score = 0.0;\noverall_grade = Poor;\nsuggestions = [];\n}",
        "lines": [
          "rhyme_score = 0.0;",
          "tone_score = 0.0;",
          "parallelism_score = 0.0;",
          "imagery_score = 0.0;",
          "rhythm_score = 0.0;",
          "elegance_score = 0.0;",
          "overall_grade = Poor;",
          "suggestions = [];",
          "}"
        ],
        "start_line": 114,
        "end_line": 122,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/artistic_types.ml"
      }
    ],
    "f1f77c964855688a82bc89f68f2c6923": [
      {
        "hash": "f1f77c964855688a82bc89f68f2c6923",
        "text": "tone_score = 0.0;\nparallelism_score = 0.0;\nimagery_score = 0.0;\nrhythm_score = 0.0;\nelegance_score = 0.0;\noverall_grade = Poor;\nsuggestions = [];\n}",
        "lines": [
          "tone_score = 0.0;",
          "parallelism_score = 0.0;",
          "imagery_score = 0.0;",
          "rhythm_score = 0.0;",
          "elegance_score = 0.0;",
          "overall_grade = Poor;",
          "suggestions = [];",
          "}"
        ],
        "start_line": 226,
        "end_line": 233,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_types_consolidated.ml"
      },
      {
        "hash": "f1f77c964855688a82bc89f68f2c6923",
        "text": "tone_score = 0.0;\nparallelism_score = 0.0;\nimagery_score = 0.0;\nrhythm_score = 0.0;\nelegance_score = 0.0;\noverall_grade = Poor;\nsuggestions = [];\n}",
        "lines": [
          "tone_score = 0.0;",
          "parallelism_score = 0.0;",
          "imagery_score = 0.0;",
          "rhythm_score = 0.0;",
          "elegance_score = 0.0;",
          "overall_grade = Poor;",
          "suggestions = [];",
          "}"
        ],
        "start_line": 115,
        "end_line": 122,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/artistic_types.ml"
      }
    ],
    "77b5d14697813ba9144ef14d837a1fd9": [
      {
        "hash": "77b5d14697813ba9144ef14d837a1fd9",
        "text": "parallelism_score = 0.0;\nimagery_score = 0.0;\nrhythm_score = 0.0;\nelegance_score = 0.0;\noverall_grade = Poor;\nsuggestions = [];\n}",
        "lines": [
          "parallelism_score = 0.0;",
          "imagery_score = 0.0;",
          "rhythm_score = 0.0;",
          "elegance_score = 0.0;",
          "overall_grade = Poor;",
          "suggestions = [];",
          "}"
        ],
        "start_line": 227,
        "end_line": 233,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_types_consolidated.ml"
      },
      {
        "hash": "77b5d14697813ba9144ef14d837a1fd9",
        "text": "parallelism_score = 0.0;\nimagery_score = 0.0;\nrhythm_score = 0.0;\nelegance_score = 0.0;\noverall_grade = Poor;\nsuggestions = [];\n}",
        "lines": [
          "parallelism_score = 0.0;",
          "imagery_score = 0.0;",
          "rhythm_score = 0.0;",
          "elegance_score = 0.0;",
          "overall_grade = Poor;",
          "suggestions = [];",
          "}"
        ],
        "start_line": 116,
        "end_line": 122,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/artistic_types.ml"
      }
    ],
    "c95ee1e4805dd5ab15ea721973c8a688": [
      {
        "hash": "c95ee1e4805dd5ab15ea721973c8a688",
        "text": "imagery_score = 0.0;\nrhythm_score = 0.0;\nelegance_score = 0.0;\noverall_grade = Poor;\nsuggestions = [];\n}",
        "lines": [
          "imagery_score = 0.0;",
          "rhythm_score = 0.0;",
          "elegance_score = 0.0;",
          "overall_grade = Poor;",
          "suggestions = [];",
          "}"
        ],
        "start_line": 228,
        "end_line": 233,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_types_consolidated.ml"
      },
      {
        "hash": "c95ee1e4805dd5ab15ea721973c8a688",
        "text": "imagery_score = 0.0;\nrhythm_score = 0.0;\nelegance_score = 0.0;\noverall_grade = Poor;\nsuggestions = [];\n}",
        "lines": [
          "imagery_score = 0.0;",
          "rhythm_score = 0.0;",
          "elegance_score = 0.0;",
          "overall_grade = Poor;",
          "suggestions = [];",
          "}"
        ],
        "start_line": 117,
        "end_line": 122,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/artistic_types.ml"
      }
    ],
    "d8093517d8cf983b933f747ecec5a10f": [
      {
        "hash": "d8093517d8cf983b933f747ecec5a10f",
        "text": "rhythm_score = 0.0;\nelegance_score = 0.0;\noverall_grade = Poor;\nsuggestions = [];\n}",
        "lines": [
          "rhythm_score = 0.0;",
          "elegance_score = 0.0;",
          "overall_grade = Poor;",
          "suggestions = [];",
          "}"
        ],
        "start_line": 229,
        "end_line": 233,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_types_consolidated.ml"
      },
      {
        "hash": "d8093517d8cf983b933f747ecec5a10f",
        "text": "rhythm_score = 0.0;\nelegance_score = 0.0;\noverall_grade = Poor;\nsuggestions = [];\n}",
        "lines": [
          "rhythm_score = 0.0;",
          "elegance_score = 0.0;",
          "overall_grade = Poor;",
          "suggestions = [];",
          "}"
        ],
        "start_line": 118,
        "end_line": 122,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/artistic_types.ml"
      }
    ],
    "507e64a930f8a7ca6a8a582635734f56": [
      {
        "hash": "507e64a930f8a7ca6a8a582635734f56",
        "text": "elegance_score = 0.0;\noverall_grade = Poor;\nsuggestions = [];\n}",
        "lines": [
          "elegance_score = 0.0;",
          "overall_grade = Poor;",
          "suggestions = [];",
          "}"
        ],
        "start_line": 230,
        "end_line": 233,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_types_consolidated.ml"
      },
      {
        "hash": "507e64a930f8a7ca6a8a582635734f56",
        "text": "elegance_score = 0.0;\noverall_grade = Poor;\nsuggestions = [];\n}",
        "lines": [
          "elegance_score = 0.0;",
          "overall_grade = Poor;",
          "suggestions = [];",
          "}"
        ],
        "start_line": 119,
        "end_line": 122,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/artistic_types.ml"
      }
    ],
    "8de2265cdd48c996dbd0497cf3e8a719": [
      {
        "hash": "8de2265cdd48c996dbd0497cf3e8a719",
        "text": "overall_grade = Poor;\nsuggestions = [];\n}",
        "lines": [
          "overall_grade = Poor;",
          "suggestions = [];",
          "}"
        ],
        "start_line": 231,
        "end_line": 233,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_types_consolidated.ml"
      },
      {
        "hash": "8de2265cdd48c996dbd0497cf3e8a719",
        "text": "overall_grade = Poor;\nsuggestions = [];\n}",
        "lines": [
          "overall_grade = Poor;",
          "suggestions = [];",
          "}"
        ],
        "start_line": 120,
        "end_line": 122,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/artistic_types.ml"
      }
    ],
    "f406b9940fd8c1977b019e49f7a9bb51": [
      {
        "hash": "f406b9940fd8c1977b019e49f7a9bb51",
        "text": "else Poor\nin\n{ report with overall_grade = grade }",
        "lines": [
          "else Poor",
          "in",
          "{ report with overall_grade = grade }"
        ],
        "start_line": 246,
        "end_line": 248,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_types_consolidated.ml"
      },
      {
        "hash": "f406b9940fd8c1977b019e49f7a9bb51",
        "text": "else Poor\nin\n{ report with overall_grade = grade }",
        "lines": [
          "else Poor",
          "in",
          "{ report with overall_grade = grade }"
        ],
        "start_line": 146,
        "end_line": 148,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/artistic_types.ml"
      }
    ],
    "5ab971ff57bd48f3bd22a4af02810ba3": [
      {
        "hash": "5ab971ff57bd48f3bd22a4af02810ba3",
        "text": "report with\nrhyme_score = clamp_score report.rhyme_score;\ntone_score = clamp_score report.tone_score;\nparallelism_score = clamp_score report.parallelism_score;\nimagery_score = clamp_score report.imagery_score;\nrhythm_score = clamp_score report.rhythm_score;\nelegance_score = clamp_score report.elegance_score;\n}\nend",
        "lines": [
          "report with",
          "rhyme_score = clamp_score report.rhyme_score;",
          "tone_score = clamp_score report.tone_score;",
          "parallelism_score = clamp_score report.parallelism_score;",
          "imagery_score = clamp_score report.imagery_score;",
          "rhythm_score = clamp_score report.rhythm_score;",
          "elegance_score = clamp_score report.elegance_score;",
          "}",
          "end"
        ],
        "start_line": 289,
        "end_line": 297,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_types_consolidated.ml"
      },
      {
        "hash": "5ab971ff57bd48f3bd22a4af02810ba3",
        "text": "report with\nrhyme_score = clamp_score report.rhyme_score;\ntone_score = clamp_score report.tone_score;\nparallelism_score = clamp_score report.parallelism_score;\nimagery_score = clamp_score report.imagery_score;\nrhythm_score = clamp_score report.rhythm_score;\nelegance_score = clamp_score report.elegance_score;\n}\nend",
        "lines": [
          "report with",
          "rhyme_score = clamp_score report.rhyme_score;",
          "tone_score = clamp_score report.tone_score;",
          "parallelism_score = clamp_score report.parallelism_score;",
          "imagery_score = clamp_score report.imagery_score;",
          "rhythm_score = clamp_score report.rhythm_score;",
          "elegance_score = clamp_score report.elegance_score;",
          "}",
          "end"
        ],
        "start_line": 204,
        "end_line": 212,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/artistic_types.ml"
      }
    ],
    "18dac249e81f60f2cfcf4c4185e6a78e": [
      {
        "hash": "18dac249e81f60f2cfcf4c4185e6a78e",
        "text": "rhyme_score = clamp_score report.rhyme_score;\ntone_score = clamp_score report.tone_score;\nparallelism_score = clamp_score report.parallelism_score;\nimagery_score = clamp_score report.imagery_score;\nrhythm_score = clamp_score report.rhythm_score;\nelegance_score = clamp_score report.elegance_score;\n}\nend",
        "lines": [
          "rhyme_score = clamp_score report.rhyme_score;",
          "tone_score = clamp_score report.tone_score;",
          "parallelism_score = clamp_score report.parallelism_score;",
          "imagery_score = clamp_score report.imagery_score;",
          "rhythm_score = clamp_score report.rhythm_score;",
          "elegance_score = clamp_score report.elegance_score;",
          "}",
          "end"
        ],
        "start_line": 290,
        "end_line": 297,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_types_consolidated.ml"
      },
      {
        "hash": "18dac249e81f60f2cfcf4c4185e6a78e",
        "text": "rhyme_score = clamp_score report.rhyme_score;\ntone_score = clamp_score report.tone_score;\nparallelism_score = clamp_score report.parallelism_score;\nimagery_score = clamp_score report.imagery_score;\nrhythm_score = clamp_score report.rhythm_score;\nelegance_score = clamp_score report.elegance_score;\n}\nend",
        "lines": [
          "rhyme_score = clamp_score report.rhyme_score;",
          "tone_score = clamp_score report.tone_score;",
          "parallelism_score = clamp_score report.parallelism_score;",
          "imagery_score = clamp_score report.imagery_score;",
          "rhythm_score = clamp_score report.rhythm_score;",
          "elegance_score = clamp_score report.elegance_score;",
          "}",
          "end"
        ],
        "start_line": 205,
        "end_line": 212,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/artistic_types.ml"
      }
    ],
    "46c5f69987aa3f87a9ab51647ce8a8fa": [
      {
        "hash": "46c5f69987aa3f87a9ab51647ce8a8fa",
        "text": "tone_score = clamp_score report.tone_score;\nparallelism_score = clamp_score report.parallelism_score;\nimagery_score = clamp_score report.imagery_score;\nrhythm_score = clamp_score report.rhythm_score;\nelegance_score = clamp_score report.elegance_score;\n}\nend",
        "lines": [
          "tone_score = clamp_score report.tone_score;",
          "parallelism_score = clamp_score report.parallelism_score;",
          "imagery_score = clamp_score report.imagery_score;",
          "rhythm_score = clamp_score report.rhythm_score;",
          "elegance_score = clamp_score report.elegance_score;",
          "}",
          "end"
        ],
        "start_line": 291,
        "end_line": 297,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_types_consolidated.ml"
      },
      {
        "hash": "46c5f69987aa3f87a9ab51647ce8a8fa",
        "text": "tone_score = clamp_score report.tone_score;\nparallelism_score = clamp_score report.parallelism_score;\nimagery_score = clamp_score report.imagery_score;\nrhythm_score = clamp_score report.rhythm_score;\nelegance_score = clamp_score report.elegance_score;\n}\nend",
        "lines": [
          "tone_score = clamp_score report.tone_score;",
          "parallelism_score = clamp_score report.parallelism_score;",
          "imagery_score = clamp_score report.imagery_score;",
          "rhythm_score = clamp_score report.rhythm_score;",
          "elegance_score = clamp_score report.elegance_score;",
          "}",
          "end"
        ],
        "start_line": 206,
        "end_line": 212,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/artistic_types.ml"
      }
    ],
    "3dcd9413607ef759392c272aef45aaf9": [
      {
        "hash": "3dcd9413607ef759392c272aef45aaf9",
        "text": "parallelism_score = clamp_score report.parallelism_score;\nimagery_score = clamp_score report.imagery_score;\nrhythm_score = clamp_score report.rhythm_score;\nelegance_score = clamp_score report.elegance_score;\n}\nend",
        "lines": [
          "parallelism_score = clamp_score report.parallelism_score;",
          "imagery_score = clamp_score report.imagery_score;",
          "rhythm_score = clamp_score report.rhythm_score;",
          "elegance_score = clamp_score report.elegance_score;",
          "}",
          "end"
        ],
        "start_line": 292,
        "end_line": 297,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_types_consolidated.ml"
      },
      {
        "hash": "3dcd9413607ef759392c272aef45aaf9",
        "text": "parallelism_score = clamp_score report.parallelism_score;\nimagery_score = clamp_score report.imagery_score;\nrhythm_score = clamp_score report.rhythm_score;\nelegance_score = clamp_score report.elegance_score;\n}\nend",
        "lines": [
          "parallelism_score = clamp_score report.parallelism_score;",
          "imagery_score = clamp_score report.imagery_score;",
          "rhythm_score = clamp_score report.rhythm_score;",
          "elegance_score = clamp_score report.elegance_score;",
          "}",
          "end"
        ],
        "start_line": 207,
        "end_line": 212,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/artistic_types.ml"
      }
    ],
    "3b30827b174b090f44cf8593c2e7876e": [
      {
        "hash": "3b30827b174b090f44cf8593c2e7876e",
        "text": "imagery_score = clamp_score report.imagery_score;\nrhythm_score = clamp_score report.rhythm_score;\nelegance_score = clamp_score report.elegance_score;\n}\nend",
        "lines": [
          "imagery_score = clamp_score report.imagery_score;",
          "rhythm_score = clamp_score report.rhythm_score;",
          "elegance_score = clamp_score report.elegance_score;",
          "}",
          "end"
        ],
        "start_line": 293,
        "end_line": 297,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_types_consolidated.ml"
      },
      {
        "hash": "3b30827b174b090f44cf8593c2e7876e",
        "text": "imagery_score = clamp_score report.imagery_score;\nrhythm_score = clamp_score report.rhythm_score;\nelegance_score = clamp_score report.elegance_score;\n}\nend",
        "lines": [
          "imagery_score = clamp_score report.imagery_score;",
          "rhythm_score = clamp_score report.rhythm_score;",
          "elegance_score = clamp_score report.elegance_score;",
          "}",
          "end"
        ],
        "start_line": 208,
        "end_line": 212,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/artistic_types.ml"
      }
    ],
    "733b1e19c7daa057b120eced0035ad48": [
      {
        "hash": "733b1e19c7daa057b120eced0035ad48",
        "text": "rhythm_score = clamp_score report.rhythm_score;\nelegance_score = clamp_score report.elegance_score;\n}\nend",
        "lines": [
          "rhythm_score = clamp_score report.rhythm_score;",
          "elegance_score = clamp_score report.elegance_score;",
          "}",
          "end"
        ],
        "start_line": 294,
        "end_line": 297,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_types_consolidated.ml"
      },
      {
        "hash": "733b1e19c7daa057b120eced0035ad48",
        "text": "rhythm_score = clamp_score report.rhythm_score;\nelegance_score = clamp_score report.elegance_score;\n}\nend",
        "lines": [
          "rhythm_score = clamp_score report.rhythm_score;",
          "elegance_score = clamp_score report.elegance_score;",
          "}",
          "end"
        ],
        "start_line": 209,
        "end_line": 212,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/artistic_types.ml"
      }
    ],
    "f8a72ab35e1b656c2e14bcb202f71ba4": [
      {
        "hash": "f8a72ab35e1b656c2e14bcb202f71ba4",
        "text": "elegance_score = clamp_score report.elegance_score;\n}\nend",
        "lines": [
          "elegance_score = clamp_score report.elegance_score;",
          "}",
          "end"
        ],
        "start_line": 295,
        "end_line": 297,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_types_consolidated.ml"
      },
      {
        "hash": "f8a72ab35e1b656c2e14bcb202f71ba4",
        "text": "elegance_score = clamp_score report.elegance_score;\n}\nend",
        "lines": [
          "elegance_score = clamp_score report.elegance_score;",
          "}",
          "end"
        ],
        "start_line": 210,
        "end_line": 212,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/artistic_types.ml"
      }
    ],
    "1a0c777732db7e0e327ec84f44c218c1": [
      {
        "hash": "1a0c777732db7e0e327ec84f44c218c1",
        "text": "@author 骆言诗词编程团队\n@version 1.0\n@since 2025-07-19 - unified_rhyme_api.ml重构 *)",
        "lines": [
          "@author 骆言诗词编程团队",
          "@version 1.0",
          "@since 2025-07-19 - unified_rhyme_api.ml重构 *)"
        ],
        "start_line": 5,
        "end_line": 7,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_api_core.ml"
      },
      {
        "hash": "1a0c777732db7e0e327ec84f44c218c1",
        "text": "@author 骆言诗词编程团队\n@version 1.0\n@since 2025-07-19 - unified_rhyme_api.ml重构 *)",
        "lines": [
          "@author 骆言诗词编程团队",
          "@version 1.0",
          "@since 2025-07-19 - unified_rhyme_api.ml重构 *)"
        ],
        "start_line": 5,
        "end_line": 7,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_cache.ml"
      },
      {
        "hash": "1a0c777732db7e0e327ec84f44c218c1",
        "text": "@author 骆言诗词编程团队\n@version 1.0\n@since 2025-07-19 - unified_rhyme_api.ml重构 *)",
        "lines": [
          "@author 骆言诗词编程团队",
          "@version 1.0",
          "@since 2025-07-19 - unified_rhyme_api.ml重构 *)"
        ],
        "start_line": 5,
        "end_line": 7,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_advanced_analysis.ml"
      }
    ],
    "26170e1214e3a9895bd0753de456bc7a": [
      {
        "hash": "26170e1214e3a9895bd0753de456bc7a",
        "text": "@author 骆言诗词编程团队\n@version 1.0\n@since 2025-07-18 *)",
        "lines": [
          "@author 骆言诗词编程团队",
          "@version 1.0",
          "@since 2025-07-18 *)"
        ],
        "start_line": 5,
        "end_line": 7,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_lookup.ml"
      },
      {
        "hash": "26170e1214e3a9895bd0753de456bc7a",
        "text": "@author 骆言诗词编程团队\n@version 1.0\n@since 2025-07-18 *)",
        "lines": [
          "@author 骆言诗词编程团队",
          "@version 1.0",
          "@since 2025-07-18 *)"
        ],
        "start_line": 5,
        "end_line": 7,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/an_yun_data.ml"
      }
    ],
    "291365773dd314c43e3825f7bd66f1b5": [
      {
        "hash": "291365773dd314c43e3825f7bd66f1b5",
        "text": "done;\nlet end_time = Unix.gettimeofday () in\nend_time -. start_time",
        "lines": [
          "done;",
          "let end_time = Unix.gettimeofday () in",
          "end_time -. start_time"
        ],
        "start_line": 183,
        "end_line": 185,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_lookup.ml"
      },
      {
        "hash": "291365773dd314c43e3825f7bd66f1b5",
        "text": "done;\nlet end_time = Unix.gettimeofday () in\nend_time -. start_time",
        "lines": [
          "done;",
          "let end_time = Unix.gettimeofday () in",
          "end_time -. start_time"
        ],
        "start_line": 192,
        "end_line": 194,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_lookup.ml"
      }
    ],
    "c729e0e23f2a930575b293d20a2cf757": [
      {
        "hash": "c729e0e23f2a930575b293d20a2cf757",
        "text": "try\nlet _, word_class = List.find (fun (ch, _) -> ch = char_str) word_class_database in\nword_class\nwith Not_found -> Unknown",
        "lines": [
          "try",
          "let _, word_class = List.find (fun (ch, _) -> ch = char_str) word_class_database in",
          "word_class",
          "with Not_found -> Unknown"
        ],
        "start_line": 44,
        "end_line": 47,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/parallelism_analysis.ml"
      },
      {
        "hash": "c729e0e23f2a930575b293d20a2cf757",
        "text": "try\nlet _, word_class = List.find (fun (ch, _) -> ch = char_str) word_class_database in\nword_class\nwith Not_found -> Unknown",
        "lines": [
          "try",
          "let _, word_class = List.find (fun (ch, _) -> ch = char_str) word_class_database in",
          "word_class",
          "with Not_found -> Unknown"
        ],
        "start_line": 50,
        "end_line": 53,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/parallelism_analysis.ml"
      }
    ],
    "29c7b25626ce04cf1c293082c584fce3": [
      {
        "hash": "29c7b25626ce04cf1c293082c584fce3",
        "text": "let _, word_class = List.find (fun (ch, _) -> ch = char_str) word_class_database in\nword_class\nwith Not_found -> Unknown",
        "lines": [
          "let _, word_class = List.find (fun (ch, _) -> ch = char_str) word_class_database in",
          "word_class",
          "with Not_found -> Unknown"
        ],
        "start_line": 45,
        "end_line": 47,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/parallelism_analysis.ml"
      },
      {
        "hash": "29c7b25626ce04cf1c293082c584fce3",
        "text": "let _, word_class = List.find (fun (ch, _) -> ch = char_str) word_class_database in\nword_class\nwith Not_found -> Unknown",
        "lines": [
          "let _, word_class = List.find (fun (ch, _) -> ch = char_str) word_class_database in",
          "word_class",
          "with Not_found -> Unknown"
        ],
        "start_line": 51,
        "end_line": 53,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/parallelism_analysis.ml"
      }
    ],
    "203454e29afdd8ac0faadcbbf224dcdd": [
      {
        "hash": "203454e29afdd8ac0faadcbbf224dcdd",
        "text": "let char_pairs = List.combine chars1 chars2 in\nlet word_class_pairs =\nList.map\n(fun (c1_str, c2_str) ->\n(detect_word_class_by_string c1_str, detect_word_class_by_string c2_str))\nchar_pairs\nin",
        "lines": [
          "let char_pairs = List.combine chars1 chars2 in",
          "let word_class_pairs =",
          "List.map",
          "(fun (c1_str, c2_str) ->",
          "(detect_word_class_by_string c1_str, detect_word_class_by_string c2_str))",
          "char_pairs",
          "in"
        ],
        "start_line": 87,
        "end_line": 93,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/parallelism_analysis.ml"
      },
      {
        "hash": "203454e29afdd8ac0faadcbbf224dcdd",
        "text": "let char_pairs = List.combine chars1 chars2 in\nlet word_class_pairs =\nList.map\n(fun (c1_str, c2_str) ->\n(detect_word_class_by_string c1_str, detect_word_class_by_string c2_str))\nchar_pairs\nin",
        "lines": [
          "let char_pairs = List.combine chars1 chars2 in",
          "let word_class_pairs =",
          "List.map",
          "(fun (c1_str, c2_str) ->",
          "(detect_word_class_by_string c1_str, detect_word_class_by_string c2_str))",
          "char_pairs",
          "in"
        ],
        "start_line": 159,
        "end_line": 165,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/parallelism_analysis.ml"
      }
    ],
    "76d5a96b2cb06f42fc7b9b3e7150b6cc": [
      {
        "hash": "76d5a96b2cb06f42fc7b9b3e7150b6cc",
        "text": "let word_class_pairs =\nList.map\n(fun (c1_str, c2_str) ->\n(detect_word_class_by_string c1_str, detect_word_class_by_string c2_str))\nchar_pairs\nin",
        "lines": [
          "let word_class_pairs =",
          "List.map",
          "(fun (c1_str, c2_str) ->",
          "(detect_word_class_by_string c1_str, detect_word_class_by_string c2_str))",
          "char_pairs",
          "in"
        ],
        "start_line": 88,
        "end_line": 93,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/parallelism_analysis.ml"
      },
      {
        "hash": "76d5a96b2cb06f42fc7b9b3e7150b6cc",
        "text": "let word_class_pairs =\nList.map\n(fun (c1_str, c2_str) ->\n(detect_word_class_by_string c1_str, detect_word_class_by_string c2_str))\nchar_pairs\nin",
        "lines": [
          "let word_class_pairs =",
          "List.map",
          "(fun (c1_str, c2_str) ->",
          "(detect_word_class_by_string c1_str, detect_word_class_by_string c2_str))",
          "char_pairs",
          "in"
        ],
        "start_line": 160,
        "end_line": 165,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/parallelism_analysis.ml"
      }
    ],
    "bf0f4235e218ae6de5c8beb79df54021": [
      {
        "hash": "bf0f4235e218ae6de5c8beb79df54021",
        "text": "List.map\n(fun (c1_str, c2_str) ->\n(detect_word_class_by_string c1_str, detect_word_class_by_string c2_str))\nchar_pairs\nin",
        "lines": [
          "List.map",
          "(fun (c1_str, c2_str) ->",
          "(detect_word_class_by_string c1_str, detect_word_class_by_string c2_str))",
          "char_pairs",
          "in"
        ],
        "start_line": 89,
        "end_line": 93,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/parallelism_analysis.ml"
      },
      {
        "hash": "bf0f4235e218ae6de5c8beb79df54021",
        "text": "List.map\n(fun (c1_str, c2_str) ->\n(detect_word_class_by_string c1_str, detect_word_class_by_string c2_str))\nchar_pairs\nin",
        "lines": [
          "List.map",
          "(fun (c1_str, c2_str) ->",
          "(detect_word_class_by_string c1_str, detect_word_class_by_string c2_str))",
          "char_pairs",
          "in"
        ],
        "start_line": 161,
        "end_line": 165,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/parallelism_analysis.ml"
      }
    ],
    "34944a090450e6e3d119ff564107619b": [
      {
        "hash": "34944a090450e6e3d119ff564107619b",
        "text": "(fun (c1_str, c2_str) ->\n(detect_word_class_by_string c1_str, detect_word_class_by_string c2_str))\nchar_pairs\nin",
        "lines": [
          "(fun (c1_str, c2_str) ->",
          "(detect_word_class_by_string c1_str, detect_word_class_by_string c2_str))",
          "char_pairs",
          "in"
        ],
        "start_line": 90,
        "end_line": 93,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/parallelism_analysis.ml"
      },
      {
        "hash": "34944a090450e6e3d119ff564107619b",
        "text": "(fun (c1_str, c2_str) ->\n(detect_word_class_by_string c1_str, detect_word_class_by_string c2_str))\nchar_pairs\nin",
        "lines": [
          "(fun (c1_str, c2_str) ->",
          "(detect_word_class_by_string c1_str, detect_word_class_by_string c2_str))",
          "char_pairs",
          "in"
        ],
        "start_line": 162,
        "end_line": 165,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/parallelism_analysis.ml"
      }
    ],
    "dbcc6d585c126167cc394191ec1b0982": [
      {
        "hash": "dbcc6d585c126167cc394191ec1b0982",
        "text": "(detect_word_class_by_string c1_str, detect_word_class_by_string c2_str))\nchar_pairs\nin",
        "lines": [
          "(detect_word_class_by_string c1_str, detect_word_class_by_string c2_str))",
          "char_pairs",
          "in"
        ],
        "start_line": 91,
        "end_line": 93,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/parallelism_analysis.ml"
      },
      {
        "hash": "dbcc6d585c126167cc394191ec1b0982",
        "text": "(detect_word_class_by_string c1_str, detect_word_class_by_string c2_str))\nchar_pairs\nin",
        "lines": [
          "(detect_word_class_by_string c1_str, detect_word_class_by_string c2_str))",
          "char_pairs",
          "in"
        ],
        "start_line": 163,
        "end_line": 165,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/parallelism_analysis.ml"
      }
    ],
    "0bf2401b8bd661836fbde133353888e0": [
      {
        "hash": "0bf2401b8bd661836fbde133353888e0",
        "text": "let rhyme_pairs =\nList.map\n(fun (c1_str, c2_str) ->\n(detect_rhyme_category_by_string c1_str, detect_rhyme_category_by_string c2_str))\nchar_pairs\nin",
        "lines": [
          "let rhyme_pairs =",
          "List.map",
          "(fun (c1_str, c2_str) ->",
          "(detect_rhyme_category_by_string c1_str, detect_rhyme_category_by_string c2_str))",
          "char_pairs",
          "in"
        ],
        "start_line": 95,
        "end_line": 100,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/parallelism_analysis.ml"
      },
      {
        "hash": "0bf2401b8bd661836fbde133353888e0",
        "text": "let rhyme_pairs =\nList.map\n(fun (c1_str, c2_str) ->\n(detect_rhyme_category_by_string c1_str, detect_rhyme_category_by_string c2_str))\nchar_pairs\nin",
        "lines": [
          "let rhyme_pairs =",
          "List.map",
          "(fun (c1_str, c2_str) ->",
          "(detect_rhyme_category_by_string c1_str, detect_rhyme_category_by_string c2_str))",
          "char_pairs",
          "in"
        ],
        "start_line": 167,
        "end_line": 172,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/parallelism_analysis.ml"
      }
    ],
    "a46a13decbe6e5215f0a7da74813bfce": [
      {
        "hash": "a46a13decbe6e5215f0a7da74813bfce",
        "text": "List.map\n(fun (c1_str, c2_str) ->\n(detect_rhyme_category_by_string c1_str, detect_rhyme_category_by_string c2_str))\nchar_pairs\nin",
        "lines": [
          "List.map",
          "(fun (c1_str, c2_str) ->",
          "(detect_rhyme_category_by_string c1_str, detect_rhyme_category_by_string c2_str))",
          "char_pairs",
          "in"
        ],
        "start_line": 96,
        "end_line": 100,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/parallelism_analysis.ml"
      },
      {
        "hash": "a46a13decbe6e5215f0a7da74813bfce",
        "text": "List.map\n(fun (c1_str, c2_str) ->\n(detect_rhyme_category_by_string c1_str, detect_rhyme_category_by_string c2_str))\nchar_pairs\nin",
        "lines": [
          "List.map",
          "(fun (c1_str, c2_str) ->",
          "(detect_rhyme_category_by_string c1_str, detect_rhyme_category_by_string c2_str))",
          "char_pairs",
          "in"
        ],
        "start_line": 168,
        "end_line": 172,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/parallelism_analysis.ml"
      }
    ],
    "fcb6b4b5059a2b06bf090ac1f66e74be": [
      {
        "hash": "fcb6b4b5059a2b06bf090ac1f66e74be",
        "text": "(fun (c1_str, c2_str) ->\n(detect_rhyme_category_by_string c1_str, detect_rhyme_category_by_string c2_str))\nchar_pairs\nin",
        "lines": [
          "(fun (c1_str, c2_str) ->",
          "(detect_rhyme_category_by_string c1_str, detect_rhyme_category_by_string c2_str))",
          "char_pairs",
          "in"
        ],
        "start_line": 97,
        "end_line": 100,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/parallelism_analysis.ml"
      },
      {
        "hash": "fcb6b4b5059a2b06bf090ac1f66e74be",
        "text": "(fun (c1_str, c2_str) ->\n(detect_rhyme_category_by_string c1_str, detect_rhyme_category_by_string c2_str))\nchar_pairs\nin",
        "lines": [
          "(fun (c1_str, c2_str) ->",
          "(detect_rhyme_category_by_string c1_str, detect_rhyme_category_by_string c2_str))",
          "char_pairs",
          "in"
        ],
        "start_line": 169,
        "end_line": 172,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/parallelism_analysis.ml"
      }
    ],
    "8442887907bb2d9308dccf5ec6a6c546": [
      {
        "hash": "8442887907bb2d9308dccf5ec6a6c546",
        "text": "(detect_rhyme_category_by_string c1_str, detect_rhyme_category_by_string c2_str))\nchar_pairs\nin",
        "lines": [
          "(detect_rhyme_category_by_string c1_str, detect_rhyme_category_by_string c2_str))",
          "char_pairs",
          "in"
        ],
        "start_line": 98,
        "end_line": 100,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/parallelism_analysis.ml"
      },
      {
        "hash": "8442887907bb2d9308dccf5ec6a6c546",
        "text": "(detect_rhyme_category_by_string c1_str, detect_rhyme_category_by_string c2_str))\nchar_pairs\nin",
        "lines": [
          "(detect_rhyme_category_by_string c1_str, detect_rhyme_category_by_string c2_str))",
          "char_pairs",
          "in"
        ],
        "start_line": 170,
        "end_line": 172,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/parallelism_analysis.ml"
      }
    ],
    "12a83ff392c8bbdd2d154909c2a4cfa6": [
      {
        "hash": "12a83ff392c8bbdd2d154909c2a4cfa6",
        "text": "let rhyme_matches =\nList.length\n(List.filter\n(fun (r1, r2) ->\n(r1 = Rhyme_types.PingSheng && r2 = Rhyme_types.ZeSheng)\n|| (r1 = Rhyme_types.ZeSheng && r2 = Rhyme_types.PingSheng))\nrhyme_pairs)\nin",
        "lines": [
          "let rhyme_matches =",
          "List.length",
          "(List.filter",
          "(fun (r1, r2) ->",
          "(r1 = Rhyme_types.PingSheng && r2 = Rhyme_types.ZeSheng)",
          "|| (r1 = Rhyme_types.ZeSheng && r2 = Rhyme_types.PingSheng))",
          "rhyme_pairs)",
          "in"
        ],
        "start_line": 120,
        "end_line": 127,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/parallelism_analysis.ml"
      },
      {
        "hash": "12a83ff392c8bbdd2d154909c2a4cfa6",
        "text": "let rhyme_matches =\nList.length\n(List.filter\n(fun (r1, r2) ->\n(r1 = Rhyme_types.PingSheng && r2 = Rhyme_types.ZeSheng)\n|| (r1 = Rhyme_types.ZeSheng && r2 = Rhyme_types.PingSheng))\nrhyme_pairs)\nin",
        "lines": [
          "let rhyme_matches =",
          "List.length",
          "(List.filter",
          "(fun (r1, r2) ->",
          "(r1 = Rhyme_types.PingSheng && r2 = Rhyme_types.ZeSheng)",
          "|| (r1 = Rhyme_types.ZeSheng && r2 = Rhyme_types.PingSheng))",
          "rhyme_pairs)",
          "in"
        ],
        "start_line": 183,
        "end_line": 190,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/parallelism_analysis.ml"
      }
    ],
    "d99187fdc84c6abe7b20677d5899311d": [
      {
        "hash": "d99187fdc84c6abe7b20677d5899311d",
        "text": "List.length\n(List.filter\n(fun (r1, r2) ->\n(r1 = Rhyme_types.PingSheng && r2 = Rhyme_types.ZeSheng)\n|| (r1 = Rhyme_types.ZeSheng && r2 = Rhyme_types.PingSheng))\nrhyme_pairs)\nin",
        "lines": [
          "List.length",
          "(List.filter",
          "(fun (r1, r2) ->",
          "(r1 = Rhyme_types.PingSheng && r2 = Rhyme_types.ZeSheng)",
          "|| (r1 = Rhyme_types.ZeSheng && r2 = Rhyme_types.PingSheng))",
          "rhyme_pairs)",
          "in"
        ],
        "start_line": 121,
        "end_line": 127,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/parallelism_analysis.ml"
      },
      {
        "hash": "d99187fdc84c6abe7b20677d5899311d",
        "text": "List.length\n(List.filter\n(fun (r1, r2) ->\n(r1 = Rhyme_types.PingSheng && r2 = Rhyme_types.ZeSheng)\n|| (r1 = Rhyme_types.ZeSheng && r2 = Rhyme_types.PingSheng))\nrhyme_pairs)\nin",
        "lines": [
          "List.length",
          "(List.filter",
          "(fun (r1, r2) ->",
          "(r1 = Rhyme_types.PingSheng && r2 = Rhyme_types.ZeSheng)",
          "|| (r1 = Rhyme_types.ZeSheng && r2 = Rhyme_types.PingSheng))",
          "rhyme_pairs)",
          "in"
        ],
        "start_line": 184,
        "end_line": 190,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/parallelism_analysis.ml"
      }
    ],
    "332214a0c756f65f7003e9c4e31141a0": [
      {
        "hash": "332214a0c756f65f7003e9c4e31141a0",
        "text": "(List.filter\n(fun (r1, r2) ->\n(r1 = Rhyme_types.PingSheng && r2 = Rhyme_types.ZeSheng)\n|| (r1 = Rhyme_types.ZeSheng && r2 = Rhyme_types.PingSheng))\nrhyme_pairs)\nin",
        "lines": [
          "(List.filter",
          "(fun (r1, r2) ->",
          "(r1 = Rhyme_types.PingSheng && r2 = Rhyme_types.ZeSheng)",
          "|| (r1 = Rhyme_types.ZeSheng && r2 = Rhyme_types.PingSheng))",
          "rhyme_pairs)",
          "in"
        ],
        "start_line": 122,
        "end_line": 127,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/parallelism_analysis.ml"
      },
      {
        "hash": "332214a0c756f65f7003e9c4e31141a0",
        "text": "(List.filter\n(fun (r1, r2) ->\n(r1 = Rhyme_types.PingSheng && r2 = Rhyme_types.ZeSheng)\n|| (r1 = Rhyme_types.ZeSheng && r2 = Rhyme_types.PingSheng))\nrhyme_pairs)\nin",
        "lines": [
          "(List.filter",
          "(fun (r1, r2) ->",
          "(r1 = Rhyme_types.PingSheng && r2 = Rhyme_types.ZeSheng)",
          "|| (r1 = Rhyme_types.ZeSheng && r2 = Rhyme_types.PingSheng))",
          "rhyme_pairs)",
          "in"
        ],
        "start_line": 185,
        "end_line": 190,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/parallelism_analysis.ml"
      }
    ],
    "e940d7743680fde0e11fc91d44602a06": [
      {
        "hash": "e940d7743680fde0e11fc91d44602a06",
        "text": "(fun (r1, r2) ->\n(r1 = Rhyme_types.PingSheng && r2 = Rhyme_types.ZeSheng)\n|| (r1 = Rhyme_types.ZeSheng && r2 = Rhyme_types.PingSheng))\nrhyme_pairs)\nin",
        "lines": [
          "(fun (r1, r2) ->",
          "(r1 = Rhyme_types.PingSheng && r2 = Rhyme_types.ZeSheng)",
          "|| (r1 = Rhyme_types.ZeSheng && r2 = Rhyme_types.PingSheng))",
          "rhyme_pairs)",
          "in"
        ],
        "start_line": 123,
        "end_line": 127,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/parallelism_analysis.ml"
      },
      {
        "hash": "e940d7743680fde0e11fc91d44602a06",
        "text": "(fun (r1, r2) ->\n(r1 = Rhyme_types.PingSheng && r2 = Rhyme_types.ZeSheng)\n|| (r1 = Rhyme_types.ZeSheng && r2 = Rhyme_types.PingSheng))\nrhyme_pairs)\nin",
        "lines": [
          "(fun (r1, r2) ->",
          "(r1 = Rhyme_types.PingSheng && r2 = Rhyme_types.ZeSheng)",
          "|| (r1 = Rhyme_types.ZeSheng && r2 = Rhyme_types.PingSheng))",
          "rhyme_pairs)",
          "in"
        ],
        "start_line": 186,
        "end_line": 190,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/parallelism_analysis.ml"
      }
    ],
    "8dfd6ce2d4b60118ff41d076d9e61097": [
      {
        "hash": "8dfd6ce2d4b60118ff41d076d9e61097",
        "text": "(r1 = Rhyme_types.PingSheng && r2 = Rhyme_types.ZeSheng)\n|| (r1 = Rhyme_types.ZeSheng && r2 = Rhyme_types.PingSheng))\nrhyme_pairs)\nin",
        "lines": [
          "(r1 = Rhyme_types.PingSheng && r2 = Rhyme_types.ZeSheng)",
          "|| (r1 = Rhyme_types.ZeSheng && r2 = Rhyme_types.PingSheng))",
          "rhyme_pairs)",
          "in"
        ],
        "start_line": 124,
        "end_line": 127,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/parallelism_analysis.ml"
      },
      {
        "hash": "8dfd6ce2d4b60118ff41d076d9e61097",
        "text": "(r1 = Rhyme_types.PingSheng && r2 = Rhyme_types.ZeSheng)\n|| (r1 = Rhyme_types.ZeSheng && r2 = Rhyme_types.PingSheng))\nrhyme_pairs)\nin",
        "lines": [
          "(r1 = Rhyme_types.PingSheng && r2 = Rhyme_types.ZeSheng)",
          "|| (r1 = Rhyme_types.ZeSheng && r2 = Rhyme_types.PingSheng))",
          "rhyme_pairs)",
          "in"
        ],
        "start_line": 187,
        "end_line": 190,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/parallelism_analysis.ml"
      }
    ],
    "d8e9392b3279b2289fb83e3d40d6de56": [
      {
        "hash": "d8e9392b3279b2289fb83e3d40d6de56",
        "text": "|| (r1 = Rhyme_types.ZeSheng && r2 = Rhyme_types.PingSheng))\nrhyme_pairs)\nin",
        "lines": [
          "|| (r1 = Rhyme_types.ZeSheng && r2 = Rhyme_types.PingSheng))",
          "rhyme_pairs)",
          "in"
        ],
        "start_line": 125,
        "end_line": 127,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/parallelism_analysis.ml"
      },
      {
        "hash": "d8e9392b3279b2289fb83e3d40d6de56",
        "text": "|| (r1 = Rhyme_types.ZeSheng && r2 = Rhyme_types.PingSheng))\nrhyme_pairs)\nin",
        "lines": [
          "|| (r1 = Rhyme_types.ZeSheng && r2 = Rhyme_types.PingSheng))",
          "rhyme_pairs)",
          "in"
        ],
        "start_line": 188,
        "end_line": 190,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/parallelism_analysis.ml"
      }
    ],
    "25794398bd0322f235d50be0b462b374": [
      {
        "hash": "25794398bd0322f235d50be0b462b374",
        "text": "| PerfectParallelism -> 1.0\n| GoodParallelism -> 0.8\n| LooseParallelism -> 0.6\n| WeakParallelism -> 0.4\n| NoParallelism -> 0.0\nin",
        "lines": [
          "| PerfectParallelism -> 1.0",
          "| GoodParallelism -> 0.8",
          "| LooseParallelism -> 0.6",
          "| WeakParallelism -> 0.4",
          "| NoParallelism -> 0.0",
          "in"
        ],
        "start_line": 223,
        "end_line": 228,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/parallelism_analysis.ml"
      },
      {
        "hash": "25794398bd0322f235d50be0b462b374",
        "text": "| PerfectParallelism -> 1.0\n| GoodParallelism -> 0.8\n| LooseParallelism -> 0.6\n| WeakParallelism -> 0.4\n| NoParallelism -> 0.0\nin",
        "lines": [
          "| PerfectParallelism -> 1.0",
          "| GoodParallelism -> 0.8",
          "| LooseParallelism -> 0.6",
          "| WeakParallelism -> 0.4",
          "| NoParallelism -> 0.0",
          "in"
        ],
        "start_line": 232,
        "end_line": 237,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/parallelism_analysis.ml"
      }
    ],
    "0a974817145adbcce409c7da40891ca5": [
      {
        "hash": "0a974817145adbcce409c7da40891ca5",
        "text": "| GoodParallelism -> 0.8\n| LooseParallelism -> 0.6\n| WeakParallelism -> 0.4\n| NoParallelism -> 0.0\nin",
        "lines": [
          "| GoodParallelism -> 0.8",
          "| LooseParallelism -> 0.6",
          "| WeakParallelism -> 0.4",
          "| NoParallelism -> 0.0",
          "in"
        ],
        "start_line": 224,
        "end_line": 228,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/parallelism_analysis.ml"
      },
      {
        "hash": "0a974817145adbcce409c7da40891ca5",
        "text": "| GoodParallelism -> 0.8\n| LooseParallelism -> 0.6\n| WeakParallelism -> 0.4\n| NoParallelism -> 0.0\nin",
        "lines": [
          "| GoodParallelism -> 0.8",
          "| LooseParallelism -> 0.6",
          "| WeakParallelism -> 0.4",
          "| NoParallelism -> 0.0",
          "in"
        ],
        "start_line": 233,
        "end_line": 237,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/parallelism_analysis.ml"
      }
    ],
    "6723e9f4f1631f5d4e14056d01a510e9": [
      {
        "hash": "6723e9f4f1631f5d4e14056d01a510e9",
        "text": "| LooseParallelism -> 0.6\n| WeakParallelism -> 0.4\n| NoParallelism -> 0.0\nin",
        "lines": [
          "| LooseParallelism -> 0.6",
          "| WeakParallelism -> 0.4",
          "| NoParallelism -> 0.0",
          "in"
        ],
        "start_line": 225,
        "end_line": 228,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/parallelism_analysis.ml"
      },
      {
        "hash": "6723e9f4f1631f5d4e14056d01a510e9",
        "text": "| LooseParallelism -> 0.6\n| WeakParallelism -> 0.4\n| NoParallelism -> 0.0\nin",
        "lines": [
          "| LooseParallelism -> 0.6",
          "| WeakParallelism -> 0.4",
          "| NoParallelism -> 0.0",
          "in"
        ],
        "start_line": 234,
        "end_line": 237,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/parallelism_analysis.ml"
      }
    ],
    "eeec54d18596e7fd5b0f2cc24610e0fb": [
      {
        "hash": "eeec54d18596e7fd5b0f2cc24610e0fb",
        "text": "| WeakParallelism -> 0.4\n| NoParallelism -> 0.0\nin",
        "lines": [
          "| WeakParallelism -> 0.4",
          "| NoParallelism -> 0.0",
          "in"
        ],
        "start_line": 226,
        "end_line": 228,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/parallelism_analysis.ml"
      },
      {
        "hash": "eeec54d18596e7fd5b0f2cc24610e0fb",
        "text": "| WeakParallelism -> 0.4\n| NoParallelism -> 0.0\nin",
        "lines": [
          "| WeakParallelism -> 0.4",
          "| NoParallelism -> 0.0",
          "in"
        ],
        "start_line": 235,
        "end_line": 237,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/parallelism_analysis.ml"
      }
    ],
    "6ec4e1b42c05b604c28d947f148a4e7f": [
      {
        "hash": "6ec4e1b42c05b604c28d947f148a4e7f",
        "text": "*\n* @author 骆言编程团队 - 模块整合项目\n* @version 2.0 (整合版本)\n* @since 2025-07-25\n* @issue #1155 诗词模块整合优化\n*)",
        "lines": [
          "*",
          "* @author 骆言编程团队 - 模块整合项目",
          "* @version 2.0 (整合版本)",
          "* @since 2025-07-25",
          "* @issue #1155 诗词模块整合优化",
          "*)"
        ],
        "start_line": 10,
        "end_line": 15,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_rhyme_engine.ml"
      },
      {
        "hash": "6ec4e1b42c05b604c28d947f148a4e7f",
        "text": "*\n* @author 骆言编程团队 - 模块整合项目\n* @version 2.0 (整合版本)\n* @since 2025-07-25\n* @issue #1155 诗词模块整合优化\n*)",
        "lines": [
          "*",
          "* @author 骆言编程团队 - 模块整合项目",
          "* @version 2.0 (整合版本)",
          "* @since 2025-07-25",
          "* @issue #1155 诗词模块整合优化",
          "*)"
        ],
        "start_line": 9,
        "end_line": 14,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_artistic_engine.ml"
      }
    ],
    "1da8560fd05a9bec5ddf321ca277ff8c": [
      {
        "hash": "1da8560fd05a9bec5ddf321ca277ff8c",
        "text": "* @author 骆言编程团队 - 模块整合项目\n* @version 2.0 (整合版本)\n* @since 2025-07-25\n* @issue #1155 诗词模块整合优化\n*)",
        "lines": [
          "* @author 骆言编程团队 - 模块整合项目",
          "* @version 2.0 (整合版本)",
          "* @since 2025-07-25",
          "* @issue #1155 诗词模块整合优化",
          "*)"
        ],
        "start_line": 11,
        "end_line": 15,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_rhyme_engine.ml"
      },
      {
        "hash": "1da8560fd05a9bec5ddf321ca277ff8c",
        "text": "* @author 骆言编程团队 - 模块整合项目\n* @version 2.0 (整合版本)\n* @since 2025-07-25\n* @issue #1155 诗词模块整合优化\n*)",
        "lines": [
          "* @author 骆言编程团队 - 模块整合项目",
          "* @version 2.0 (整合版本)",
          "* @since 2025-07-25",
          "* @issue #1155 诗词模块整合优化",
          "*)"
        ],
        "start_line": 10,
        "end_line": 14,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_artistic_engine.ml"
      }
    ],
    "7b1cf4ae85172dff40820232e35d1b74": [
      {
        "hash": "7b1cf4ae85172dff40820232e35d1b74",
        "text": "* @version 2.0 (整合版本)\n* @since 2025-07-25\n* @issue #1155 诗词模块整合优化\n*)",
        "lines": [
          "* @version 2.0 (整合版本)",
          "* @since 2025-07-25",
          "* @issue #1155 诗词模块整合优化",
          "*)"
        ],
        "start_line": 12,
        "end_line": 15,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_rhyme_engine.ml"
      },
      {
        "hash": "7b1cf4ae85172dff40820232e35d1b74",
        "text": "* @version 2.0 (整合版本)\n* @since 2025-07-25\n* @issue #1155 诗词模块整合优化\n*)",
        "lines": [
          "* @version 2.0 (整合版本)",
          "* @since 2025-07-25",
          "* @issue #1155 诗词模块整合优化",
          "*)"
        ],
        "start_line": 11,
        "end_line": 14,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_artistic_engine.ml"
      }
    ],
    "b0790ec00e5e6f86fc2509c94e825b0a": [
      {
        "hash": "b0790ec00e5e6f86fc2509c94e825b0a",
        "text": "* @since 2025-07-25\n* @issue #1155 诗词模块整合优化\n*)",
        "lines": [
          "* @since 2025-07-25",
          "* @issue #1155 诗词模块整合优化",
          "*)"
        ],
        "start_line": 13,
        "end_line": 15,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_rhyme_engine.ml"
      },
      {
        "hash": "b0790ec00e5e6f86fc2509c94e825b0a",
        "text": "* @since 2025-07-25\n* @issue #1155 诗词模块整合优化\n*)",
        "lines": [
          "* @since 2025-07-25",
          "* @issue #1155 诗词模块整合优化",
          "*)"
        ],
        "start_line": 18,
        "end_line": 20,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_recommended_api.ml"
      },
      {
        "hash": "b0790ec00e5e6f86fc2509c94e825b0a",
        "text": "* @since 2025-07-25\n* @issue #1155 诗词模块整合优化\n*)",
        "lines": [
          "* @since 2025-07-25",
          "* @issue #1155 诗词模块整合优化",
          "*)"
        ],
        "start_line": 12,
        "end_line": 14,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_artistic_engine.ml"
      }
    ],
    "12c6185cf3f6372cd1149c7e12d0f391": [
      {
        "hash": "12c6185cf3f6372cd1149c7e12d0f391",
        "text": "(* 辨音识韵：检测字符的韵母分类\n辨别平仄，识别声调，为诗词创作提供音律指导。\n*)\nlet detect_rhyme_category char =\nmatch find_rhyme_info char with Some (category, _) -> category | None -> PingSheng",
        "lines": [
          "(* 辨音识韵：检测字符的韵母分类",
          "辨别平仄，识别声调，为诗词创作提供音律指导。",
          "*)",
          "let detect_rhyme_category char =",
          "match find_rhyme_info char with Some (category, _) -> category | None -> PingSheng"
        ],
        "start_line": 22,
        "end_line": 26,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_matching.ml"
      },
      {
        "hash": "12c6185cf3f6372cd1149c7e12d0f391",
        "text": "(* 辨音识韵：检测字符的韵母分类\n辨别平仄，识别声调，为诗词创作提供音律指导。\n*)\nlet detect_rhyme_category char =\nmatch find_rhyme_info char with Some (category, _) -> category | None -> PingSheng",
        "lines": [
          "(* 辨音识韵：检测字符的韵母分类",
          "辨别平仄，识别声调，为诗词创作提供音律指导。",
          "*)",
          "let detect_rhyme_category char =",
          "match find_rhyme_info char with Some (category, _) -> category | None -> PingSheng"
        ],
        "start_line": 42,
        "end_line": 46,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_detection.ml"
      }
    ],
    "9bbe0905bcac5b799aa098a779ae0518": [
      {
        "hash": "9bbe0905bcac5b799aa098a779ae0518",
        "text": "辨别平仄，识别声调，为诗词创作提供音律指导。\n*)\nlet detect_rhyme_category char =\nmatch find_rhyme_info char with Some (category, _) -> category | None -> PingSheng",
        "lines": [
          "辨别平仄，识别声调，为诗词创作提供音律指导。",
          "*)",
          "let detect_rhyme_category char =",
          "match find_rhyme_info char with Some (category, _) -> category | None -> PingSheng"
        ],
        "start_line": 23,
        "end_line": 26,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_matching.ml"
      },
      {
        "hash": "9bbe0905bcac5b799aa098a779ae0518",
        "text": "辨别平仄，识别声调，为诗词创作提供音律指导。\n*)\nlet detect_rhyme_category char =\nmatch find_rhyme_info char with Some (category, _) -> category | None -> PingSheng",
        "lines": [
          "辨别平仄，识别声调，为诗词创作提供音律指导。",
          "*)",
          "let detect_rhyme_category char =",
          "match find_rhyme_info char with Some (category, _) -> category | None -> PingSheng"
        ],
        "start_line": 43,
        "end_line": 46,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_detection.ml"
      }
    ],
    "5110ec1eb6157ce0321cd7e1e6ceec4d": [
      {
        "hash": "5110ec1eb6157ce0321cd7e1e6ceec4d",
        "text": "*)\nlet detect_rhyme_category char =\nmatch find_rhyme_info char with Some (category, _) -> category | None -> PingSheng",
        "lines": [
          "*)",
          "let detect_rhyme_category char =",
          "match find_rhyme_info char with Some (category, _) -> category | None -> PingSheng"
        ],
        "start_line": 24,
        "end_line": 26,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_matching.ml"
      },
      {
        "hash": "5110ec1eb6157ce0321cd7e1e6ceec4d",
        "text": "*)\nlet detect_rhyme_category char =\nmatch find_rhyme_info char with Some (category, _) -> category | None -> PingSheng",
        "lines": [
          "*)",
          "let detect_rhyme_category char =",
          "match find_rhyme_info char with Some (category, _) -> category | None -> PingSheng"
        ],
        "start_line": 44,
        "end_line": 46,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_detection.ml"
      }
    ],
    "6d59336ce0fd8e525166d9016756ea7f": [
      {
        "hash": "6d59336ce0fd8e525166d9016756ea7f",
        "text": "(* 归类成组：检测字符的韵组\n同组之字，可以押韵；异组之字，不可混用。\n*)\nlet detect_rhyme_group char =\nmatch find_rhyme_info char with Some (_, group) -> group | None -> UnknownRhyme",
        "lines": [
          "(* 归类成组：检测字符的韵组",
          "同组之字，可以押韵；异组之字，不可混用。",
          "*)",
          "let detect_rhyme_group char =",
          "match find_rhyme_info char with Some (_, group) -> group | None -> UnknownRhyme"
        ],
        "start_line": 36,
        "end_line": 40,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_matching.ml"
      },
      {
        "hash": "6d59336ce0fd8e525166d9016756ea7f",
        "text": "(* 归类成组：检测字符的韵组\n同组之字，可以押韵；异组之字，不可混用。\n*)\nlet detect_rhyme_group char =\nmatch find_rhyme_info char with Some (_, group) -> group | None -> UnknownRhyme",
        "lines": [
          "(* 归类成组：检测字符的韵组",
          "同组之字，可以押韵；异组之字，不可混用。",
          "*)",
          "let detect_rhyme_group char =",
          "match find_rhyme_info char with Some (_, group) -> group | None -> UnknownRhyme"
        ],
        "start_line": 54,
        "end_line": 58,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_detection.ml"
      }
    ],
    "2ceede763d3b841af89dbd343f800f48": [
      {
        "hash": "2ceede763d3b841af89dbd343f800f48",
        "text": "同组之字，可以押韵；异组之字，不可混用。\n*)\nlet detect_rhyme_group char =\nmatch find_rhyme_info char with Some (_, group) -> group | None -> UnknownRhyme",
        "lines": [
          "同组之字，可以押韵；异组之字，不可混用。",
          "*)",
          "let detect_rhyme_group char =",
          "match find_rhyme_info char with Some (_, group) -> group | None -> UnknownRhyme"
        ],
        "start_line": 37,
        "end_line": 40,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_matching.ml"
      },
      {
        "hash": "2ceede763d3b841af89dbd343f800f48",
        "text": "同组之字，可以押韵；异组之字，不可混用。\n*)\nlet detect_rhyme_group char =\nmatch find_rhyme_info char with Some (_, group) -> group | None -> UnknownRhyme",
        "lines": [
          "同组之字，可以押韵；异组之字，不可混用。",
          "*)",
          "let detect_rhyme_group char =",
          "match find_rhyme_info char with Some (_, group) -> group | None -> UnknownRhyme"
        ],
        "start_line": 55,
        "end_line": 58,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_detection.ml"
      }
    ],
    "3036f2dabab83250b78380f73181754d": [
      {
        "hash": "3036f2dabab83250b78380f73181754d",
        "text": "*)\nlet detect_rhyme_group char =\nmatch find_rhyme_info char with Some (_, group) -> group | None -> UnknownRhyme",
        "lines": [
          "*)",
          "let detect_rhyme_group char =",
          "match find_rhyme_info char with Some (_, group) -> group | None -> UnknownRhyme"
        ],
        "start_line": 38,
        "end_line": 40,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_matching.ml"
      },
      {
        "hash": "3036f2dabab83250b78380f73181754d",
        "text": "*)\nlet detect_rhyme_group char =\nmatch find_rhyme_info char with Some (_, group) -> group | None -> UnknownRhyme",
        "lines": [
          "*)",
          "let detect_rhyme_group char =",
          "match find_rhyme_info char with Some (_, group) -> group | None -> UnknownRhyme"
        ],
        "start_line": 56,
        "end_line": 58,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_detection.ml"
      }
    ],
    "5b308b5160146f2d1d89894506f22209": [
      {
        "hash": "5b308b5160146f2d1d89894506f22209",
        "text": "let chars_rhyme char1 char2 =\nlet group1 = detect_rhyme_group char1 in\nlet group2 = detect_rhyme_group char2 in\nrhyme_group_equal group1 group2 && group1 <> UnknownRhyme",
        "lines": [
          "let chars_rhyme char1 char2 =",
          "let group1 = detect_rhyme_group char1 in",
          "let group2 = detect_rhyme_group char2 in",
          "rhyme_group_equal group1 group2 && group1 <> UnknownRhyme"
        ],
        "start_line": 34,
        "end_line": 37,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_validation.ml"
      },
      {
        "hash": "5b308b5160146f2d1d89894506f22209",
        "text": "let chars_rhyme char1 char2 =\nlet group1 = detect_rhyme_group char1 in\nlet group2 = detect_rhyme_group char2 in\nrhyme_group_equal group1 group2 && group1 <> UnknownRhyme",
        "lines": [
          "let chars_rhyme char1 char2 =",
          "let group1 = detect_rhyme_group char1 in",
          "let group2 = detect_rhyme_group char2 in",
          "rhyme_group_equal group1 group2 && group1 <> UnknownRhyme"
        ],
        "start_line": 44,
        "end_line": 47,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_rhyme_core.ml"
      }
    ],
    "006302efcd58c4dfa04f24c28de583fb": [
      {
        "hash": "006302efcd58c4dfa04f24c28de583fb",
        "text": "let group1 = detect_rhyme_group char1 in\nlet group2 = detect_rhyme_group char2 in\nrhyme_group_equal group1 group2 && group1 <> UnknownRhyme",
        "lines": [
          "let group1 = detect_rhyme_group char1 in",
          "let group2 = detect_rhyme_group char2 in",
          "rhyme_group_equal group1 group2 && group1 <> UnknownRhyme"
        ],
        "start_line": 35,
        "end_line": 37,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_validation.ml"
      },
      {
        "hash": "006302efcd58c4dfa04f24c28de583fb",
        "text": "let group1 = detect_rhyme_group char1 in\nlet group2 = detect_rhyme_group char2 in\nrhyme_group_equal group1 group2 && group1 <> UnknownRhyme",
        "lines": [
          "let group1 = detect_rhyme_group char1 in",
          "let group2 = detect_rhyme_group char2 in",
          "rhyme_group_equal group1 group2 && group1 <> UnknownRhyme"
        ],
        "start_line": 45,
        "end_line": 47,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_rhyme_core.ml"
      }
    ],
    "93446929b874442106cc3bc94f8f0add": [
      {
        "hash": "93446929b874442106cc3bc94f8f0add",
        "text": "if p1 = 'A' then same_rhyme || check_pattern gs ps else check_pattern gs ps\n| _ -> false\nin",
        "lines": [
          "if p1 = 'A' then same_rhyme || check_pattern gs ps else check_pattern gs ps",
          "| _ -> false",
          "in"
        ],
        "start_line": 71,
        "end_line": 73,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_validation.ml"
      },
      {
        "hash": "93446929b874442106cc3bc94f8f0add",
        "text": "if p1 = 'A' then same_rhyme || check_pattern gs ps else check_pattern gs ps\n| _ -> false\nin",
        "lines": [
          "if p1 = 'A' then same_rhyme || check_pattern gs ps else check_pattern gs ps",
          "| _ -> false",
          "in"
        ],
        "start_line": 52,
        "end_line": 54,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_pattern.ml"
      }
    ],
    "da2015fbd6415bf9aacd292aaa6165a0": [
      {
        "hash": "da2015fbd6415bf9aacd292aaa6165a0",
        "text": "if List.length rhyme_groups = List.length rhyme_pattern then\ncheck_pattern rhyme_groups rhyme_pattern\nelse false",
        "lines": [
          "if List.length rhyme_groups = List.length rhyme_pattern then",
          "check_pattern rhyme_groups rhyme_pattern",
          "else false"
        ],
        "start_line": 75,
        "end_line": 77,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_validation.ml"
      },
      {
        "hash": "da2015fbd6415bf9aacd292aaa6165a0",
        "text": "if List.length rhyme_groups = List.length rhyme_pattern then\ncheck_pattern rhyme_groups rhyme_pattern\nelse false",
        "lines": [
          "if List.length rhyme_groups = List.length rhyme_pattern then",
          "check_pattern rhyme_groups rhyme_pattern",
          "else false"
        ],
        "start_line": 56,
        "end_line": 58,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_pattern.ml"
      }
    ],
    "3a50e1bbd36e174488356c90d47f0cab": [
      {
        "hash": "3a50e1bbd36e174488356c90d47f0cab",
        "text": "match !cached_data with\n| None -> false\n| Some _ ->\nlet current_time = Unix.time () in\ncurrent_time -. !cache_timestamp < cache_ttl",
        "lines": [
          "match !cached_data with",
          "| None -> false",
          "| Some _ ->",
          "let current_time = Unix.time () in",
          "current_time -. !cache_timestamp < cache_ttl"
        ],
        "start_line": 23,
        "end_line": 27,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_json_unified.ml"
      },
      {
        "hash": "3a50e1bbd36e174488356c90d47f0cab",
        "text": "match !cached_data with\n| None -> false\n| Some _ ->\nlet current_time = Unix.time () in\ncurrent_time -. !cache_timestamp < cache_ttl",
        "lines": [
          "match !cached_data with",
          "| None -> false",
          "| Some _ ->",
          "let current_time = Unix.time () in",
          "current_time -. !cache_timestamp < cache_ttl"
        ],
        "start_line": 96,
        "end_line": 100,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      },
      {
        "hash": "3a50e1bbd36e174488356c90d47f0cab",
        "text": "match !cached_data with\n| None -> false\n| Some _ ->\nlet current_time = Unix.time () in\ncurrent_time -. !cache_timestamp < cache_ttl",
        "lines": [
          "match !cached_data with",
          "| None -> false",
          "| Some _ ->",
          "let current_time = Unix.time () in",
          "current_time -. !cache_timestamp < cache_ttl"
        ],
        "start_line": 28,
        "end_line": 32,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_cache.ml"
      }
    ],
    "db7602e306c24d9bc52c58b2e6cf90f8": [
      {
        "hash": "db7602e306c24d9bc52c58b2e6cf90f8",
        "text": "| None -> false\n| Some _ ->\nlet current_time = Unix.time () in\ncurrent_time -. !cache_timestamp < cache_ttl",
        "lines": [
          "| None -> false",
          "| Some _ ->",
          "let current_time = Unix.time () in",
          "current_time -. !cache_timestamp < cache_ttl"
        ],
        "start_line": 24,
        "end_line": 27,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_json_unified.ml"
      },
      {
        "hash": "db7602e306c24d9bc52c58b2e6cf90f8",
        "text": "| None -> false\n| Some _ ->\nlet current_time = Unix.time () in\ncurrent_time -. !cache_timestamp < cache_ttl",
        "lines": [
          "| None -> false",
          "| Some _ ->",
          "let current_time = Unix.time () in",
          "current_time -. !cache_timestamp < cache_ttl"
        ],
        "start_line": 97,
        "end_line": 100,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      },
      {
        "hash": "db7602e306c24d9bc52c58b2e6cf90f8",
        "text": "| None -> false\n| Some _ ->\nlet current_time = Unix.time () in\ncurrent_time -. !cache_timestamp < cache_ttl",
        "lines": [
          "| None -> false",
          "| Some _ ->",
          "let current_time = Unix.time () in",
          "current_time -. !cache_timestamp < cache_ttl"
        ],
        "start_line": 29,
        "end_line": 32,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_cache.ml"
      }
    ],
    "af5a385d6e39528454061abdb3efc17d": [
      {
        "hash": "af5a385d6e39528454061abdb3efc17d",
        "text": "| Some _ ->\nlet current_time = Unix.time () in\ncurrent_time -. !cache_timestamp < cache_ttl",
        "lines": [
          "| Some _ ->",
          "let current_time = Unix.time () in",
          "current_time -. !cache_timestamp < cache_ttl"
        ],
        "start_line": 25,
        "end_line": 27,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_json_unified.ml"
      },
      {
        "hash": "af5a385d6e39528454061abdb3efc17d",
        "text": "| Some _ ->\nlet current_time = Unix.time () in\ncurrent_time -. !cache_timestamp < cache_ttl",
        "lines": [
          "| Some _ ->",
          "let current_time = Unix.time () in",
          "current_time -. !cache_timestamp < cache_ttl"
        ],
        "start_line": 98,
        "end_line": 100,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      },
      {
        "hash": "af5a385d6e39528454061abdb3efc17d",
        "text": "| Some _ ->\nlet current_time = Unix.time () in\ncurrent_time -. !cache_timestamp < cache_ttl",
        "lines": [
          "| Some _ ->",
          "let current_time = Unix.time () in",
          "current_time -. !cache_timestamp < cache_ttl"
        ],
        "start_line": 30,
        "end_line": 32,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_cache.ml"
      }
    ],
    "34d6567975a8db14ddcb228f0245bf04": [
      {
        "hash": "34d6567975a8db14ddcb228f0245bf04",
        "text": "match !cached_data with\n| Some data -> data\n| None -> raise (Rhyme_data_not_found \"缓存中无数据\")",
        "lines": [
          "match !cached_data with",
          "| Some data -> data",
          "| None -> raise (Rhyme_data_not_found \"缓存中无数据\")"
        ],
        "start_line": 30,
        "end_line": 32,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_json_unified.ml"
      },
      {
        "hash": "34d6567975a8db14ddcb228f0245bf04",
        "text": "match !cached_data with\n| Some data -> data\n| None -> raise (Rhyme_data_not_found \"缓存中无数据\")",
        "lines": [
          "match !cached_data with",
          "| Some data -> data",
          "| None -> raise (Rhyme_data_not_found \"缓存中无数据\")"
        ],
        "start_line": 104,
        "end_line": 106,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      }
    ],
    "3274e26b9b3e152844a50c6153beff5b": [
      {
        "hash": "3274e26b9b3e152844a50c6153beff5b",
        "text": "let clean_string s =\nlet s = String.trim s in\nlet len = String.length s in\nif len = 0 then \"\"\nelse\nlet s = if s.[0] = '\"' && len > 1 then String.sub s 1 (len - 1) else s in\nlet s_len = String.length s in\nlet s = if s_len > 0 && s.[s_len - 1] = ',' then String.sub s 0 (s_len - 1) else s in\nif String.length s > 0 && s.[String.length s - 1] = '\"' then String.sub s 0 (String.length s - 1)\nelse s",
        "lines": [
          "let clean_string s =",
          "let s = String.trim s in",
          "let len = String.length s in",
          "if len = 0 then \"\"",
          "else",
          "let s = if s.[0] = '\"' && len > 1 then String.sub s 1 (len - 1) else s in",
          "let s_len = String.length s in",
          "let s = if s_len > 0 && s.[s_len - 1] = ',' then String.sub s 0 (s_len - 1) else s in",
          "if String.length s > 0 && s.[String.length s - 1] = '\"' then String.sub s 0 (String.length s - 1)",
          "else s"
        ],
        "start_line": 50,
        "end_line": 59,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_json_unified.ml"
      },
      {
        "hash": "3274e26b9b3e152844a50c6153beff5b",
        "text": "let clean_string s =\nlet s = String.trim s in\nlet len = String.length s in\nif len = 0 then \"\"\nelse\nlet s = if s.[0] = '\"' && len > 1 then String.sub s 1 (len - 1) else s in\nlet s_len = String.length s in\nlet s = if s_len > 0 && s.[s_len - 1] = ',' then String.sub s 0 (s_len - 1) else s in\nif String.length s > 0 && s.[String.length s - 1] = '\"' then String.sub s 0 (String.length s - 1)\nelse s",
        "lines": [
          "let clean_string s =",
          "let s = String.trim s in",
          "let len = String.length s in",
          "if len = 0 then \"\"",
          "else",
          "let s = if s.[0] = '\"' && len > 1 then String.sub s 1 (len - 1) else s in",
          "let s_len = String.length s in",
          "let s = if s_len > 0 && s.[s_len - 1] = ',' then String.sub s 0 (s_len - 1) else s in",
          "if String.length s > 0 && s.[String.length s - 1] = '\"' then String.sub s 0 (String.length s - 1)",
          "else s"
        ],
        "start_line": 98,
        "end_line": 107,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_data_unified.ml"
      }
    ],
    "fcb0af09e56bbc4cddcffd83d87a38be": [
      {
        "hash": "fcb0af09e56bbc4cddcffd83d87a38be",
        "text": "let s = String.trim s in\nlet len = String.length s in\nif len = 0 then \"\"\nelse\nlet s = if s.[0] = '\"' && len > 1 then String.sub s 1 (len - 1) else s in\nlet s_len = String.length s in\nlet s = if s_len > 0 && s.[s_len - 1] = ',' then String.sub s 0 (s_len - 1) else s in\nif String.length s > 0 && s.[String.length s - 1] = '\"' then String.sub s 0 (String.length s - 1)\nelse s",
        "lines": [
          "let s = String.trim s in",
          "let len = String.length s in",
          "if len = 0 then \"\"",
          "else",
          "let s = if s.[0] = '\"' && len > 1 then String.sub s 1 (len - 1) else s in",
          "let s_len = String.length s in",
          "let s = if s_len > 0 && s.[s_len - 1] = ',' then String.sub s 0 (s_len - 1) else s in",
          "if String.length s > 0 && s.[String.length s - 1] = '\"' then String.sub s 0 (String.length s - 1)",
          "else s"
        ],
        "start_line": 51,
        "end_line": 59,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_json_unified.ml"
      },
      {
        "hash": "fcb0af09e56bbc4cddcffd83d87a38be",
        "text": "let s = String.trim s in\nlet len = String.length s in\nif len = 0 then \"\"\nelse\nlet s = if s.[0] = '\"' && len > 1 then String.sub s 1 (len - 1) else s in\nlet s_len = String.length s in\nlet s = if s_len > 0 && s.[s_len - 1] = ',' then String.sub s 0 (s_len - 1) else s in\nif String.length s > 0 && s.[String.length s - 1] = '\"' then String.sub s 0 (String.length s - 1)\nelse s",
        "lines": [
          "let s = String.trim s in",
          "let len = String.length s in",
          "if len = 0 then \"\"",
          "else",
          "let s = if s.[0] = '\"' && len > 1 then String.sub s 1 (len - 1) else s in",
          "let s_len = String.length s in",
          "let s = if s_len > 0 && s.[s_len - 1] = ',' then String.sub s 0 (s_len - 1) else s in",
          "if String.length s > 0 && s.[String.length s - 1] = '\"' then String.sub s 0 (String.length s - 1)",
          "else s"
        ],
        "start_line": 15,
        "end_line": 23,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_parser.ml"
      },
      {
        "hash": "fcb0af09e56bbc4cddcffd83d87a38be",
        "text": "let s = String.trim s in\nlet len = String.length s in\nif len = 0 then \"\"\nelse\nlet s = if s.[0] = '\"' && len > 1 then String.sub s 1 (len - 1) else s in\nlet s_len = String.length s in\nlet s = if s_len > 0 && s.[s_len - 1] = ',' then String.sub s 0 (s_len - 1) else s in\nif String.length s > 0 && s.[String.length s - 1] = '\"' then String.sub s 0 (String.length s - 1)\nelse s",
        "lines": [
          "let s = String.trim s in",
          "let len = String.length s in",
          "if len = 0 then \"\"",
          "else",
          "let s = if s.[0] = '\"' && len > 1 then String.sub s 1 (len - 1) else s in",
          "let s_len = String.length s in",
          "let s = if s_len > 0 && s.[s_len - 1] = ',' then String.sub s 0 (s_len - 1) else s in",
          "if String.length s > 0 && s.[String.length s - 1] = '\"' then String.sub s 0 (String.length s - 1)",
          "else s"
        ],
        "start_line": 127,
        "end_line": 135,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      },
      {
        "hash": "fcb0af09e56bbc4cddcffd83d87a38be",
        "text": "let s = String.trim s in\nlet len = String.length s in\nif len = 0 then \"\"\nelse\nlet s = if s.[0] = '\"' && len > 1 then String.sub s 1 (len - 1) else s in\nlet s_len = String.length s in\nlet s = if s_len > 0 && s.[s_len - 1] = ',' then String.sub s 0 (s_len - 1) else s in\nif String.length s > 0 && s.[String.length s - 1] = '\"' then String.sub s 0 (String.length s - 1)\nelse s",
        "lines": [
          "let s = String.trim s in",
          "let len = String.length s in",
          "if len = 0 then \"\"",
          "else",
          "let s = if s.[0] = '\"' && len > 1 then String.sub s 1 (len - 1) else s in",
          "let s_len = String.length s in",
          "let s = if s_len > 0 && s.[s_len - 1] = ',' then String.sub s 0 (s_len - 1) else s in",
          "if String.length s > 0 && s.[String.length s - 1] = '\"' then String.sub s 0 (String.length s - 1)",
          "else s"
        ],
        "start_line": 99,
        "end_line": 107,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_data_unified.ml"
      },
      {
        "hash": "fcb0af09e56bbc4cddcffd83d87a38be",
        "text": "let s = String.trim s in\nlet len = String.length s in\nif len = 0 then \"\"\nelse\nlet s = if s.[0] = '\"' && len > 1 then String.sub s 1 (len - 1) else s in\nlet s_len = String.length s in\nlet s = if s_len > 0 && s.[s_len - 1] = ',' then String.sub s 0 (s_len - 1) else s in\nif String.length s > 0 && s.[String.length s - 1] = '\"' then String.sub s 0 (String.length s - 1)\nelse s",
        "lines": [
          "let s = String.trim s in",
          "let len = String.length s in",
          "if len = 0 then \"\"",
          "else",
          "let s = if s.[0] = '\"' && len > 1 then String.sub s 1 (len - 1) else s in",
          "let s_len = String.length s in",
          "let s = if s_len > 0 && s.[s_len - 1] = ',' then String.sub s 0 (s_len - 1) else s in",
          "if String.length s > 0 && s.[String.length s - 1] = '\"' then String.sub s 0 (String.length s - 1)",
          "else s"
        ],
        "start_line": 76,
        "end_line": 84,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_unified.ml"
      }
    ],
    "3933c6b106aafb33a1cb9327553ef407": [
      {
        "hash": "3933c6b106aafb33a1cb9327553ef407",
        "text": "let len = String.length s in\nif len = 0 then \"\"\nelse\nlet s = if s.[0] = '\"' && len > 1 then String.sub s 1 (len - 1) else s in\nlet s_len = String.length s in\nlet s = if s_len > 0 && s.[s_len - 1] = ',' then String.sub s 0 (s_len - 1) else s in\nif String.length s > 0 && s.[String.length s - 1] = '\"' then String.sub s 0 (String.length s - 1)\nelse s",
        "lines": [
          "let len = String.length s in",
          "if len = 0 then \"\"",
          "else",
          "let s = if s.[0] = '\"' && len > 1 then String.sub s 1 (len - 1) else s in",
          "let s_len = String.length s in",
          "let s = if s_len > 0 && s.[s_len - 1] = ',' then String.sub s 0 (s_len - 1) else s in",
          "if String.length s > 0 && s.[String.length s - 1] = '\"' then String.sub s 0 (String.length s - 1)",
          "else s"
        ],
        "start_line": 52,
        "end_line": 59,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_json_unified.ml"
      },
      {
        "hash": "3933c6b106aafb33a1cb9327553ef407",
        "text": "let len = String.length s in\nif len = 0 then \"\"\nelse\nlet s = if s.[0] = '\"' && len > 1 then String.sub s 1 (len - 1) else s in\nlet s_len = String.length s in\nlet s = if s_len > 0 && s.[s_len - 1] = ',' then String.sub s 0 (s_len - 1) else s in\nif String.length s > 0 && s.[String.length s - 1] = '\"' then String.sub s 0 (String.length s - 1)\nelse s",
        "lines": [
          "let len = String.length s in",
          "if len = 0 then \"\"",
          "else",
          "let s = if s.[0] = '\"' && len > 1 then String.sub s 1 (len - 1) else s in",
          "let s_len = String.length s in",
          "let s = if s_len > 0 && s.[s_len - 1] = ',' then String.sub s 0 (s_len - 1) else s in",
          "if String.length s > 0 && s.[String.length s - 1] = '\"' then String.sub s 0 (String.length s - 1)",
          "else s"
        ],
        "start_line": 16,
        "end_line": 23,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_parser.ml"
      },
      {
        "hash": "3933c6b106aafb33a1cb9327553ef407",
        "text": "let len = String.length s in\nif len = 0 then \"\"\nelse\nlet s = if s.[0] = '\"' && len > 1 then String.sub s 1 (len - 1) else s in\nlet s_len = String.length s in\nlet s = if s_len > 0 && s.[s_len - 1] = ',' then String.sub s 0 (s_len - 1) else s in\nif String.length s > 0 && s.[String.length s - 1] = '\"' then String.sub s 0 (String.length s - 1)\nelse s",
        "lines": [
          "let len = String.length s in",
          "if len = 0 then \"\"",
          "else",
          "let s = if s.[0] = '\"' && len > 1 then String.sub s 1 (len - 1) else s in",
          "let s_len = String.length s in",
          "let s = if s_len > 0 && s.[s_len - 1] = ',' then String.sub s 0 (s_len - 1) else s in",
          "if String.length s > 0 && s.[String.length s - 1] = '\"' then String.sub s 0 (String.length s - 1)",
          "else s"
        ],
        "start_line": 128,
        "end_line": 135,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      },
      {
        "hash": "3933c6b106aafb33a1cb9327553ef407",
        "text": "let len = String.length s in\nif len = 0 then \"\"\nelse\nlet s = if s.[0] = '\"' && len > 1 then String.sub s 1 (len - 1) else s in\nlet s_len = String.length s in\nlet s = if s_len > 0 && s.[s_len - 1] = ',' then String.sub s 0 (s_len - 1) else s in\nif String.length s > 0 && s.[String.length s - 1] = '\"' then String.sub s 0 (String.length s - 1)\nelse s",
        "lines": [
          "let len = String.length s in",
          "if len = 0 then \"\"",
          "else",
          "let s = if s.[0] = '\"' && len > 1 then String.sub s 1 (len - 1) else s in",
          "let s_len = String.length s in",
          "let s = if s_len > 0 && s.[s_len - 1] = ',' then String.sub s 0 (s_len - 1) else s in",
          "if String.length s > 0 && s.[String.length s - 1] = '\"' then String.sub s 0 (String.length s - 1)",
          "else s"
        ],
        "start_line": 100,
        "end_line": 107,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_data_unified.ml"
      },
      {
        "hash": "3933c6b106aafb33a1cb9327553ef407",
        "text": "let len = String.length s in\nif len = 0 then \"\"\nelse\nlet s = if s.[0] = '\"' && len > 1 then String.sub s 1 (len - 1) else s in\nlet s_len = String.length s in\nlet s = if s_len > 0 && s.[s_len - 1] = ',' then String.sub s 0 (s_len - 1) else s in\nif String.length s > 0 && s.[String.length s - 1] = '\"' then String.sub s 0 (String.length s - 1)\nelse s",
        "lines": [
          "let len = String.length s in",
          "if len = 0 then \"\"",
          "else",
          "let s = if s.[0] = '\"' && len > 1 then String.sub s 1 (len - 1) else s in",
          "let s_len = String.length s in",
          "let s = if s_len > 0 && s.[s_len - 1] = ',' then String.sub s 0 (s_len - 1) else s in",
          "if String.length s > 0 && s.[String.length s - 1] = '\"' then String.sub s 0 (String.length s - 1)",
          "else s"
        ],
        "start_line": 77,
        "end_line": 84,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_unified.ml"
      }
    ],
    "130ef1808c4102df30dcafdf68de2b50": [
      {
        "hash": "130ef1808c4102df30dcafdf68de2b50",
        "text": "if len = 0 then \"\"\nelse\nlet s = if s.[0] = '\"' && len > 1 then String.sub s 1 (len - 1) else s in\nlet s_len = String.length s in\nlet s = if s_len > 0 && s.[s_len - 1] = ',' then String.sub s 0 (s_len - 1) else s in\nif String.length s > 0 && s.[String.length s - 1] = '\"' then String.sub s 0 (String.length s - 1)\nelse s",
        "lines": [
          "if len = 0 then \"\"",
          "else",
          "let s = if s.[0] = '\"' && len > 1 then String.sub s 1 (len - 1) else s in",
          "let s_len = String.length s in",
          "let s = if s_len > 0 && s.[s_len - 1] = ',' then String.sub s 0 (s_len - 1) else s in",
          "if String.length s > 0 && s.[String.length s - 1] = '\"' then String.sub s 0 (String.length s - 1)",
          "else s"
        ],
        "start_line": 53,
        "end_line": 59,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_json_unified.ml"
      },
      {
        "hash": "130ef1808c4102df30dcafdf68de2b50",
        "text": "if len = 0 then \"\"\nelse\nlet s = if s.[0] = '\"' && len > 1 then String.sub s 1 (len - 1) else s in\nlet s_len = String.length s in\nlet s = if s_len > 0 && s.[s_len - 1] = ',' then String.sub s 0 (s_len - 1) else s in\nif String.length s > 0 && s.[String.length s - 1] = '\"' then String.sub s 0 (String.length s - 1)\nelse s",
        "lines": [
          "if len = 0 then \"\"",
          "else",
          "let s = if s.[0] = '\"' && len > 1 then String.sub s 1 (len - 1) else s in",
          "let s_len = String.length s in",
          "let s = if s_len > 0 && s.[s_len - 1] = ',' then String.sub s 0 (s_len - 1) else s in",
          "if String.length s > 0 && s.[String.length s - 1] = '\"' then String.sub s 0 (String.length s - 1)",
          "else s"
        ],
        "start_line": 17,
        "end_line": 23,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_parser.ml"
      },
      {
        "hash": "130ef1808c4102df30dcafdf68de2b50",
        "text": "if len = 0 then \"\"\nelse\nlet s = if s.[0] = '\"' && len > 1 then String.sub s 1 (len - 1) else s in\nlet s_len = String.length s in\nlet s = if s_len > 0 && s.[s_len - 1] = ',' then String.sub s 0 (s_len - 1) else s in\nif String.length s > 0 && s.[String.length s - 1] = '\"' then String.sub s 0 (String.length s - 1)\nelse s",
        "lines": [
          "if len = 0 then \"\"",
          "else",
          "let s = if s.[0] = '\"' && len > 1 then String.sub s 1 (len - 1) else s in",
          "let s_len = String.length s in",
          "let s = if s_len > 0 && s.[s_len - 1] = ',' then String.sub s 0 (s_len - 1) else s in",
          "if String.length s > 0 && s.[String.length s - 1] = '\"' then String.sub s 0 (String.length s - 1)",
          "else s"
        ],
        "start_line": 129,
        "end_line": 135,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      },
      {
        "hash": "130ef1808c4102df30dcafdf68de2b50",
        "text": "if len = 0 then \"\"\nelse\nlet s = if s.[0] = '\"' && len > 1 then String.sub s 1 (len - 1) else s in\nlet s_len = String.length s in\nlet s = if s_len > 0 && s.[s_len - 1] = ',' then String.sub s 0 (s_len - 1) else s in\nif String.length s > 0 && s.[String.length s - 1] = '\"' then String.sub s 0 (String.length s - 1)\nelse s",
        "lines": [
          "if len = 0 then \"\"",
          "else",
          "let s = if s.[0] = '\"' && len > 1 then String.sub s 1 (len - 1) else s in",
          "let s_len = String.length s in",
          "let s = if s_len > 0 && s.[s_len - 1] = ',' then String.sub s 0 (s_len - 1) else s in",
          "if String.length s > 0 && s.[String.length s - 1] = '\"' then String.sub s 0 (String.length s - 1)",
          "else s"
        ],
        "start_line": 101,
        "end_line": 107,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_data_unified.ml"
      },
      {
        "hash": "130ef1808c4102df30dcafdf68de2b50",
        "text": "if len = 0 then \"\"\nelse\nlet s = if s.[0] = '\"' && len > 1 then String.sub s 1 (len - 1) else s in\nlet s_len = String.length s in\nlet s = if s_len > 0 && s.[s_len - 1] = ',' then String.sub s 0 (s_len - 1) else s in\nif String.length s > 0 && s.[String.length s - 1] = '\"' then String.sub s 0 (String.length s - 1)\nelse s",
        "lines": [
          "if len = 0 then \"\"",
          "else",
          "let s = if s.[0] = '\"' && len > 1 then String.sub s 1 (len - 1) else s in",
          "let s_len = String.length s in",
          "let s = if s_len > 0 && s.[s_len - 1] = ',' then String.sub s 0 (s_len - 1) else s in",
          "if String.length s > 0 && s.[String.length s - 1] = '\"' then String.sub s 0 (String.length s - 1)",
          "else s"
        ],
        "start_line": 78,
        "end_line": 84,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_unified.ml"
      }
    ],
    "6dbb5cdf776e8a4d4845d6efce93b133": [
      {
        "hash": "6dbb5cdf776e8a4d4845d6efce93b133",
        "text": "else\nlet s = if s.[0] = '\"' && len > 1 then String.sub s 1 (len - 1) else s in\nlet s_len = String.length s in\nlet s = if s_len > 0 && s.[s_len - 1] = ',' then String.sub s 0 (s_len - 1) else s in\nif String.length s > 0 && s.[String.length s - 1] = '\"' then String.sub s 0 (String.length s - 1)\nelse s",
        "lines": [
          "else",
          "let s = if s.[0] = '\"' && len > 1 then String.sub s 1 (len - 1) else s in",
          "let s_len = String.length s in",
          "let s = if s_len > 0 && s.[s_len - 1] = ',' then String.sub s 0 (s_len - 1) else s in",
          "if String.length s > 0 && s.[String.length s - 1] = '\"' then String.sub s 0 (String.length s - 1)",
          "else s"
        ],
        "start_line": 54,
        "end_line": 59,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_json_unified.ml"
      },
      {
        "hash": "6dbb5cdf776e8a4d4845d6efce93b133",
        "text": "else\nlet s = if s.[0] = '\"' && len > 1 then String.sub s 1 (len - 1) else s in\nlet s_len = String.length s in\nlet s = if s_len > 0 && s.[s_len - 1] = ',' then String.sub s 0 (s_len - 1) else s in\nif String.length s > 0 && s.[String.length s - 1] = '\"' then String.sub s 0 (String.length s - 1)\nelse s",
        "lines": [
          "else",
          "let s = if s.[0] = '\"' && len > 1 then String.sub s 1 (len - 1) else s in",
          "let s_len = String.length s in",
          "let s = if s_len > 0 && s.[s_len - 1] = ',' then String.sub s 0 (s_len - 1) else s in",
          "if String.length s > 0 && s.[String.length s - 1] = '\"' then String.sub s 0 (String.length s - 1)",
          "else s"
        ],
        "start_line": 18,
        "end_line": 23,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_parser.ml"
      },
      {
        "hash": "6dbb5cdf776e8a4d4845d6efce93b133",
        "text": "else\nlet s = if s.[0] = '\"' && len > 1 then String.sub s 1 (len - 1) else s in\nlet s_len = String.length s in\nlet s = if s_len > 0 && s.[s_len - 1] = ',' then String.sub s 0 (s_len - 1) else s in\nif String.length s > 0 && s.[String.length s - 1] = '\"' then String.sub s 0 (String.length s - 1)\nelse s",
        "lines": [
          "else",
          "let s = if s.[0] = '\"' && len > 1 then String.sub s 1 (len - 1) else s in",
          "let s_len = String.length s in",
          "let s = if s_len > 0 && s.[s_len - 1] = ',' then String.sub s 0 (s_len - 1) else s in",
          "if String.length s > 0 && s.[String.length s - 1] = '\"' then String.sub s 0 (String.length s - 1)",
          "else s"
        ],
        "start_line": 130,
        "end_line": 135,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      },
      {
        "hash": "6dbb5cdf776e8a4d4845d6efce93b133",
        "text": "else\nlet s = if s.[0] = '\"' && len > 1 then String.sub s 1 (len - 1) else s in\nlet s_len = String.length s in\nlet s = if s_len > 0 && s.[s_len - 1] = ',' then String.sub s 0 (s_len - 1) else s in\nif String.length s > 0 && s.[String.length s - 1] = '\"' then String.sub s 0 (String.length s - 1)\nelse s",
        "lines": [
          "else",
          "let s = if s.[0] = '\"' && len > 1 then String.sub s 1 (len - 1) else s in",
          "let s_len = String.length s in",
          "let s = if s_len > 0 && s.[s_len - 1] = ',' then String.sub s 0 (s_len - 1) else s in",
          "if String.length s > 0 && s.[String.length s - 1] = '\"' then String.sub s 0 (String.length s - 1)",
          "else s"
        ],
        "start_line": 102,
        "end_line": 107,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_data_unified.ml"
      },
      {
        "hash": "6dbb5cdf776e8a4d4845d6efce93b133",
        "text": "else\nlet s = if s.[0] = '\"' && len > 1 then String.sub s 1 (len - 1) else s in\nlet s_len = String.length s in\nlet s = if s_len > 0 && s.[s_len - 1] = ',' then String.sub s 0 (s_len - 1) else s in\nif String.length s > 0 && s.[String.length s - 1] = '\"' then String.sub s 0 (String.length s - 1)\nelse s",
        "lines": [
          "else",
          "let s = if s.[0] = '\"' && len > 1 then String.sub s 1 (len - 1) else s in",
          "let s_len = String.length s in",
          "let s = if s_len > 0 && s.[s_len - 1] = ',' then String.sub s 0 (s_len - 1) else s in",
          "if String.length s > 0 && s.[String.length s - 1] = '\"' then String.sub s 0 (String.length s - 1)",
          "else s"
        ],
        "start_line": 79,
        "end_line": 84,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_unified.ml"
      }
    ],
    "224ddb5d40725beb84a34be30e6af8fa": [
      {
        "hash": "224ddb5d40725beb84a34be30e6af8fa",
        "text": "let s = if s.[0] = '\"' && len > 1 then String.sub s 1 (len - 1) else s in\nlet s_len = String.length s in\nlet s = if s_len > 0 && s.[s_len - 1] = ',' then String.sub s 0 (s_len - 1) else s in\nif String.length s > 0 && s.[String.length s - 1] = '\"' then String.sub s 0 (String.length s - 1)\nelse s",
        "lines": [
          "let s = if s.[0] = '\"' && len > 1 then String.sub s 1 (len - 1) else s in",
          "let s_len = String.length s in",
          "let s = if s_len > 0 && s.[s_len - 1] = ',' then String.sub s 0 (s_len - 1) else s in",
          "if String.length s > 0 && s.[String.length s - 1] = '\"' then String.sub s 0 (String.length s - 1)",
          "else s"
        ],
        "start_line": 55,
        "end_line": 59,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_json_unified.ml"
      },
      {
        "hash": "224ddb5d40725beb84a34be30e6af8fa",
        "text": "let s = if s.[0] = '\"' && len > 1 then String.sub s 1 (len - 1) else s in\nlet s_len = String.length s in\nlet s = if s_len > 0 && s.[s_len - 1] = ',' then String.sub s 0 (s_len - 1) else s in\nif String.length s > 0 && s.[String.length s - 1] = '\"' then String.sub s 0 (String.length s - 1)\nelse s",
        "lines": [
          "let s = if s.[0] = '\"' && len > 1 then String.sub s 1 (len - 1) else s in",
          "let s_len = String.length s in",
          "let s = if s_len > 0 && s.[s_len - 1] = ',' then String.sub s 0 (s_len - 1) else s in",
          "if String.length s > 0 && s.[String.length s - 1] = '\"' then String.sub s 0 (String.length s - 1)",
          "else s"
        ],
        "start_line": 19,
        "end_line": 23,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_parser.ml"
      },
      {
        "hash": "224ddb5d40725beb84a34be30e6af8fa",
        "text": "let s = if s.[0] = '\"' && len > 1 then String.sub s 1 (len - 1) else s in\nlet s_len = String.length s in\nlet s = if s_len > 0 && s.[s_len - 1] = ',' then String.sub s 0 (s_len - 1) else s in\nif String.length s > 0 && s.[String.length s - 1] = '\"' then String.sub s 0 (String.length s - 1)\nelse s",
        "lines": [
          "let s = if s.[0] = '\"' && len > 1 then String.sub s 1 (len - 1) else s in",
          "let s_len = String.length s in",
          "let s = if s_len > 0 && s.[s_len - 1] = ',' then String.sub s 0 (s_len - 1) else s in",
          "if String.length s > 0 && s.[String.length s - 1] = '\"' then String.sub s 0 (String.length s - 1)",
          "else s"
        ],
        "start_line": 131,
        "end_line": 135,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      },
      {
        "hash": "224ddb5d40725beb84a34be30e6af8fa",
        "text": "let s = if s.[0] = '\"' && len > 1 then String.sub s 1 (len - 1) else s in\nlet s_len = String.length s in\nlet s = if s_len > 0 && s.[s_len - 1] = ',' then String.sub s 0 (s_len - 1) else s in\nif String.length s > 0 && s.[String.length s - 1] = '\"' then String.sub s 0 (String.length s - 1)\nelse s",
        "lines": [
          "let s = if s.[0] = '\"' && len > 1 then String.sub s 1 (len - 1) else s in",
          "let s_len = String.length s in",
          "let s = if s_len > 0 && s.[s_len - 1] = ',' then String.sub s 0 (s_len - 1) else s in",
          "if String.length s > 0 && s.[String.length s - 1] = '\"' then String.sub s 0 (String.length s - 1)",
          "else s"
        ],
        "start_line": 103,
        "end_line": 107,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_data_unified.ml"
      },
      {
        "hash": "224ddb5d40725beb84a34be30e6af8fa",
        "text": "let s = if s.[0] = '\"' && len > 1 then String.sub s 1 (len - 1) else s in\nlet s_len = String.length s in\nlet s = if s_len > 0 && s.[s_len - 1] = ',' then String.sub s 0 (s_len - 1) else s in\nif String.length s > 0 && s.[String.length s - 1] = '\"' then String.sub s 0 (String.length s - 1)\nelse s",
        "lines": [
          "let s = if s.[0] = '\"' && len > 1 then String.sub s 1 (len - 1) else s in",
          "let s_len = String.length s in",
          "let s = if s_len > 0 && s.[s_len - 1] = ',' then String.sub s 0 (s_len - 1) else s in",
          "if String.length s > 0 && s.[String.length s - 1] = '\"' then String.sub s 0 (String.length s - 1)",
          "else s"
        ],
        "start_line": 80,
        "end_line": 84,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_unified.ml"
      }
    ],
    "16961771dd99fa78fcf447533b430282": [
      {
        "hash": "16961771dd99fa78fcf447533b430282",
        "text": "let s_len = String.length s in\nlet s = if s_len > 0 && s.[s_len - 1] = ',' then String.sub s 0 (s_len - 1) else s in\nif String.length s > 0 && s.[String.length s - 1] = '\"' then String.sub s 0 (String.length s - 1)\nelse s",
        "lines": [
          "let s_len = String.length s in",
          "let s = if s_len > 0 && s.[s_len - 1] = ',' then String.sub s 0 (s_len - 1) else s in",
          "if String.length s > 0 && s.[String.length s - 1] = '\"' then String.sub s 0 (String.length s - 1)",
          "else s"
        ],
        "start_line": 56,
        "end_line": 59,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_json_unified.ml"
      },
      {
        "hash": "16961771dd99fa78fcf447533b430282",
        "text": "let s_len = String.length s in\nlet s = if s_len > 0 && s.[s_len - 1] = ',' then String.sub s 0 (s_len - 1) else s in\nif String.length s > 0 && s.[String.length s - 1] = '\"' then String.sub s 0 (String.length s - 1)\nelse s",
        "lines": [
          "let s_len = String.length s in",
          "let s = if s_len > 0 && s.[s_len - 1] = ',' then String.sub s 0 (s_len - 1) else s in",
          "if String.length s > 0 && s.[String.length s - 1] = '\"' then String.sub s 0 (String.length s - 1)",
          "else s"
        ],
        "start_line": 20,
        "end_line": 23,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_parser.ml"
      },
      {
        "hash": "16961771dd99fa78fcf447533b430282",
        "text": "let s_len = String.length s in\nlet s = if s_len > 0 && s.[s_len - 1] = ',' then String.sub s 0 (s_len - 1) else s in\nif String.length s > 0 && s.[String.length s - 1] = '\"' then String.sub s 0 (String.length s - 1)\nelse s",
        "lines": [
          "let s_len = String.length s in",
          "let s = if s_len > 0 && s.[s_len - 1] = ',' then String.sub s 0 (s_len - 1) else s in",
          "if String.length s > 0 && s.[String.length s - 1] = '\"' then String.sub s 0 (String.length s - 1)",
          "else s"
        ],
        "start_line": 132,
        "end_line": 135,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      },
      {
        "hash": "16961771dd99fa78fcf447533b430282",
        "text": "let s_len = String.length s in\nlet s = if s_len > 0 && s.[s_len - 1] = ',' then String.sub s 0 (s_len - 1) else s in\nif String.length s > 0 && s.[String.length s - 1] = '\"' then String.sub s 0 (String.length s - 1)\nelse s",
        "lines": [
          "let s_len = String.length s in",
          "let s = if s_len > 0 && s.[s_len - 1] = ',' then String.sub s 0 (s_len - 1) else s in",
          "if String.length s > 0 && s.[String.length s - 1] = '\"' then String.sub s 0 (String.length s - 1)",
          "else s"
        ],
        "start_line": 104,
        "end_line": 107,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_data_unified.ml"
      },
      {
        "hash": "16961771dd99fa78fcf447533b430282",
        "text": "let s_len = String.length s in\nlet s = if s_len > 0 && s.[s_len - 1] = ',' then String.sub s 0 (s_len - 1) else s in\nif String.length s > 0 && s.[String.length s - 1] = '\"' then String.sub s 0 (String.length s - 1)\nelse s",
        "lines": [
          "let s_len = String.length s in",
          "let s = if s_len > 0 && s.[s_len - 1] = ',' then String.sub s 0 (s_len - 1) else s in",
          "if String.length s > 0 && s.[String.length s - 1] = '\"' then String.sub s 0 (String.length s - 1)",
          "else s"
        ],
        "start_line": 81,
        "end_line": 84,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_unified.ml"
      }
    ],
    "b084b5c3a0fee8c2ca7f83406012e6ec": [
      {
        "hash": "b084b5c3a0fee8c2ca7f83406012e6ec",
        "text": "let s = if s_len > 0 && s.[s_len - 1] = ',' then String.sub s 0 (s_len - 1) else s in\nif String.length s > 0 && s.[String.length s - 1] = '\"' then String.sub s 0 (String.length s - 1)\nelse s",
        "lines": [
          "let s = if s_len > 0 && s.[s_len - 1] = ',' then String.sub s 0 (s_len - 1) else s in",
          "if String.length s > 0 && s.[String.length s - 1] = '\"' then String.sub s 0 (String.length s - 1)",
          "else s"
        ],
        "start_line": 57,
        "end_line": 59,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_json_unified.ml"
      },
      {
        "hash": "b084b5c3a0fee8c2ca7f83406012e6ec",
        "text": "let s = if s_len > 0 && s.[s_len - 1] = ',' then String.sub s 0 (s_len - 1) else s in\nif String.length s > 0 && s.[String.length s - 1] = '\"' then String.sub s 0 (String.length s - 1)\nelse s",
        "lines": [
          "let s = if s_len > 0 && s.[s_len - 1] = ',' then String.sub s 0 (s_len - 1) else s in",
          "if String.length s > 0 && s.[String.length s - 1] = '\"' then String.sub s 0 (String.length s - 1)",
          "else s"
        ],
        "start_line": 21,
        "end_line": 23,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_parser.ml"
      },
      {
        "hash": "b084b5c3a0fee8c2ca7f83406012e6ec",
        "text": "let s = if s_len > 0 && s.[s_len - 1] = ',' then String.sub s 0 (s_len - 1) else s in\nif String.length s > 0 && s.[String.length s - 1] = '\"' then String.sub s 0 (String.length s - 1)\nelse s",
        "lines": [
          "let s = if s_len > 0 && s.[s_len - 1] = ',' then String.sub s 0 (s_len - 1) else s in",
          "if String.length s > 0 && s.[String.length s - 1] = '\"' then String.sub s 0 (String.length s - 1)",
          "else s"
        ],
        "start_line": 133,
        "end_line": 135,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      },
      {
        "hash": "b084b5c3a0fee8c2ca7f83406012e6ec",
        "text": "let s = if s_len > 0 && s.[s_len - 1] = ',' then String.sub s 0 (s_len - 1) else s in\nif String.length s > 0 && s.[String.length s - 1] = '\"' then String.sub s 0 (String.length s - 1)\nelse s",
        "lines": [
          "let s = if s_len > 0 && s.[s_len - 1] = ',' then String.sub s 0 (s_len - 1) else s in",
          "if String.length s > 0 && s.[String.length s - 1] = '\"' then String.sub s 0 (String.length s - 1)",
          "else s"
        ],
        "start_line": 105,
        "end_line": 107,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_data_unified.ml"
      },
      {
        "hash": "b084b5c3a0fee8c2ca7f83406012e6ec",
        "text": "let s = if s_len > 0 && s.[s_len - 1] = ',' then String.sub s 0 (s_len - 1) else s in\nif String.length s > 0 && s.[String.length s - 1] = '\"' then String.sub s 0 (String.length s - 1)\nelse s",
        "lines": [
          "let s = if s_len > 0 && s.[s_len - 1] = ',' then String.sub s 0 (s_len - 1) else s in",
          "if String.length s > 0 && s.[String.length s - 1] = '\"' then String.sub s 0 (String.length s - 1)",
          "else s"
        ],
        "start_line": 82,
        "end_line": 84,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_unified.ml"
      }
    ],
    "21c46c9f889888c1055d451957d261a3": [
      {
        "hash": "21c46c9f889888c1055d451957d261a3",
        "text": "type parse_state = {\nmutable current_group : string option;\nmutable current_category : string;\nmutable current_chars : string list;\nmutable result_groups : (string * rhyme_group_data) list;\nmutable in_rhyme_group : bool;\nmutable in_characters_array : bool;\nmutable brace_depth : int;\nmutable bracket_depth : int;\n}",
        "lines": [
          "type parse_state = {",
          "mutable current_group : string option;",
          "mutable current_category : string;",
          "mutable current_chars : string list;",
          "mutable result_groups : (string * rhyme_group_data) list;",
          "mutable in_rhyme_group : bool;",
          "mutable in_characters_array : bool;",
          "mutable brace_depth : int;",
          "mutable bracket_depth : int;",
          "}"
        ],
        "start_line": 62,
        "end_line": 71,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_json_unified.ml"
      },
      {
        "hash": "21c46c9f889888c1055d451957d261a3",
        "text": "type parse_state = {\nmutable current_group : string option;\nmutable current_category : string;\nmutable current_chars : string list;\nmutable result_groups : (string * rhyme_group_data) list;\nmutable in_rhyme_group : bool;\nmutable in_characters_array : bool;\nmutable brace_depth : int;\nmutable bracket_depth : int;\n}",
        "lines": [
          "type parse_state = {",
          "mutable current_group : string option;",
          "mutable current_category : string;",
          "mutable current_chars : string list;",
          "mutable result_groups : (string * rhyme_group_data) list;",
          "mutable in_rhyme_group : bool;",
          "mutable in_characters_array : bool;",
          "mutable brace_depth : int;",
          "mutable bracket_depth : int;",
          "}"
        ],
        "start_line": 27,
        "end_line": 36,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_parser.ml"
      },
      {
        "hash": "21c46c9f889888c1055d451957d261a3",
        "text": "type parse_state = {\nmutable current_group : string option;\nmutable current_category : string;\nmutable current_chars : string list;\nmutable result_groups : (string * rhyme_group_data) list;\nmutable in_rhyme_group : bool;\nmutable in_characters_array : bool;\nmutable brace_depth : int;\nmutable bracket_depth : int;\n}",
        "lines": [
          "type parse_state = {",
          "mutable current_group : string option;",
          "mutable current_category : string;",
          "mutable current_chars : string list;",
          "mutable result_groups : (string * rhyme_group_data) list;",
          "mutable in_rhyme_group : bool;",
          "mutable in_characters_array : bool;",
          "mutable brace_depth : int;",
          "mutable bracket_depth : int;",
          "}"
        ],
        "start_line": 138,
        "end_line": 147,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      },
      {
        "hash": "21c46c9f889888c1055d451957d261a3",
        "text": "type parse_state = {\nmutable current_group : string option;\nmutable current_category : string;\nmutable current_chars : string list;\nmutable result_groups : (string * rhyme_group_data) list;\nmutable in_rhyme_group : bool;\nmutable in_characters_array : bool;\nmutable brace_depth : int;\nmutable bracket_depth : int;\n}",
        "lines": [
          "type parse_state = {",
          "mutable current_group : string option;",
          "mutable current_category : string;",
          "mutable current_chars : string list;",
          "mutable result_groups : (string * rhyme_group_data) list;",
          "mutable in_rhyme_group : bool;",
          "mutable in_characters_array : bool;",
          "mutable brace_depth : int;",
          "mutable bracket_depth : int;",
          "}"
        ],
        "start_line": 87,
        "end_line": 96,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_unified.ml"
      }
    ],
    "5b62ac73d084138fa265ca240ade2059": [
      {
        "hash": "5b62ac73d084138fa265ca240ade2059",
        "text": "mutable current_group : string option;\nmutable current_category : string;\nmutable current_chars : string list;\nmutable result_groups : (string * rhyme_group_data) list;\nmutable in_rhyme_group : bool;\nmutable in_characters_array : bool;\nmutable brace_depth : int;\nmutable bracket_depth : int;\n}",
        "lines": [
          "mutable current_group : string option;",
          "mutable current_category : string;",
          "mutable current_chars : string list;",
          "mutable result_groups : (string * rhyme_group_data) list;",
          "mutable in_rhyme_group : bool;",
          "mutable in_characters_array : bool;",
          "mutable brace_depth : int;",
          "mutable bracket_depth : int;",
          "}"
        ],
        "start_line": 63,
        "end_line": 71,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_json_unified.ml"
      },
      {
        "hash": "5b62ac73d084138fa265ca240ade2059",
        "text": "mutable current_group : string option;\nmutable current_category : string;\nmutable current_chars : string list;\nmutable result_groups : (string * rhyme_group_data) list;\nmutable in_rhyme_group : bool;\nmutable in_characters_array : bool;\nmutable brace_depth : int;\nmutable bracket_depth : int;\n}",
        "lines": [
          "mutable current_group : string option;",
          "mutable current_category : string;",
          "mutable current_chars : string list;",
          "mutable result_groups : (string * rhyme_group_data) list;",
          "mutable in_rhyme_group : bool;",
          "mutable in_characters_array : bool;",
          "mutable brace_depth : int;",
          "mutable bracket_depth : int;",
          "}"
        ],
        "start_line": 28,
        "end_line": 36,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_parser.ml"
      },
      {
        "hash": "5b62ac73d084138fa265ca240ade2059",
        "text": "mutable current_group : string option;\nmutable current_category : string;\nmutable current_chars : string list;\nmutable result_groups : (string * rhyme_group_data) list;\nmutable in_rhyme_group : bool;\nmutable in_characters_array : bool;\nmutable brace_depth : int;\nmutable bracket_depth : int;\n}",
        "lines": [
          "mutable current_group : string option;",
          "mutable current_category : string;",
          "mutable current_chars : string list;",
          "mutable result_groups : (string * rhyme_group_data) list;",
          "mutable in_rhyme_group : bool;",
          "mutable in_characters_array : bool;",
          "mutable brace_depth : int;",
          "mutable bracket_depth : int;",
          "}"
        ],
        "start_line": 139,
        "end_line": 147,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      },
      {
        "hash": "5b62ac73d084138fa265ca240ade2059",
        "text": "mutable current_group : string option;\nmutable current_category : string;\nmutable current_chars : string list;\nmutable result_groups : (string * rhyme_group_data) list;\nmutable in_rhyme_group : bool;\nmutable in_characters_array : bool;\nmutable brace_depth : int;\nmutable bracket_depth : int;\n}",
        "lines": [
          "mutable current_group : string option;",
          "mutable current_category : string;",
          "mutable current_chars : string list;",
          "mutable result_groups : (string * rhyme_group_data) list;",
          "mutable in_rhyme_group : bool;",
          "mutable in_characters_array : bool;",
          "mutable brace_depth : int;",
          "mutable bracket_depth : int;",
          "}"
        ],
        "start_line": 88,
        "end_line": 96,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_unified.ml"
      }
    ],
    "11ef8bdf417e97a4709085b4c999b20a": [
      {
        "hash": "11ef8bdf417e97a4709085b4c999b20a",
        "text": "mutable current_category : string;\nmutable current_chars : string list;\nmutable result_groups : (string * rhyme_group_data) list;\nmutable in_rhyme_group : bool;\nmutable in_characters_array : bool;\nmutable brace_depth : int;\nmutable bracket_depth : int;\n}",
        "lines": [
          "mutable current_category : string;",
          "mutable current_chars : string list;",
          "mutable result_groups : (string * rhyme_group_data) list;",
          "mutable in_rhyme_group : bool;",
          "mutable in_characters_array : bool;",
          "mutable brace_depth : int;",
          "mutable bracket_depth : int;",
          "}"
        ],
        "start_line": 64,
        "end_line": 71,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_json_unified.ml"
      },
      {
        "hash": "11ef8bdf417e97a4709085b4c999b20a",
        "text": "mutable current_category : string;\nmutable current_chars : string list;\nmutable result_groups : (string * rhyme_group_data) list;\nmutable in_rhyme_group : bool;\nmutable in_characters_array : bool;\nmutable brace_depth : int;\nmutable bracket_depth : int;\n}",
        "lines": [
          "mutable current_category : string;",
          "mutable current_chars : string list;",
          "mutable result_groups : (string * rhyme_group_data) list;",
          "mutable in_rhyme_group : bool;",
          "mutable in_characters_array : bool;",
          "mutable brace_depth : int;",
          "mutable bracket_depth : int;",
          "}"
        ],
        "start_line": 29,
        "end_line": 36,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_parser.ml"
      },
      {
        "hash": "11ef8bdf417e97a4709085b4c999b20a",
        "text": "mutable current_category : string;\nmutable current_chars : string list;\nmutable result_groups : (string * rhyme_group_data) list;\nmutable in_rhyme_group : bool;\nmutable in_characters_array : bool;\nmutable brace_depth : int;\nmutable bracket_depth : int;\n}",
        "lines": [
          "mutable current_category : string;",
          "mutable current_chars : string list;",
          "mutable result_groups : (string * rhyme_group_data) list;",
          "mutable in_rhyme_group : bool;",
          "mutable in_characters_array : bool;",
          "mutable brace_depth : int;",
          "mutable bracket_depth : int;",
          "}"
        ],
        "start_line": 140,
        "end_line": 147,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      },
      {
        "hash": "11ef8bdf417e97a4709085b4c999b20a",
        "text": "mutable current_category : string;\nmutable current_chars : string list;\nmutable result_groups : (string * rhyme_group_data) list;\nmutable in_rhyme_group : bool;\nmutable in_characters_array : bool;\nmutable brace_depth : int;\nmutable bracket_depth : int;\n}",
        "lines": [
          "mutable current_category : string;",
          "mutable current_chars : string list;",
          "mutable result_groups : (string * rhyme_group_data) list;",
          "mutable in_rhyme_group : bool;",
          "mutable in_characters_array : bool;",
          "mutable brace_depth : int;",
          "mutable bracket_depth : int;",
          "}"
        ],
        "start_line": 89,
        "end_line": 96,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_unified.ml"
      }
    ],
    "c95c4151017c150608c61fe521c16833": [
      {
        "hash": "c95c4151017c150608c61fe521c16833",
        "text": "mutable current_chars : string list;\nmutable result_groups : (string * rhyme_group_data) list;\nmutable in_rhyme_group : bool;\nmutable in_characters_array : bool;\nmutable brace_depth : int;\nmutable bracket_depth : int;\n}",
        "lines": [
          "mutable current_chars : string list;",
          "mutable result_groups : (string * rhyme_group_data) list;",
          "mutable in_rhyme_group : bool;",
          "mutable in_characters_array : bool;",
          "mutable brace_depth : int;",
          "mutable bracket_depth : int;",
          "}"
        ],
        "start_line": 65,
        "end_line": 71,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_json_unified.ml"
      },
      {
        "hash": "c95c4151017c150608c61fe521c16833",
        "text": "mutable current_chars : string list;\nmutable result_groups : (string * rhyme_group_data) list;\nmutable in_rhyme_group : bool;\nmutable in_characters_array : bool;\nmutable brace_depth : int;\nmutable bracket_depth : int;\n}",
        "lines": [
          "mutable current_chars : string list;",
          "mutable result_groups : (string * rhyme_group_data) list;",
          "mutable in_rhyme_group : bool;",
          "mutable in_characters_array : bool;",
          "mutable brace_depth : int;",
          "mutable bracket_depth : int;",
          "}"
        ],
        "start_line": 30,
        "end_line": 36,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_parser.ml"
      },
      {
        "hash": "c95c4151017c150608c61fe521c16833",
        "text": "mutable current_chars : string list;\nmutable result_groups : (string * rhyme_group_data) list;\nmutable in_rhyme_group : bool;\nmutable in_characters_array : bool;\nmutable brace_depth : int;\nmutable bracket_depth : int;\n}",
        "lines": [
          "mutable current_chars : string list;",
          "mutable result_groups : (string * rhyme_group_data) list;",
          "mutable in_rhyme_group : bool;",
          "mutable in_characters_array : bool;",
          "mutable brace_depth : int;",
          "mutable bracket_depth : int;",
          "}"
        ],
        "start_line": 141,
        "end_line": 147,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      },
      {
        "hash": "c95c4151017c150608c61fe521c16833",
        "text": "mutable current_chars : string list;\nmutable result_groups : (string * rhyme_group_data) list;\nmutable in_rhyme_group : bool;\nmutable in_characters_array : bool;\nmutable brace_depth : int;\nmutable bracket_depth : int;\n}",
        "lines": [
          "mutable current_chars : string list;",
          "mutable result_groups : (string * rhyme_group_data) list;",
          "mutable in_rhyme_group : bool;",
          "mutable in_characters_array : bool;",
          "mutable brace_depth : int;",
          "mutable bracket_depth : int;",
          "}"
        ],
        "start_line": 90,
        "end_line": 96,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_unified.ml"
      }
    ],
    "592548a36e216a484f2786e6fd46ab09": [
      {
        "hash": "592548a36e216a484f2786e6fd46ab09",
        "text": "mutable result_groups : (string * rhyme_group_data) list;\nmutable in_rhyme_group : bool;\nmutable in_characters_array : bool;\nmutable brace_depth : int;\nmutable bracket_depth : int;\n}",
        "lines": [
          "mutable result_groups : (string * rhyme_group_data) list;",
          "mutable in_rhyme_group : bool;",
          "mutable in_characters_array : bool;",
          "mutable brace_depth : int;",
          "mutable bracket_depth : int;",
          "}"
        ],
        "start_line": 66,
        "end_line": 71,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_json_unified.ml"
      },
      {
        "hash": "592548a36e216a484f2786e6fd46ab09",
        "text": "mutable result_groups : (string * rhyme_group_data) list;\nmutable in_rhyme_group : bool;\nmutable in_characters_array : bool;\nmutable brace_depth : int;\nmutable bracket_depth : int;\n}",
        "lines": [
          "mutable result_groups : (string * rhyme_group_data) list;",
          "mutable in_rhyme_group : bool;",
          "mutable in_characters_array : bool;",
          "mutable brace_depth : int;",
          "mutable bracket_depth : int;",
          "}"
        ],
        "start_line": 31,
        "end_line": 36,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_parser.ml"
      },
      {
        "hash": "592548a36e216a484f2786e6fd46ab09",
        "text": "mutable result_groups : (string * rhyme_group_data) list;\nmutable in_rhyme_group : bool;\nmutable in_characters_array : bool;\nmutable brace_depth : int;\nmutable bracket_depth : int;\n}",
        "lines": [
          "mutable result_groups : (string * rhyme_group_data) list;",
          "mutable in_rhyme_group : bool;",
          "mutable in_characters_array : bool;",
          "mutable brace_depth : int;",
          "mutable bracket_depth : int;",
          "}"
        ],
        "start_line": 142,
        "end_line": 147,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      },
      {
        "hash": "592548a36e216a484f2786e6fd46ab09",
        "text": "mutable result_groups : (string * rhyme_group_data) list;\nmutable in_rhyme_group : bool;\nmutable in_characters_array : bool;\nmutable brace_depth : int;\nmutable bracket_depth : int;\n}",
        "lines": [
          "mutable result_groups : (string * rhyme_group_data) list;",
          "mutable in_rhyme_group : bool;",
          "mutable in_characters_array : bool;",
          "mutable brace_depth : int;",
          "mutable bracket_depth : int;",
          "}"
        ],
        "start_line": 91,
        "end_line": 96,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_unified.ml"
      }
    ],
    "10e17b27aedb48059f6c675ab7ad4aea": [
      {
        "hash": "10e17b27aedb48059f6c675ab7ad4aea",
        "text": "mutable in_rhyme_group : bool;\nmutable in_characters_array : bool;\nmutable brace_depth : int;\nmutable bracket_depth : int;\n}",
        "lines": [
          "mutable in_rhyme_group : bool;",
          "mutable in_characters_array : bool;",
          "mutable brace_depth : int;",
          "mutable bracket_depth : int;",
          "}"
        ],
        "start_line": 67,
        "end_line": 71,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_json_unified.ml"
      },
      {
        "hash": "10e17b27aedb48059f6c675ab7ad4aea",
        "text": "mutable in_rhyme_group : bool;\nmutable in_characters_array : bool;\nmutable brace_depth : int;\nmutable bracket_depth : int;\n}",
        "lines": [
          "mutable in_rhyme_group : bool;",
          "mutable in_characters_array : bool;",
          "mutable brace_depth : int;",
          "mutable bracket_depth : int;",
          "}"
        ],
        "start_line": 32,
        "end_line": 36,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_parser.ml"
      },
      {
        "hash": "10e17b27aedb48059f6c675ab7ad4aea",
        "text": "mutable in_rhyme_group : bool;\nmutable in_characters_array : bool;\nmutable brace_depth : int;\nmutable bracket_depth : int;\n}",
        "lines": [
          "mutable in_rhyme_group : bool;",
          "mutable in_characters_array : bool;",
          "mutable brace_depth : int;",
          "mutable bracket_depth : int;",
          "}"
        ],
        "start_line": 143,
        "end_line": 147,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      },
      {
        "hash": "10e17b27aedb48059f6c675ab7ad4aea",
        "text": "mutable in_rhyme_group : bool;\nmutable in_characters_array : bool;\nmutable brace_depth : int;\nmutable bracket_depth : int;\n}",
        "lines": [
          "mutable in_rhyme_group : bool;",
          "mutable in_characters_array : bool;",
          "mutable brace_depth : int;",
          "mutable bracket_depth : int;",
          "}"
        ],
        "start_line": 92,
        "end_line": 96,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_unified.ml"
      }
    ],
    "fb2fe3c8bbfb307381c36f83ec489b17": [
      {
        "hash": "fb2fe3c8bbfb307381c36f83ec489b17",
        "text": "mutable in_characters_array : bool;\nmutable brace_depth : int;\nmutable bracket_depth : int;\n}",
        "lines": [
          "mutable in_characters_array : bool;",
          "mutable brace_depth : int;",
          "mutable bracket_depth : int;",
          "}"
        ],
        "start_line": 68,
        "end_line": 71,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_json_unified.ml"
      },
      {
        "hash": "fb2fe3c8bbfb307381c36f83ec489b17",
        "text": "mutable in_characters_array : bool;\nmutable brace_depth : int;\nmutable bracket_depth : int;\n}",
        "lines": [
          "mutable in_characters_array : bool;",
          "mutable brace_depth : int;",
          "mutable bracket_depth : int;",
          "}"
        ],
        "start_line": 33,
        "end_line": 36,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_parser.ml"
      },
      {
        "hash": "fb2fe3c8bbfb307381c36f83ec489b17",
        "text": "mutable in_characters_array : bool;\nmutable brace_depth : int;\nmutable bracket_depth : int;\n}",
        "lines": [
          "mutable in_characters_array : bool;",
          "mutable brace_depth : int;",
          "mutable bracket_depth : int;",
          "}"
        ],
        "start_line": 144,
        "end_line": 147,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      },
      {
        "hash": "fb2fe3c8bbfb307381c36f83ec489b17",
        "text": "mutable in_characters_array : bool;\nmutable brace_depth : int;\nmutable bracket_depth : int;\n}",
        "lines": [
          "mutable in_characters_array : bool;",
          "mutable brace_depth : int;",
          "mutable bracket_depth : int;",
          "}"
        ],
        "start_line": 93,
        "end_line": 96,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_unified.ml"
      }
    ],
    "7c20d2da3015d3135f971beaaeb7c1b8": [
      {
        "hash": "7c20d2da3015d3135f971beaaeb7c1b8",
        "text": "mutable brace_depth : int;\nmutable bracket_depth : int;\n}",
        "lines": [
          "mutable brace_depth : int;",
          "mutable bracket_depth : int;",
          "}"
        ],
        "start_line": 69,
        "end_line": 71,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_json_unified.ml"
      },
      {
        "hash": "7c20d2da3015d3135f971beaaeb7c1b8",
        "text": "mutable brace_depth : int;\nmutable bracket_depth : int;\n}",
        "lines": [
          "mutable brace_depth : int;",
          "mutable bracket_depth : int;",
          "}"
        ],
        "start_line": 34,
        "end_line": 36,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_parser.ml"
      },
      {
        "hash": "7c20d2da3015d3135f971beaaeb7c1b8",
        "text": "mutable brace_depth : int;\nmutable bracket_depth : int;\n}",
        "lines": [
          "mutable brace_depth : int;",
          "mutable bracket_depth : int;",
          "}"
        ],
        "start_line": 145,
        "end_line": 147,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      },
      {
        "hash": "7c20d2da3015d3135f971beaaeb7c1b8",
        "text": "mutable brace_depth : int;\nmutable bracket_depth : int;\n}",
        "lines": [
          "mutable brace_depth : int;",
          "mutable bracket_depth : int;",
          "}"
        ],
        "start_line": 94,
        "end_line": 96,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_unified.ml"
      }
    ],
    "586ad5fb0ba4f28cd50a5795fe7b5ef2": [
      {
        "hash": "586ad5fb0ba4f28cd50a5795fe7b5ef2",
        "text": "current_group = None;\ncurrent_category = \"\";\ncurrent_chars = [];\nresult_groups = [];\nin_rhyme_group = false;\nin_characters_array = false;\nbrace_depth = 0;\nbracket_depth = 0;\n}",
        "lines": [
          "current_group = None;",
          "current_category = \"\";",
          "current_chars = [];",
          "result_groups = [];",
          "in_rhyme_group = false;",
          "in_characters_array = false;",
          "brace_depth = 0;",
          "bracket_depth = 0;",
          "}"
        ],
        "start_line": 74,
        "end_line": 82,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_json_unified.ml"
      },
      {
        "hash": "586ad5fb0ba4f28cd50a5795fe7b5ef2",
        "text": "current_group = None;\ncurrent_category = \"\";\ncurrent_chars = [];\nresult_groups = [];\nin_rhyme_group = false;\nin_characters_array = false;\nbrace_depth = 0;\nbracket_depth = 0;\n}",
        "lines": [
          "current_group = None;",
          "current_category = \"\";",
          "current_chars = [];",
          "result_groups = [];",
          "in_rhyme_group = false;",
          "in_characters_array = false;",
          "brace_depth = 0;",
          "bracket_depth = 0;",
          "}"
        ],
        "start_line": 42,
        "end_line": 50,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_parser.ml"
      },
      {
        "hash": "586ad5fb0ba4f28cd50a5795fe7b5ef2",
        "text": "current_group = None;\ncurrent_category = \"\";\ncurrent_chars = [];\nresult_groups = [];\nin_rhyme_group = false;\nin_characters_array = false;\nbrace_depth = 0;\nbracket_depth = 0;\n}",
        "lines": [
          "current_group = None;",
          "current_category = \"\";",
          "current_chars = [];",
          "result_groups = [];",
          "in_rhyme_group = false;",
          "in_characters_array = false;",
          "brace_depth = 0;",
          "bracket_depth = 0;",
          "}"
        ],
        "start_line": 152,
        "end_line": 160,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      },
      {
        "hash": "586ad5fb0ba4f28cd50a5795fe7b5ef2",
        "text": "current_group = None;\ncurrent_category = \"\";\ncurrent_chars = [];\nresult_groups = [];\nin_rhyme_group = false;\nin_characters_array = false;\nbrace_depth = 0;\nbracket_depth = 0;\n}",
        "lines": [
          "current_group = None;",
          "current_category = \"\";",
          "current_chars = [];",
          "result_groups = [];",
          "in_rhyme_group = false;",
          "in_characters_array = false;",
          "brace_depth = 0;",
          "bracket_depth = 0;",
          "}"
        ],
        "start_line": 101,
        "end_line": 109,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_unified.ml"
      }
    ],
    "d6f9a1ff72e53aa7bbd33aed4e4b0a14": [
      {
        "hash": "d6f9a1ff72e53aa7bbd33aed4e4b0a14",
        "text": "current_category = \"\";\ncurrent_chars = [];\nresult_groups = [];\nin_rhyme_group = false;\nin_characters_array = false;\nbrace_depth = 0;\nbracket_depth = 0;\n}",
        "lines": [
          "current_category = \"\";",
          "current_chars = [];",
          "result_groups = [];",
          "in_rhyme_group = false;",
          "in_characters_array = false;",
          "brace_depth = 0;",
          "bracket_depth = 0;",
          "}"
        ],
        "start_line": 75,
        "end_line": 82,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_json_unified.ml"
      },
      {
        "hash": "d6f9a1ff72e53aa7bbd33aed4e4b0a14",
        "text": "current_category = \"\";\ncurrent_chars = [];\nresult_groups = [];\nin_rhyme_group = false;\nin_characters_array = false;\nbrace_depth = 0;\nbracket_depth = 0;\n}",
        "lines": [
          "current_category = \"\";",
          "current_chars = [];",
          "result_groups = [];",
          "in_rhyme_group = false;",
          "in_characters_array = false;",
          "brace_depth = 0;",
          "bracket_depth = 0;",
          "}"
        ],
        "start_line": 43,
        "end_line": 50,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_parser.ml"
      },
      {
        "hash": "d6f9a1ff72e53aa7bbd33aed4e4b0a14",
        "text": "current_category = \"\";\ncurrent_chars = [];\nresult_groups = [];\nin_rhyme_group = false;\nin_characters_array = false;\nbrace_depth = 0;\nbracket_depth = 0;\n}",
        "lines": [
          "current_category = \"\";",
          "current_chars = [];",
          "result_groups = [];",
          "in_rhyme_group = false;",
          "in_characters_array = false;",
          "brace_depth = 0;",
          "bracket_depth = 0;",
          "}"
        ],
        "start_line": 153,
        "end_line": 160,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      },
      {
        "hash": "d6f9a1ff72e53aa7bbd33aed4e4b0a14",
        "text": "current_category = \"\";\ncurrent_chars = [];\nresult_groups = [];\nin_rhyme_group = false;\nin_characters_array = false;\nbrace_depth = 0;\nbracket_depth = 0;\n}",
        "lines": [
          "current_category = \"\";",
          "current_chars = [];",
          "result_groups = [];",
          "in_rhyme_group = false;",
          "in_characters_array = false;",
          "brace_depth = 0;",
          "bracket_depth = 0;",
          "}"
        ],
        "start_line": 102,
        "end_line": 109,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_unified.ml"
      }
    ],
    "8fd01878cfd380d90c3ce9412cd36439": [
      {
        "hash": "8fd01878cfd380d90c3ce9412cd36439",
        "text": "current_chars = [];\nresult_groups = [];\nin_rhyme_group = false;\nin_characters_array = false;\nbrace_depth = 0;\nbracket_depth = 0;\n}",
        "lines": [
          "current_chars = [];",
          "result_groups = [];",
          "in_rhyme_group = false;",
          "in_characters_array = false;",
          "brace_depth = 0;",
          "bracket_depth = 0;",
          "}"
        ],
        "start_line": 76,
        "end_line": 82,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_json_unified.ml"
      },
      {
        "hash": "8fd01878cfd380d90c3ce9412cd36439",
        "text": "current_chars = [];\nresult_groups = [];\nin_rhyme_group = false;\nin_characters_array = false;\nbrace_depth = 0;\nbracket_depth = 0;\n}",
        "lines": [
          "current_chars = [];",
          "result_groups = [];",
          "in_rhyme_group = false;",
          "in_characters_array = false;",
          "brace_depth = 0;",
          "bracket_depth = 0;",
          "}"
        ],
        "start_line": 44,
        "end_line": 50,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_parser.ml"
      },
      {
        "hash": "8fd01878cfd380d90c3ce9412cd36439",
        "text": "current_chars = [];\nresult_groups = [];\nin_rhyme_group = false;\nin_characters_array = false;\nbrace_depth = 0;\nbracket_depth = 0;\n}",
        "lines": [
          "current_chars = [];",
          "result_groups = [];",
          "in_rhyme_group = false;",
          "in_characters_array = false;",
          "brace_depth = 0;",
          "bracket_depth = 0;",
          "}"
        ],
        "start_line": 154,
        "end_line": 160,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      },
      {
        "hash": "8fd01878cfd380d90c3ce9412cd36439",
        "text": "current_chars = [];\nresult_groups = [];\nin_rhyme_group = false;\nin_characters_array = false;\nbrace_depth = 0;\nbracket_depth = 0;\n}",
        "lines": [
          "current_chars = [];",
          "result_groups = [];",
          "in_rhyme_group = false;",
          "in_characters_array = false;",
          "brace_depth = 0;",
          "bracket_depth = 0;",
          "}"
        ],
        "start_line": 103,
        "end_line": 109,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_unified.ml"
      }
    ],
    "0c8d960e4529e928c59b4aeb18a16489": [
      {
        "hash": "0c8d960e4529e928c59b4aeb18a16489",
        "text": "result_groups = [];\nin_rhyme_group = false;\nin_characters_array = false;\nbrace_depth = 0;\nbracket_depth = 0;\n}",
        "lines": [
          "result_groups = [];",
          "in_rhyme_group = false;",
          "in_characters_array = false;",
          "brace_depth = 0;",
          "bracket_depth = 0;",
          "}"
        ],
        "start_line": 77,
        "end_line": 82,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_json_unified.ml"
      },
      {
        "hash": "0c8d960e4529e928c59b4aeb18a16489",
        "text": "result_groups = [];\nin_rhyme_group = false;\nin_characters_array = false;\nbrace_depth = 0;\nbracket_depth = 0;\n}",
        "lines": [
          "result_groups = [];",
          "in_rhyme_group = false;",
          "in_characters_array = false;",
          "brace_depth = 0;",
          "bracket_depth = 0;",
          "}"
        ],
        "start_line": 45,
        "end_line": 50,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_parser.ml"
      },
      {
        "hash": "0c8d960e4529e928c59b4aeb18a16489",
        "text": "result_groups = [];\nin_rhyme_group = false;\nin_characters_array = false;\nbrace_depth = 0;\nbracket_depth = 0;\n}",
        "lines": [
          "result_groups = [];",
          "in_rhyme_group = false;",
          "in_characters_array = false;",
          "brace_depth = 0;",
          "bracket_depth = 0;",
          "}"
        ],
        "start_line": 155,
        "end_line": 160,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      },
      {
        "hash": "0c8d960e4529e928c59b4aeb18a16489",
        "text": "result_groups = [];\nin_rhyme_group = false;\nin_characters_array = false;\nbrace_depth = 0;\nbracket_depth = 0;\n}",
        "lines": [
          "result_groups = [];",
          "in_rhyme_group = false;",
          "in_characters_array = false;",
          "brace_depth = 0;",
          "bracket_depth = 0;",
          "}"
        ],
        "start_line": 104,
        "end_line": 109,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_unified.ml"
      }
    ],
    "b94dec850d7cf78f5bae40854c1e5c93": [
      {
        "hash": "b94dec850d7cf78f5bae40854c1e5c93",
        "text": "in_rhyme_group = false;\nin_characters_array = false;\nbrace_depth = 0;\nbracket_depth = 0;\n}",
        "lines": [
          "in_rhyme_group = false;",
          "in_characters_array = false;",
          "brace_depth = 0;",
          "bracket_depth = 0;",
          "}"
        ],
        "start_line": 78,
        "end_line": 82,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_json_unified.ml"
      },
      {
        "hash": "b94dec850d7cf78f5bae40854c1e5c93",
        "text": "in_rhyme_group = false;\nin_characters_array = false;\nbrace_depth = 0;\nbracket_depth = 0;\n}",
        "lines": [
          "in_rhyme_group = false;",
          "in_characters_array = false;",
          "brace_depth = 0;",
          "bracket_depth = 0;",
          "}"
        ],
        "start_line": 46,
        "end_line": 50,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_parser.ml"
      },
      {
        "hash": "b94dec850d7cf78f5bae40854c1e5c93",
        "text": "in_rhyme_group = false;\nin_characters_array = false;\nbrace_depth = 0;\nbracket_depth = 0;\n}",
        "lines": [
          "in_rhyme_group = false;",
          "in_characters_array = false;",
          "brace_depth = 0;",
          "bracket_depth = 0;",
          "}"
        ],
        "start_line": 156,
        "end_line": 160,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      },
      {
        "hash": "b94dec850d7cf78f5bae40854c1e5c93",
        "text": "in_rhyme_group = false;\nin_characters_array = false;\nbrace_depth = 0;\nbracket_depth = 0;\n}",
        "lines": [
          "in_rhyme_group = false;",
          "in_characters_array = false;",
          "brace_depth = 0;",
          "bracket_depth = 0;",
          "}"
        ],
        "start_line": 105,
        "end_line": 109,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_unified.ml"
      }
    ],
    "6904fa425b7e5edadf83f35f71bec8e8": [
      {
        "hash": "6904fa425b7e5edadf83f35f71bec8e8",
        "text": "in_characters_array = false;\nbrace_depth = 0;\nbracket_depth = 0;\n}",
        "lines": [
          "in_characters_array = false;",
          "brace_depth = 0;",
          "bracket_depth = 0;",
          "}"
        ],
        "start_line": 79,
        "end_line": 82,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_json_unified.ml"
      },
      {
        "hash": "6904fa425b7e5edadf83f35f71bec8e8",
        "text": "in_characters_array = false;\nbrace_depth = 0;\nbracket_depth = 0;\n}",
        "lines": [
          "in_characters_array = false;",
          "brace_depth = 0;",
          "bracket_depth = 0;",
          "}"
        ],
        "start_line": 47,
        "end_line": 50,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_parser.ml"
      },
      {
        "hash": "6904fa425b7e5edadf83f35f71bec8e8",
        "text": "in_characters_array = false;\nbrace_depth = 0;\nbracket_depth = 0;\n}",
        "lines": [
          "in_characters_array = false;",
          "brace_depth = 0;",
          "bracket_depth = 0;",
          "}"
        ],
        "start_line": 157,
        "end_line": 160,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      },
      {
        "hash": "6904fa425b7e5edadf83f35f71bec8e8",
        "text": "in_characters_array = false;\nbrace_depth = 0;\nbracket_depth = 0;\n}",
        "lines": [
          "in_characters_array = false;",
          "brace_depth = 0;",
          "bracket_depth = 0;",
          "}"
        ],
        "start_line": 106,
        "end_line": 109,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_unified.ml"
      }
    ],
    "6d21a2f99e468173b8b64df6027b304e": [
      {
        "hash": "6d21a2f99e468173b8b64df6027b304e",
        "text": "brace_depth = 0;\nbracket_depth = 0;\n}",
        "lines": [
          "brace_depth = 0;",
          "bracket_depth = 0;",
          "}"
        ],
        "start_line": 80,
        "end_line": 82,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_json_unified.ml"
      },
      {
        "hash": "6d21a2f99e468173b8b64df6027b304e",
        "text": "brace_depth = 0;\nbracket_depth = 0;\n}",
        "lines": [
          "brace_depth = 0;",
          "bracket_depth = 0;",
          "}"
        ],
        "start_line": 48,
        "end_line": 50,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_parser.ml"
      },
      {
        "hash": "6d21a2f99e468173b8b64df6027b304e",
        "text": "brace_depth = 0;\nbracket_depth = 0;\n}",
        "lines": [
          "brace_depth = 0;",
          "bracket_depth = 0;",
          "}"
        ],
        "start_line": 158,
        "end_line": 160,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      },
      {
        "hash": "6d21a2f99e468173b8b64df6027b304e",
        "text": "brace_depth = 0;\nbracket_depth = 0;\n}",
        "lines": [
          "brace_depth = 0;",
          "bracket_depth = 0;",
          "}"
        ],
        "start_line": 107,
        "end_line": 109,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_unified.ml"
      }
    ],
    "19f501aef4a5785fac049cb3cb281e7d": [
      {
        "hash": "19f501aef4a5785fac049cb3cb281e7d",
        "text": "state.result_groups <- (group_name, group_data) :: state.result_groups;\nstate.current_group <- None;\nstate.current_chars <- []\n| None -> ()",
        "lines": [
          "state.result_groups <- (group_name, group_data) :: state.result_groups;",
          "state.current_group <- None;",
          "state.current_chars <- []",
          "| None -> ()"
        ],
        "start_line": 91,
        "end_line": 94,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_json_unified.ml"
      },
      {
        "hash": "19f501aef4a5785fac049cb3cb281e7d",
        "text": "state.result_groups <- (group_name, group_data) :: state.result_groups;\nstate.current_group <- None;\nstate.current_chars <- []\n| None -> ()",
        "lines": [
          "state.result_groups <- (group_name, group_data) :: state.result_groups;",
          "state.current_group <- None;",
          "state.current_chars <- []",
          "| None -> ()"
        ],
        "start_line": 61,
        "end_line": 64,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_parser.ml"
      },
      {
        "hash": "19f501aef4a5785fac049cb3cb281e7d",
        "text": "state.result_groups <- (group_name, group_data) :: state.result_groups;\nstate.current_group <- None;\nstate.current_chars <- []\n| None -> ()",
        "lines": [
          "state.result_groups <- (group_name, group_data) :: state.result_groups;",
          "state.current_group <- None;",
          "state.current_chars <- []",
          "| None -> ()"
        ],
        "start_line": 169,
        "end_line": 172,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      }
    ],
    "ef7a20796bbf98b678624ed06350a863": [
      {
        "hash": "ef7a20796bbf98b678624ed06350a863",
        "text": "state.current_group <- None;\nstate.current_chars <- []\n| None -> ()",
        "lines": [
          "state.current_group <- None;",
          "state.current_chars <- []",
          "| None -> ()"
        ],
        "start_line": 92,
        "end_line": 94,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_json_unified.ml"
      },
      {
        "hash": "ef7a20796bbf98b678624ed06350a863",
        "text": "state.current_group <- None;\nstate.current_chars <- []\n| None -> ()",
        "lines": [
          "state.current_group <- None;",
          "state.current_chars <- []",
          "| None -> ()"
        ],
        "start_line": 62,
        "end_line": 64,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_parser.ml"
      },
      {
        "hash": "ef7a20796bbf98b678624ed06350a863",
        "text": "state.current_group <- None;\nstate.current_chars <- []\n| None -> ()",
        "lines": [
          "state.current_group <- None;",
          "state.current_chars <- []",
          "| None -> ()"
        ],
        "start_line": 170,
        "end_line": 172,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      },
      {
        "hash": "ef7a20796bbf98b678624ed06350a863",
        "text": "state.current_group <- None;\nstate.current_chars <- []\n| None -> ()",
        "lines": [
          "state.current_group <- None;",
          "state.current_chars <- []",
          "| None -> ()"
        ],
        "start_line": 135,
        "end_line": 137,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_data_unified.ml"
      }
    ],
    "fdb27edcd185a8a0acd7e1aaf65ac51a": [
      {
        "hash": "fdb27edcd185a8a0acd7e1aaf65ac51a",
        "text": "if cleaned_key <> \"\" then (\nstate.current_group <- Some cleaned_key;\nstate.in_rhyme_group <- true;\nstate.current_category <- \"\";\nstate.current_chars <- [])",
        "lines": [
          "if cleaned_key <> \"\" then (",
          "state.current_group <- Some cleaned_key;",
          "state.in_rhyme_group <- true;",
          "state.current_category <- \"\";",
          "state.current_chars <- [])"
        ],
        "start_line": 102,
        "end_line": 106,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_json_unified.ml"
      },
      {
        "hash": "fdb27edcd185a8a0acd7e1aaf65ac51a",
        "text": "if cleaned_key <> \"\" then (\nstate.current_group <- Some cleaned_key;\nstate.in_rhyme_group <- true;\nstate.current_category <- \"\";\nstate.current_chars <- [])",
        "lines": [
          "if cleaned_key <> \"\" then (",
          "state.current_group <- Some cleaned_key;",
          "state.in_rhyme_group <- true;",
          "state.current_category <- \"\";",
          "state.current_chars <- [])"
        ],
        "start_line": 73,
        "end_line": 77,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_parser.ml"
      },
      {
        "hash": "fdb27edcd185a8a0acd7e1aaf65ac51a",
        "text": "if cleaned_key <> \"\" then (\nstate.current_group <- Some cleaned_key;\nstate.in_rhyme_group <- true;\nstate.current_category <- \"\";\nstate.current_chars <- [])",
        "lines": [
          "if cleaned_key <> \"\" then (",
          "state.current_group <- Some cleaned_key;",
          "state.in_rhyme_group <- true;",
          "state.current_category <- \"\";",
          "state.current_chars <- [])"
        ],
        "start_line": 181,
        "end_line": 185,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      }
    ],
    "1f072dbfb95d5fd713541e902a62c0c6": [
      {
        "hash": "1f072dbfb95d5fd713541e902a62c0c6",
        "text": "state.current_group <- Some cleaned_key;\nstate.in_rhyme_group <- true;\nstate.current_category <- \"\";\nstate.current_chars <- [])",
        "lines": [
          "state.current_group <- Some cleaned_key;",
          "state.in_rhyme_group <- true;",
          "state.current_category <- \"\";",
          "state.current_chars <- [])"
        ],
        "start_line": 103,
        "end_line": 106,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_json_unified.ml"
      },
      {
        "hash": "1f072dbfb95d5fd713541e902a62c0c6",
        "text": "state.current_group <- Some cleaned_key;\nstate.in_rhyme_group <- true;\nstate.current_category <- \"\";\nstate.current_chars <- [])",
        "lines": [
          "state.current_group <- Some cleaned_key;",
          "state.in_rhyme_group <- true;",
          "state.current_category <- \"\";",
          "state.current_chars <- [])"
        ],
        "start_line": 74,
        "end_line": 77,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_parser.ml"
      },
      {
        "hash": "1f072dbfb95d5fd713541e902a62c0c6",
        "text": "state.current_group <- Some cleaned_key;\nstate.in_rhyme_group <- true;\nstate.current_category <- \"\";\nstate.current_chars <- [])",
        "lines": [
          "state.current_group <- Some cleaned_key;",
          "state.in_rhyme_group <- true;",
          "state.current_category <- \"\";",
          "state.current_chars <- [])"
        ],
        "start_line": 182,
        "end_line": 185,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      }
    ],
    "560a019769f7bafe4130cb57880437aa": [
      {
        "hash": "560a019769f7bafe4130cb57880437aa",
        "text": "state.in_rhyme_group <- true;\nstate.current_category <- \"\";\nstate.current_chars <- [])",
        "lines": [
          "state.in_rhyme_group <- true;",
          "state.current_category <- \"\";",
          "state.current_chars <- [])"
        ],
        "start_line": 104,
        "end_line": 106,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_json_unified.ml"
      },
      {
        "hash": "560a019769f7bafe4130cb57880437aa",
        "text": "state.in_rhyme_group <- true;\nstate.current_category <- \"\";\nstate.current_chars <- [])",
        "lines": [
          "state.in_rhyme_group <- true;",
          "state.current_category <- \"\";",
          "state.current_chars <- [])"
        ],
        "start_line": 75,
        "end_line": 77,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_parser.ml"
      },
      {
        "hash": "560a019769f7bafe4130cb57880437aa",
        "text": "state.in_rhyme_group <- true;\nstate.current_category <- \"\";\nstate.current_chars <- [])",
        "lines": [
          "state.in_rhyme_group <- true;",
          "state.current_category <- \"\";",
          "state.current_chars <- [])"
        ],
        "start_line": 183,
        "end_line": 185,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      }
    ],
    "b40de2c69847c6736f377cf545bad565": [
      {
        "hash": "b40de2c69847c6736f377cf545bad565",
        "text": "let safe_read_file filename =\ntry\nlet ic = open_in filename in\nlet content = really_input_string ic (in_channel_length ic) in\nclose_in ic;\ncontent\nwith\n| Sys_error msg -> raise (Rhyme_data_not_found (\"文件读取失败: \" ^ msg))\n| _ -> raise (Rhyme_data_not_found (\"文件读取时发生未知错误: \" ^ filename))",
        "lines": [
          "let safe_read_file filename =",
          "try",
          "let ic = open_in filename in",
          "let content = really_input_string ic (in_channel_length ic) in",
          "close_in ic;",
          "content",
          "with",
          "| Sys_error msg -> raise (Rhyme_data_not_found (\"文件读取失败: \" ^ msg))",
          "| _ -> raise (Rhyme_data_not_found (\"文件读取时发生未知错误: \" ^ filename))"
        ],
        "start_line": 162,
        "end_line": 170,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_json_unified.ml"
      },
      {
        "hash": "b40de2c69847c6736f377cf545bad565",
        "text": "let safe_read_file filename =\ntry\nlet ic = open_in filename in\nlet content = really_input_string ic (in_channel_length ic) in\nclose_in ic;\ncontent\nwith\n| Sys_error msg -> raise (Rhyme_data_not_found (\"文件读取失败: \" ^ msg))\n| _ -> raise (Rhyme_data_not_found (\"文件读取时发生未知错误: \" ^ filename))",
        "lines": [
          "let safe_read_file filename =",
          "try",
          "let ic = open_in filename in",
          "let content = really_input_string ic (in_channel_length ic) in",
          "close_in ic;",
          "content",
          "with",
          "| Sys_error msg -> raise (Rhyme_data_not_found (\"文件读取失败: \" ^ msg))",
          "| _ -> raise (Rhyme_data_not_found (\"文件读取时发生未知错误: \" ^ filename))"
        ],
        "start_line": 21,
        "end_line": 29,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_io.ml"
      },
      {
        "hash": "b40de2c69847c6736f377cf545bad565",
        "text": "let safe_read_file filename =\ntry\nlet ic = open_in filename in\nlet content = really_input_string ic (in_channel_length ic) in\nclose_in ic;\ncontent\nwith\n| Sys_error msg -> raise (Rhyme_data_not_found (\"文件读取失败: \" ^ msg))\n| _ -> raise (Rhyme_data_not_found (\"文件读取时发生未知错误: \" ^ filename))",
        "lines": [
          "let safe_read_file filename =",
          "try",
          "let ic = open_in filename in",
          "let content = really_input_string ic (in_channel_length ic) in",
          "close_in ic;",
          "content",
          "with",
          "| Sys_error msg -> raise (Rhyme_data_not_found (\"文件读取失败: \" ^ msg))",
          "| _ -> raise (Rhyme_data_not_found (\"文件读取时发生未知错误: \" ^ filename))"
        ],
        "start_line": 254,
        "end_line": 262,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      }
    ],
    "aa8934f392fdf6a0567a82476f64c815": [
      {
        "hash": "aa8934f392fdf6a0567a82476f64c815",
        "text": "try\nlet ic = open_in filename in\nlet content = really_input_string ic (in_channel_length ic) in\nclose_in ic;\ncontent\nwith\n| Sys_error msg -> raise (Rhyme_data_not_found (\"文件读取失败: \" ^ msg))\n| _ -> raise (Rhyme_data_not_found (\"文件读取时发生未知错误: \" ^ filename))",
        "lines": [
          "try",
          "let ic = open_in filename in",
          "let content = really_input_string ic (in_channel_length ic) in",
          "close_in ic;",
          "content",
          "with",
          "| Sys_error msg -> raise (Rhyme_data_not_found (\"文件读取失败: \" ^ msg))",
          "| _ -> raise (Rhyme_data_not_found (\"文件读取时发生未知错误: \" ^ filename))"
        ],
        "start_line": 163,
        "end_line": 170,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_json_unified.ml"
      },
      {
        "hash": "aa8934f392fdf6a0567a82476f64c815",
        "text": "try\nlet ic = open_in filename in\nlet content = really_input_string ic (in_channel_length ic) in\nclose_in ic;\ncontent\nwith\n| Sys_error msg -> raise (Rhyme_data_not_found (\"文件读取失败: \" ^ msg))\n| _ -> raise (Rhyme_data_not_found (\"文件读取时发生未知错误: \" ^ filename))",
        "lines": [
          "try",
          "let ic = open_in filename in",
          "let content = really_input_string ic (in_channel_length ic) in",
          "close_in ic;",
          "content",
          "with",
          "| Sys_error msg -> raise (Rhyme_data_not_found (\"文件读取失败: \" ^ msg))",
          "| _ -> raise (Rhyme_data_not_found (\"文件读取时发生未知错误: \" ^ filename))"
        ],
        "start_line": 22,
        "end_line": 29,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_io.ml"
      },
      {
        "hash": "aa8934f392fdf6a0567a82476f64c815",
        "text": "try\nlet ic = open_in filename in\nlet content = really_input_string ic (in_channel_length ic) in\nclose_in ic;\ncontent\nwith\n| Sys_error msg -> raise (Rhyme_data_not_found (\"文件读取失败: \" ^ msg))\n| _ -> raise (Rhyme_data_not_found (\"文件读取时发生未知错误: \" ^ filename))",
        "lines": [
          "try",
          "let ic = open_in filename in",
          "let content = really_input_string ic (in_channel_length ic) in",
          "close_in ic;",
          "content",
          "with",
          "| Sys_error msg -> raise (Rhyme_data_not_found (\"文件读取失败: \" ^ msg))",
          "| _ -> raise (Rhyme_data_not_found (\"文件读取时发生未知错误: \" ^ filename))"
        ],
        "start_line": 255,
        "end_line": 262,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      }
    ],
    "ae03f06e66211ca7b0f0c37096d5b5a8": [
      {
        "hash": "ae03f06e66211ca7b0f0c37096d5b5a8",
        "text": "let ic = open_in filename in\nlet content = really_input_string ic (in_channel_length ic) in\nclose_in ic;\ncontent\nwith\n| Sys_error msg -> raise (Rhyme_data_not_found (\"文件读取失败: \" ^ msg))\n| _ -> raise (Rhyme_data_not_found (\"文件读取时发生未知错误: \" ^ filename))",
        "lines": [
          "let ic = open_in filename in",
          "let content = really_input_string ic (in_channel_length ic) in",
          "close_in ic;",
          "content",
          "with",
          "| Sys_error msg -> raise (Rhyme_data_not_found (\"文件读取失败: \" ^ msg))",
          "| _ -> raise (Rhyme_data_not_found (\"文件读取时发生未知错误: \" ^ filename))"
        ],
        "start_line": 164,
        "end_line": 170,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_json_unified.ml"
      },
      {
        "hash": "ae03f06e66211ca7b0f0c37096d5b5a8",
        "text": "let ic = open_in filename in\nlet content = really_input_string ic (in_channel_length ic) in\nclose_in ic;\ncontent\nwith\n| Sys_error msg -> raise (Rhyme_data_not_found (\"文件读取失败: \" ^ msg))\n| _ -> raise (Rhyme_data_not_found (\"文件读取时发生未知错误: \" ^ filename))",
        "lines": [
          "let ic = open_in filename in",
          "let content = really_input_string ic (in_channel_length ic) in",
          "close_in ic;",
          "content",
          "with",
          "| Sys_error msg -> raise (Rhyme_data_not_found (\"文件读取失败: \" ^ msg))",
          "| _ -> raise (Rhyme_data_not_found (\"文件读取时发生未知错误: \" ^ filename))"
        ],
        "start_line": 23,
        "end_line": 29,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_io.ml"
      },
      {
        "hash": "ae03f06e66211ca7b0f0c37096d5b5a8",
        "text": "let ic = open_in filename in\nlet content = really_input_string ic (in_channel_length ic) in\nclose_in ic;\ncontent\nwith\n| Sys_error msg -> raise (Rhyme_data_not_found (\"文件读取失败: \" ^ msg))\n| _ -> raise (Rhyme_data_not_found (\"文件读取时发生未知错误: \" ^ filename))",
        "lines": [
          "let ic = open_in filename in",
          "let content = really_input_string ic (in_channel_length ic) in",
          "close_in ic;",
          "content",
          "with",
          "| Sys_error msg -> raise (Rhyme_data_not_found (\"文件读取失败: \" ^ msg))",
          "| _ -> raise (Rhyme_data_not_found (\"文件读取时发生未知错误: \" ^ filename))"
        ],
        "start_line": 256,
        "end_line": 262,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      }
    ],
    "52176ca3e1a238ad25c31906bcae51c4": [
      {
        "hash": "52176ca3e1a238ad25c31906bcae51c4",
        "text": "let content = really_input_string ic (in_channel_length ic) in\nclose_in ic;\ncontent\nwith\n| Sys_error msg -> raise (Rhyme_data_not_found (\"文件读取失败: \" ^ msg))\n| _ -> raise (Rhyme_data_not_found (\"文件读取时发生未知错误: \" ^ filename))",
        "lines": [
          "let content = really_input_string ic (in_channel_length ic) in",
          "close_in ic;",
          "content",
          "with",
          "| Sys_error msg -> raise (Rhyme_data_not_found (\"文件读取失败: \" ^ msg))",
          "| _ -> raise (Rhyme_data_not_found (\"文件读取时发生未知错误: \" ^ filename))"
        ],
        "start_line": 165,
        "end_line": 170,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_json_unified.ml"
      },
      {
        "hash": "52176ca3e1a238ad25c31906bcae51c4",
        "text": "let content = really_input_string ic (in_channel_length ic) in\nclose_in ic;\ncontent\nwith\n| Sys_error msg -> raise (Rhyme_data_not_found (\"文件读取失败: \" ^ msg))\n| _ -> raise (Rhyme_data_not_found (\"文件读取时发生未知错误: \" ^ filename))",
        "lines": [
          "let content = really_input_string ic (in_channel_length ic) in",
          "close_in ic;",
          "content",
          "with",
          "| Sys_error msg -> raise (Rhyme_data_not_found (\"文件读取失败: \" ^ msg))",
          "| _ -> raise (Rhyme_data_not_found (\"文件读取时发生未知错误: \" ^ filename))"
        ],
        "start_line": 24,
        "end_line": 29,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_io.ml"
      },
      {
        "hash": "52176ca3e1a238ad25c31906bcae51c4",
        "text": "let content = really_input_string ic (in_channel_length ic) in\nclose_in ic;\ncontent\nwith\n| Sys_error msg -> raise (Rhyme_data_not_found (\"文件读取失败: \" ^ msg))\n| _ -> raise (Rhyme_data_not_found (\"文件读取时发生未知错误: \" ^ filename))",
        "lines": [
          "let content = really_input_string ic (in_channel_length ic) in",
          "close_in ic;",
          "content",
          "with",
          "| Sys_error msg -> raise (Rhyme_data_not_found (\"文件读取失败: \" ^ msg))",
          "| _ -> raise (Rhyme_data_not_found (\"文件读取时发生未知错误: \" ^ filename))"
        ],
        "start_line": 257,
        "end_line": 262,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      }
    ],
    "09bcd15ed0c54ac7dab197db198f5209": [
      {
        "hash": "09bcd15ed0c54ac7dab197db198f5209",
        "text": "close_in ic;\ncontent\nwith\n| Sys_error msg -> raise (Rhyme_data_not_found (\"文件读取失败: \" ^ msg))\n| _ -> raise (Rhyme_data_not_found (\"文件读取时发生未知错误: \" ^ filename))",
        "lines": [
          "close_in ic;",
          "content",
          "with",
          "| Sys_error msg -> raise (Rhyme_data_not_found (\"文件读取失败: \" ^ msg))",
          "| _ -> raise (Rhyme_data_not_found (\"文件读取时发生未知错误: \" ^ filename))"
        ],
        "start_line": 166,
        "end_line": 170,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_json_unified.ml"
      },
      {
        "hash": "09bcd15ed0c54ac7dab197db198f5209",
        "text": "close_in ic;\ncontent\nwith\n| Sys_error msg -> raise (Rhyme_data_not_found (\"文件读取失败: \" ^ msg))\n| _ -> raise (Rhyme_data_not_found (\"文件读取时发生未知错误: \" ^ filename))",
        "lines": [
          "close_in ic;",
          "content",
          "with",
          "| Sys_error msg -> raise (Rhyme_data_not_found (\"文件读取失败: \" ^ msg))",
          "| _ -> raise (Rhyme_data_not_found (\"文件读取时发生未知错误: \" ^ filename))"
        ],
        "start_line": 25,
        "end_line": 29,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_io.ml"
      },
      {
        "hash": "09bcd15ed0c54ac7dab197db198f5209",
        "text": "close_in ic;\ncontent\nwith\n| Sys_error msg -> raise (Rhyme_data_not_found (\"文件读取失败: \" ^ msg))\n| _ -> raise (Rhyme_data_not_found (\"文件读取时发生未知错误: \" ^ filename))",
        "lines": [
          "close_in ic;",
          "content",
          "with",
          "| Sys_error msg -> raise (Rhyme_data_not_found (\"文件读取失败: \" ^ msg))",
          "| _ -> raise (Rhyme_data_not_found (\"文件读取时发生未知错误: \" ^ filename))"
        ],
        "start_line": 258,
        "end_line": 262,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      }
    ],
    "e3e5bada0667f45122d9c4fdb48b8f2d": [
      {
        "hash": "e3e5bada0667f45122d9c4fdb48b8f2d",
        "text": "content\nwith\n| Sys_error msg -> raise (Rhyme_data_not_found (\"文件读取失败: \" ^ msg))\n| _ -> raise (Rhyme_data_not_found (\"文件读取时发生未知错误: \" ^ filename))",
        "lines": [
          "content",
          "with",
          "| Sys_error msg -> raise (Rhyme_data_not_found (\"文件读取失败: \" ^ msg))",
          "| _ -> raise (Rhyme_data_not_found (\"文件读取时发生未知错误: \" ^ filename))"
        ],
        "start_line": 167,
        "end_line": 170,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_json_unified.ml"
      },
      {
        "hash": "e3e5bada0667f45122d9c4fdb48b8f2d",
        "text": "content\nwith\n| Sys_error msg -> raise (Rhyme_data_not_found (\"文件读取失败: \" ^ msg))\n| _ -> raise (Rhyme_data_not_found (\"文件读取时发生未知错误: \" ^ filename))",
        "lines": [
          "content",
          "with",
          "| Sys_error msg -> raise (Rhyme_data_not_found (\"文件读取失败: \" ^ msg))",
          "| _ -> raise (Rhyme_data_not_found (\"文件读取时发生未知错误: \" ^ filename))"
        ],
        "start_line": 26,
        "end_line": 29,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_io.ml"
      },
      {
        "hash": "e3e5bada0667f45122d9c4fdb48b8f2d",
        "text": "content\nwith\n| Sys_error msg -> raise (Rhyme_data_not_found (\"文件读取失败: \" ^ msg))\n| _ -> raise (Rhyme_data_not_found (\"文件读取时发生未知错误: \" ^ filename))",
        "lines": [
          "content",
          "with",
          "| Sys_error msg -> raise (Rhyme_data_not_found (\"文件读取失败: \" ^ msg))",
          "| _ -> raise (Rhyme_data_not_found (\"文件读取时发生未知错误: \" ^ filename))"
        ],
        "start_line": 259,
        "end_line": 262,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      }
    ],
    "35860b97abcab733206ef6d43f30bea0": [
      {
        "hash": "35860b97abcab733206ef6d43f30bea0",
        "text": "with\n| Sys_error msg -> raise (Rhyme_data_not_found (\"文件读取失败: \" ^ msg))\n| _ -> raise (Rhyme_data_not_found (\"文件读取时发生未知错误: \" ^ filename))",
        "lines": [
          "with",
          "| Sys_error msg -> raise (Rhyme_data_not_found (\"文件读取失败: \" ^ msg))",
          "| _ -> raise (Rhyme_data_not_found (\"文件读取时发生未知错误: \" ^ filename))"
        ],
        "start_line": 168,
        "end_line": 170,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_json_unified.ml"
      },
      {
        "hash": "35860b97abcab733206ef6d43f30bea0",
        "text": "with\n| Sys_error msg -> raise (Rhyme_data_not_found (\"文件读取失败: \" ^ msg))\n| _ -> raise (Rhyme_data_not_found (\"文件读取时发生未知错误: \" ^ filename))",
        "lines": [
          "with",
          "| Sys_error msg -> raise (Rhyme_data_not_found (\"文件读取失败: \" ^ msg))",
          "| _ -> raise (Rhyme_data_not_found (\"文件读取时发生未知错误: \" ^ filename))"
        ],
        "start_line": 27,
        "end_line": 29,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_io.ml"
      },
      {
        "hash": "35860b97abcab733206ef6d43f30bea0",
        "text": "with\n| Sys_error msg -> raise (Rhyme_data_not_found (\"文件读取失败: \" ^ msg))\n| _ -> raise (Rhyme_data_not_found (\"文件读取时发生未知错误: \" ^ filename))",
        "lines": [
          "with",
          "| Sys_error msg -> raise (Rhyme_data_not_found (\"文件读取失败: \" ^ msg))",
          "| _ -> raise (Rhyme_data_not_found (\"文件读取时发生未知错误: \" ^ filename))"
        ],
        "start_line": 260,
        "end_line": 262,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      }
    ],
    "5a6b81344029fa0490e5eba3a212b3d0": [
      {
        "hash": "5a6b81344029fa0490e5eba3a212b3d0",
        "text": "try\nlet _, group_data = List.find (fun (name, _) -> name = group_name) groups in\ngroup_data.characters\nwith Not_found -> []",
        "lines": [
          "try",
          "let _, group_data = List.find (fun (name, _) -> name = group_name) groups in",
          "group_data.characters",
          "with Not_found -> []"
        ],
        "start_line": 227,
        "end_line": 230,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_json_unified.ml"
      },
      {
        "hash": "5a6b81344029fa0490e5eba3a212b3d0",
        "text": "try\nlet _, group_data = List.find (fun (name, _) -> name = group_name) groups in\ngroup_data.characters\nwith Not_found -> []",
        "lines": [
          "try",
          "let _, group_data = List.find (fun (name, _) -> name = group_name) groups in",
          "group_data.characters",
          "with Not_found -> []"
        ],
        "start_line": 21,
        "end_line": 24,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_access.ml"
      },
      {
        "hash": "5a6b81344029fa0490e5eba3a212b3d0",
        "text": "try\nlet _, group_data = List.find (fun (name, _) -> name = group_name) groups in\ngroup_data.characters\nwith Not_found -> []",
        "lines": [
          "try",
          "let _, group_data = List.find (fun (name, _) -> name = group_name) groups in",
          "group_data.characters",
          "with Not_found -> []"
        ],
        "start_line": 311,
        "end_line": 314,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      },
      {
        "hash": "5a6b81344029fa0490e5eba3a212b3d0",
        "text": "try\nlet _, group_data = List.find (fun (name, _) -> name = group_name) groups in\ngroup_data.characters\nwith Not_found -> []",
        "lines": [
          "try",
          "let _, group_data = List.find (fun (name, _) -> name = group_name) groups in",
          "group_data.characters",
          "with Not_found -> []"
        ],
        "start_line": 183,
        "end_line": 186,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_unified.ml"
      }
    ],
    "a7af20dec8e67daea23f13e3cb38c95b": [
      {
        "hash": "a7af20dec8e67daea23f13e3cb38c95b",
        "text": "let _, group_data = List.find (fun (name, _) -> name = group_name) groups in\ngroup_data.characters\nwith Not_found -> []",
        "lines": [
          "let _, group_data = List.find (fun (name, _) -> name = group_name) groups in",
          "group_data.characters",
          "with Not_found -> []"
        ],
        "start_line": 228,
        "end_line": 230,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_json_unified.ml"
      },
      {
        "hash": "a7af20dec8e67daea23f13e3cb38c95b",
        "text": "let _, group_data = List.find (fun (name, _) -> name = group_name) groups in\ngroup_data.characters\nwith Not_found -> []",
        "lines": [
          "let _, group_data = List.find (fun (name, _) -> name = group_name) groups in",
          "group_data.characters",
          "with Not_found -> []"
        ],
        "start_line": 22,
        "end_line": 24,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_access.ml"
      },
      {
        "hash": "a7af20dec8e67daea23f13e3cb38c95b",
        "text": "let _, group_data = List.find (fun (name, _) -> name = group_name) groups in\ngroup_data.characters\nwith Not_found -> []",
        "lines": [
          "let _, group_data = List.find (fun (name, _) -> name = group_name) groups in",
          "group_data.characters",
          "with Not_found -> []"
        ],
        "start_line": 312,
        "end_line": 314,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      },
      {
        "hash": "a7af20dec8e67daea23f13e3cb38c95b",
        "text": "let _, group_data = List.find (fun (name, _) -> name = group_name) groups in\ngroup_data.characters\nwith Not_found -> []",
        "lines": [
          "let _, group_data = List.find (fun (name, _) -> name = group_name) groups in",
          "group_data.characters",
          "with Not_found -> []"
        ],
        "start_line": 184,
        "end_line": 186,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_unified.ml"
      }
    ],
    "c08a0fd4b5b5fb6b82f30f655f0121d6": [
      {
        "hash": "c08a0fd4b5b5fb6b82f30f655f0121d6",
        "text": "try\nlet _, group_data = List.find (fun (name, _) -> name = group_name) groups in\nstring_to_rhyme_category group_data.category\nwith Not_found -> PingSheng",
        "lines": [
          "try",
          "let _, group_data = List.find (fun (name, _) -> name = group_name) groups in",
          "string_to_rhyme_category group_data.category",
          "with Not_found -> PingSheng"
        ],
        "start_line": 235,
        "end_line": 238,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_json_unified.ml"
      },
      {
        "hash": "c08a0fd4b5b5fb6b82f30f655f0121d6",
        "text": "try\nlet _, group_data = List.find (fun (name, _) -> name = group_name) groups in\nstring_to_rhyme_category group_data.category\nwith Not_found -> PingSheng",
        "lines": [
          "try",
          "let _, group_data = List.find (fun (name, _) -> name = group_name) groups in",
          "string_to_rhyme_category group_data.category",
          "with Not_found -> PingSheng"
        ],
        "start_line": 29,
        "end_line": 32,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_access.ml"
      },
      {
        "hash": "c08a0fd4b5b5fb6b82f30f655f0121d6",
        "text": "try\nlet _, group_data = List.find (fun (name, _) -> name = group_name) groups in\nstring_to_rhyme_category group_data.category\nwith Not_found -> PingSheng",
        "lines": [
          "try",
          "let _, group_data = List.find (fun (name, _) -> name = group_name) groups in",
          "string_to_rhyme_category group_data.category",
          "with Not_found -> PingSheng"
        ],
        "start_line": 319,
        "end_line": 322,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      },
      {
        "hash": "c08a0fd4b5b5fb6b82f30f655f0121d6",
        "text": "try\nlet _, group_data = List.find (fun (name, _) -> name = group_name) groups in\nstring_to_rhyme_category group_data.category\nwith Not_found -> PingSheng",
        "lines": [
          "try",
          "let _, group_data = List.find (fun (name, _) -> name = group_name) groups in",
          "string_to_rhyme_category group_data.category",
          "with Not_found -> PingSheng"
        ],
        "start_line": 191,
        "end_line": 194,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_unified.ml"
      }
    ],
    "377076e6e295251f93bd3094943470f1": [
      {
        "hash": "377076e6e295251f93bd3094943470f1",
        "text": "let _, group_data = List.find (fun (name, _) -> name = group_name) groups in\nstring_to_rhyme_category group_data.category\nwith Not_found -> PingSheng",
        "lines": [
          "let _, group_data = List.find (fun (name, _) -> name = group_name) groups in",
          "string_to_rhyme_category group_data.category",
          "with Not_found -> PingSheng"
        ],
        "start_line": 236,
        "end_line": 238,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_json_unified.ml"
      },
      {
        "hash": "377076e6e295251f93bd3094943470f1",
        "text": "let _, group_data = List.find (fun (name, _) -> name = group_name) groups in\nstring_to_rhyme_category group_data.category\nwith Not_found -> PingSheng",
        "lines": [
          "let _, group_data = List.find (fun (name, _) -> name = group_name) groups in",
          "string_to_rhyme_category group_data.category",
          "with Not_found -> PingSheng"
        ],
        "start_line": 30,
        "end_line": 32,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_access.ml"
      },
      {
        "hash": "377076e6e295251f93bd3094943470f1",
        "text": "let _, group_data = List.find (fun (name, _) -> name = group_name) groups in\nstring_to_rhyme_category group_data.category\nwith Not_found -> PingSheng",
        "lines": [
          "let _, group_data = List.find (fun (name, _) -> name = group_name) groups in",
          "string_to_rhyme_category group_data.category",
          "with Not_found -> PingSheng"
        ],
        "start_line": 320,
        "end_line": 322,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      },
      {
        "hash": "377076e6e295251f93bd3094943470f1",
        "text": "let _, group_data = List.find (fun (name, _) -> name = group_name) groups in\nstring_to_rhyme_category group_data.category\nwith Not_found -> PingSheng",
        "lines": [
          "let _, group_data = List.find (fun (name, _) -> name = group_name) groups in",
          "string_to_rhyme_category group_data.category",
          "with Not_found -> PingSheng"
        ],
        "start_line": 192,
        "end_line": 194,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_unified.ml"
      }
    ],
    "65ebf4eae9a290338b72884bf3766abc": [
      {
        "hash": "65ebf4eae9a290338b72884bf3766abc",
        "text": "@author 骆言诗词编程团队\n@version 1.0\n@since 2025-07-20 - Phase 29 rhyme_json_loader重构 *)",
        "lines": [
          "@author 骆言诗词编程团队",
          "@version 1.0",
          "@since 2025-07-20 - Phase 29 rhyme_json_loader重构 *)"
        ],
        "start_line": 5,
        "end_line": 7,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_io.ml"
      },
      {
        "hash": "65ebf4eae9a290338b72884bf3766abc",
        "text": "@author 骆言诗词编程团队\n@version 1.0\n@since 2025-07-20 - Phase 29 rhyme_json_loader重构 *)",
        "lines": [
          "@author 骆言诗词编程团队",
          "@version 1.0",
          "@since 2025-07-20 - Phase 29 rhyme_json_loader重构 *)"
        ],
        "start_line": 5,
        "end_line": 7,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_access.ml"
      },
      {
        "hash": "65ebf4eae9a290338b72884bf3766abc",
        "text": "@author 骆言诗词编程团队\n@version 1.0\n@since 2025-07-20 - Phase 29 rhyme_json_loader重构 *)",
        "lines": [
          "@author 骆言诗词编程团队",
          "@version 1.0",
          "@since 2025-07-20 - Phase 29 rhyme_json_loader重构 *)"
        ],
        "start_line": 5,
        "end_line": 7,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_parser.ml"
      },
      {
        "hash": "65ebf4eae9a290338b72884bf3766abc",
        "text": "@author 骆言诗词编程团队\n@version 1.0\n@since 2025-07-20 - Phase 29 rhyme_json_loader重构 *)",
        "lines": [
          "@author 骆言诗词编程团队",
          "@version 1.0",
          "@since 2025-07-20 - Phase 29 rhyme_json_loader重构 *)"
        ],
        "start_line": 5,
        "end_line": 7,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_types.ml"
      },
      {
        "hash": "65ebf4eae9a290338b72884bf3766abc",
        "text": "@author 骆言诗词编程团队\n@version 1.0\n@since 2025-07-20 - Phase 29 rhyme_json_loader重构 *)",
        "lines": [
          "@author 骆言诗词编程团队",
          "@version 1.0",
          "@since 2025-07-20 - Phase 29 rhyme_json_loader重构 *)"
        ],
        "start_line": 5,
        "end_line": 7,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_fallback.ml"
      },
      {
        "hash": "65ebf4eae9a290338b72884bf3766abc",
        "text": "@author 骆言诗词编程团队\n@version 1.0\n@since 2025-07-20 - Phase 29 rhyme_json_loader重构 *)",
        "lines": [
          "@author 骆言诗词编程团队",
          "@version 1.0",
          "@since 2025-07-20 - Phase 29 rhyme_json_loader重构 *)"
        ],
        "start_line": 5,
        "end_line": 7,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_cache.ml"
      }
    ],
    "cc1da2318292d71010cdf03cc4df68e4": [
      {
        "hash": "cc1da2318292d71010cdf03cc4df68e4",
        "text": "let load_rhyme_data_from_file ?(filename = default_data_file) () =\ntry\nlet content = safe_read_file filename in\nlet rhyme_groups = parse_nested_json content in\nlet data = { rhyme_groups; metadata = [] } in\nset_cached_data data;\ndata\nwith\n| Json_parse_error msg -> raise (Json_parse_error (\"JSON解析错误: \" ^ msg))\n| Rhyme_data_not_found msg -> raise (Rhyme_data_not_found msg)",
        "lines": [
          "let load_rhyme_data_from_file ?(filename = default_data_file) () =",
          "try",
          "let content = safe_read_file filename in",
          "let rhyme_groups = parse_nested_json content in",
          "let data = { rhyme_groups; metadata = [] } in",
          "set_cached_data data;",
          "data",
          "with",
          "| Json_parse_error msg -> raise (Json_parse_error (\"JSON解析错误: \" ^ msg))",
          "| Rhyme_data_not_found msg -> raise (Rhyme_data_not_found msg)"
        ],
        "start_line": 34,
        "end_line": 43,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_io.ml"
      },
      {
        "hash": "cc1da2318292d71010cdf03cc4df68e4",
        "text": "let load_rhyme_data_from_file ?(filename = default_data_file) () =\ntry\nlet content = safe_read_file filename in\nlet rhyme_groups = parse_nested_json content in\nlet data = { rhyme_groups; metadata = [] } in\nset_cached_data data;\ndata\nwith\n| Json_parse_error msg -> raise (Json_parse_error (\"JSON解析错误: \" ^ msg))\n| Rhyme_data_not_found msg -> raise (Rhyme_data_not_found msg)",
        "lines": [
          "let load_rhyme_data_from_file ?(filename = default_data_file) () =",
          "try",
          "let content = safe_read_file filename in",
          "let rhyme_groups = parse_nested_json content in",
          "let data = { rhyme_groups; metadata = [] } in",
          "set_cached_data data;",
          "data",
          "with",
          "| Json_parse_error msg -> raise (Json_parse_error (\"JSON解析错误: \" ^ msg))",
          "| Rhyme_data_not_found msg -> raise (Rhyme_data_not_found msg)"
        ],
        "start_line": 265,
        "end_line": 274,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      }
    ],
    "c746e014d3b3ec02492ad20a5d5f5276": [
      {
        "hash": "c746e014d3b3ec02492ad20a5d5f5276",
        "text": "try\nlet content = safe_read_file filename in\nlet rhyme_groups = parse_nested_json content in\nlet data = { rhyme_groups; metadata = [] } in\nset_cached_data data;\ndata\nwith\n| Json_parse_error msg -> raise (Json_parse_error (\"JSON解析错误: \" ^ msg))\n| Rhyme_data_not_found msg -> raise (Rhyme_data_not_found msg)\n| exn -> raise (Json_parse_error (\"加载韵律数据时发生异常: \" ^ Printexc.to_string exn))",
        "lines": [
          "try",
          "let content = safe_read_file filename in",
          "let rhyme_groups = parse_nested_json content in",
          "let data = { rhyme_groups; metadata = [] } in",
          "set_cached_data data;",
          "data",
          "with",
          "| Json_parse_error msg -> raise (Json_parse_error (\"JSON解析错误: \" ^ msg))",
          "| Rhyme_data_not_found msg -> raise (Rhyme_data_not_found msg)",
          "| exn -> raise (Json_parse_error (\"加载韵律数据时发生异常: \" ^ Printexc.to_string exn))"
        ],
        "start_line": 35,
        "end_line": 44,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_io.ml"
      },
      {
        "hash": "c746e014d3b3ec02492ad20a5d5f5276",
        "text": "try\nlet content = safe_read_file filename in\nlet rhyme_groups = parse_nested_json content in\nlet data = { rhyme_groups; metadata = [] } in\nset_cached_data data;\ndata\nwith\n| Json_parse_error msg -> raise (Json_parse_error (\"JSON解析错误: \" ^ msg))\n| Rhyme_data_not_found msg -> raise (Rhyme_data_not_found msg)\n| exn -> raise (Json_parse_error (\"加载韵律数据时发生异常: \" ^ Printexc.to_string exn))",
        "lines": [
          "try",
          "let content = safe_read_file filename in",
          "let rhyme_groups = parse_nested_json content in",
          "let data = { rhyme_groups; metadata = [] } in",
          "set_cached_data data;",
          "data",
          "with",
          "| Json_parse_error msg -> raise (Json_parse_error (\"JSON解析错误: \" ^ msg))",
          "| Rhyme_data_not_found msg -> raise (Rhyme_data_not_found msg)",
          "| exn -> raise (Json_parse_error (\"加载韵律数据时发生异常: \" ^ Printexc.to_string exn))"
        ],
        "start_line": 266,
        "end_line": 275,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      }
    ],
    "841da589edcddfb9b93ccf5c6bab8e55": [
      {
        "hash": "841da589edcddfb9b93ccf5c6bab8e55",
        "text": "let content = safe_read_file filename in\nlet rhyme_groups = parse_nested_json content in\nlet data = { rhyme_groups; metadata = [] } in\nset_cached_data data;\ndata\nwith\n| Json_parse_error msg -> raise (Json_parse_error (\"JSON解析错误: \" ^ msg))\n| Rhyme_data_not_found msg -> raise (Rhyme_data_not_found msg)\n| exn -> raise (Json_parse_error (\"加载韵律数据时发生异常: \" ^ Printexc.to_string exn))",
        "lines": [
          "let content = safe_read_file filename in",
          "let rhyme_groups = parse_nested_json content in",
          "let data = { rhyme_groups; metadata = [] } in",
          "set_cached_data data;",
          "data",
          "with",
          "| Json_parse_error msg -> raise (Json_parse_error (\"JSON解析错误: \" ^ msg))",
          "| Rhyme_data_not_found msg -> raise (Rhyme_data_not_found msg)",
          "| exn -> raise (Json_parse_error (\"加载韵律数据时发生异常: \" ^ Printexc.to_string exn))"
        ],
        "start_line": 36,
        "end_line": 44,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_io.ml"
      },
      {
        "hash": "841da589edcddfb9b93ccf5c6bab8e55",
        "text": "let content = safe_read_file filename in\nlet rhyme_groups = parse_nested_json content in\nlet data = { rhyme_groups; metadata = [] } in\nset_cached_data data;\ndata\nwith\n| Json_parse_error msg -> raise (Json_parse_error (\"JSON解析错误: \" ^ msg))\n| Rhyme_data_not_found msg -> raise (Rhyme_data_not_found msg)\n| exn -> raise (Json_parse_error (\"加载韵律数据时发生异常: \" ^ Printexc.to_string exn))",
        "lines": [
          "let content = safe_read_file filename in",
          "let rhyme_groups = parse_nested_json content in",
          "let data = { rhyme_groups; metadata = [] } in",
          "set_cached_data data;",
          "data",
          "with",
          "| Json_parse_error msg -> raise (Json_parse_error (\"JSON解析错误: \" ^ msg))",
          "| Rhyme_data_not_found msg -> raise (Rhyme_data_not_found msg)",
          "| exn -> raise (Json_parse_error (\"加载韵律数据时发生异常: \" ^ Printexc.to_string exn))"
        ],
        "start_line": 267,
        "end_line": 275,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      }
    ],
    "5eef5cc1fae61bd24367eaa0b59cbe09": [
      {
        "hash": "5eef5cc1fae61bd24367eaa0b59cbe09",
        "text": "let rhyme_groups = parse_nested_json content in\nlet data = { rhyme_groups; metadata = [] } in\nset_cached_data data;\ndata\nwith\n| Json_parse_error msg -> raise (Json_parse_error (\"JSON解析错误: \" ^ msg))\n| Rhyme_data_not_found msg -> raise (Rhyme_data_not_found msg)\n| exn -> raise (Json_parse_error (\"加载韵律数据时发生异常: \" ^ Printexc.to_string exn))",
        "lines": [
          "let rhyme_groups = parse_nested_json content in",
          "let data = { rhyme_groups; metadata = [] } in",
          "set_cached_data data;",
          "data",
          "with",
          "| Json_parse_error msg -> raise (Json_parse_error (\"JSON解析错误: \" ^ msg))",
          "| Rhyme_data_not_found msg -> raise (Rhyme_data_not_found msg)",
          "| exn -> raise (Json_parse_error (\"加载韵律数据时发生异常: \" ^ Printexc.to_string exn))"
        ],
        "start_line": 37,
        "end_line": 44,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_io.ml"
      },
      {
        "hash": "5eef5cc1fae61bd24367eaa0b59cbe09",
        "text": "let rhyme_groups = parse_nested_json content in\nlet data = { rhyme_groups; metadata = [] } in\nset_cached_data data;\ndata\nwith\n| Json_parse_error msg -> raise (Json_parse_error (\"JSON解析错误: \" ^ msg))\n| Rhyme_data_not_found msg -> raise (Rhyme_data_not_found msg)\n| exn -> raise (Json_parse_error (\"加载韵律数据时发生异常: \" ^ Printexc.to_string exn))",
        "lines": [
          "let rhyme_groups = parse_nested_json content in",
          "let data = { rhyme_groups; metadata = [] } in",
          "set_cached_data data;",
          "data",
          "with",
          "| Json_parse_error msg -> raise (Json_parse_error (\"JSON解析错误: \" ^ msg))",
          "| Rhyme_data_not_found msg -> raise (Rhyme_data_not_found msg)",
          "| exn -> raise (Json_parse_error (\"加载韵律数据时发生异常: \" ^ Printexc.to_string exn))"
        ],
        "start_line": 268,
        "end_line": 275,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      }
    ],
    "f8fa8b8ca08064d47906616f9d43756c": [
      {
        "hash": "f8fa8b8ca08064d47906616f9d43756c",
        "text": "let data = { rhyme_groups; metadata = [] } in\nset_cached_data data;\ndata\nwith\n| Json_parse_error msg -> raise (Json_parse_error (\"JSON解析错误: \" ^ msg))\n| Rhyme_data_not_found msg -> raise (Rhyme_data_not_found msg)\n| exn -> raise (Json_parse_error (\"加载韵律数据时发生异常: \" ^ Printexc.to_string exn))",
        "lines": [
          "let data = { rhyme_groups; metadata = [] } in",
          "set_cached_data data;",
          "data",
          "with",
          "| Json_parse_error msg -> raise (Json_parse_error (\"JSON解析错误: \" ^ msg))",
          "| Rhyme_data_not_found msg -> raise (Rhyme_data_not_found msg)",
          "| exn -> raise (Json_parse_error (\"加载韵律数据时发生异常: \" ^ Printexc.to_string exn))"
        ],
        "start_line": 38,
        "end_line": 44,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_io.ml"
      },
      {
        "hash": "f8fa8b8ca08064d47906616f9d43756c",
        "text": "let data = { rhyme_groups; metadata = [] } in\nset_cached_data data;\ndata\nwith\n| Json_parse_error msg -> raise (Json_parse_error (\"JSON解析错误: \" ^ msg))\n| Rhyme_data_not_found msg -> raise (Rhyme_data_not_found msg)\n| exn -> raise (Json_parse_error (\"加载韵律数据时发生异常: \" ^ Printexc.to_string exn))",
        "lines": [
          "let data = { rhyme_groups; metadata = [] } in",
          "set_cached_data data;",
          "data",
          "with",
          "| Json_parse_error msg -> raise (Json_parse_error (\"JSON解析错误: \" ^ msg))",
          "| Rhyme_data_not_found msg -> raise (Rhyme_data_not_found msg)",
          "| exn -> raise (Json_parse_error (\"加载韵律数据时发生异常: \" ^ Printexc.to_string exn))"
        ],
        "start_line": 269,
        "end_line": 275,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      }
    ],
    "6f73fbf2cd11ecfa8aba8b65ba900ca3": [
      {
        "hash": "6f73fbf2cd11ecfa8aba8b65ba900ca3",
        "text": "set_cached_data data;\ndata\nwith\n| Json_parse_error msg -> raise (Json_parse_error (\"JSON解析错误: \" ^ msg))\n| Rhyme_data_not_found msg -> raise (Rhyme_data_not_found msg)\n| exn -> raise (Json_parse_error (\"加载韵律数据时发生异常: \" ^ Printexc.to_string exn))",
        "lines": [
          "set_cached_data data;",
          "data",
          "with",
          "| Json_parse_error msg -> raise (Json_parse_error (\"JSON解析错误: \" ^ msg))",
          "| Rhyme_data_not_found msg -> raise (Rhyme_data_not_found msg)",
          "| exn -> raise (Json_parse_error (\"加载韵律数据时发生异常: \" ^ Printexc.to_string exn))"
        ],
        "start_line": 39,
        "end_line": 44,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_io.ml"
      },
      {
        "hash": "6f73fbf2cd11ecfa8aba8b65ba900ca3",
        "text": "set_cached_data data;\ndata\nwith\n| Json_parse_error msg -> raise (Json_parse_error (\"JSON解析错误: \" ^ msg))\n| Rhyme_data_not_found msg -> raise (Rhyme_data_not_found msg)\n| exn -> raise (Json_parse_error (\"加载韵律数据时发生异常: \" ^ Printexc.to_string exn))",
        "lines": [
          "set_cached_data data;",
          "data",
          "with",
          "| Json_parse_error msg -> raise (Json_parse_error (\"JSON解析错误: \" ^ msg))",
          "| Rhyme_data_not_found msg -> raise (Rhyme_data_not_found msg)",
          "| exn -> raise (Json_parse_error (\"加载韵律数据时发生异常: \" ^ Printexc.to_string exn))"
        ],
        "start_line": 270,
        "end_line": 275,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      }
    ],
    "8f3499504b11a71b1cfb67df31d36e3f": [
      {
        "hash": "8f3499504b11a71b1cfb67df31d36e3f",
        "text": "data\nwith\n| Json_parse_error msg -> raise (Json_parse_error (\"JSON解析错误: \" ^ msg))\n| Rhyme_data_not_found msg -> raise (Rhyme_data_not_found msg)\n| exn -> raise (Json_parse_error (\"加载韵律数据时发生异常: \" ^ Printexc.to_string exn))",
        "lines": [
          "data",
          "with",
          "| Json_parse_error msg -> raise (Json_parse_error (\"JSON解析错误: \" ^ msg))",
          "| Rhyme_data_not_found msg -> raise (Rhyme_data_not_found msg)",
          "| exn -> raise (Json_parse_error (\"加载韵律数据时发生异常: \" ^ Printexc.to_string exn))"
        ],
        "start_line": 40,
        "end_line": 44,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_io.ml"
      },
      {
        "hash": "8f3499504b11a71b1cfb67df31d36e3f",
        "text": "data\nwith\n| Json_parse_error msg -> raise (Json_parse_error (\"JSON解析错误: \" ^ msg))\n| Rhyme_data_not_found msg -> raise (Rhyme_data_not_found msg)\n| exn -> raise (Json_parse_error (\"加载韵律数据时发生异常: \" ^ Printexc.to_string exn))",
        "lines": [
          "data",
          "with",
          "| Json_parse_error msg -> raise (Json_parse_error (\"JSON解析错误: \" ^ msg))",
          "| Rhyme_data_not_found msg -> raise (Rhyme_data_not_found msg)",
          "| exn -> raise (Json_parse_error (\"加载韵律数据时发生异常: \" ^ Printexc.to_string exn))"
        ],
        "start_line": 271,
        "end_line": 275,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      }
    ],
    "d861f097758f9df54bc1783cab350950": [
      {
        "hash": "d861f097758f9df54bc1783cab350950",
        "text": "with\n| Json_parse_error msg -> raise (Json_parse_error (\"JSON解析错误: \" ^ msg))\n| Rhyme_data_not_found msg -> raise (Rhyme_data_not_found msg)\n| exn -> raise (Json_parse_error (\"加载韵律数据时发生异常: \" ^ Printexc.to_string exn))",
        "lines": [
          "with",
          "| Json_parse_error msg -> raise (Json_parse_error (\"JSON解析错误: \" ^ msg))",
          "| Rhyme_data_not_found msg -> raise (Rhyme_data_not_found msg)",
          "| exn -> raise (Json_parse_error (\"加载韵律数据时发生异常: \" ^ Printexc.to_string exn))"
        ],
        "start_line": 41,
        "end_line": 44,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_io.ml"
      },
      {
        "hash": "d861f097758f9df54bc1783cab350950",
        "text": "with\n| Json_parse_error msg -> raise (Json_parse_error (\"JSON解析错误: \" ^ msg))\n| Rhyme_data_not_found msg -> raise (Rhyme_data_not_found msg)\n| exn -> raise (Json_parse_error (\"加载韵律数据时发生异常: \" ^ Printexc.to_string exn))",
        "lines": [
          "with",
          "| Json_parse_error msg -> raise (Json_parse_error (\"JSON解析错误: \" ^ msg))",
          "| Rhyme_data_not_found msg -> raise (Rhyme_data_not_found msg)",
          "| exn -> raise (Json_parse_error (\"加载韵律数据时发生异常: \" ^ Printexc.to_string exn))"
        ],
        "start_line": 272,
        "end_line": 275,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      }
    ],
    "92d0e3a1fbd0921efb53797eb5bb6afd": [
      {
        "hash": "92d0e3a1fbd0921efb53797eb5bb6afd",
        "text": "| Json_parse_error msg -> raise (Json_parse_error (\"JSON解析错误: \" ^ msg))\n| Rhyme_data_not_found msg -> raise (Rhyme_data_not_found msg)\n| exn -> raise (Json_parse_error (\"加载韵律数据时发生异常: \" ^ Printexc.to_string exn))",
        "lines": [
          "| Json_parse_error msg -> raise (Json_parse_error (\"JSON解析错误: \" ^ msg))",
          "| Rhyme_data_not_found msg -> raise (Rhyme_data_not_found msg)",
          "| exn -> raise (Json_parse_error (\"加载韵律数据时发生异常: \" ^ Printexc.to_string exn))"
        ],
        "start_line": 42,
        "end_line": 44,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_io.ml"
      },
      {
        "hash": "92d0e3a1fbd0921efb53797eb5bb6afd",
        "text": "| Json_parse_error msg -> raise (Json_parse_error (\"JSON解析错误: \" ^ msg))\n| Rhyme_data_not_found msg -> raise (Rhyme_data_not_found msg)\n| exn -> raise (Json_parse_error (\"加载韵律数据时发生异常: \" ^ Printexc.to_string exn))",
        "lines": [
          "| Json_parse_error msg -> raise (Json_parse_error (\"JSON解析错误: \" ^ msg))",
          "| Rhyme_data_not_found msg -> raise (Rhyme_data_not_found msg)",
          "| exn -> raise (Json_parse_error (\"加载韵律数据时发生异常: \" ^ Printexc.to_string exn))"
        ],
        "start_line": 273,
        "end_line": 275,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      }
    ],
    "1470496de81f9975f1937b27e4177656": [
      {
        "hash": "1470496de81f9975f1937b27e4177656",
        "text": "let get_rhyme_data ?(force_reload = false) () =\nif force_reload then (\nclear_cache ();\nload_rhyme_data_from_file ())\nelse if is_cache_valid () then get_cached_data ()\nelse load_rhyme_data_from_file ()",
        "lines": [
          "let get_rhyme_data ?(force_reload = false) () =",
          "if force_reload then (",
          "clear_cache ();",
          "load_rhyme_data_from_file ())",
          "else if is_cache_valid () then get_cached_data ()",
          "else load_rhyme_data_from_file ()"
        ],
        "start_line": 47,
        "end_line": 52,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_io.ml"
      },
      {
        "hash": "1470496de81f9975f1937b27e4177656",
        "text": "let get_rhyme_data ?(force_reload = false) () =\nif force_reload then (\nclear_cache ();\nload_rhyme_data_from_file ())\nelse if is_cache_valid () then get_cached_data ()\nelse load_rhyme_data_from_file ()",
        "lines": [
          "let get_rhyme_data ?(force_reload = false) () =",
          "if force_reload then (",
          "clear_cache ();",
          "load_rhyme_data_from_file ())",
          "else if is_cache_valid () then get_cached_data ()",
          "else load_rhyme_data_from_file ()"
        ],
        "start_line": 296,
        "end_line": 301,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      }
    ],
    "ed734e5c84eed0d088263783dd90f635": [
      {
        "hash": "ed734e5c84eed0d088263783dd90f635",
        "text": "if force_reload then (\nclear_cache ();\nload_rhyme_data_from_file ())\nelse if is_cache_valid () then get_cached_data ()\nelse load_rhyme_data_from_file ()",
        "lines": [
          "if force_reload then (",
          "clear_cache ();",
          "load_rhyme_data_from_file ())",
          "else if is_cache_valid () then get_cached_data ()",
          "else load_rhyme_data_from_file ()"
        ],
        "start_line": 48,
        "end_line": 52,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_io.ml"
      },
      {
        "hash": "ed734e5c84eed0d088263783dd90f635",
        "text": "if force_reload then (\nclear_cache ();\nload_rhyme_data_from_file ())\nelse if is_cache_valid () then get_cached_data ()\nelse load_rhyme_data_from_file ()",
        "lines": [
          "if force_reload then (",
          "clear_cache ();",
          "load_rhyme_data_from_file ())",
          "else if is_cache_valid () then get_cached_data ()",
          "else load_rhyme_data_from_file ()"
        ],
        "start_line": 297,
        "end_line": 301,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      }
    ],
    "ff1df7b9871c27a3c03bc3b2ad0fa227": [
      {
        "hash": "ff1df7b9871c27a3c03bc3b2ad0fa227",
        "text": "clear_cache ();\nload_rhyme_data_from_file ())\nelse if is_cache_valid () then get_cached_data ()\nelse load_rhyme_data_from_file ()",
        "lines": [
          "clear_cache ();",
          "load_rhyme_data_from_file ())",
          "else if is_cache_valid () then get_cached_data ()",
          "else load_rhyme_data_from_file ()"
        ],
        "start_line": 49,
        "end_line": 52,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_io.ml"
      },
      {
        "hash": "ff1df7b9871c27a3c03bc3b2ad0fa227",
        "text": "clear_cache ();\nload_rhyme_data_from_file ())\nelse if is_cache_valid () then get_cached_data ()\nelse load_rhyme_data_from_file ()",
        "lines": [
          "clear_cache ();",
          "load_rhyme_data_from_file ())",
          "else if is_cache_valid () then get_cached_data ()",
          "else load_rhyme_data_from_file ()"
        ],
        "start_line": 298,
        "end_line": 301,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      }
    ],
    "3d1939f27f73f5c43033816170b08670": [
      {
        "hash": "3d1939f27f73f5c43033816170b08670",
        "text": "load_rhyme_data_from_file ())\nelse if is_cache_valid () then get_cached_data ()\nelse load_rhyme_data_from_file ()",
        "lines": [
          "load_rhyme_data_from_file ())",
          "else if is_cache_valid () then get_cached_data ()",
          "else load_rhyme_data_from_file ()"
        ],
        "start_line": 50,
        "end_line": 52,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_io.ml"
      },
      {
        "hash": "3d1939f27f73f5c43033816170b08670",
        "text": "load_rhyme_data_from_file ())\nelse if is_cache_valid () then get_cached_data ()\nelse load_rhyme_data_from_file ()",
        "lines": [
          "load_rhyme_data_from_file ())",
          "else if is_cache_valid () then get_cached_data ()",
          "else load_rhyme_data_from_file ()"
        ],
        "start_line": 299,
        "end_line": 301,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      }
    ],
    "ecee28e1c99349df69aa238f32325fc1": [
      {
        "hash": "ecee28e1c99349df69aa238f32325fc1",
        "text": "let get_rhyme_group_characters group_name =\nlet groups = get_all_rhyme_groups () in\ntry\nlet _, group_data = List.find (fun (name, _) -> name = group_name) groups in\ngroup_data.characters\nwith Not_found -> []",
        "lines": [
          "let get_rhyme_group_characters group_name =",
          "let groups = get_all_rhyme_groups () in",
          "try",
          "let _, group_data = List.find (fun (name, _) -> name = group_name) groups in",
          "group_data.characters",
          "with Not_found -> []"
        ],
        "start_line": 19,
        "end_line": 24,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_access.ml"
      },
      {
        "hash": "ecee28e1c99349df69aa238f32325fc1",
        "text": "let get_rhyme_group_characters group_name =\nlet groups = get_all_rhyme_groups () in\ntry\nlet _, group_data = List.find (fun (name, _) -> name = group_name) groups in\ngroup_data.characters\nwith Not_found -> []",
        "lines": [
          "let get_rhyme_group_characters group_name =",
          "let groups = get_all_rhyme_groups () in",
          "try",
          "let _, group_data = List.find (fun (name, _) -> name = group_name) groups in",
          "group_data.characters",
          "with Not_found -> []"
        ],
        "start_line": 309,
        "end_line": 314,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      },
      {
        "hash": "ecee28e1c99349df69aa238f32325fc1",
        "text": "let get_rhyme_group_characters group_name =\nlet groups = get_all_rhyme_groups () in\ntry\nlet _, group_data = List.find (fun (name, _) -> name = group_name) groups in\ngroup_data.characters\nwith Not_found -> []",
        "lines": [
          "let get_rhyme_group_characters group_name =",
          "let groups = get_all_rhyme_groups () in",
          "try",
          "let _, group_data = List.find (fun (name, _) -> name = group_name) groups in",
          "group_data.characters",
          "with Not_found -> []"
        ],
        "start_line": 181,
        "end_line": 186,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_unified.ml"
      }
    ],
    "2c2359dd4ae248e84fe538702050febc": [
      {
        "hash": "2c2359dd4ae248e84fe538702050febc",
        "text": "let groups = get_all_rhyme_groups () in\ntry\nlet _, group_data = List.find (fun (name, _) -> name = group_name) groups in\ngroup_data.characters\nwith Not_found -> []",
        "lines": [
          "let groups = get_all_rhyme_groups () in",
          "try",
          "let _, group_data = List.find (fun (name, _) -> name = group_name) groups in",
          "group_data.characters",
          "with Not_found -> []"
        ],
        "start_line": 20,
        "end_line": 24,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_access.ml"
      },
      {
        "hash": "2c2359dd4ae248e84fe538702050febc",
        "text": "let groups = get_all_rhyme_groups () in\ntry\nlet _, group_data = List.find (fun (name, _) -> name = group_name) groups in\ngroup_data.characters\nwith Not_found -> []",
        "lines": [
          "let groups = get_all_rhyme_groups () in",
          "try",
          "let _, group_data = List.find (fun (name, _) -> name = group_name) groups in",
          "group_data.characters",
          "with Not_found -> []"
        ],
        "start_line": 310,
        "end_line": 314,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      },
      {
        "hash": "2c2359dd4ae248e84fe538702050febc",
        "text": "let groups = get_all_rhyme_groups () in\ntry\nlet _, group_data = List.find (fun (name, _) -> name = group_name) groups in\ngroup_data.characters\nwith Not_found -> []",
        "lines": [
          "let groups = get_all_rhyme_groups () in",
          "try",
          "let _, group_data = List.find (fun (name, _) -> name = group_name) groups in",
          "group_data.characters",
          "with Not_found -> []"
        ],
        "start_line": 182,
        "end_line": 186,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_unified.ml"
      }
    ],
    "01f2317ce7facea6d8b207602e225bec": [
      {
        "hash": "01f2317ce7facea6d8b207602e225bec",
        "text": "let get_rhyme_group_category group_name =\nlet groups = get_all_rhyme_groups () in\ntry\nlet _, group_data = List.find (fun (name, _) -> name = group_name) groups in\nstring_to_rhyme_category group_data.category\nwith Not_found -> PingSheng",
        "lines": [
          "let get_rhyme_group_category group_name =",
          "let groups = get_all_rhyme_groups () in",
          "try",
          "let _, group_data = List.find (fun (name, _) -> name = group_name) groups in",
          "string_to_rhyme_category group_data.category",
          "with Not_found -> PingSheng"
        ],
        "start_line": 27,
        "end_line": 32,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_access.ml"
      },
      {
        "hash": "01f2317ce7facea6d8b207602e225bec",
        "text": "let get_rhyme_group_category group_name =\nlet groups = get_all_rhyme_groups () in\ntry\nlet _, group_data = List.find (fun (name, _) -> name = group_name) groups in\nstring_to_rhyme_category group_data.category\nwith Not_found -> PingSheng",
        "lines": [
          "let get_rhyme_group_category group_name =",
          "let groups = get_all_rhyme_groups () in",
          "try",
          "let _, group_data = List.find (fun (name, _) -> name = group_name) groups in",
          "string_to_rhyme_category group_data.category",
          "with Not_found -> PingSheng"
        ],
        "start_line": 317,
        "end_line": 322,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      },
      {
        "hash": "01f2317ce7facea6d8b207602e225bec",
        "text": "let get_rhyme_group_category group_name =\nlet groups = get_all_rhyme_groups () in\ntry\nlet _, group_data = List.find (fun (name, _) -> name = group_name) groups in\nstring_to_rhyme_category group_data.category\nwith Not_found -> PingSheng",
        "lines": [
          "let get_rhyme_group_category group_name =",
          "let groups = get_all_rhyme_groups () in",
          "try",
          "let _, group_data = List.find (fun (name, _) -> name = group_name) groups in",
          "string_to_rhyme_category group_data.category",
          "with Not_found -> PingSheng"
        ],
        "start_line": 189,
        "end_line": 194,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_unified.ml"
      }
    ],
    "846001e6e28ff655e551d910db6a6a9a": [
      {
        "hash": "846001e6e28ff655e551d910db6a6a9a",
        "text": "let groups = get_all_rhyme_groups () in\ntry\nlet _, group_data = List.find (fun (name, _) -> name = group_name) groups in\nstring_to_rhyme_category group_data.category\nwith Not_found -> PingSheng",
        "lines": [
          "let groups = get_all_rhyme_groups () in",
          "try",
          "let _, group_data = List.find (fun (name, _) -> name = group_name) groups in",
          "string_to_rhyme_category group_data.category",
          "with Not_found -> PingSheng"
        ],
        "start_line": 28,
        "end_line": 32,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_access.ml"
      },
      {
        "hash": "846001e6e28ff655e551d910db6a6a9a",
        "text": "let groups = get_all_rhyme_groups () in\ntry\nlet _, group_data = List.find (fun (name, _) -> name = group_name) groups in\nstring_to_rhyme_category group_data.category\nwith Not_found -> PingSheng",
        "lines": [
          "let groups = get_all_rhyme_groups () in",
          "try",
          "let _, group_data = List.find (fun (name, _) -> name = group_name) groups in",
          "string_to_rhyme_category group_data.category",
          "with Not_found -> PingSheng"
        ],
        "start_line": 318,
        "end_line": 322,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      },
      {
        "hash": "846001e6e28ff655e551d910db6a6a9a",
        "text": "let groups = get_all_rhyme_groups () in\ntry\nlet _, group_data = List.find (fun (name, _) -> name = group_name) groups in\nstring_to_rhyme_category group_data.category\nwith Not_found -> PingSheng",
        "lines": [
          "let groups = get_all_rhyme_groups () in",
          "try",
          "let _, group_data = List.find (fun (name, _) -> name = group_name) groups in",
          "string_to_rhyme_category group_data.category",
          "with Not_found -> PingSheng"
        ],
        "start_line": 190,
        "end_line": 194,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_unified.ml"
      }
    ],
    "348f43994d0c250542eed6b832302dc4": [
      {
        "hash": "348f43994d0c250542eed6b832302dc4",
        "text": "let get_rhyme_mappings () =\nlet groups = get_all_rhyme_groups () in\nlet mappings = ref [] in\nList.iter\n(fun (group_name, group_data) ->\nlet rhyme_category = string_to_rhyme_category group_data.category in\nlet rhyme_group = string_to_rhyme_group group_name in",
        "lines": [
          "let get_rhyme_mappings () =",
          "let groups = get_all_rhyme_groups () in",
          "let mappings = ref [] in",
          "List.iter",
          "(fun (group_name, group_data) ->",
          "let rhyme_category = string_to_rhyme_category group_data.category in",
          "let rhyme_group = string_to_rhyme_group group_name in"
        ],
        "start_line": 35,
        "end_line": 41,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_access.ml"
      },
      {
        "hash": "348f43994d0c250542eed6b832302dc4",
        "text": "let get_rhyme_mappings () =\nlet groups = get_all_rhyme_groups () in\nlet mappings = ref [] in\nList.iter\n(fun (group_name, group_data) ->\nlet rhyme_category = string_to_rhyme_category group_data.category in\nlet rhyme_group = string_to_rhyme_group group_name in",
        "lines": [
          "let get_rhyme_mappings () =",
          "let groups = get_all_rhyme_groups () in",
          "let mappings = ref [] in",
          "List.iter",
          "(fun (group_name, group_data) ->",
          "let rhyme_category = string_to_rhyme_category group_data.category in",
          "let rhyme_group = string_to_rhyme_group group_name in"
        ],
        "start_line": 325,
        "end_line": 331,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      }
    ],
    "f6d16cd15e203eea316b2d451e346b4b": [
      {
        "hash": "f6d16cd15e203eea316b2d451e346b4b",
        "text": "let groups = get_all_rhyme_groups () in\nlet mappings = ref [] in\nList.iter\n(fun (group_name, group_data) ->\nlet rhyme_category = string_to_rhyme_category group_data.category in\nlet rhyme_group = string_to_rhyme_group group_name in",
        "lines": [
          "let groups = get_all_rhyme_groups () in",
          "let mappings = ref [] in",
          "List.iter",
          "(fun (group_name, group_data) ->",
          "let rhyme_category = string_to_rhyme_category group_data.category in",
          "let rhyme_group = string_to_rhyme_group group_name in"
        ],
        "start_line": 36,
        "end_line": 41,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_access.ml"
      },
      {
        "hash": "f6d16cd15e203eea316b2d451e346b4b",
        "text": "let groups = get_all_rhyme_groups () in\nlet mappings = ref [] in\nList.iter\n(fun (group_name, group_data) ->\nlet rhyme_category = string_to_rhyme_category group_data.category in\nlet rhyme_group = string_to_rhyme_group group_name in",
        "lines": [
          "let groups = get_all_rhyme_groups () in",
          "let mappings = ref [] in",
          "List.iter",
          "(fun (group_name, group_data) ->",
          "let rhyme_category = string_to_rhyme_category group_data.category in",
          "let rhyme_group = string_to_rhyme_group group_name in"
        ],
        "start_line": 326,
        "end_line": 331,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      }
    ],
    "f8f6acf6e9e0eb69485e33039fe84e9c": [
      {
        "hash": "f8f6acf6e9e0eb69485e33039fe84e9c",
        "text": "let mappings = ref [] in\nList.iter\n(fun (group_name, group_data) ->\nlet rhyme_category = string_to_rhyme_category group_data.category in\nlet rhyme_group = string_to_rhyme_group group_name in",
        "lines": [
          "let mappings = ref [] in",
          "List.iter",
          "(fun (group_name, group_data) ->",
          "let rhyme_category = string_to_rhyme_category group_data.category in",
          "let rhyme_group = string_to_rhyme_group group_name in"
        ],
        "start_line": 37,
        "end_line": 41,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_access.ml"
      },
      {
        "hash": "f8f6acf6e9e0eb69485e33039fe84e9c",
        "text": "let mappings = ref [] in\nList.iter\n(fun (group_name, group_data) ->\nlet rhyme_category = string_to_rhyme_category group_data.category in\nlet rhyme_group = string_to_rhyme_group group_name in",
        "lines": [
          "let mappings = ref [] in",
          "List.iter",
          "(fun (group_name, group_data) ->",
          "let rhyme_category = string_to_rhyme_category group_data.category in",
          "let rhyme_group = string_to_rhyme_group group_name in"
        ],
        "start_line": 327,
        "end_line": 331,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      }
    ],
    "2cf971ae2e2e584ef4d2d1d47d57853e": [
      {
        "hash": "2cf971ae2e2e584ef4d2d1d47d57853e",
        "text": "List.iter\n(fun (group_name, group_data) ->\nlet rhyme_category = string_to_rhyme_category group_data.category in\nlet rhyme_group = string_to_rhyme_group group_name in",
        "lines": [
          "List.iter",
          "(fun (group_name, group_data) ->",
          "let rhyme_category = string_to_rhyme_category group_data.category in",
          "let rhyme_group = string_to_rhyme_group group_name in"
        ],
        "start_line": 38,
        "end_line": 41,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_access.ml"
      },
      {
        "hash": "2cf971ae2e2e584ef4d2d1d47d57853e",
        "text": "List.iter\n(fun (group_name, group_data) ->\nlet rhyme_category = string_to_rhyme_category group_data.category in\nlet rhyme_group = string_to_rhyme_group group_name in",
        "lines": [
          "List.iter",
          "(fun (group_name, group_data) ->",
          "let rhyme_category = string_to_rhyme_category group_data.category in",
          "let rhyme_group = string_to_rhyme_group group_name in"
        ],
        "start_line": 328,
        "end_line": 331,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      }
    ],
    "c5e6a8cfc74f8094abd8e1b84c396832": [
      {
        "hash": "c5e6a8cfc74f8094abd8e1b84c396832",
        "text": "(fun (group_name, group_data) ->\nlet rhyme_category = string_to_rhyme_category group_data.category in\nlet rhyme_group = string_to_rhyme_group group_name in",
        "lines": [
          "(fun (group_name, group_data) ->",
          "let rhyme_category = string_to_rhyme_category group_data.category in",
          "let rhyme_group = string_to_rhyme_group group_name in"
        ],
        "start_line": 39,
        "end_line": 41,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_access.ml"
      },
      {
        "hash": "c5e6a8cfc74f8094abd8e1b84c396832",
        "text": "(fun (group_name, group_data) ->\nlet rhyme_category = string_to_rhyme_category group_data.category in\nlet rhyme_group = string_to_rhyme_group group_name in",
        "lines": [
          "(fun (group_name, group_data) ->",
          "let rhyme_category = string_to_rhyme_category group_data.category in",
          "let rhyme_group = string_to_rhyme_group group_name in"
        ],
        "start_line": 329,
        "end_line": 331,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      }
    ],
    "55d06d623206aad5e1f79ff84dd509fd": [
      {
        "hash": "55d06d623206aad5e1f79ff84dd509fd",
        "text": "List.iter\n(fun char -> mappings := (char, (rhyme_category, rhyme_group)) :: !mappings)\ngroup_data.characters)\ngroups;\nList.rev !mappings",
        "lines": [
          "List.iter",
          "(fun char -> mappings := (char, (rhyme_category, rhyme_group)) :: !mappings)",
          "group_data.characters)",
          "groups;",
          "List.rev !mappings"
        ],
        "start_line": 43,
        "end_line": 47,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_access.ml"
      },
      {
        "hash": "55d06d623206aad5e1f79ff84dd509fd",
        "text": "List.iter\n(fun char -> mappings := (char, (rhyme_category, rhyme_group)) :: !mappings)\ngroup_data.characters)\ngroups;\nList.rev !mappings",
        "lines": [
          "List.iter",
          "(fun char -> mappings := (char, (rhyme_category, rhyme_group)) :: !mappings)",
          "group_data.characters)",
          "groups;",
          "List.rev !mappings"
        ],
        "start_line": 333,
        "end_line": 337,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      },
      {
        "hash": "55d06d623206aad5e1f79ff84dd509fd",
        "text": "List.iter\n(fun char -> mappings := (char, (rhyme_category, rhyme_group)) :: !mappings)\ngroup_data.characters)\ngroups;\nList.rev !mappings",
        "lines": [
          "List.iter",
          "(fun char -> mappings := (char, (rhyme_category, rhyme_group)) :: !mappings)",
          "group_data.characters)",
          "groups;",
          "List.rev !mappings"
        ],
        "start_line": 204,
        "end_line": 208,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_unified.ml"
      }
    ],
    "9bfc942ecbac64348ca8290541bdb1e4": [
      {
        "hash": "9bfc942ecbac64348ca8290541bdb1e4",
        "text": "(fun char -> mappings := (char, (rhyme_category, rhyme_group)) :: !mappings)\ngroup_data.characters)\ngroups;\nList.rev !mappings",
        "lines": [
          "(fun char -> mappings := (char, (rhyme_category, rhyme_group)) :: !mappings)",
          "group_data.characters)",
          "groups;",
          "List.rev !mappings"
        ],
        "start_line": 44,
        "end_line": 47,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_access.ml"
      },
      {
        "hash": "9bfc942ecbac64348ca8290541bdb1e4",
        "text": "(fun char -> mappings := (char, (rhyme_category, rhyme_group)) :: !mappings)\ngroup_data.characters)\ngroups;\nList.rev !mappings",
        "lines": [
          "(fun char -> mappings := (char, (rhyme_category, rhyme_group)) :: !mappings)",
          "group_data.characters)",
          "groups;",
          "List.rev !mappings"
        ],
        "start_line": 334,
        "end_line": 337,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      },
      {
        "hash": "9bfc942ecbac64348ca8290541bdb1e4",
        "text": "(fun char -> mappings := (char, (rhyme_category, rhyme_group)) :: !mappings)\ngroup_data.characters)\ngroups;\nList.rev !mappings",
        "lines": [
          "(fun char -> mappings := (char, (rhyme_category, rhyme_group)) :: !mappings)",
          "group_data.characters)",
          "groups;",
          "List.rev !mappings"
        ],
        "start_line": 205,
        "end_line": 208,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_unified.ml"
      }
    ],
    "8cef8af9d5cb7e052ba82e55230b1c2b": [
      {
        "hash": "8cef8af9d5cb7e052ba82e55230b1c2b",
        "text": "group_data.characters)\ngroups;\nList.rev !mappings",
        "lines": [
          "group_data.characters)",
          "groups;",
          "List.rev !mappings"
        ],
        "start_line": 45,
        "end_line": 47,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_access.ml"
      },
      {
        "hash": "8cef8af9d5cb7e052ba82e55230b1c2b",
        "text": "group_data.characters)\ngroups;\nList.rev !mappings",
        "lines": [
          "group_data.characters)",
          "groups;",
          "List.rev !mappings"
        ],
        "start_line": 335,
        "end_line": 337,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      },
      {
        "hash": "8cef8af9d5cb7e052ba82e55230b1c2b",
        "text": "group_data.characters)\ngroups;\nList.rev !mappings",
        "lines": [
          "group_data.characters)",
          "groups;",
          "List.rev !mappings"
        ],
        "start_line": 206,
        "end_line": 208,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_unified.ml"
      }
    ],
    "854a5a33a4fe39f59a293cca68ec6a43": [
      {
        "hash": "854a5a33a4fe39f59a293cca68ec6a43",
        "text": "let total_groups = List.length data_opt.rhyme_groups in\nlet total_chars =\nList.fold_left\n(fun acc (_, group_data) -> acc + List.length group_data.characters)\n0 data_opt.rhyme_groups\nin\nSome (total_groups, total_chars)\nwith _ -> None",
        "lines": [
          "let total_groups = List.length data_opt.rhyme_groups in",
          "let total_chars =",
          "List.fold_left",
          "(fun acc (_, group_data) -> acc + List.length group_data.characters)",
          "0 data_opt.rhyme_groups",
          "in",
          "Some (total_groups, total_chars)",
          "with _ -> None"
        ],
        "start_line": 55,
        "end_line": 62,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_access.ml"
      },
      {
        "hash": "854a5a33a4fe39f59a293cca68ec6a43",
        "text": "let total_groups = List.length data_opt.rhyme_groups in\nlet total_chars =\nList.fold_left\n(fun acc (_, group_data) -> acc + List.length group_data.characters)\n0 data_opt.rhyme_groups\nin\nSome (total_groups, total_chars)\nwith _ -> None",
        "lines": [
          "let total_groups = List.length data_opt.rhyme_groups in",
          "let total_chars =",
          "List.fold_left",
          "(fun acc (_, group_data) -> acc + List.length group_data.characters)",
          "0 data_opt.rhyme_groups",
          "in",
          "Some (total_groups, total_chars)",
          "with _ -> None"
        ],
        "start_line": 343,
        "end_line": 350,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      }
    ],
    "b177fffa9fd9a9702865bf036f34c502": [
      {
        "hash": "b177fffa9fd9a9702865bf036f34c502",
        "text": "let total_chars =\nList.fold_left\n(fun acc (_, group_data) -> acc + List.length group_data.characters)\n0 data_opt.rhyme_groups\nin\nSome (total_groups, total_chars)\nwith _ -> None",
        "lines": [
          "let total_chars =",
          "List.fold_left",
          "(fun acc (_, group_data) -> acc + List.length group_data.characters)",
          "0 data_opt.rhyme_groups",
          "in",
          "Some (total_groups, total_chars)",
          "with _ -> None"
        ],
        "start_line": 56,
        "end_line": 62,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_access.ml"
      },
      {
        "hash": "b177fffa9fd9a9702865bf036f34c502",
        "text": "let total_chars =\nList.fold_left\n(fun acc (_, group_data) -> acc + List.length group_data.characters)\n0 data_opt.rhyme_groups\nin\nSome (total_groups, total_chars)\nwith _ -> None",
        "lines": [
          "let total_chars =",
          "List.fold_left",
          "(fun acc (_, group_data) -> acc + List.length group_data.characters)",
          "0 data_opt.rhyme_groups",
          "in",
          "Some (total_groups, total_chars)",
          "with _ -> None"
        ],
        "start_line": 344,
        "end_line": 350,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      }
    ],
    "8ed7ed1835d458be35cc4a3adfd48f5d": [
      {
        "hash": "8ed7ed1835d458be35cc4a3adfd48f5d",
        "text": "List.fold_left\n(fun acc (_, group_data) -> acc + List.length group_data.characters)\n0 data_opt.rhyme_groups\nin\nSome (total_groups, total_chars)\nwith _ -> None",
        "lines": [
          "List.fold_left",
          "(fun acc (_, group_data) -> acc + List.length group_data.characters)",
          "0 data_opt.rhyme_groups",
          "in",
          "Some (total_groups, total_chars)",
          "with _ -> None"
        ],
        "start_line": 57,
        "end_line": 62,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_access.ml"
      },
      {
        "hash": "8ed7ed1835d458be35cc4a3adfd48f5d",
        "text": "List.fold_left\n(fun acc (_, group_data) -> acc + List.length group_data.characters)\n0 data_opt.rhyme_groups\nin\nSome (total_groups, total_chars)\nwith _ -> None",
        "lines": [
          "List.fold_left",
          "(fun acc (_, group_data) -> acc + List.length group_data.characters)",
          "0 data_opt.rhyme_groups",
          "in",
          "Some (total_groups, total_chars)",
          "with _ -> None"
        ],
        "start_line": 345,
        "end_line": 350,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      }
    ],
    "151b293087a3661a9d316276869eadcb": [
      {
        "hash": "151b293087a3661a9d316276869eadcb",
        "text": "(fun acc (_, group_data) -> acc + List.length group_data.characters)\n0 data_opt.rhyme_groups\nin\nSome (total_groups, total_chars)\nwith _ -> None",
        "lines": [
          "(fun acc (_, group_data) -> acc + List.length group_data.characters)",
          "0 data_opt.rhyme_groups",
          "in",
          "Some (total_groups, total_chars)",
          "with _ -> None"
        ],
        "start_line": 58,
        "end_line": 62,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_access.ml"
      },
      {
        "hash": "151b293087a3661a9d316276869eadcb",
        "text": "(fun acc (_, group_data) -> acc + List.length group_data.characters)\n0 data_opt.rhyme_groups\nin\nSome (total_groups, total_chars)\nwith _ -> None",
        "lines": [
          "(fun acc (_, group_data) -> acc + List.length group_data.characters)",
          "0 data_opt.rhyme_groups",
          "in",
          "Some (total_groups, total_chars)",
          "with _ -> None"
        ],
        "start_line": 346,
        "end_line": 350,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      }
    ],
    "953391ae260388a783fe884f689dc42a": [
      {
        "hash": "953391ae260388a783fe884f689dc42a",
        "text": "0 data_opt.rhyme_groups\nin\nSome (total_groups, total_chars)\nwith _ -> None",
        "lines": [
          "0 data_opt.rhyme_groups",
          "in",
          "Some (total_groups, total_chars)",
          "with _ -> None"
        ],
        "start_line": 59,
        "end_line": 62,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_access.ml"
      },
      {
        "hash": "953391ae260388a783fe884f689dc42a",
        "text": "0 data_opt.rhyme_groups\nin\nSome (total_groups, total_chars)\nwith _ -> None",
        "lines": [
          "0 data_opt.rhyme_groups",
          "in",
          "Some (total_groups, total_chars)",
          "with _ -> None"
        ],
        "start_line": 347,
        "end_line": 350,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      }
    ],
    "90acc3e5e13aa0634ec3c73eea8762db": [
      {
        "hash": "90acc3e5e13aa0634ec3c73eea8762db",
        "text": "in\nSome (total_groups, total_chars)\nwith _ -> None",
        "lines": [
          "in",
          "Some (total_groups, total_chars)",
          "with _ -> None"
        ],
        "start_line": 60,
        "end_line": 62,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_access.ml"
      },
      {
        "hash": "90acc3e5e13aa0634ec3c73eea8762db",
        "text": "in\nSome (total_groups, total_chars)\nwith _ -> None",
        "lines": [
          "in",
          "Some (total_groups, total_chars)",
          "with _ -> None"
        ],
        "start_line": 348,
        "end_line": 350,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      }
    ],
    "c33d0d12bb08107c94606afb886bce71": [
      {
        "hash": "c33d0d12bb08107c94606afb886bce71",
        "text": "let print_statistics () =\nmatch get_data_statistics () with\n| Some (total_groups, total_chars) ->\nPrintf.printf \"韵律数据统计:\\n\";\nPrintf.printf \" 韵组总数: %d\\n\" total_groups;\nPrintf.printf \" 字符总数: %d\\n\" total_chars;\nPrintf.printf \" 平均每组字符数: %.1f\\n\"\n(if total_groups > 0 then float_of_int total_chars /. float_of_int total_groups else 0.0)\n| None -> Printf.printf \"无法获取韵律数据统计信息\\n\"",
        "lines": [
          "let print_statistics () =",
          "match get_data_statistics () with",
          "| Some (total_groups, total_chars) ->",
          "Printf.printf \"韵律数据统计:\\n\";",
          "Printf.printf \" 韵组总数: %d\\n\" total_groups;",
          "Printf.printf \" 字符总数: %d\\n\" total_chars;",
          "Printf.printf \" 平均每组字符数: %.1f\\n\"",
          "(if total_groups > 0 then float_of_int total_chars /. float_of_int total_groups else 0.0)",
          "| None -> Printf.printf \"无法获取韵律数据统计信息\\n\""
        ],
        "start_line": 65,
        "end_line": 73,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_access.ml"
      },
      {
        "hash": "c33d0d12bb08107c94606afb886bce71",
        "text": "let print_statistics () =\nmatch get_data_statistics () with\n| Some (total_groups, total_chars) ->\nPrintf.printf \"韵律数据统计:\\n\";\nPrintf.printf \" 韵组总数: %d\\n\" total_groups;\nPrintf.printf \" 字符总数: %d\\n\" total_chars;\nPrintf.printf \" 平均每组字符数: %.1f\\n\"\n(if total_groups > 0 then float_of_int total_chars /. float_of_int total_groups else 0.0)\n| None -> Printf.printf \"无法获取韵律数据统计信息\\n\"",
        "lines": [
          "let print_statistics () =",
          "match get_data_statistics () with",
          "| Some (total_groups, total_chars) ->",
          "Printf.printf \"韵律数据统计:\\n\";",
          "Printf.printf \" 韵组总数: %d\\n\" total_groups;",
          "Printf.printf \" 字符总数: %d\\n\" total_chars;",
          "Printf.printf \" 平均每组字符数: %.1f\\n\"",
          "(if total_groups > 0 then float_of_int total_chars /. float_of_int total_groups else 0.0)",
          "| None -> Printf.printf \"无法获取韵律数据统计信息\\n\""
        ],
        "start_line": 353,
        "end_line": 361,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      }
    ],
    "ad5c1ecef73da9d1bb7942387494e65f": [
      {
        "hash": "ad5c1ecef73da9d1bb7942387494e65f",
        "text": "match get_data_statistics () with\n| Some (total_groups, total_chars) ->\nPrintf.printf \"韵律数据统计:\\n\";\nPrintf.printf \" 韵组总数: %d\\n\" total_groups;\nPrintf.printf \" 字符总数: %d\\n\" total_chars;\nPrintf.printf \" 平均每组字符数: %.1f\\n\"\n(if total_groups > 0 then float_of_int total_chars /. float_of_int total_groups else 0.0)\n| None -> Printf.printf \"无法获取韵律数据统计信息\\n\"",
        "lines": [
          "match get_data_statistics () with",
          "| Some (total_groups, total_chars) ->",
          "Printf.printf \"韵律数据统计:\\n\";",
          "Printf.printf \" 韵组总数: %d\\n\" total_groups;",
          "Printf.printf \" 字符总数: %d\\n\" total_chars;",
          "Printf.printf \" 平均每组字符数: %.1f\\n\"",
          "(if total_groups > 0 then float_of_int total_chars /. float_of_int total_groups else 0.0)",
          "| None -> Printf.printf \"无法获取韵律数据统计信息\\n\""
        ],
        "start_line": 66,
        "end_line": 73,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_access.ml"
      },
      {
        "hash": "ad5c1ecef73da9d1bb7942387494e65f",
        "text": "match get_data_statistics () with\n| Some (total_groups, total_chars) ->\nPrintf.printf \"韵律数据统计:\\n\";\nPrintf.printf \" 韵组总数: %d\\n\" total_groups;\nPrintf.printf \" 字符总数: %d\\n\" total_chars;\nPrintf.printf \" 平均每组字符数: %.1f\\n\"\n(if total_groups > 0 then float_of_int total_chars /. float_of_int total_groups else 0.0)\n| None -> Printf.printf \"无法获取韵律数据统计信息\\n\"",
        "lines": [
          "match get_data_statistics () with",
          "| Some (total_groups, total_chars) ->",
          "Printf.printf \"韵律数据统计:\\n\";",
          "Printf.printf \" 韵组总数: %d\\n\" total_groups;",
          "Printf.printf \" 字符总数: %d\\n\" total_chars;",
          "Printf.printf \" 平均每组字符数: %.1f\\n\"",
          "(if total_groups > 0 then float_of_int total_chars /. float_of_int total_groups else 0.0)",
          "| None -> Printf.printf \"无法获取韵律数据统计信息\\n\""
        ],
        "start_line": 354,
        "end_line": 361,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      }
    ],
    "72abaf053680d56f2f8f0a3e7fea1666": [
      {
        "hash": "72abaf053680d56f2f8f0a3e7fea1666",
        "text": "| Some (total_groups, total_chars) ->\nPrintf.printf \"韵律数据统计:\\n\";\nPrintf.printf \" 韵组总数: %d\\n\" total_groups;\nPrintf.printf \" 字符总数: %d\\n\" total_chars;\nPrintf.printf \" 平均每组字符数: %.1f\\n\"\n(if total_groups > 0 then float_of_int total_chars /. float_of_int total_groups else 0.0)\n| None -> Printf.printf \"无法获取韵律数据统计信息\\n\"",
        "lines": [
          "| Some (total_groups, total_chars) ->",
          "Printf.printf \"韵律数据统计:\\n\";",
          "Printf.printf \" 韵组总数: %d\\n\" total_groups;",
          "Printf.printf \" 字符总数: %d\\n\" total_chars;",
          "Printf.printf \" 平均每组字符数: %.1f\\n\"",
          "(if total_groups > 0 then float_of_int total_chars /. float_of_int total_groups else 0.0)",
          "| None -> Printf.printf \"无法获取韵律数据统计信息\\n\""
        ],
        "start_line": 67,
        "end_line": 73,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_access.ml"
      },
      {
        "hash": "72abaf053680d56f2f8f0a3e7fea1666",
        "text": "| Some (total_groups, total_chars) ->\nPrintf.printf \"韵律数据统计:\\n\";\nPrintf.printf \" 韵组总数: %d\\n\" total_groups;\nPrintf.printf \" 字符总数: %d\\n\" total_chars;\nPrintf.printf \" 平均每组字符数: %.1f\\n\"\n(if total_groups > 0 then float_of_int total_chars /. float_of_int total_groups else 0.0)\n| None -> Printf.printf \"无法获取韵律数据统计信息\\n\"",
        "lines": [
          "| Some (total_groups, total_chars) ->",
          "Printf.printf \"韵律数据统计:\\n\";",
          "Printf.printf \" 韵组总数: %d\\n\" total_groups;",
          "Printf.printf \" 字符总数: %d\\n\" total_chars;",
          "Printf.printf \" 平均每组字符数: %.1f\\n\"",
          "(if total_groups > 0 then float_of_int total_chars /. float_of_int total_groups else 0.0)",
          "| None -> Printf.printf \"无法获取韵律数据统计信息\\n\""
        ],
        "start_line": 355,
        "end_line": 361,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      }
    ],
    "8d7693d84a8683c198a805f7abdedd3b": [
      {
        "hash": "8d7693d84a8683c198a805f7abdedd3b",
        "text": "Printf.printf \"韵律数据统计:\\n\";\nPrintf.printf \" 韵组总数: %d\\n\" total_groups;\nPrintf.printf \" 字符总数: %d\\n\" total_chars;\nPrintf.printf \" 平均每组字符数: %.1f\\n\"\n(if total_groups > 0 then float_of_int total_chars /. float_of_int total_groups else 0.0)\n| None -> Printf.printf \"无法获取韵律数据统计信息\\n\"",
        "lines": [
          "Printf.printf \"韵律数据统计:\\n\";",
          "Printf.printf \" 韵组总数: %d\\n\" total_groups;",
          "Printf.printf \" 字符总数: %d\\n\" total_chars;",
          "Printf.printf \" 平均每组字符数: %.1f\\n\"",
          "(if total_groups > 0 then float_of_int total_chars /. float_of_int total_groups else 0.0)",
          "| None -> Printf.printf \"无法获取韵律数据统计信息\\n\""
        ],
        "start_line": 68,
        "end_line": 73,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_access.ml"
      },
      {
        "hash": "8d7693d84a8683c198a805f7abdedd3b",
        "text": "Printf.printf \"韵律数据统计:\\n\";\nPrintf.printf \" 韵组总数: %d\\n\" total_groups;\nPrintf.printf \" 字符总数: %d\\n\" total_chars;\nPrintf.printf \" 平均每组字符数: %.1f\\n\"\n(if total_groups > 0 then float_of_int total_chars /. float_of_int total_groups else 0.0)\n| None -> Printf.printf \"无法获取韵律数据统计信息\\n\"",
        "lines": [
          "Printf.printf \"韵律数据统计:\\n\";",
          "Printf.printf \" 韵组总数: %d\\n\" total_groups;",
          "Printf.printf \" 字符总数: %d\\n\" total_chars;",
          "Printf.printf \" 平均每组字符数: %.1f\\n\"",
          "(if total_groups > 0 then float_of_int total_chars /. float_of_int total_groups else 0.0)",
          "| None -> Printf.printf \"无法获取韵律数据统计信息\\n\""
        ],
        "start_line": 356,
        "end_line": 361,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      }
    ],
    "a3f329ab403cc8158007f7831766f7d3": [
      {
        "hash": "a3f329ab403cc8158007f7831766f7d3",
        "text": "Printf.printf \" 韵组总数: %d\\n\" total_groups;\nPrintf.printf \" 字符总数: %d\\n\" total_chars;\nPrintf.printf \" 平均每组字符数: %.1f\\n\"\n(if total_groups > 0 then float_of_int total_chars /. float_of_int total_groups else 0.0)\n| None -> Printf.printf \"无法获取韵律数据统计信息\\n\"",
        "lines": [
          "Printf.printf \" 韵组总数: %d\\n\" total_groups;",
          "Printf.printf \" 字符总数: %d\\n\" total_chars;",
          "Printf.printf \" 平均每组字符数: %.1f\\n\"",
          "(if total_groups > 0 then float_of_int total_chars /. float_of_int total_groups else 0.0)",
          "| None -> Printf.printf \"无法获取韵律数据统计信息\\n\""
        ],
        "start_line": 69,
        "end_line": 73,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_access.ml"
      },
      {
        "hash": "a3f329ab403cc8158007f7831766f7d3",
        "text": "Printf.printf \" 韵组总数: %d\\n\" total_groups;\nPrintf.printf \" 字符总数: %d\\n\" total_chars;\nPrintf.printf \" 平均每组字符数: %.1f\\n\"\n(if total_groups > 0 then float_of_int total_chars /. float_of_int total_groups else 0.0)\n| None -> Printf.printf \"无法获取韵律数据统计信息\\n\"",
        "lines": [
          "Printf.printf \" 韵组总数: %d\\n\" total_groups;",
          "Printf.printf \" 字符总数: %d\\n\" total_chars;",
          "Printf.printf \" 平均每组字符数: %.1f\\n\"",
          "(if total_groups > 0 then float_of_int total_chars /. float_of_int total_groups else 0.0)",
          "| None -> Printf.printf \"无法获取韵律数据统计信息\\n\""
        ],
        "start_line": 357,
        "end_line": 361,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      }
    ],
    "7eb5c39bdec5f309c147ce198c2ac887": [
      {
        "hash": "7eb5c39bdec5f309c147ce198c2ac887",
        "text": "Printf.printf \" 字符总数: %d\\n\" total_chars;\nPrintf.printf \" 平均每组字符数: %.1f\\n\"\n(if total_groups > 0 then float_of_int total_chars /. float_of_int total_groups else 0.0)\n| None -> Printf.printf \"无法获取韵律数据统计信息\\n\"",
        "lines": [
          "Printf.printf \" 字符总数: %d\\n\" total_chars;",
          "Printf.printf \" 平均每组字符数: %.1f\\n\"",
          "(if total_groups > 0 then float_of_int total_chars /. float_of_int total_groups else 0.0)",
          "| None -> Printf.printf \"无法获取韵律数据统计信息\\n\""
        ],
        "start_line": 70,
        "end_line": 73,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_access.ml"
      },
      {
        "hash": "7eb5c39bdec5f309c147ce198c2ac887",
        "text": "Printf.printf \" 字符总数: %d\\n\" total_chars;\nPrintf.printf \" 平均每组字符数: %.1f\\n\"\n(if total_groups > 0 then float_of_int total_chars /. float_of_int total_groups else 0.0)\n| None -> Printf.printf \"无法获取韵律数据统计信息\\n\"",
        "lines": [
          "Printf.printf \" 字符总数: %d\\n\" total_chars;",
          "Printf.printf \" 平均每组字符数: %.1f\\n\"",
          "(if total_groups > 0 then float_of_int total_chars /. float_of_int total_groups else 0.0)",
          "| None -> Printf.printf \"无法获取韵律数据统计信息\\n\""
        ],
        "start_line": 358,
        "end_line": 361,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      }
    ],
    "9fa287d5d61cff8ba29b960485abb1c8": [
      {
        "hash": "9fa287d5d61cff8ba29b960485abb1c8",
        "text": "Printf.printf \" 平均每组字符数: %.1f\\n\"\n(if total_groups > 0 then float_of_int total_chars /. float_of_int total_groups else 0.0)\n| None -> Printf.printf \"无法获取韵律数据统计信息\\n\"",
        "lines": [
          "Printf.printf \" 平均每组字符数: %.1f\\n\"",
          "(if total_groups > 0 then float_of_int total_chars /. float_of_int total_groups else 0.0)",
          "| None -> Printf.printf \"无法获取韵律数据统计信息\\n\""
        ],
        "start_line": 71,
        "end_line": 73,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_access.ml"
      },
      {
        "hash": "9fa287d5d61cff8ba29b960485abb1c8",
        "text": "Printf.printf \" 平均每组字符数: %.1f\\n\"\n(if total_groups > 0 then float_of_int total_chars /. float_of_int total_groups else 0.0)\n| None -> Printf.printf \"无法获取韵律数据统计信息\\n\"",
        "lines": [
          "Printf.printf \" 平均每组字符数: %.1f\\n\"",
          "(if total_groups > 0 then float_of_int total_chars /. float_of_int total_groups else 0.0)",
          "| None -> Printf.printf \"无法获取韵律数据统计信息\\n\""
        ],
        "start_line": 359,
        "end_line": 361,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      }
    ],
    "b79b7fa2531bac396dd4085e10245916": [
      {
        "hash": "b79b7fa2531bac396dd4085e10245916",
        "text": "let clean_json_string s =\nlet s = String.trim s in\nlet len = String.length s in\nif len = 0 then \"\"\nelse\nlet s = if s.[0] = '\"' && len > 1 then String.sub s 1 (len - 1) else s in\nlet s_len = String.length s in\nlet s = if s_len > 0 && s.[s_len - 1] = ',' then String.sub s 0 (s_len - 1) else s in\nif String.length s > 0 && s.[String.length s - 1] = '\"' then String.sub s 0 (String.length s - 1)\nelse s",
        "lines": [
          "let clean_json_string s =",
          "let s = String.trim s in",
          "let len = String.length s in",
          "if len = 0 then \"\"",
          "else",
          "let s = if s.[0] = '\"' && len > 1 then String.sub s 1 (len - 1) else s in",
          "let s_len = String.length s in",
          "let s = if s_len > 0 && s.[s_len - 1] = ',' then String.sub s 0 (s_len - 1) else s in",
          "if String.length s > 0 && s.[String.length s - 1] = '\"' then String.sub s 0 (String.length s - 1)",
          "else s"
        ],
        "start_line": 14,
        "end_line": 23,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_parser.ml"
      },
      {
        "hash": "b79b7fa2531bac396dd4085e10245916",
        "text": "let clean_json_string s =\nlet s = String.trim s in\nlet len = String.length s in\nif len = 0 then \"\"\nelse\nlet s = if s.[0] = '\"' && len > 1 then String.sub s 1 (len - 1) else s in\nlet s_len = String.length s in\nlet s = if s_len > 0 && s.[s_len - 1] = ',' then String.sub s 0 (s_len - 1) else s in\nif String.length s > 0 && s.[String.length s - 1] = '\"' then String.sub s 0 (String.length s - 1)\nelse s",
        "lines": [
          "let clean_json_string s =",
          "let s = String.trim s in",
          "let len = String.length s in",
          "if len = 0 then \"\"",
          "else",
          "let s = if s.[0] = '\"' && len > 1 then String.sub s 1 (len - 1) else s in",
          "let s_len = String.length s in",
          "let s = if s_len > 0 && s.[s_len - 1] = ',' then String.sub s 0 (s_len - 1) else s in",
          "if String.length s > 0 && s.[String.length s - 1] = '\"' then String.sub s 0 (String.length s - 1)",
          "else s"
        ],
        "start_line": 126,
        "end_line": 135,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      },
      {
        "hash": "b79b7fa2531bac396dd4085e10245916",
        "text": "let clean_json_string s =\nlet s = String.trim s in\nlet len = String.length s in\nif len = 0 then \"\"\nelse\nlet s = if s.[0] = '\"' && len > 1 then String.sub s 1 (len - 1) else s in\nlet s_len = String.length s in\nlet s = if s_len > 0 && s.[s_len - 1] = ',' then String.sub s 0 (s_len - 1) else s in\nif String.length s > 0 && s.[String.length s - 1] = '\"' then String.sub s 0 (String.length s - 1)\nelse s",
        "lines": [
          "let clean_json_string s =",
          "let s = String.trim s in",
          "let len = String.length s in",
          "if len = 0 then \"\"",
          "else",
          "let s = if s.[0] = '\"' && len > 1 then String.sub s 1 (len - 1) else s in",
          "let s_len = String.length s in",
          "let s = if s_len > 0 && s.[s_len - 1] = ',' then String.sub s 0 (s_len - 1) else s in",
          "if String.length s > 0 && s.[String.length s - 1] = '\"' then String.sub s 0 (String.length s - 1)",
          "else s"
        ],
        "start_line": 75,
        "end_line": 84,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_unified.ml"
      }
    ],
    "5f1a0dbe013b4617b92e578bd6caa4a0": [
      {
        "hash": "5f1a0dbe013b4617b92e578bd6caa4a0",
        "text": "let create_parse_state () =\n{\ncurrent_group = None;\ncurrent_category = \"\";\ncurrent_chars = [];\nresult_groups = [];\nin_rhyme_group = false;\nin_characters_array = false;\nbrace_depth = 0;\nbracket_depth = 0;",
        "lines": [
          "let create_parse_state () =",
          "{",
          "current_group = None;",
          "current_category = \"\";",
          "current_chars = [];",
          "result_groups = [];",
          "in_rhyme_group = false;",
          "in_characters_array = false;",
          "brace_depth = 0;",
          "bracket_depth = 0;"
        ],
        "start_line": 40,
        "end_line": 49,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_parser.ml"
      },
      {
        "hash": "5f1a0dbe013b4617b92e578bd6caa4a0",
        "text": "let create_parse_state () =\n{\ncurrent_group = None;\ncurrent_category = \"\";\ncurrent_chars = [];\nresult_groups = [];\nin_rhyme_group = false;\nin_characters_array = false;\nbrace_depth = 0;\nbracket_depth = 0;",
        "lines": [
          "let create_parse_state () =",
          "{",
          "current_group = None;",
          "current_category = \"\";",
          "current_chars = [];",
          "result_groups = [];",
          "in_rhyme_group = false;",
          "in_characters_array = false;",
          "brace_depth = 0;",
          "bracket_depth = 0;"
        ],
        "start_line": 150,
        "end_line": 159,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      },
      {
        "hash": "5f1a0dbe013b4617b92e578bd6caa4a0",
        "text": "let create_parse_state () =\n{\ncurrent_group = None;\ncurrent_category = \"\";\ncurrent_chars = [];\nresult_groups = [];\nin_rhyme_group = false;\nin_characters_array = false;\nbrace_depth = 0;\nbracket_depth = 0;",
        "lines": [
          "let create_parse_state () =",
          "{",
          "current_group = None;",
          "current_category = \"\";",
          "current_chars = [];",
          "result_groups = [];",
          "in_rhyme_group = false;",
          "in_characters_array = false;",
          "brace_depth = 0;",
          "bracket_depth = 0;"
        ],
        "start_line": 99,
        "end_line": 108,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_unified.ml"
      }
    ],
    "91d9c90fc8555054eba791ed6be3a873": [
      {
        "hash": "91d9c90fc8555054eba791ed6be3a873",
        "text": "{\ncurrent_group = None;\ncurrent_category = \"\";\ncurrent_chars = [];\nresult_groups = [];\nin_rhyme_group = false;\nin_characters_array = false;\nbrace_depth = 0;\nbracket_depth = 0;\n}",
        "lines": [
          "{",
          "current_group = None;",
          "current_category = \"\";",
          "current_chars = [];",
          "result_groups = [];",
          "in_rhyme_group = false;",
          "in_characters_array = false;",
          "brace_depth = 0;",
          "bracket_depth = 0;",
          "}"
        ],
        "start_line": 41,
        "end_line": 50,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_parser.ml"
      },
      {
        "hash": "91d9c90fc8555054eba791ed6be3a873",
        "text": "{\ncurrent_group = None;\ncurrent_category = \"\";\ncurrent_chars = [];\nresult_groups = [];\nin_rhyme_group = false;\nin_characters_array = false;\nbrace_depth = 0;\nbracket_depth = 0;\n}",
        "lines": [
          "{",
          "current_group = None;",
          "current_category = \"\";",
          "current_chars = [];",
          "result_groups = [];",
          "in_rhyme_group = false;",
          "in_characters_array = false;",
          "brace_depth = 0;",
          "bracket_depth = 0;",
          "}"
        ],
        "start_line": 151,
        "end_line": 160,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      },
      {
        "hash": "91d9c90fc8555054eba791ed6be3a873",
        "text": "{\ncurrent_group = None;\ncurrent_category = \"\";\ncurrent_chars = [];\nresult_groups = [];\nin_rhyme_group = false;\nin_characters_array = false;\nbrace_depth = 0;\nbracket_depth = 0;\n}",
        "lines": [
          "{",
          "current_group = None;",
          "current_category = \"\";",
          "current_chars = [];",
          "result_groups = [];",
          "in_rhyme_group = false;",
          "in_characters_array = false;",
          "brace_depth = 0;",
          "bracket_depth = 0;",
          "}"
        ],
        "start_line": 100,
        "end_line": 109,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_unified.ml"
      }
    ],
    "271cf730fb858f1f27a0b7969d9c44cf": [
      {
        "hash": "271cf730fb858f1f27a0b7969d9c44cf",
        "text": "let finalize_current_group state =\nmatch state.current_group with\n| Some group_name ->\nlet group_data =\n{ category = state.current_category; characters = List.rev state.current_chars }\nin\nstate.result_groups <- (group_name, group_data) :: state.result_groups;\nstate.current_group <- None;\nstate.current_chars <- []\n| None -> ()",
        "lines": [
          "let finalize_current_group state =",
          "match state.current_group with",
          "| Some group_name ->",
          "let group_data =",
          "{ category = state.current_category; characters = List.rev state.current_chars }",
          "in",
          "state.result_groups <- (group_name, group_data) :: state.result_groups;",
          "state.current_group <- None;",
          "state.current_chars <- []",
          "| None -> ()"
        ],
        "start_line": 55,
        "end_line": 64,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_parser.ml"
      },
      {
        "hash": "271cf730fb858f1f27a0b7969d9c44cf",
        "text": "let finalize_current_group state =\nmatch state.current_group with\n| Some group_name ->\nlet group_data =\n{ category = state.current_category; characters = List.rev state.current_chars }\nin\nstate.result_groups <- (group_name, group_data) :: state.result_groups;\nstate.current_group <- None;\nstate.current_chars <- []\n| None -> ()",
        "lines": [
          "let finalize_current_group state =",
          "match state.current_group with",
          "| Some group_name ->",
          "let group_data =",
          "{ category = state.current_category; characters = List.rev state.current_chars }",
          "in",
          "state.result_groups <- (group_name, group_data) :: state.result_groups;",
          "state.current_group <- None;",
          "state.current_chars <- []",
          "| None -> ()"
        ],
        "start_line": 163,
        "end_line": 172,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      }
    ],
    "e6aca2d72b0b1adac9b73a1232993e67": [
      {
        "hash": "e6aca2d72b0b1adac9b73a1232993e67",
        "text": "match state.current_group with\n| Some group_name ->\nlet group_data =\n{ category = state.current_category; characters = List.rev state.current_chars }\nin\nstate.result_groups <- (group_name, group_data) :: state.result_groups;\nstate.current_group <- None;\nstate.current_chars <- []\n| None -> ()",
        "lines": [
          "match state.current_group with",
          "| Some group_name ->",
          "let group_data =",
          "{ category = state.current_category; characters = List.rev state.current_chars }",
          "in",
          "state.result_groups <- (group_name, group_data) :: state.result_groups;",
          "state.current_group <- None;",
          "state.current_chars <- []",
          "| None -> ()"
        ],
        "start_line": 56,
        "end_line": 64,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_parser.ml"
      },
      {
        "hash": "e6aca2d72b0b1adac9b73a1232993e67",
        "text": "match state.current_group with\n| Some group_name ->\nlet group_data =\n{ category = state.current_category; characters = List.rev state.current_chars }\nin\nstate.result_groups <- (group_name, group_data) :: state.result_groups;\nstate.current_group <- None;\nstate.current_chars <- []\n| None -> ()",
        "lines": [
          "match state.current_group with",
          "| Some group_name ->",
          "let group_data =",
          "{ category = state.current_category; characters = List.rev state.current_chars }",
          "in",
          "state.result_groups <- (group_name, group_data) :: state.result_groups;",
          "state.current_group <- None;",
          "state.current_chars <- []",
          "| None -> ()"
        ],
        "start_line": 164,
        "end_line": 172,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      }
    ],
    "c991b75e0c0be044560d5e28c8a0cc83": [
      {
        "hash": "c991b75e0c0be044560d5e28c8a0cc83",
        "text": "| Some group_name ->\nlet group_data =\n{ category = state.current_category; characters = List.rev state.current_chars }\nin\nstate.result_groups <- (group_name, group_data) :: state.result_groups;\nstate.current_group <- None;\nstate.current_chars <- []\n| None -> ()",
        "lines": [
          "| Some group_name ->",
          "let group_data =",
          "{ category = state.current_category; characters = List.rev state.current_chars }",
          "in",
          "state.result_groups <- (group_name, group_data) :: state.result_groups;",
          "state.current_group <- None;",
          "state.current_chars <- []",
          "| None -> ()"
        ],
        "start_line": 57,
        "end_line": 64,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_parser.ml"
      },
      {
        "hash": "c991b75e0c0be044560d5e28c8a0cc83",
        "text": "| Some group_name ->\nlet group_data =\n{ category = state.current_category; characters = List.rev state.current_chars }\nin\nstate.result_groups <- (group_name, group_data) :: state.result_groups;\nstate.current_group <- None;\nstate.current_chars <- []\n| None -> ()",
        "lines": [
          "| Some group_name ->",
          "let group_data =",
          "{ category = state.current_category; characters = List.rev state.current_chars }",
          "in",
          "state.result_groups <- (group_name, group_data) :: state.result_groups;",
          "state.current_group <- None;",
          "state.current_chars <- []",
          "| None -> ()"
        ],
        "start_line": 165,
        "end_line": 172,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      }
    ],
    "1cc796faa98cf04f30a09bb433619295": [
      {
        "hash": "1cc796faa98cf04f30a09bb433619295",
        "text": "let group_data =\n{ category = state.current_category; characters = List.rev state.current_chars }\nin\nstate.result_groups <- (group_name, group_data) :: state.result_groups;\nstate.current_group <- None;\nstate.current_chars <- []\n| None -> ()",
        "lines": [
          "let group_data =",
          "{ category = state.current_category; characters = List.rev state.current_chars }",
          "in",
          "state.result_groups <- (group_name, group_data) :: state.result_groups;",
          "state.current_group <- None;",
          "state.current_chars <- []",
          "| None -> ()"
        ],
        "start_line": 58,
        "end_line": 64,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_parser.ml"
      },
      {
        "hash": "1cc796faa98cf04f30a09bb433619295",
        "text": "let group_data =\n{ category = state.current_category; characters = List.rev state.current_chars }\nin\nstate.result_groups <- (group_name, group_data) :: state.result_groups;\nstate.current_group <- None;\nstate.current_chars <- []\n| None -> ()",
        "lines": [
          "let group_data =",
          "{ category = state.current_category; characters = List.rev state.current_chars }",
          "in",
          "state.result_groups <- (group_name, group_data) :: state.result_groups;",
          "state.current_group <- None;",
          "state.current_chars <- []",
          "| None -> ()"
        ],
        "start_line": 166,
        "end_line": 172,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      }
    ],
    "2288caf92013e5a9ec0eac3928b9ca1e": [
      {
        "hash": "2288caf92013e5a9ec0eac3928b9ca1e",
        "text": "{ category = state.current_category; characters = List.rev state.current_chars }\nin\nstate.result_groups <- (group_name, group_data) :: state.result_groups;\nstate.current_group <- None;\nstate.current_chars <- []\n| None -> ()",
        "lines": [
          "{ category = state.current_category; characters = List.rev state.current_chars }",
          "in",
          "state.result_groups <- (group_name, group_data) :: state.result_groups;",
          "state.current_group <- None;",
          "state.current_chars <- []",
          "| None -> ()"
        ],
        "start_line": 59,
        "end_line": 64,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_parser.ml"
      },
      {
        "hash": "2288caf92013e5a9ec0eac3928b9ca1e",
        "text": "{ category = state.current_category; characters = List.rev state.current_chars }\nin\nstate.result_groups <- (group_name, group_data) :: state.result_groups;\nstate.current_group <- None;\nstate.current_chars <- []\n| None -> ()",
        "lines": [
          "{ category = state.current_category; characters = List.rev state.current_chars }",
          "in",
          "state.result_groups <- (group_name, group_data) :: state.result_groups;",
          "state.current_group <- None;",
          "state.current_chars <- []",
          "| None -> ()"
        ],
        "start_line": 167,
        "end_line": 172,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      }
    ],
    "5738faa28a6a9a9f12c1ffd1c50741ec": [
      {
        "hash": "5738faa28a6a9a9f12c1ffd1c50741ec",
        "text": "in\nstate.result_groups <- (group_name, group_data) :: state.result_groups;\nstate.current_group <- None;\nstate.current_chars <- []\n| None -> ()",
        "lines": [
          "in",
          "state.result_groups <- (group_name, group_data) :: state.result_groups;",
          "state.current_group <- None;",
          "state.current_chars <- []",
          "| None -> ()"
        ],
        "start_line": 60,
        "end_line": 64,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_parser.ml"
      },
      {
        "hash": "5738faa28a6a9a9f12c1ffd1c50741ec",
        "text": "in\nstate.result_groups <- (group_name, group_data) :: state.result_groups;\nstate.current_group <- None;\nstate.current_chars <- []\n| None -> ()",
        "lines": [
          "in",
          "state.result_groups <- (group_name, group_data) :: state.result_groups;",
          "state.current_group <- None;",
          "state.current_chars <- []",
          "| None -> ()"
        ],
        "start_line": 168,
        "end_line": 172,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      }
    ],
    "8b071d5b37ef4c9e9d23b88b283599d3": [
      {
        "hash": "8b071d5b37ef4c9e9d23b88b283599d3",
        "text": "let process_rhyme_group_header state trimmed =\nfinalize_current_group state;\nlet parts = String.split_on_char ':' trimmed in\nif List.length parts >= 1 then\nlet key = List.hd parts in\nlet cleaned_key = clean_json_string key in\nif cleaned_key <> \"\" then (\nstate.current_group <- Some cleaned_key;\nstate.in_rhyme_group <- true;\nstate.current_category <- \"\";",
        "lines": [
          "let process_rhyme_group_header state trimmed =",
          "finalize_current_group state;",
          "let parts = String.split_on_char ':' trimmed in",
          "if List.length parts >= 1 then",
          "let key = List.hd parts in",
          "let cleaned_key = clean_json_string key in",
          "if cleaned_key <> \"\" then (",
          "state.current_group <- Some cleaned_key;",
          "state.in_rhyme_group <- true;",
          "state.current_category <- \"\";"
        ],
        "start_line": 67,
        "end_line": 76,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_parser.ml"
      },
      {
        "hash": "8b071d5b37ef4c9e9d23b88b283599d3",
        "text": "let process_rhyme_group_header state trimmed =\nfinalize_current_group state;\nlet parts = String.split_on_char ':' trimmed in\nif List.length parts >= 1 then\nlet key = List.hd parts in\nlet cleaned_key = clean_json_string key in\nif cleaned_key <> \"\" then (\nstate.current_group <- Some cleaned_key;\nstate.in_rhyme_group <- true;\nstate.current_category <- \"\";",
        "lines": [
          "let process_rhyme_group_header state trimmed =",
          "finalize_current_group state;",
          "let parts = String.split_on_char ':' trimmed in",
          "if List.length parts >= 1 then",
          "let key = List.hd parts in",
          "let cleaned_key = clean_json_string key in",
          "if cleaned_key <> \"\" then (",
          "state.current_group <- Some cleaned_key;",
          "state.in_rhyme_group <- true;",
          "state.current_category <- \"\";"
        ],
        "start_line": 175,
        "end_line": 184,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      }
    ],
    "14fbea4f42dc5cef750f0437b1342fb1": [
      {
        "hash": "14fbea4f42dc5cef750f0437b1342fb1",
        "text": "finalize_current_group state;\nlet parts = String.split_on_char ':' trimmed in\nif List.length parts >= 1 then\nlet key = List.hd parts in\nlet cleaned_key = clean_json_string key in\nif cleaned_key <> \"\" then (\nstate.current_group <- Some cleaned_key;\nstate.in_rhyme_group <- true;\nstate.current_category <- \"\";\nstate.current_chars <- [])",
        "lines": [
          "finalize_current_group state;",
          "let parts = String.split_on_char ':' trimmed in",
          "if List.length parts >= 1 then",
          "let key = List.hd parts in",
          "let cleaned_key = clean_json_string key in",
          "if cleaned_key <> \"\" then (",
          "state.current_group <- Some cleaned_key;",
          "state.in_rhyme_group <- true;",
          "state.current_category <- \"\";",
          "state.current_chars <- [])"
        ],
        "start_line": 68,
        "end_line": 77,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_parser.ml"
      },
      {
        "hash": "14fbea4f42dc5cef750f0437b1342fb1",
        "text": "finalize_current_group state;\nlet parts = String.split_on_char ':' trimmed in\nif List.length parts >= 1 then\nlet key = List.hd parts in\nlet cleaned_key = clean_json_string key in\nif cleaned_key <> \"\" then (\nstate.current_group <- Some cleaned_key;\nstate.in_rhyme_group <- true;\nstate.current_category <- \"\";\nstate.current_chars <- [])",
        "lines": [
          "finalize_current_group state;",
          "let parts = String.split_on_char ':' trimmed in",
          "if List.length parts >= 1 then",
          "let key = List.hd parts in",
          "let cleaned_key = clean_json_string key in",
          "if cleaned_key <> \"\" then (",
          "state.current_group <- Some cleaned_key;",
          "state.in_rhyme_group <- true;",
          "state.current_category <- \"\";",
          "state.current_chars <- [])"
        ],
        "start_line": 176,
        "end_line": 185,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      }
    ],
    "0385d6b9ec100ac37280f332ea0abaef": [
      {
        "hash": "0385d6b9ec100ac37280f332ea0abaef",
        "text": "let parts = String.split_on_char ':' trimmed in\nif List.length parts >= 1 then\nlet key = List.hd parts in\nlet cleaned_key = clean_json_string key in\nif cleaned_key <> \"\" then (\nstate.current_group <- Some cleaned_key;\nstate.in_rhyme_group <- true;\nstate.current_category <- \"\";\nstate.current_chars <- [])",
        "lines": [
          "let parts = String.split_on_char ':' trimmed in",
          "if List.length parts >= 1 then",
          "let key = List.hd parts in",
          "let cleaned_key = clean_json_string key in",
          "if cleaned_key <> \"\" then (",
          "state.current_group <- Some cleaned_key;",
          "state.in_rhyme_group <- true;",
          "state.current_category <- \"\";",
          "state.current_chars <- [])"
        ],
        "start_line": 69,
        "end_line": 77,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_parser.ml"
      },
      {
        "hash": "0385d6b9ec100ac37280f332ea0abaef",
        "text": "let parts = String.split_on_char ':' trimmed in\nif List.length parts >= 1 then\nlet key = List.hd parts in\nlet cleaned_key = clean_json_string key in\nif cleaned_key <> \"\" then (\nstate.current_group <- Some cleaned_key;\nstate.in_rhyme_group <- true;\nstate.current_category <- \"\";\nstate.current_chars <- [])",
        "lines": [
          "let parts = String.split_on_char ':' trimmed in",
          "if List.length parts >= 1 then",
          "let key = List.hd parts in",
          "let cleaned_key = clean_json_string key in",
          "if cleaned_key <> \"\" then (",
          "state.current_group <- Some cleaned_key;",
          "state.in_rhyme_group <- true;",
          "state.current_category <- \"\";",
          "state.current_chars <- [])"
        ],
        "start_line": 177,
        "end_line": 185,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      }
    ],
    "4f6db58c2f69979db296c161215afe58": [
      {
        "hash": "4f6db58c2f69979db296c161215afe58",
        "text": "if List.length parts >= 1 then\nlet key = List.hd parts in\nlet cleaned_key = clean_json_string key in\nif cleaned_key <> \"\" then (\nstate.current_group <- Some cleaned_key;\nstate.in_rhyme_group <- true;\nstate.current_category <- \"\";\nstate.current_chars <- [])",
        "lines": [
          "if List.length parts >= 1 then",
          "let key = List.hd parts in",
          "let cleaned_key = clean_json_string key in",
          "if cleaned_key <> \"\" then (",
          "state.current_group <- Some cleaned_key;",
          "state.in_rhyme_group <- true;",
          "state.current_category <- \"\";",
          "state.current_chars <- [])"
        ],
        "start_line": 70,
        "end_line": 77,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_parser.ml"
      },
      {
        "hash": "4f6db58c2f69979db296c161215afe58",
        "text": "if List.length parts >= 1 then\nlet key = List.hd parts in\nlet cleaned_key = clean_json_string key in\nif cleaned_key <> \"\" then (\nstate.current_group <- Some cleaned_key;\nstate.in_rhyme_group <- true;\nstate.current_category <- \"\";\nstate.current_chars <- [])",
        "lines": [
          "if List.length parts >= 1 then",
          "let key = List.hd parts in",
          "let cleaned_key = clean_json_string key in",
          "if cleaned_key <> \"\" then (",
          "state.current_group <- Some cleaned_key;",
          "state.in_rhyme_group <- true;",
          "state.current_category <- \"\";",
          "state.current_chars <- [])"
        ],
        "start_line": 178,
        "end_line": 185,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      }
    ],
    "53cc1c22292b1082477d3d4c2b5844cf": [
      {
        "hash": "53cc1c22292b1082477d3d4c2b5844cf",
        "text": "let key = List.hd parts in\nlet cleaned_key = clean_json_string key in\nif cleaned_key <> \"\" then (\nstate.current_group <- Some cleaned_key;\nstate.in_rhyme_group <- true;\nstate.current_category <- \"\";\nstate.current_chars <- [])",
        "lines": [
          "let key = List.hd parts in",
          "let cleaned_key = clean_json_string key in",
          "if cleaned_key <> \"\" then (",
          "state.current_group <- Some cleaned_key;",
          "state.in_rhyme_group <- true;",
          "state.current_category <- \"\";",
          "state.current_chars <- [])"
        ],
        "start_line": 71,
        "end_line": 77,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_parser.ml"
      },
      {
        "hash": "53cc1c22292b1082477d3d4c2b5844cf",
        "text": "let key = List.hd parts in\nlet cleaned_key = clean_json_string key in\nif cleaned_key <> \"\" then (\nstate.current_group <- Some cleaned_key;\nstate.in_rhyme_group <- true;\nstate.current_category <- \"\";\nstate.current_chars <- [])",
        "lines": [
          "let key = List.hd parts in",
          "let cleaned_key = clean_json_string key in",
          "if cleaned_key <> \"\" then (",
          "state.current_group <- Some cleaned_key;",
          "state.in_rhyme_group <- true;",
          "state.current_category <- \"\";",
          "state.current_chars <- [])"
        ],
        "start_line": 179,
        "end_line": 185,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      }
    ],
    "d9f6d78e197e3c5d56c8822182104c41": [
      {
        "hash": "d9f6d78e197e3c5d56c8822182104c41",
        "text": "let cleaned_key = clean_json_string key in\nif cleaned_key <> \"\" then (\nstate.current_group <- Some cleaned_key;\nstate.in_rhyme_group <- true;\nstate.current_category <- \"\";\nstate.current_chars <- [])",
        "lines": [
          "let cleaned_key = clean_json_string key in",
          "if cleaned_key <> \"\" then (",
          "state.current_group <- Some cleaned_key;",
          "state.in_rhyme_group <- true;",
          "state.current_category <- \"\";",
          "state.current_chars <- [])"
        ],
        "start_line": 72,
        "end_line": 77,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_parser.ml"
      },
      {
        "hash": "d9f6d78e197e3c5d56c8822182104c41",
        "text": "let cleaned_key = clean_json_string key in\nif cleaned_key <> \"\" then (\nstate.current_group <- Some cleaned_key;\nstate.in_rhyme_group <- true;\nstate.current_category <- \"\";\nstate.current_chars <- [])",
        "lines": [
          "let cleaned_key = clean_json_string key in",
          "if cleaned_key <> \"\" then (",
          "state.current_group <- Some cleaned_key;",
          "state.in_rhyme_group <- true;",
          "state.current_category <- \"\";",
          "state.current_chars <- [])"
        ],
        "start_line": 180,
        "end_line": 185,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      }
    ],
    "7bcd62f405a3754fd9341188c7f97c41": [
      {
        "hash": "7bcd62f405a3754fd9341188c7f97c41",
        "text": "let process_category_field state trimmed =\nlet parts = String.split_on_char ':' trimmed in\nif List.length parts >= 2 then\nlet value = List.nth parts 1 in\nstate.current_category <- clean_json_string value",
        "lines": [
          "let process_category_field state trimmed =",
          "let parts = String.split_on_char ':' trimmed in",
          "if List.length parts >= 2 then",
          "let value = List.nth parts 1 in",
          "state.current_category <- clean_json_string value"
        ],
        "start_line": 80,
        "end_line": 84,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_parser.ml"
      },
      {
        "hash": "7bcd62f405a3754fd9341188c7f97c41",
        "text": "let process_category_field state trimmed =\nlet parts = String.split_on_char ':' trimmed in\nif List.length parts >= 2 then\nlet value = List.nth parts 1 in\nstate.current_category <- clean_json_string value",
        "lines": [
          "let process_category_field state trimmed =",
          "let parts = String.split_on_char ':' trimmed in",
          "if List.length parts >= 2 then",
          "let value = List.nth parts 1 in",
          "state.current_category <- clean_json_string value"
        ],
        "start_line": 188,
        "end_line": 192,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      }
    ],
    "52374cf10f03e7378f73f0bb5ca61776": [
      {
        "hash": "52374cf10f03e7378f73f0bb5ca61776",
        "text": "let parts = String.split_on_char ':' trimmed in\nif List.length parts >= 2 then\nlet value = List.nth parts 1 in\nstate.current_category <- clean_json_string value",
        "lines": [
          "let parts = String.split_on_char ':' trimmed in",
          "if List.length parts >= 2 then",
          "let value = List.nth parts 1 in",
          "state.current_category <- clean_json_string value"
        ],
        "start_line": 81,
        "end_line": 84,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_parser.ml"
      },
      {
        "hash": "52374cf10f03e7378f73f0bb5ca61776",
        "text": "let parts = String.split_on_char ':' trimmed in\nif List.length parts >= 2 then\nlet value = List.nth parts 1 in\nstate.current_category <- clean_json_string value",
        "lines": [
          "let parts = String.split_on_char ':' trimmed in",
          "if List.length parts >= 2 then",
          "let value = List.nth parts 1 in",
          "state.current_category <- clean_json_string value"
        ],
        "start_line": 189,
        "end_line": 192,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      }
    ],
    "1f7c19a07cd7a2c019a4356ccbd6b094": [
      {
        "hash": "1f7c19a07cd7a2c019a4356ccbd6b094",
        "text": "if List.length parts >= 2 then\nlet value = List.nth parts 1 in\nstate.current_category <- clean_json_string value",
        "lines": [
          "if List.length parts >= 2 then",
          "let value = List.nth parts 1 in",
          "state.current_category <- clean_json_string value"
        ],
        "start_line": 82,
        "end_line": 84,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_parser.ml"
      },
      {
        "hash": "1f7c19a07cd7a2c019a4356ccbd6b094",
        "text": "if List.length parts >= 2 then\nlet value = List.nth parts 1 in\nstate.current_category <- clean_json_string value",
        "lines": [
          "if List.length parts >= 2 then",
          "let value = List.nth parts 1 in",
          "state.current_category <- clean_json_string value"
        ],
        "start_line": 190,
        "end_line": 192,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      }
    ],
    "d20c257b7011a517b7124985d6072733": [
      {
        "hash": "d20c257b7011a517b7124985d6072733",
        "text": "let process_character_element state trimmed =\nif state.in_characters_array then\nlet char = clean_json_string trimmed in\nif char <> \"\" then state.current_chars <- char :: state.current_chars",
        "lines": [
          "let process_character_element state trimmed =",
          "if state.in_characters_array then",
          "let char = clean_json_string trimmed in",
          "if char <> \"\" then state.current_chars <- char :: state.current_chars"
        ],
        "start_line": 87,
        "end_line": 90,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_parser.ml"
      },
      {
        "hash": "d20c257b7011a517b7124985d6072733",
        "text": "let process_character_element state trimmed =\nif state.in_characters_array then\nlet char = clean_json_string trimmed in\nif char <> \"\" then state.current_chars <- char :: state.current_chars",
        "lines": [
          "let process_character_element state trimmed =",
          "if state.in_characters_array then",
          "let char = clean_json_string trimmed in",
          "if char <> \"\" then state.current_chars <- char :: state.current_chars"
        ],
        "start_line": 195,
        "end_line": 198,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      }
    ],
    "d7e19d8a957b196d69abd8fffd734e29": [
      {
        "hash": "d7e19d8a957b196d69abd8fffd734e29",
        "text": "if state.in_characters_array then\nlet char = clean_json_string trimmed in\nif char <> \"\" then state.current_chars <- char :: state.current_chars",
        "lines": [
          "if state.in_characters_array then",
          "let char = clean_json_string trimmed in",
          "if char <> \"\" then state.current_chars <- char :: state.current_chars"
        ],
        "start_line": 88,
        "end_line": 90,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_parser.ml"
      },
      {
        "hash": "d7e19d8a957b196d69abd8fffd734e29",
        "text": "if state.in_characters_array then\nlet char = clean_json_string trimmed in\nif char <> \"\" then state.current_chars <- char :: state.current_chars",
        "lines": [
          "if state.in_characters_array then",
          "let char = clean_json_string trimmed in",
          "if char <> \"\" then state.current_chars <- char :: state.current_chars"
        ],
        "start_line": 196,
        "end_line": 198,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      }
    ],
    "3b6a644ffae7ef67a1f063e9e2849422": [
      {
        "hash": "3b6a644ffae7ef67a1f063e9e2849422",
        "text": "String.iter\n(function\n| '{' -> state.brace_depth <- state.brace_depth + 1\n| '}' -> state.brace_depth <- state.brace_depth - 1\n| '[' -> state.bracket_depth <- state.bracket_depth + 1\n| ']' -> state.bracket_depth <- state.bracket_depth - 1\n| _ -> ())\ntrimmed;",
        "lines": [
          "String.iter",
          "(function",
          "| '{' -> state.brace_depth <- state.brace_depth + 1",
          "| '}' -> state.brace_depth <- state.brace_depth - 1",
          "| '[' -> state.bracket_depth <- state.bracket_depth + 1",
          "| ']' -> state.bracket_depth <- state.bracket_depth - 1",
          "| _ -> ())",
          "trimmed;"
        ],
        "start_line": 99,
        "end_line": 106,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_parser.ml"
      },
      {
        "hash": "3b6a644ffae7ef67a1f063e9e2849422",
        "text": "String.iter\n(function\n| '{' -> state.brace_depth <- state.brace_depth + 1\n| '}' -> state.brace_depth <- state.brace_depth - 1\n| '[' -> state.bracket_depth <- state.bracket_depth + 1\n| ']' -> state.bracket_depth <- state.bracket_depth - 1\n| _ -> ())\ntrimmed;",
        "lines": [
          "String.iter",
          "(function",
          "| '{' -> state.brace_depth <- state.brace_depth + 1",
          "| '}' -> state.brace_depth <- state.brace_depth - 1",
          "| '[' -> state.bracket_depth <- state.bracket_depth + 1",
          "| ']' -> state.bracket_depth <- state.bracket_depth - 1",
          "| _ -> ())",
          "trimmed;"
        ],
        "start_line": 205,
        "end_line": 212,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      }
    ],
    "caf65219ab0b44a5b848d3f3e02977ac": [
      {
        "hash": "caf65219ab0b44a5b848d3f3e02977ac",
        "text": "(function\n| '{' -> state.brace_depth <- state.brace_depth + 1\n| '}' -> state.brace_depth <- state.brace_depth - 1\n| '[' -> state.bracket_depth <- state.bracket_depth + 1\n| ']' -> state.bracket_depth <- state.bracket_depth - 1\n| _ -> ())\ntrimmed;",
        "lines": [
          "(function",
          "| '{' -> state.brace_depth <- state.brace_depth + 1",
          "| '}' -> state.brace_depth <- state.brace_depth - 1",
          "| '[' -> state.bracket_depth <- state.bracket_depth + 1",
          "| ']' -> state.bracket_depth <- state.bracket_depth - 1",
          "| _ -> ())",
          "trimmed;"
        ],
        "start_line": 100,
        "end_line": 106,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_parser.ml"
      },
      {
        "hash": "caf65219ab0b44a5b848d3f3e02977ac",
        "text": "(function\n| '{' -> state.brace_depth <- state.brace_depth + 1\n| '}' -> state.brace_depth <- state.brace_depth - 1\n| '[' -> state.bracket_depth <- state.bracket_depth + 1\n| ']' -> state.bracket_depth <- state.bracket_depth - 1\n| _ -> ())\ntrimmed;",
        "lines": [
          "(function",
          "| '{' -> state.brace_depth <- state.brace_depth + 1",
          "| '}' -> state.brace_depth <- state.brace_depth - 1",
          "| '[' -> state.bracket_depth <- state.bracket_depth + 1",
          "| ']' -> state.bracket_depth <- state.bracket_depth - 1",
          "| _ -> ())",
          "trimmed;"
        ],
        "start_line": 206,
        "end_line": 212,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      }
    ],
    "8b37bbfb516bc49ce6e2264d3bc1731e": [
      {
        "hash": "8b37bbfb516bc49ce6e2264d3bc1731e",
        "text": "| '{' -> state.brace_depth <- state.brace_depth + 1\n| '}' -> state.brace_depth <- state.brace_depth - 1\n| '[' -> state.bracket_depth <- state.bracket_depth + 1\n| ']' -> state.bracket_depth <- state.bracket_depth - 1\n| _ -> ())\ntrimmed;",
        "lines": [
          "| '{' -> state.brace_depth <- state.brace_depth + 1",
          "| '}' -> state.brace_depth <- state.brace_depth - 1",
          "| '[' -> state.bracket_depth <- state.bracket_depth + 1",
          "| ']' -> state.bracket_depth <- state.bracket_depth - 1",
          "| _ -> ())",
          "trimmed;"
        ],
        "start_line": 101,
        "end_line": 106,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_parser.ml"
      },
      {
        "hash": "8b37bbfb516bc49ce6e2264d3bc1731e",
        "text": "| '{' -> state.brace_depth <- state.brace_depth + 1\n| '}' -> state.brace_depth <- state.brace_depth - 1\n| '[' -> state.bracket_depth <- state.bracket_depth + 1\n| ']' -> state.bracket_depth <- state.bracket_depth - 1\n| _ -> ())\ntrimmed;",
        "lines": [
          "| '{' -> state.brace_depth <- state.brace_depth + 1",
          "| '}' -> state.brace_depth <- state.brace_depth - 1",
          "| '[' -> state.bracket_depth <- state.bracket_depth + 1",
          "| ']' -> state.bracket_depth <- state.bracket_depth - 1",
          "| _ -> ())",
          "trimmed;"
        ],
        "start_line": 207,
        "end_line": 212,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      }
    ],
    "814d91e11f85b555d957b5768819caa4": [
      {
        "hash": "814d91e11f85b555d957b5768819caa4",
        "text": "| '}' -> state.brace_depth <- state.brace_depth - 1\n| '[' -> state.bracket_depth <- state.bracket_depth + 1\n| ']' -> state.bracket_depth <- state.bracket_depth - 1\n| _ -> ())\ntrimmed;",
        "lines": [
          "| '}' -> state.brace_depth <- state.brace_depth - 1",
          "| '[' -> state.bracket_depth <- state.bracket_depth + 1",
          "| ']' -> state.bracket_depth <- state.bracket_depth - 1",
          "| _ -> ())",
          "trimmed;"
        ],
        "start_line": 102,
        "end_line": 106,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_parser.ml"
      },
      {
        "hash": "814d91e11f85b555d957b5768819caa4",
        "text": "| '}' -> state.brace_depth <- state.brace_depth - 1\n| '[' -> state.bracket_depth <- state.bracket_depth + 1\n| ']' -> state.bracket_depth <- state.bracket_depth - 1\n| _ -> ())\ntrimmed;",
        "lines": [
          "| '}' -> state.brace_depth <- state.brace_depth - 1",
          "| '[' -> state.bracket_depth <- state.bracket_depth + 1",
          "| ']' -> state.bracket_depth <- state.bracket_depth - 1",
          "| _ -> ())",
          "trimmed;"
        ],
        "start_line": 208,
        "end_line": 212,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      }
    ],
    "4fe4bd8ab3d6cb11f5e944986fc24d6e": [
      {
        "hash": "4fe4bd8ab3d6cb11f5e944986fc24d6e",
        "text": "| '[' -> state.bracket_depth <- state.bracket_depth + 1\n| ']' -> state.bracket_depth <- state.bracket_depth - 1\n| _ -> ())\ntrimmed;",
        "lines": [
          "| '[' -> state.bracket_depth <- state.bracket_depth + 1",
          "| ']' -> state.bracket_depth <- state.bracket_depth - 1",
          "| _ -> ())",
          "trimmed;"
        ],
        "start_line": 103,
        "end_line": 106,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_parser.ml"
      },
      {
        "hash": "4fe4bd8ab3d6cb11f5e944986fc24d6e",
        "text": "| '[' -> state.bracket_depth <- state.bracket_depth + 1\n| ']' -> state.bracket_depth <- state.bracket_depth - 1\n| _ -> ())\ntrimmed;",
        "lines": [
          "| '[' -> state.bracket_depth <- state.bracket_depth + 1",
          "| ']' -> state.bracket_depth <- state.bracket_depth - 1",
          "| _ -> ())",
          "trimmed;"
        ],
        "start_line": 209,
        "end_line": 212,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      }
    ],
    "0d36beef8e04c754f8439552acb1ba79": [
      {
        "hash": "0d36beef8e04c754f8439552acb1ba79",
        "text": "| ']' -> state.bracket_depth <- state.bracket_depth - 1\n| _ -> ())\ntrimmed;",
        "lines": [
          "| ']' -> state.bracket_depth <- state.bracket_depth - 1",
          "| _ -> ())",
          "trimmed;"
        ],
        "start_line": 104,
        "end_line": 106,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_parser.ml"
      },
      {
        "hash": "0d36beef8e04c754f8439552acb1ba79",
        "text": "| ']' -> state.bracket_depth <- state.bracket_depth - 1\n| _ -> ())\ntrimmed;",
        "lines": [
          "| ']' -> state.bracket_depth <- state.bracket_depth - 1",
          "| _ -> ())",
          "trimmed;"
        ],
        "start_line": 210,
        "end_line": 212,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      }
    ],
    "ecd54a52aa0a6ac843e0af3cd7eb0c96": [
      {
        "hash": "ecd54a52aa0a6ac843e0af3cd7eb0c96",
        "text": "let contains_characters =\ntry\nignore (Str.search_forward (Str.regexp \"characters\") line 0);\ntrue\nwith Not_found -> false\nin\nif String.contains trimmed '[' && contains_characters then state.in_characters_array <- true;",
        "lines": [
          "let contains_characters =",
          "try",
          "ignore (Str.search_forward (Str.regexp \"characters\") line 0);",
          "true",
          "with Not_found -> false",
          "in",
          "if String.contains trimmed '[' && contains_characters then state.in_characters_array <- true;"
        ],
        "start_line": 109,
        "end_line": 115,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_parser.ml"
      },
      {
        "hash": "ecd54a52aa0a6ac843e0af3cd7eb0c96",
        "text": "let contains_characters =\ntry\nignore (Str.search_forward (Str.regexp \"characters\") line 0);\ntrue\nwith Not_found -> false\nin\nif String.contains trimmed '[' && contains_characters then state.in_characters_array <- true;",
        "lines": [
          "let contains_characters =",
          "try",
          "ignore (Str.search_forward (Str.regexp \"characters\") line 0);",
          "true",
          "with Not_found -> false",
          "in",
          "if String.contains trimmed '[' && contains_characters then state.in_characters_array <- true;"
        ],
        "start_line": 215,
        "end_line": 221,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      }
    ],
    "382239c2f447626cdd8fad78efb8d325": [
      {
        "hash": "382239c2f447626cdd8fad78efb8d325",
        "text": "try\nignore (Str.search_forward (Str.regexp \"characters\") line 0);\ntrue\nwith Not_found -> false\nin\nif String.contains trimmed '[' && contains_characters then state.in_characters_array <- true;",
        "lines": [
          "try",
          "ignore (Str.search_forward (Str.regexp \"characters\") line 0);",
          "true",
          "with Not_found -> false",
          "in",
          "if String.contains trimmed '[' && contains_characters then state.in_characters_array <- true;"
        ],
        "start_line": 110,
        "end_line": 115,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_parser.ml"
      },
      {
        "hash": "382239c2f447626cdd8fad78efb8d325",
        "text": "try\nignore (Str.search_forward (Str.regexp \"characters\") line 0);\ntrue\nwith Not_found -> false\nin\nif String.contains trimmed '[' && contains_characters then state.in_characters_array <- true;",
        "lines": [
          "try",
          "ignore (Str.search_forward (Str.regexp \"characters\") line 0);",
          "true",
          "with Not_found -> false",
          "in",
          "if String.contains trimmed '[' && contains_characters then state.in_characters_array <- true;"
        ],
        "start_line": 216,
        "end_line": 221,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      }
    ],
    "a14e741401eafae8c760df6e1da5bf89": [
      {
        "hash": "a14e741401eafae8c760df6e1da5bf89",
        "text": "ignore (Str.search_forward (Str.regexp \"characters\") line 0);\ntrue\nwith Not_found -> false\nin\nif String.contains trimmed '[' && contains_characters then state.in_characters_array <- true;",
        "lines": [
          "ignore (Str.search_forward (Str.regexp \"characters\") line 0);",
          "true",
          "with Not_found -> false",
          "in",
          "if String.contains trimmed '[' && contains_characters then state.in_characters_array <- true;"
        ],
        "start_line": 111,
        "end_line": 115,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_parser.ml"
      },
      {
        "hash": "a14e741401eafae8c760df6e1da5bf89",
        "text": "ignore (Str.search_forward (Str.regexp \"characters\") line 0);\ntrue\nwith Not_found -> false\nin\nif String.contains trimmed '[' && contains_characters then state.in_characters_array <- true;",
        "lines": [
          "ignore (Str.search_forward (Str.regexp \"characters\") line 0);",
          "true",
          "with Not_found -> false",
          "in",
          "if String.contains trimmed '[' && contains_characters then state.in_characters_array <- true;"
        ],
        "start_line": 217,
        "end_line": 221,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      }
    ],
    "5898d535cc0aada485386756a772c7fe": [
      {
        "hash": "5898d535cc0aada485386756a772c7fe",
        "text": "true\nwith Not_found -> false\nin\nif String.contains trimmed '[' && contains_characters then state.in_characters_array <- true;",
        "lines": [
          "true",
          "with Not_found -> false",
          "in",
          "if String.contains trimmed '[' && contains_characters then state.in_characters_array <- true;"
        ],
        "start_line": 112,
        "end_line": 115,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_parser.ml"
      },
      {
        "hash": "5898d535cc0aada485386756a772c7fe",
        "text": "true\nwith Not_found -> false\nin\nif String.contains trimmed '[' && contains_characters then state.in_characters_array <- true;",
        "lines": [
          "true",
          "with Not_found -> false",
          "in",
          "if String.contains trimmed '[' && contains_characters then state.in_characters_array <- true;"
        ],
        "start_line": 218,
        "end_line": 221,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      }
    ],
    "75d6e57472b5d52c8c808cccb2fd0d93": [
      {
        "hash": "75d6e57472b5d52c8c808cccb2fd0d93",
        "text": "with Not_found -> false\nin\nif String.contains trimmed '[' && contains_characters then state.in_characters_array <- true;",
        "lines": [
          "with Not_found -> false",
          "in",
          "if String.contains trimmed '[' && contains_characters then state.in_characters_array <- true;"
        ],
        "start_line": 113,
        "end_line": 115,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_parser.ml"
      },
      {
        "hash": "75d6e57472b5d52c8c808cccb2fd0d93",
        "text": "with Not_found -> false\nin\nif String.contains trimmed '[' && contains_characters then state.in_characters_array <- true;",
        "lines": [
          "with Not_found -> false",
          "in",
          "if String.contains trimmed '[' && contains_characters then state.in_characters_array <- true;"
        ],
        "start_line": 219,
        "end_line": 221,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      }
    ],
    "216b79296d81a6d52505b4e29ccbf46f": [
      {
        "hash": "216b79296d81a6d52505b4e29ccbf46f",
        "text": "if String.contains trimmed ':' && not state.in_characters_array then (\nlet contains_category =\ntry\nignore (Str.search_forward (Str.regexp \"category\") line 0);\ntrue\nwith Not_found -> false\nin\nif contains_category then process_category_field state trimmed\nelse if state.brace_depth > 0 then process_rhyme_group_header state trimmed)\nelse if state.in_characters_array then process_character_element state trimmed",
        "lines": [
          "if String.contains trimmed ':' && not state.in_characters_array then (",
          "let contains_category =",
          "try",
          "ignore (Str.search_forward (Str.regexp \"category\") line 0);",
          "true",
          "with Not_found -> false",
          "in",
          "if contains_category then process_category_field state trimmed",
          "else if state.brace_depth > 0 then process_rhyme_group_header state trimmed)",
          "else if state.in_characters_array then process_character_element state trimmed"
        ],
        "start_line": 121,
        "end_line": 130,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_parser.ml"
      },
      {
        "hash": "216b79296d81a6d52505b4e29ccbf46f",
        "text": "if String.contains trimmed ':' && not state.in_characters_array then (\nlet contains_category =\ntry\nignore (Str.search_forward (Str.regexp \"category\") line 0);\ntrue\nwith Not_found -> false\nin\nif contains_category then process_category_field state trimmed\nelse if state.brace_depth > 0 then process_rhyme_group_header state trimmed)\nelse if state.in_characters_array then process_character_element state trimmed",
        "lines": [
          "if String.contains trimmed ':' && not state.in_characters_array then (",
          "let contains_category =",
          "try",
          "ignore (Str.search_forward (Str.regexp \"category\") line 0);",
          "true",
          "with Not_found -> false",
          "in",
          "if contains_category then process_category_field state trimmed",
          "else if state.brace_depth > 0 then process_rhyme_group_header state trimmed)",
          "else if state.in_characters_array then process_character_element state trimmed"
        ],
        "start_line": 227,
        "end_line": 236,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      }
    ],
    "c813c273c964cb1764e6a32fed28bcce": [
      {
        "hash": "c813c273c964cb1764e6a32fed28bcce",
        "text": "let contains_category =\ntry\nignore (Str.search_forward (Str.regexp \"category\") line 0);\ntrue\nwith Not_found -> false\nin\nif contains_category then process_category_field state trimmed\nelse if state.brace_depth > 0 then process_rhyme_group_header state trimmed)\nelse if state.in_characters_array then process_character_element state trimmed",
        "lines": [
          "let contains_category =",
          "try",
          "ignore (Str.search_forward (Str.regexp \"category\") line 0);",
          "true",
          "with Not_found -> false",
          "in",
          "if contains_category then process_category_field state trimmed",
          "else if state.brace_depth > 0 then process_rhyme_group_header state trimmed)",
          "else if state.in_characters_array then process_character_element state trimmed"
        ],
        "start_line": 122,
        "end_line": 130,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_parser.ml"
      },
      {
        "hash": "c813c273c964cb1764e6a32fed28bcce",
        "text": "let contains_category =\ntry\nignore (Str.search_forward (Str.regexp \"category\") line 0);\ntrue\nwith Not_found -> false\nin\nif contains_category then process_category_field state trimmed\nelse if state.brace_depth > 0 then process_rhyme_group_header state trimmed)\nelse if state.in_characters_array then process_character_element state trimmed",
        "lines": [
          "let contains_category =",
          "try",
          "ignore (Str.search_forward (Str.regexp \"category\") line 0);",
          "true",
          "with Not_found -> false",
          "in",
          "if contains_category then process_category_field state trimmed",
          "else if state.brace_depth > 0 then process_rhyme_group_header state trimmed)",
          "else if state.in_characters_array then process_character_element state trimmed"
        ],
        "start_line": 228,
        "end_line": 236,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      }
    ],
    "2c0352ede9cd901e9952802ac5730164": [
      {
        "hash": "2c0352ede9cd901e9952802ac5730164",
        "text": "try\nignore (Str.search_forward (Str.regexp \"category\") line 0);\ntrue\nwith Not_found -> false\nin\nif contains_category then process_category_field state trimmed\nelse if state.brace_depth > 0 then process_rhyme_group_header state trimmed)\nelse if state.in_characters_array then process_character_element state trimmed",
        "lines": [
          "try",
          "ignore (Str.search_forward (Str.regexp \"category\") line 0);",
          "true",
          "with Not_found -> false",
          "in",
          "if contains_category then process_category_field state trimmed",
          "else if state.brace_depth > 0 then process_rhyme_group_header state trimmed)",
          "else if state.in_characters_array then process_character_element state trimmed"
        ],
        "start_line": 123,
        "end_line": 130,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_parser.ml"
      },
      {
        "hash": "2c0352ede9cd901e9952802ac5730164",
        "text": "try\nignore (Str.search_forward (Str.regexp \"category\") line 0);\ntrue\nwith Not_found -> false\nin\nif contains_category then process_category_field state trimmed\nelse if state.brace_depth > 0 then process_rhyme_group_header state trimmed)\nelse if state.in_characters_array then process_character_element state trimmed",
        "lines": [
          "try",
          "ignore (Str.search_forward (Str.regexp \"category\") line 0);",
          "true",
          "with Not_found -> false",
          "in",
          "if contains_category then process_category_field state trimmed",
          "else if state.brace_depth > 0 then process_rhyme_group_header state trimmed)",
          "else if state.in_characters_array then process_character_element state trimmed"
        ],
        "start_line": 229,
        "end_line": 236,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      }
    ],
    "81b68d0d3a8fc19bd672d084289649d8": [
      {
        "hash": "81b68d0d3a8fc19bd672d084289649d8",
        "text": "ignore (Str.search_forward (Str.regexp \"category\") line 0);\ntrue\nwith Not_found -> false\nin\nif contains_category then process_category_field state trimmed\nelse if state.brace_depth > 0 then process_rhyme_group_header state trimmed)\nelse if state.in_characters_array then process_character_element state trimmed",
        "lines": [
          "ignore (Str.search_forward (Str.regexp \"category\") line 0);",
          "true",
          "with Not_found -> false",
          "in",
          "if contains_category then process_category_field state trimmed",
          "else if state.brace_depth > 0 then process_rhyme_group_header state trimmed)",
          "else if state.in_characters_array then process_character_element state trimmed"
        ],
        "start_line": 124,
        "end_line": 130,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_parser.ml"
      },
      {
        "hash": "81b68d0d3a8fc19bd672d084289649d8",
        "text": "ignore (Str.search_forward (Str.regexp \"category\") line 0);\ntrue\nwith Not_found -> false\nin\nif contains_category then process_category_field state trimmed\nelse if state.brace_depth > 0 then process_rhyme_group_header state trimmed)\nelse if state.in_characters_array then process_character_element state trimmed",
        "lines": [
          "ignore (Str.search_forward (Str.regexp \"category\") line 0);",
          "true",
          "with Not_found -> false",
          "in",
          "if contains_category then process_category_field state trimmed",
          "else if state.brace_depth > 0 then process_rhyme_group_header state trimmed)",
          "else if state.in_characters_array then process_character_element state trimmed"
        ],
        "start_line": 230,
        "end_line": 236,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      }
    ],
    "7b31aee5667415d5321bc486c6eb2878": [
      {
        "hash": "7b31aee5667415d5321bc486c6eb2878",
        "text": "true\nwith Not_found -> false\nin\nif contains_category then process_category_field state trimmed\nelse if state.brace_depth > 0 then process_rhyme_group_header state trimmed)\nelse if state.in_characters_array then process_character_element state trimmed",
        "lines": [
          "true",
          "with Not_found -> false",
          "in",
          "if contains_category then process_category_field state trimmed",
          "else if state.brace_depth > 0 then process_rhyme_group_header state trimmed)",
          "else if state.in_characters_array then process_character_element state trimmed"
        ],
        "start_line": 125,
        "end_line": 130,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_parser.ml"
      },
      {
        "hash": "7b31aee5667415d5321bc486c6eb2878",
        "text": "true\nwith Not_found -> false\nin\nif contains_category then process_category_field state trimmed\nelse if state.brace_depth > 0 then process_rhyme_group_header state trimmed)\nelse if state.in_characters_array then process_character_element state trimmed",
        "lines": [
          "true",
          "with Not_found -> false",
          "in",
          "if contains_category then process_category_field state trimmed",
          "else if state.brace_depth > 0 then process_rhyme_group_header state trimmed)",
          "else if state.in_characters_array then process_character_element state trimmed"
        ],
        "start_line": 231,
        "end_line": 236,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      }
    ],
    "5bf43e10d8959775595094df7bf475b1": [
      {
        "hash": "5bf43e10d8959775595094df7bf475b1",
        "text": "with Not_found -> false\nin\nif contains_category then process_category_field state trimmed\nelse if state.brace_depth > 0 then process_rhyme_group_header state trimmed)\nelse if state.in_characters_array then process_character_element state trimmed",
        "lines": [
          "with Not_found -> false",
          "in",
          "if contains_category then process_category_field state trimmed",
          "else if state.brace_depth > 0 then process_rhyme_group_header state trimmed)",
          "else if state.in_characters_array then process_character_element state trimmed"
        ],
        "start_line": 126,
        "end_line": 130,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_parser.ml"
      },
      {
        "hash": "5bf43e10d8959775595094df7bf475b1",
        "text": "with Not_found -> false\nin\nif contains_category then process_category_field state trimmed\nelse if state.brace_depth > 0 then process_rhyme_group_header state trimmed)\nelse if state.in_characters_array then process_character_element state trimmed",
        "lines": [
          "with Not_found -> false",
          "in",
          "if contains_category then process_category_field state trimmed",
          "else if state.brace_depth > 0 then process_rhyme_group_header state trimmed)",
          "else if state.in_characters_array then process_character_element state trimmed"
        ],
        "start_line": 232,
        "end_line": 236,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      }
    ],
    "7ce5331153d030be77ab8b6e61ef38d8": [
      {
        "hash": "7ce5331153d030be77ab8b6e61ef38d8",
        "text": "in\nif contains_category then process_category_field state trimmed\nelse if state.brace_depth > 0 then process_rhyme_group_header state trimmed)\nelse if state.in_characters_array then process_character_element state trimmed",
        "lines": [
          "in",
          "if contains_category then process_category_field state trimmed",
          "else if state.brace_depth > 0 then process_rhyme_group_header state trimmed)",
          "else if state.in_characters_array then process_character_element state trimmed"
        ],
        "start_line": 127,
        "end_line": 130,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_parser.ml"
      },
      {
        "hash": "7ce5331153d030be77ab8b6e61ef38d8",
        "text": "in\nif contains_category then process_category_field state trimmed\nelse if state.brace_depth > 0 then process_rhyme_group_header state trimmed)\nelse if state.in_characters_array then process_character_element state trimmed",
        "lines": [
          "in",
          "if contains_category then process_category_field state trimmed",
          "else if state.brace_depth > 0 then process_rhyme_group_header state trimmed)",
          "else if state.in_characters_array then process_character_element state trimmed"
        ],
        "start_line": 233,
        "end_line": 236,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      }
    ],
    "b9673578c5f4e8ddff9e8bcd236da23c": [
      {
        "hash": "b9673578c5f4e8ddff9e8bcd236da23c",
        "text": "if contains_category then process_category_field state trimmed\nelse if state.brace_depth > 0 then process_rhyme_group_header state trimmed)\nelse if state.in_characters_array then process_character_element state trimmed",
        "lines": [
          "if contains_category then process_category_field state trimmed",
          "else if state.brace_depth > 0 then process_rhyme_group_header state trimmed)",
          "else if state.in_characters_array then process_character_element state trimmed"
        ],
        "start_line": 128,
        "end_line": 130,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_parser.ml"
      },
      {
        "hash": "b9673578c5f4e8ddff9e8bcd236da23c",
        "text": "if contains_category then process_category_field state trimmed\nelse if state.brace_depth > 0 then process_rhyme_group_header state trimmed)\nelse if state.in_characters_array then process_character_element state trimmed",
        "lines": [
          "if contains_category then process_category_field state trimmed",
          "else if state.brace_depth > 0 then process_rhyme_group_header state trimmed)",
          "else if state.in_characters_array then process_character_element state trimmed"
        ],
        "start_line": 234,
        "end_line": 236,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      }
    ],
    "6ab744a0ee350973a071ce01b2282876": [
      {
        "hash": "6ab744a0ee350973a071ce01b2282876",
        "text": "let parse_nested_json content =\nlet lines = String.split_on_char '\\n' content in\nlet state = create_parse_state () in",
        "lines": [
          "let parse_nested_json content =",
          "let lines = String.split_on_char '\\n' content in",
          "let state = create_parse_state () in"
        ],
        "start_line": 135,
        "end_line": 137,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_parser.ml"
      },
      {
        "hash": "6ab744a0ee350973a071ce01b2282876",
        "text": "let parse_nested_json content =\nlet lines = String.split_on_char '\\n' content in\nlet state = create_parse_state () in",
        "lines": [
          "let parse_nested_json content =",
          "let lines = String.split_on_char '\\n' content in",
          "let state = create_parse_state () in"
        ],
        "start_line": 239,
        "end_line": 241,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      }
    ],
    "6d0001bfec6eb384c1d437dd2cf04a92": [
      {
        "hash": "6d0001bfec6eb384c1d437dd2cf04a92",
        "text": "let imagery_score = evaluate_imagery verse_combined in\nlet rhythm_score = evaluate_rhythm verse_combined in\nlet elegance_score = evaluate_elegance verse_combined in",
        "lines": [
          "let imagery_score = evaluate_imagery verse_combined in",
          "let rhythm_score = evaluate_rhythm verse_combined in",
          "let elegance_score = evaluate_elegance verse_combined in"
        ],
        "start_line": 20,
        "end_line": 22,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/form_evaluators.ml"
      },
      {
        "hash": "6d0001bfec6eb384c1d437dd2cf04a92",
        "text": "let imagery_score = evaluate_imagery verse_combined in\nlet rhythm_score = evaluate_rhythm verse_combined in\nlet elegance_score = evaluate_elegance verse_combined in",
        "lines": [
          "let imagery_score = evaluate_imagery verse_combined in",
          "let rhythm_score = evaluate_rhythm verse_combined in",
          "let elegance_score = evaluate_elegance verse_combined in"
        ],
        "start_line": 56,
        "end_line": 58,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/form_evaluators.ml"
      },
      {
        "hash": "6d0001bfec6eb384c1d437dd2cf04a92",
        "text": "let imagery_score = evaluate_imagery verse_combined in\nlet rhythm_score = evaluate_rhythm verse_combined in\nlet elegance_score = evaluate_elegance verse_combined in",
        "lines": [
          "let imagery_score = evaluate_imagery verse_combined in",
          "let rhythm_score = evaluate_rhythm verse_combined in",
          "let elegance_score = evaluate_elegance verse_combined in"
        ],
        "start_line": 131,
        "end_line": 133,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/form_evaluators.ml"
      },
      {
        "hash": "6d0001bfec6eb384c1d437dd2cf04a92",
        "text": "let imagery_score = evaluate_imagery verse_combined in\nlet rhythm_score = evaluate_rhythm verse_combined in\nlet elegance_score = evaluate_elegance verse_combined in",
        "lines": [
          "let imagery_score = evaluate_imagery verse_combined in",
          "let rhythm_score = evaluate_rhythm verse_combined in",
          "let elegance_score = evaluate_elegance verse_combined in"
        ],
        "start_line": 170,
        "end_line": 172,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/form_evaluators.ml"
      }
    ],
    "9b980d3d9b9d3f9ff52f271cf67d3d06": [
      {
        "hash": "9b980d3d9b9d3f9ff52f271cf67d3d06",
        "text": "elegance_weight = 0.05;\n}\nin",
        "lines": [
          "elegance_weight = 0.05;",
          "}",
          "in"
        ],
        "start_line": 68,
        "end_line": 70,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/form_evaluators.ml"
      },
      {
        "hash": "9b980d3d9b9d3f9ff52f271cf67d3d06",
        "text": "elegance_weight = 0.05;\n}\nin",
        "lines": [
          "elegance_weight = 0.05;",
          "}",
          "in"
        ],
        "start_line": 183,
        "end_line": 185,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/form_evaluators.ml"
      }
    ],
    "6598b2f3c39e7007a01dd8d4d05e1380": [
      {
        "hash": "6598b2f3c39e7007a01dd8d4d05e1380",
        "text": "let scores =\n[\nreport.rhyme_score;\nreport.tone_score;\nreport.parallelism_score;\nreport.imagery_score;\nreport.rhythm_score;\nreport.elegance_score;\n]\nin",
        "lines": [
          "let scores =",
          "[",
          "report.rhyme_score;",
          "report.tone_score;",
          "report.parallelism_score;",
          "report.imagery_score;",
          "report.rhythm_score;",
          "report.elegance_score;",
          "]",
          "in"
        ],
        "start_line": 126,
        "end_line": 135,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/artistic_types.ml"
      },
      {
        "hash": "6598b2f3c39e7007a01dd8d4d05e1380",
        "text": "let scores =\n[\nreport.rhyme_score;\nreport.tone_score;\nreport.parallelism_score;\nreport.imagery_score;\nreport.rhythm_score;\nreport.elegance_score;\n]\nin",
        "lines": [
          "let scores =",
          "[",
          "report.rhyme_score;",
          "report.tone_score;",
          "report.parallelism_score;",
          "report.imagery_score;",
          "report.rhythm_score;",
          "report.elegance_score;",
          "]",
          "in"
        ],
        "start_line": 186,
        "end_line": 195,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/artistic_types.ml"
      }
    ],
    "43b84e6d63620b0f9ccb2ce006713407": [
      {
        "hash": "43b84e6d63620b0f9ccb2ce006713407",
        "text": "let utf8_to_char_list s =\nlet rec aux acc i =\nif i >= String.length s then List.rev acc else aux (String.make 1 s.[i] :: acc) (i + 1)\nin\naux [] 0",
        "lines": [
          "let utf8_to_char_list s =",
          "let rec aux acc i =",
          "if i >= String.length s then List.rev acc else aux (String.make 1 s.[i] :: acc) (i + 1)",
          "in",
          "aux [] 0"
        ],
        "start_line": 11,
        "end_line": 15,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_pattern.ml"
      },
      {
        "hash": "43b84e6d63620b0f9ccb2ce006713407",
        "text": "let utf8_to_char_list s =\nlet rec aux acc i =\nif i >= String.length s then List.rev acc else aux (String.make 1 s.[i] :: acc) (i + 1)\nin\naux [] 0",
        "lines": [
          "let utf8_to_char_list s =",
          "let rec aux acc i =",
          "if i >= String.length s then List.rev acc else aux (String.make 1 s.[i] :: acc) (i + 1)",
          "in",
          "aux [] 0"
        ],
        "start_line": 15,
        "end_line": 19,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_analysis.ml"
      }
    ],
    "10d4b9d984768a97343e40820f7d7940": [
      {
        "hash": "10d4b9d984768a97343e40820f7d7940",
        "text": "let rec aux acc i =\nif i >= String.length s then List.rev acc else aux (String.make 1 s.[i] :: acc) (i + 1)\nin\naux [] 0",
        "lines": [
          "let rec aux acc i =",
          "if i >= String.length s then List.rev acc else aux (String.make 1 s.[i] :: acc) (i + 1)",
          "in",
          "aux [] 0"
        ],
        "start_line": 12,
        "end_line": 15,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_pattern.ml"
      },
      {
        "hash": "10d4b9d984768a97343e40820f7d7940",
        "text": "let rec aux acc i =\nif i >= String.length s then List.rev acc else aux (String.make 1 s.[i] :: acc) (i + 1)\nin\naux [] 0",
        "lines": [
          "let rec aux acc i =",
          "if i >= String.length s then List.rev acc else aux (String.make 1 s.[i] :: acc) (i + 1)",
          "in",
          "aux [] 0"
        ],
        "start_line": 16,
        "end_line": 19,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_analysis.ml"
      }
    ],
    "21db547e535f3f7ec6212814d68c6714": [
      {
        "hash": "21db547e535f3f7ec6212814d68c6714",
        "text": "if i >= String.length s then List.rev acc else aux (String.make 1 s.[i] :: acc) (i + 1)\nin\naux [] 0",
        "lines": [
          "if i >= String.length s then List.rev acc else aux (String.make 1 s.[i] :: acc) (i + 1)",
          "in",
          "aux [] 0"
        ],
        "start_line": 13,
        "end_line": 15,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_pattern.ml"
      },
      {
        "hash": "21db547e535f3f7ec6212814d68c6714",
        "text": "if i >= String.length s then List.rev acc else aux (String.make 1 s.[i] :: acc) (i + 1)\nin\naux [] 0",
        "lines": [
          "if i >= String.length s then List.rev acc else aux (String.make 1 s.[i] :: acc) (i + 1)",
          "in",
          "aux [] 0"
        ],
        "start_line": 17,
        "end_line": 19,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_analysis.ml"
      }
    ],
    "d1e950e4336aff2208fbfaf54f553edd": [
      {
        "hash": "d1e950e4336aff2208fbfaf54f553edd",
        "text": "(* 提取韵脚：从字符串中提取韵脚字符\n句末之字，谓之韵脚。提取韵脚，以验押韵。\n*)\nlet extract_rhyme_ending verse =\nlet chars = utf8_to_char_list verse in\nmatch List.rev chars with\n| [] -> None\n| last_char :: _ -> if String.length last_char > 0 then Some last_char.[0] else None",
        "lines": [
          "(* 提取韵脚：从字符串中提取韵脚字符",
          "句末之字，谓之韵脚。提取韵脚，以验押韵。",
          "*)",
          "let extract_rhyme_ending verse =",
          "let chars = utf8_to_char_list verse in",
          "match List.rev chars with",
          "| [] -> None",
          "| last_char :: _ -> if String.length last_char > 0 then Some last_char.[0] else None"
        ],
        "start_line": 17,
        "end_line": 24,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_pattern.ml"
      },
      {
        "hash": "d1e950e4336aff2208fbfaf54f553edd",
        "text": "(* 提取韵脚：从字符串中提取韵脚字符\n句末之字，谓之韵脚。提取韵脚，以验押韵。\n*)\nlet extract_rhyme_ending verse =\nlet chars = utf8_to_char_list verse in\nmatch List.rev chars with\n| [] -> None\n| last_char :: _ -> if String.length last_char > 0 then Some last_char.[0] else None",
        "lines": [
          "(* 提取韵脚：从字符串中提取韵脚字符",
          "句末之字，谓之韵脚。提取韵脚，以验押韵。",
          "*)",
          "let extract_rhyme_ending verse =",
          "let chars = utf8_to_char_list verse in",
          "match List.rev chars with",
          "| [] -> None",
          "| last_char :: _ -> if String.length last_char > 0 then Some last_char.[0] else None"
        ],
        "start_line": 66,
        "end_line": 73,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_detection.ml"
      }
    ],
    "14b3cbe931d45a0cef14bb557286c3f5": [
      {
        "hash": "14b3cbe931d45a0cef14bb557286c3f5",
        "text": "句末之字，谓之韵脚。提取韵脚，以验押韵。\n*)\nlet extract_rhyme_ending verse =\nlet chars = utf8_to_char_list verse in\nmatch List.rev chars with\n| [] -> None\n| last_char :: _ -> if String.length last_char > 0 then Some last_char.[0] else None",
        "lines": [
          "句末之字，谓之韵脚。提取韵脚，以验押韵。",
          "*)",
          "let extract_rhyme_ending verse =",
          "let chars = utf8_to_char_list verse in",
          "match List.rev chars with",
          "| [] -> None",
          "| last_char :: _ -> if String.length last_char > 0 then Some last_char.[0] else None"
        ],
        "start_line": 18,
        "end_line": 24,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_pattern.ml"
      },
      {
        "hash": "14b3cbe931d45a0cef14bb557286c3f5",
        "text": "句末之字，谓之韵脚。提取韵脚，以验押韵。\n*)\nlet extract_rhyme_ending verse =\nlet chars = utf8_to_char_list verse in\nmatch List.rev chars with\n| [] -> None\n| last_char :: _ -> if String.length last_char > 0 then Some last_char.[0] else None",
        "lines": [
          "句末之字，谓之韵脚。提取韵脚，以验押韵。",
          "*)",
          "let extract_rhyme_ending verse =",
          "let chars = utf8_to_char_list verse in",
          "match List.rev chars with",
          "| [] -> None",
          "| last_char :: _ -> if String.length last_char > 0 then Some last_char.[0] else None"
        ],
        "start_line": 67,
        "end_line": 73,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_detection.ml"
      }
    ],
    "4df76e7613a3ecc9584492f28675609d": [
      {
        "hash": "4df76e7613a3ecc9584492f28675609d",
        "text": "*)\nlet extract_rhyme_ending verse =\nlet chars = utf8_to_char_list verse in\nmatch List.rev chars with\n| [] -> None\n| last_char :: _ -> if String.length last_char > 0 then Some last_char.[0] else None",
        "lines": [
          "*)",
          "let extract_rhyme_ending verse =",
          "let chars = utf8_to_char_list verse in",
          "match List.rev chars with",
          "| [] -> None",
          "| last_char :: _ -> if String.length last_char > 0 then Some last_char.[0] else None"
        ],
        "start_line": 19,
        "end_line": 24,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_pattern.ml"
      },
      {
        "hash": "4df76e7613a3ecc9584492f28675609d",
        "text": "*)\nlet extract_rhyme_ending verse =\nlet chars = utf8_to_char_list verse in\nmatch List.rev chars with\n| [] -> None\n| last_char :: _ -> if String.length last_char > 0 then Some last_char.[0] else None",
        "lines": [
          "*)",
          "let extract_rhyme_ending verse =",
          "let chars = utf8_to_char_list verse in",
          "match List.rev chars with",
          "| [] -> None",
          "| last_char :: _ -> if String.length last_char > 0 then Some last_char.[0] else None"
        ],
        "start_line": 68,
        "end_line": 73,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_detection.ml"
      }
    ],
    "aabebf43de2a3c79f4a45440d295ea04": [
      {
        "hash": "aabebf43de2a3c79f4a45440d295ea04",
        "text": "let extract_rhyme_ending verse =\nlet chars = utf8_to_char_list verse in\nmatch List.rev chars with\n| [] -> None\n| last_char :: _ -> if String.length last_char > 0 then Some last_char.[0] else None",
        "lines": [
          "let extract_rhyme_ending verse =",
          "let chars = utf8_to_char_list verse in",
          "match List.rev chars with",
          "| [] -> None",
          "| last_char :: _ -> if String.length last_char > 0 then Some last_char.[0] else None"
        ],
        "start_line": 20,
        "end_line": 24,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_pattern.ml"
      },
      {
        "hash": "aabebf43de2a3c79f4a45440d295ea04",
        "text": "let extract_rhyme_ending verse =\nlet chars = utf8_to_char_list verse in\nmatch List.rev chars with\n| [] -> None\n| last_char :: _ -> if String.length last_char > 0 then Some last_char.[0] else None",
        "lines": [
          "let extract_rhyme_ending verse =",
          "let chars = utf8_to_char_list verse in",
          "match List.rev chars with",
          "| [] -> None",
          "| last_char :: _ -> if String.length last_char > 0 then Some last_char.[0] else None"
        ],
        "start_line": 69,
        "end_line": 73,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_detection.ml"
      }
    ],
    "b92dd6af34c4f2ee57a5dd77c8c1a82c": [
      {
        "hash": "b92dd6af34c4f2ee57a5dd77c8c1a82c",
        "text": "let chars = utf8_to_char_list verse in\nmatch List.rev chars with\n| [] -> None\n| last_char :: _ -> if String.length last_char > 0 then Some last_char.[0] else None",
        "lines": [
          "let chars = utf8_to_char_list verse in",
          "match List.rev chars with",
          "| [] -> None",
          "| last_char :: _ -> if String.length last_char > 0 then Some last_char.[0] else None"
        ],
        "start_line": 21,
        "end_line": 24,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_pattern.ml"
      },
      {
        "hash": "b92dd6af34c4f2ee57a5dd77c8c1a82c",
        "text": "let chars = utf8_to_char_list verse in\nmatch List.rev chars with\n| [] -> None\n| last_char :: _ -> if String.length last_char > 0 then Some last_char.[0] else None",
        "lines": [
          "let chars = utf8_to_char_list verse in",
          "match List.rev chars with",
          "| [] -> None",
          "| last_char :: _ -> if String.length last_char > 0 then Some last_char.[0] else None"
        ],
        "start_line": 70,
        "end_line": 73,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_detection.ml"
      }
    ],
    "2a8aee7d1f99ce7ca4e5e96a2d76a258": [
      {
        "hash": "2a8aee7d1f99ce7ca4e5e96a2d76a258",
        "text": "match List.rev chars with\n| [] -> None\n| last_char :: _ -> if String.length last_char > 0 then Some last_char.[0] else None",
        "lines": [
          "match List.rev chars with",
          "| [] -> None",
          "| last_char :: _ -> if String.length last_char > 0 then Some last_char.[0] else None"
        ],
        "start_line": 22,
        "end_line": 24,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_pattern.ml"
      },
      {
        "hash": "2a8aee7d1f99ce7ca4e5e96a2d76a258",
        "text": "match List.rev chars with\n| [] -> None\n| last_char :: _ -> if String.length last_char > 0 then Some last_char.[0] else None",
        "lines": [
          "match List.rev chars with",
          "| [] -> None",
          "| last_char :: _ -> if String.length last_char > 0 then Some last_char.[0] else None"
        ],
        "start_line": 71,
        "end_line": 73,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_detection.ml"
      }
    ],
    "88b06f932d9a335c51de7dcada9d3b89": [
      {
        "hash": "88b06f932d9a335c51de7dcada9d3b89",
        "text": "let generate_rhyme_report verse =\nlet rhyme_ending = extract_rhyme_ending verse in\nlet rhyme_group =\nmatch rhyme_ending with\n| Some char -> Rhyme_matching.detect_rhyme_group char\n| None -> UnknownRhyme\nin\nlet rhyme_category =\nmatch rhyme_ending with\n| Some char -> Rhyme_matching.detect_rhyme_category char",
        "lines": [
          "let generate_rhyme_report verse =",
          "let rhyme_ending = extract_rhyme_ending verse in",
          "let rhyme_group =",
          "match rhyme_ending with",
          "| Some char -> Rhyme_matching.detect_rhyme_group char",
          "| None -> UnknownRhyme",
          "in",
          "let rhyme_category =",
          "match rhyme_ending with",
          "| Some char -> Rhyme_matching.detect_rhyme_category char"
        ],
        "start_line": 86,
        "end_line": 95,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_pattern.ml"
      },
      {
        "hash": "88b06f932d9a335c51de7dcada9d3b89",
        "text": "let generate_rhyme_report verse =\nlet rhyme_ending = extract_rhyme_ending verse in\nlet rhyme_group =\nmatch rhyme_ending with\n| Some char -> Rhyme_matching.detect_rhyme_group char\n| None -> UnknownRhyme\nin\nlet rhyme_category =\nmatch rhyme_ending with\n| Some char -> Rhyme_matching.detect_rhyme_category char",
        "lines": [
          "let generate_rhyme_report verse =",
          "let rhyme_ending = extract_rhyme_ending verse in",
          "let rhyme_group =",
          "match rhyme_ending with",
          "| Some char -> Rhyme_matching.detect_rhyme_group char",
          "| None -> UnknownRhyme",
          "in",
          "let rhyme_category =",
          "match rhyme_ending with",
          "| Some char -> Rhyme_matching.detect_rhyme_category char"
        ],
        "start_line": 37,
        "end_line": 46,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_analysis.ml"
      }
    ],
    "06920d1305816ac57f1e3dbbbbf831a7": [
      {
        "hash": "06920d1305816ac57f1e3dbbbbf831a7",
        "text": "let rhyme_ending = extract_rhyme_ending verse in\nlet rhyme_group =\nmatch rhyme_ending with\n| Some char -> Rhyme_matching.detect_rhyme_group char\n| None -> UnknownRhyme\nin\nlet rhyme_category =\nmatch rhyme_ending with\n| Some char -> Rhyme_matching.detect_rhyme_category char\n| None -> PingSheng",
        "lines": [
          "let rhyme_ending = extract_rhyme_ending verse in",
          "let rhyme_group =",
          "match rhyme_ending with",
          "| Some char -> Rhyme_matching.detect_rhyme_group char",
          "| None -> UnknownRhyme",
          "in",
          "let rhyme_category =",
          "match rhyme_ending with",
          "| Some char -> Rhyme_matching.detect_rhyme_category char",
          "| None -> PingSheng"
        ],
        "start_line": 87,
        "end_line": 96,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_pattern.ml"
      },
      {
        "hash": "06920d1305816ac57f1e3dbbbbf831a7",
        "text": "let rhyme_ending = extract_rhyme_ending verse in\nlet rhyme_group =\nmatch rhyme_ending with\n| Some char -> Rhyme_matching.detect_rhyme_group char\n| None -> UnknownRhyme\nin\nlet rhyme_category =\nmatch rhyme_ending with\n| Some char -> Rhyme_matching.detect_rhyme_category char\n| None -> PingSheng",
        "lines": [
          "let rhyme_ending = extract_rhyme_ending verse in",
          "let rhyme_group =",
          "match rhyme_ending with",
          "| Some char -> Rhyme_matching.detect_rhyme_group char",
          "| None -> UnknownRhyme",
          "in",
          "let rhyme_category =",
          "match rhyme_ending with",
          "| Some char -> Rhyme_matching.detect_rhyme_category char",
          "| None -> PingSheng"
        ],
        "start_line": 38,
        "end_line": 47,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_analysis.ml"
      }
    ],
    "31e30f93c2c6bccda7744088b85e37bf": [
      {
        "hash": "31e30f93c2c6bccda7744088b85e37bf",
        "text": "let rhyme_group =\nmatch rhyme_ending with\n| Some char -> Rhyme_matching.detect_rhyme_group char\n| None -> UnknownRhyme\nin\nlet rhyme_category =\nmatch rhyme_ending with\n| Some char -> Rhyme_matching.detect_rhyme_category char\n| None -> PingSheng\nin",
        "lines": [
          "let rhyme_group =",
          "match rhyme_ending with",
          "| Some char -> Rhyme_matching.detect_rhyme_group char",
          "| None -> UnknownRhyme",
          "in",
          "let rhyme_category =",
          "match rhyme_ending with",
          "| Some char -> Rhyme_matching.detect_rhyme_category char",
          "| None -> PingSheng",
          "in"
        ],
        "start_line": 88,
        "end_line": 97,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_pattern.ml"
      },
      {
        "hash": "31e30f93c2c6bccda7744088b85e37bf",
        "text": "let rhyme_group =\nmatch rhyme_ending with\n| Some char -> Rhyme_matching.detect_rhyme_group char\n| None -> UnknownRhyme\nin\nlet rhyme_category =\nmatch rhyme_ending with\n| Some char -> Rhyme_matching.detect_rhyme_category char\n| None -> PingSheng\nin",
        "lines": [
          "let rhyme_group =",
          "match rhyme_ending with",
          "| Some char -> Rhyme_matching.detect_rhyme_group char",
          "| None -> UnknownRhyme",
          "in",
          "let rhyme_category =",
          "match rhyme_ending with",
          "| Some char -> Rhyme_matching.detect_rhyme_category char",
          "| None -> PingSheng",
          "in"
        ],
        "start_line": 39,
        "end_line": 48,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_analysis.ml"
      }
    ],
    "6cd7b3df78d468ac7761613d8455e5c0": [
      {
        "hash": "6cd7b3df78d468ac7761613d8455e5c0",
        "text": "match rhyme_ending with\n| Some char -> Rhyme_matching.detect_rhyme_group char\n| None -> UnknownRhyme\nin\nlet rhyme_category =\nmatch rhyme_ending with\n| Some char -> Rhyme_matching.detect_rhyme_category char\n| None -> PingSheng\nin\nlet chars = utf8_to_char_list verse in",
        "lines": [
          "match rhyme_ending with",
          "| Some char -> Rhyme_matching.detect_rhyme_group char",
          "| None -> UnknownRhyme",
          "in",
          "let rhyme_category =",
          "match rhyme_ending with",
          "| Some char -> Rhyme_matching.detect_rhyme_category char",
          "| None -> PingSheng",
          "in",
          "let chars = utf8_to_char_list verse in"
        ],
        "start_line": 89,
        "end_line": 98,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_pattern.ml"
      },
      {
        "hash": "6cd7b3df78d468ac7761613d8455e5c0",
        "text": "match rhyme_ending with\n| Some char -> Rhyme_matching.detect_rhyme_group char\n| None -> UnknownRhyme\nin\nlet rhyme_category =\nmatch rhyme_ending with\n| Some char -> Rhyme_matching.detect_rhyme_category char\n| None -> PingSheng\nin\nlet chars = utf8_to_char_list verse in",
        "lines": [
          "match rhyme_ending with",
          "| Some char -> Rhyme_matching.detect_rhyme_group char",
          "| None -> UnknownRhyme",
          "in",
          "let rhyme_category =",
          "match rhyme_ending with",
          "| Some char -> Rhyme_matching.detect_rhyme_category char",
          "| None -> PingSheng",
          "in",
          "let chars = utf8_to_char_list verse in"
        ],
        "start_line": 40,
        "end_line": 49,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_analysis.ml"
      }
    ],
    "6e6d68f6bafc949916db876521f38aa8": [
      {
        "hash": "6e6d68f6bafc949916db876521f38aa8",
        "text": "| Some char -> Rhyme_matching.detect_rhyme_group char\n| None -> UnknownRhyme\nin\nlet rhyme_category =\nmatch rhyme_ending with\n| Some char -> Rhyme_matching.detect_rhyme_category char\n| None -> PingSheng\nin\nlet chars = utf8_to_char_list verse in\nlet char_analysis =",
        "lines": [
          "| Some char -> Rhyme_matching.detect_rhyme_group char",
          "| None -> UnknownRhyme",
          "in",
          "let rhyme_category =",
          "match rhyme_ending with",
          "| Some char -> Rhyme_matching.detect_rhyme_category char",
          "| None -> PingSheng",
          "in",
          "let chars = utf8_to_char_list verse in",
          "let char_analysis ="
        ],
        "start_line": 90,
        "end_line": 99,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_pattern.ml"
      },
      {
        "hash": "6e6d68f6bafc949916db876521f38aa8",
        "text": "| Some char -> Rhyme_matching.detect_rhyme_group char\n| None -> UnknownRhyme\nin\nlet rhyme_category =\nmatch rhyme_ending with\n| Some char -> Rhyme_matching.detect_rhyme_category char\n| None -> PingSheng\nin\nlet chars = utf8_to_char_list verse in\nlet char_analysis =",
        "lines": [
          "| Some char -> Rhyme_matching.detect_rhyme_group char",
          "| None -> UnknownRhyme",
          "in",
          "let rhyme_category =",
          "match rhyme_ending with",
          "| Some char -> Rhyme_matching.detect_rhyme_category char",
          "| None -> PingSheng",
          "in",
          "let chars = utf8_to_char_list verse in",
          "let char_analysis ="
        ],
        "start_line": 41,
        "end_line": 50,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_analysis.ml"
      }
    ],
    "d4abb5a43ffa943ddc14d2024b154228": [
      {
        "hash": "d4abb5a43ffa943ddc14d2024b154228",
        "text": "| None -> UnknownRhyme\nin\nlet rhyme_category =\nmatch rhyme_ending with\n| Some char -> Rhyme_matching.detect_rhyme_category char\n| None -> PingSheng\nin\nlet chars = utf8_to_char_list verse in\nlet char_analysis =\nList.map",
        "lines": [
          "| None -> UnknownRhyme",
          "in",
          "let rhyme_category =",
          "match rhyme_ending with",
          "| Some char -> Rhyme_matching.detect_rhyme_category char",
          "| None -> PingSheng",
          "in",
          "let chars = utf8_to_char_list verse in",
          "let char_analysis =",
          "List.map"
        ],
        "start_line": 91,
        "end_line": 100,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_pattern.ml"
      },
      {
        "hash": "d4abb5a43ffa943ddc14d2024b154228",
        "text": "| None -> UnknownRhyme\nin\nlet rhyme_category =\nmatch rhyme_ending with\n| Some char -> Rhyme_matching.detect_rhyme_category char\n| None -> PingSheng\nin\nlet chars = utf8_to_char_list verse in\nlet char_analysis =\nList.map",
        "lines": [
          "| None -> UnknownRhyme",
          "in",
          "let rhyme_category =",
          "match rhyme_ending with",
          "| Some char -> Rhyme_matching.detect_rhyme_category char",
          "| None -> PingSheng",
          "in",
          "let chars = utf8_to_char_list verse in",
          "let char_analysis =",
          "List.map"
        ],
        "start_line": 42,
        "end_line": 51,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_analysis.ml"
      }
    ],
    "d79082843194a460ff39e9f15f97ae51": [
      {
        "hash": "d79082843194a460ff39e9f15f97ae51",
        "text": "in\nlet rhyme_category =\nmatch rhyme_ending with\n| Some char -> Rhyme_matching.detect_rhyme_category char\n| None -> PingSheng\nin\nlet chars = utf8_to_char_list verse in\nlet char_analysis =\nList.map\n(fun char_str ->",
        "lines": [
          "in",
          "let rhyme_category =",
          "match rhyme_ending with",
          "| Some char -> Rhyme_matching.detect_rhyme_category char",
          "| None -> PingSheng",
          "in",
          "let chars = utf8_to_char_list verse in",
          "let char_analysis =",
          "List.map",
          "(fun char_str ->"
        ],
        "start_line": 92,
        "end_line": 101,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_pattern.ml"
      },
      {
        "hash": "d79082843194a460ff39e9f15f97ae51",
        "text": "in\nlet rhyme_category =\nmatch rhyme_ending with\n| Some char -> Rhyme_matching.detect_rhyme_category char\n| None -> PingSheng\nin\nlet chars = utf8_to_char_list verse in\nlet char_analysis =\nList.map\n(fun char_str ->",
        "lines": [
          "in",
          "let rhyme_category =",
          "match rhyme_ending with",
          "| Some char -> Rhyme_matching.detect_rhyme_category char",
          "| None -> PingSheng",
          "in",
          "let chars = utf8_to_char_list verse in",
          "let char_analysis =",
          "List.map",
          "(fun char_str ->"
        ],
        "start_line": 43,
        "end_line": 52,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_analysis.ml"
      }
    ],
    "51c149478f54ff519d184c1ea0a04786": [
      {
        "hash": "51c149478f54ff519d184c1ea0a04786",
        "text": "let rhyme_category =\nmatch rhyme_ending with\n| Some char -> Rhyme_matching.detect_rhyme_category char\n| None -> PingSheng\nin\nlet chars = utf8_to_char_list verse in\nlet char_analysis =\nList.map\n(fun char_str ->\nlet char = if String.length char_str > 0 then char_str.[0] else '?' in",
        "lines": [
          "let rhyme_category =",
          "match rhyme_ending with",
          "| Some char -> Rhyme_matching.detect_rhyme_category char",
          "| None -> PingSheng",
          "in",
          "let chars = utf8_to_char_list verse in",
          "let char_analysis =",
          "List.map",
          "(fun char_str ->",
          "let char = if String.length char_str > 0 then char_str.[0] else '?' in"
        ],
        "start_line": 93,
        "end_line": 102,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_pattern.ml"
      },
      {
        "hash": "51c149478f54ff519d184c1ea0a04786",
        "text": "let rhyme_category =\nmatch rhyme_ending with\n| Some char -> Rhyme_matching.detect_rhyme_category char\n| None -> PingSheng\nin\nlet chars = utf8_to_char_list verse in\nlet char_analysis =\nList.map\n(fun char_str ->\nlet char = if String.length char_str > 0 then char_str.[0] else '?' in",
        "lines": [
          "let rhyme_category =",
          "match rhyme_ending with",
          "| Some char -> Rhyme_matching.detect_rhyme_category char",
          "| None -> PingSheng",
          "in",
          "let chars = utf8_to_char_list verse in",
          "let char_analysis =",
          "List.map",
          "(fun char_str ->",
          "let char = if String.length char_str > 0 then char_str.[0] else '?' in"
        ],
        "start_line": 44,
        "end_line": 53,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_analysis.ml"
      }
    ],
    "49063c5a8e686d2bed511cd920197086": [
      {
        "hash": "49063c5a8e686d2bed511cd920197086",
        "text": "match rhyme_ending with\n| Some char -> Rhyme_matching.detect_rhyme_category char\n| None -> PingSheng\nin\nlet chars = utf8_to_char_list verse in\nlet char_analysis =\nList.map\n(fun char_str ->\nlet char = if String.length char_str > 0 then char_str.[0] else '?' in\n(char, Rhyme_matching.detect_rhyme_category char, Rhyme_matching.detect_rhyme_group char))",
        "lines": [
          "match rhyme_ending with",
          "| Some char -> Rhyme_matching.detect_rhyme_category char",
          "| None -> PingSheng",
          "in",
          "let chars = utf8_to_char_list verse in",
          "let char_analysis =",
          "List.map",
          "(fun char_str ->",
          "let char = if String.length char_str > 0 then char_str.[0] else '?' in",
          "(char, Rhyme_matching.detect_rhyme_category char, Rhyme_matching.detect_rhyme_group char))"
        ],
        "start_line": 94,
        "end_line": 103,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_pattern.ml"
      },
      {
        "hash": "49063c5a8e686d2bed511cd920197086",
        "text": "match rhyme_ending with\n| Some char -> Rhyme_matching.detect_rhyme_category char\n| None -> PingSheng\nin\nlet chars = utf8_to_char_list verse in\nlet char_analysis =\nList.map\n(fun char_str ->\nlet char = if String.length char_str > 0 then char_str.[0] else '?' in\n(char, Rhyme_matching.detect_rhyme_category char, Rhyme_matching.detect_rhyme_group char))",
        "lines": [
          "match rhyme_ending with",
          "| Some char -> Rhyme_matching.detect_rhyme_category char",
          "| None -> PingSheng",
          "in",
          "let chars = utf8_to_char_list verse in",
          "let char_analysis =",
          "List.map",
          "(fun char_str ->",
          "let char = if String.length char_str > 0 then char_str.[0] else '?' in",
          "(char, Rhyme_matching.detect_rhyme_category char, Rhyme_matching.detect_rhyme_group char))"
        ],
        "start_line": 45,
        "end_line": 54,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_analysis.ml"
      }
    ],
    "bae75e71e79feff021c510d123c8019e": [
      {
        "hash": "bae75e71e79feff021c510d123c8019e",
        "text": "| Some char -> Rhyme_matching.detect_rhyme_category char\n| None -> PingSheng\nin\nlet chars = utf8_to_char_list verse in\nlet char_analysis =\nList.map\n(fun char_str ->\nlet char = if String.length char_str > 0 then char_str.[0] else '?' in\n(char, Rhyme_matching.detect_rhyme_category char, Rhyme_matching.detect_rhyme_group char))\nchars",
        "lines": [
          "| Some char -> Rhyme_matching.detect_rhyme_category char",
          "| None -> PingSheng",
          "in",
          "let chars = utf8_to_char_list verse in",
          "let char_analysis =",
          "List.map",
          "(fun char_str ->",
          "let char = if String.length char_str > 0 then char_str.[0] else '?' in",
          "(char, Rhyme_matching.detect_rhyme_category char, Rhyme_matching.detect_rhyme_group char))",
          "chars"
        ],
        "start_line": 95,
        "end_line": 104,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_pattern.ml"
      },
      {
        "hash": "bae75e71e79feff021c510d123c8019e",
        "text": "| Some char -> Rhyme_matching.detect_rhyme_category char\n| None -> PingSheng\nin\nlet chars = utf8_to_char_list verse in\nlet char_analysis =\nList.map\n(fun char_str ->\nlet char = if String.length char_str > 0 then char_str.[0] else '?' in\n(char, Rhyme_matching.detect_rhyme_category char, Rhyme_matching.detect_rhyme_group char))\nchars",
        "lines": [
          "| Some char -> Rhyme_matching.detect_rhyme_category char",
          "| None -> PingSheng",
          "in",
          "let chars = utf8_to_char_list verse in",
          "let char_analysis =",
          "List.map",
          "(fun char_str ->",
          "let char = if String.length char_str > 0 then char_str.[0] else '?' in",
          "(char, Rhyme_matching.detect_rhyme_category char, Rhyme_matching.detect_rhyme_group char))",
          "chars"
        ],
        "start_line": 46,
        "end_line": 55,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_analysis.ml"
      }
    ],
    "4d6d87a1b97ee7288a43ea4a5af9c8b3": [
      {
        "hash": "4d6d87a1b97ee7288a43ea4a5af9c8b3",
        "text": "| None -> PingSheng\nin\nlet chars = utf8_to_char_list verse in\nlet char_analysis =\nList.map\n(fun char_str ->\nlet char = if String.length char_str > 0 then char_str.[0] else '?' in\n(char, Rhyme_matching.detect_rhyme_category char, Rhyme_matching.detect_rhyme_group char))\nchars\nin",
        "lines": [
          "| None -> PingSheng",
          "in",
          "let chars = utf8_to_char_list verse in",
          "let char_analysis =",
          "List.map",
          "(fun char_str ->",
          "let char = if String.length char_str > 0 then char_str.[0] else '?' in",
          "(char, Rhyme_matching.detect_rhyme_category char, Rhyme_matching.detect_rhyme_group char))",
          "chars",
          "in"
        ],
        "start_line": 96,
        "end_line": 105,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_pattern.ml"
      },
      {
        "hash": "4d6d87a1b97ee7288a43ea4a5af9c8b3",
        "text": "| None -> PingSheng\nin\nlet chars = utf8_to_char_list verse in\nlet char_analysis =\nList.map\n(fun char_str ->\nlet char = if String.length char_str > 0 then char_str.[0] else '?' in\n(char, Rhyme_matching.detect_rhyme_category char, Rhyme_matching.detect_rhyme_group char))\nchars\nin",
        "lines": [
          "| None -> PingSheng",
          "in",
          "let chars = utf8_to_char_list verse in",
          "let char_analysis =",
          "List.map",
          "(fun char_str ->",
          "let char = if String.length char_str > 0 then char_str.[0] else '?' in",
          "(char, Rhyme_matching.detect_rhyme_category char, Rhyme_matching.detect_rhyme_group char))",
          "chars",
          "in"
        ],
        "start_line": 47,
        "end_line": 56,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_analysis.ml"
      }
    ],
    "5e2c537f903ab8006fa638b67ec51279": [
      {
        "hash": "5e2c537f903ab8006fa638b67ec51279",
        "text": "type quick_diagnosis = {\nconsistency : bool;\nquality_score : float;\nquality_grade : string;\npattern_type : string option;\ndiagnosis : string;\n}",
        "lines": [
          "type quick_diagnosis = {",
          "consistency : bool;",
          "quality_score : float;",
          "quality_grade : string;",
          "pattern_type : string option;",
          "diagnosis : string;",
          "}"
        ],
        "start_line": 206,
        "end_line": 212,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_rhyme_core.ml"
      },
      {
        "hash": "5e2c537f903ab8006fa638b67ec51279",
        "text": "type quick_diagnosis = {\nconsistency : bool;\nquality_score : float;\nquality_grade : string;\npattern_type : string option;\ndiagnosis : string;\n}",
        "lines": [
          "type quick_diagnosis = {",
          "consistency : bool;",
          "quality_score : float;",
          "quality_grade : string;",
          "pattern_type : string option;",
          "diagnosis : string;",
          "}"
        ],
        "start_line": 136,
        "end_line": 142,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_analysis.ml"
      }
    ],
    "f889d904a1905d51dedc218230c04cc9": [
      {
        "hash": "f889d904a1905d51dedc218230c04cc9",
        "text": "consistency : bool;\nquality_score : float;\nquality_grade : string;\npattern_type : string option;\ndiagnosis : string;\n}",
        "lines": [
          "consistency : bool;",
          "quality_score : float;",
          "quality_grade : string;",
          "pattern_type : string option;",
          "diagnosis : string;",
          "}"
        ],
        "start_line": 207,
        "end_line": 212,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_rhyme_core.ml"
      },
      {
        "hash": "f889d904a1905d51dedc218230c04cc9",
        "text": "consistency : bool;\nquality_score : float;\nquality_grade : string;\npattern_type : string option;\ndiagnosis : string;\n}",
        "lines": [
          "consistency : bool;",
          "quality_score : float;",
          "quality_grade : string;",
          "pattern_type : string option;",
          "diagnosis : string;",
          "}"
        ],
        "start_line": 137,
        "end_line": 142,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_analysis.ml"
      }
    ],
    "3bdc0474589d3586178a10466cfd00c9": [
      {
        "hash": "3bdc0474589d3586178a10466cfd00c9",
        "text": "quality_score : float;\nquality_grade : string;\npattern_type : string option;\ndiagnosis : string;\n}",
        "lines": [
          "quality_score : float;",
          "quality_grade : string;",
          "pattern_type : string option;",
          "diagnosis : string;",
          "}"
        ],
        "start_line": 208,
        "end_line": 212,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_rhyme_core.ml"
      },
      {
        "hash": "3bdc0474589d3586178a10466cfd00c9",
        "text": "quality_score : float;\nquality_grade : string;\npattern_type : string option;\ndiagnosis : string;\n}",
        "lines": [
          "quality_score : float;",
          "quality_grade : string;",
          "pattern_type : string option;",
          "diagnosis : string;",
          "}"
        ],
        "start_line": 138,
        "end_line": 142,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_analysis.ml"
      }
    ],
    "8325bd2dba6ddbeb5834d62d0dec186a": [
      {
        "hash": "8325bd2dba6ddbeb5834d62d0dec186a",
        "text": "quality_grade : string;\npattern_type : string option;\ndiagnosis : string;\n}",
        "lines": [
          "quality_grade : string;",
          "pattern_type : string option;",
          "diagnosis : string;",
          "}"
        ],
        "start_line": 209,
        "end_line": 212,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_rhyme_core.ml"
      },
      {
        "hash": "8325bd2dba6ddbeb5834d62d0dec186a",
        "text": "quality_grade : string;\npattern_type : string option;\ndiagnosis : string;\n}",
        "lines": [
          "quality_grade : string;",
          "pattern_type : string option;",
          "diagnosis : string;",
          "}"
        ],
        "start_line": 139,
        "end_line": 142,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_analysis.ml"
      }
    ],
    "63278450f9b0726bcdc12ea2eafe9249": [
      {
        "hash": "63278450f9b0726bcdc12ea2eafe9249",
        "text": "pattern_type : string option;\ndiagnosis : string;\n}",
        "lines": [
          "pattern_type : string option;",
          "diagnosis : string;",
          "}"
        ],
        "start_line": 210,
        "end_line": 212,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_rhyme_core.ml"
      },
      {
        "hash": "63278450f9b0726bcdc12ea2eafe9249",
        "text": "pattern_type : string option;\ndiagnosis : string;\n}",
        "lines": [
          "pattern_type : string option;",
          "diagnosis : string;",
          "}"
        ],
        "start_line": 140,
        "end_line": 142,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_analysis.ml"
      }
    ],
    "f20ec1180d808f2a2936a79e007fe478": [
      {
        "hash": "f20ec1180d808f2a2936a79e007fe478",
        "text": "@author 骆言诗词编程团队\n@version 2.0\n@since 2025-07-24 - Phase 7.1 JSON处理系统整合重构 *)",
        "lines": [
          "@author 骆言诗词编程团队",
          "@version 2.0",
          "@since 2025-07-24 - Phase 7.1 JSON处理系统整合重构 *)"
        ],
        "start_line": 8,
        "end_line": 10,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      },
      {
        "hash": "f20ec1180d808f2a2936a79e007fe478",
        "text": "@author 骆言诗词编程团队\n@version 2.0\n@since 2025-07-24 - Phase 7.1 JSON处理系统整合重构 *)",
        "lines": [
          "@author 骆言诗词编程团队",
          "@version 2.0",
          "@since 2025-07-24 - Phase 7.1 JSON处理系统整合重构 *)"
        ],
        "start_line": 6,
        "end_line": 8,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_api.ml"
      }
    ],
    "010070b89342cb15affd034b93b7e655": [
      {
        "hash": "010070b89342cb15affd034b93b7e655",
        "text": "| AnRhyme\n| SiRhyme\n| TianRhyme\n| WangRhyme\n| QuRhyme\n| YuRhyme\n| HuaRhyme\n| FengRhyme\n| YueRhyme\n| XueRhyme",
        "lines": [
          "| AnRhyme",
          "| SiRhyme",
          "| TianRhyme",
          "| WangRhyme",
          "| QuRhyme",
          "| YuRhyme",
          "| HuaRhyme",
          "| FengRhyme",
          "| YueRhyme",
          "| XueRhyme"
        ],
        "start_line": 24,
        "end_line": 33,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      },
      {
        "hash": "010070b89342cb15affd034b93b7e655",
        "text": "| AnRhyme\n| SiRhyme\n| TianRhyme\n| WangRhyme\n| QuRhyme\n| YuRhyme\n| HuaRhyme\n| FengRhyme\n| YueRhyme\n| XueRhyme",
        "lines": [
          "| AnRhyme",
          "| SiRhyme",
          "| TianRhyme",
          "| WangRhyme",
          "| QuRhyme",
          "| YuRhyme",
          "| HuaRhyme",
          "| FengRhyme",
          "| YueRhyme",
          "| XueRhyme"
        ],
        "start_line": 18,
        "end_line": 27,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_core_types.ml"
      },
      {
        "hash": "010070b89342cb15affd034b93b7e655",
        "text": "| AnRhyme\n| SiRhyme\n| TianRhyme\n| WangRhyme\n| QuRhyme\n| YuRhyme\n| HuaRhyme\n| FengRhyme\n| YueRhyme\n| XueRhyme",
        "lines": [
          "| AnRhyme",
          "| SiRhyme",
          "| TianRhyme",
          "| WangRhyme",
          "| QuRhyme",
          "| YuRhyme",
          "| HuaRhyme",
          "| FengRhyme",
          "| YueRhyme",
          "| XueRhyme"
        ],
        "start_line": 19,
        "end_line": 28,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_types.ml"
      },
      {
        "hash": "010070b89342cb15affd034b93b7e655",
        "text": "| AnRhyme\n| SiRhyme\n| TianRhyme\n| WangRhyme\n| QuRhyme\n| YuRhyme\n| HuaRhyme\n| FengRhyme\n| YueRhyme\n| XueRhyme",
        "lines": [
          "| AnRhyme",
          "| SiRhyme",
          "| TianRhyme",
          "| WangRhyme",
          "| QuRhyme",
          "| YuRhyme",
          "| HuaRhyme",
          "| FengRhyme",
          "| YueRhyme",
          "| XueRhyme"
        ],
        "start_line": 21,
        "end_line": 30,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_api.ml"
      },
      {
        "hash": "010070b89342cb15affd034b93b7e655",
        "text": "| AnRhyme\n| SiRhyme\n| TianRhyme\n| WangRhyme\n| QuRhyme\n| YuRhyme\n| HuaRhyme\n| FengRhyme\n| YueRhyme\n| XueRhyme",
        "lines": [
          "| AnRhyme",
          "| SiRhyme",
          "| TianRhyme",
          "| WangRhyme",
          "| QuRhyme",
          "| YuRhyme",
          "| HuaRhyme",
          "| FengRhyme",
          "| YueRhyme",
          "| XueRhyme"
        ],
        "start_line": 22,
        "end_line": 31,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/expanded_rhyme_data.ml"
      },
      {
        "hash": "010070b89342cb15affd034b93b7e655",
        "text": "| AnRhyme\n| SiRhyme\n| TianRhyme\n| WangRhyme\n| QuRhyme\n| YuRhyme\n| HuaRhyme\n| FengRhyme\n| YueRhyme\n| XueRhyme",
        "lines": [
          "| AnRhyme",
          "| SiRhyme",
          "| TianRhyme",
          "| WangRhyme",
          "| QuRhyme",
          "| YuRhyme",
          "| HuaRhyme",
          "| FengRhyme",
          "| YueRhyme",
          "| XueRhyme"
        ],
        "start_line": 23,
        "end_line": 32,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/rhyme_group_types.ml"
      },
      {
        "hash": "010070b89342cb15affd034b93b7e655",
        "text": "| AnRhyme\n| SiRhyme\n| TianRhyme\n| WangRhyme\n| QuRhyme\n| YuRhyme\n| HuaRhyme\n| FengRhyme\n| YueRhyme\n| XueRhyme",
        "lines": [
          "| AnRhyme",
          "| SiRhyme",
          "| TianRhyme",
          "| WangRhyme",
          "| QuRhyme",
          "| YuRhyme",
          "| HuaRhyme",
          "| FengRhyme",
          "| YueRhyme",
          "| XueRhyme"
        ],
        "start_line": 21,
        "end_line": 30,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/ping_sheng/feng_rhyme_data.ml"
      },
      {
        "hash": "010070b89342cb15affd034b93b7e655",
        "text": "| AnRhyme\n| SiRhyme\n| TianRhyme\n| WangRhyme\n| QuRhyme\n| YuRhyme\n| HuaRhyme\n| FengRhyme\n| YueRhyme\n| XueRhyme",
        "lines": [
          "| AnRhyme",
          "| SiRhyme",
          "| TianRhyme",
          "| WangRhyme",
          "| QuRhyme",
          "| YuRhyme",
          "| HuaRhyme",
          "| FengRhyme",
          "| YueRhyme",
          "| XueRhyme"
        ],
        "start_line": 18,
        "end_line": 27,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/ze_sheng/yue_rhyme_data.ml"
      },
      {
        "hash": "010070b89342cb15affd034b93b7e655",
        "text": "| AnRhyme\n| SiRhyme\n| TianRhyme\n| WangRhyme\n| QuRhyme\n| YuRhyme\n| HuaRhyme\n| FengRhyme\n| YueRhyme\n| XueRhyme",
        "lines": [
          "| AnRhyme",
          "| SiRhyme",
          "| TianRhyme",
          "| WangRhyme",
          "| QuRhyme",
          "| YuRhyme",
          "| HuaRhyme",
          "| FengRhyme",
          "| YueRhyme",
          "| XueRhyme"
        ],
        "start_line": 18,
        "end_line": 27,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/ze_sheng/hui_rhyme_data.ml"
      },
      {
        "hash": "010070b89342cb15affd034b93b7e655",
        "text": "| AnRhyme\n| SiRhyme\n| TianRhyme\n| WangRhyme\n| QuRhyme\n| YuRhyme\n| HuaRhyme\n| FengRhyme\n| YueRhyme\n| XueRhyme",
        "lines": [
          "| AnRhyme",
          "| SiRhyme",
          "| TianRhyme",
          "| WangRhyme",
          "| QuRhyme",
          "| YuRhyme",
          "| HuaRhyme",
          "| FengRhyme",
          "| YueRhyme",
          "| XueRhyme"
        ],
        "start_line": 18,
        "end_line": 27,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/ze_sheng/jiang_rhyme_data.ml"
      }
    ],
    "2d19bc69e922a6b89c8bc79de6a08a51": [
      {
        "hash": "2d19bc69e922a6b89c8bc79de6a08a51",
        "text": "| SiRhyme\n| TianRhyme\n| WangRhyme\n| QuRhyme\n| YuRhyme\n| HuaRhyme\n| FengRhyme\n| YueRhyme\n| XueRhyme\n| JiangRhyme",
        "lines": [
          "| SiRhyme",
          "| TianRhyme",
          "| WangRhyme",
          "| QuRhyme",
          "| YuRhyme",
          "| HuaRhyme",
          "| FengRhyme",
          "| YueRhyme",
          "| XueRhyme",
          "| JiangRhyme"
        ],
        "start_line": 25,
        "end_line": 34,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      },
      {
        "hash": "2d19bc69e922a6b89c8bc79de6a08a51",
        "text": "| SiRhyme\n| TianRhyme\n| WangRhyme\n| QuRhyme\n| YuRhyme\n| HuaRhyme\n| FengRhyme\n| YueRhyme\n| XueRhyme\n| JiangRhyme",
        "lines": [
          "| SiRhyme",
          "| TianRhyme",
          "| WangRhyme",
          "| QuRhyme",
          "| YuRhyme",
          "| HuaRhyme",
          "| FengRhyme",
          "| YueRhyme",
          "| XueRhyme",
          "| JiangRhyme"
        ],
        "start_line": 19,
        "end_line": 28,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_core_types.ml"
      },
      {
        "hash": "2d19bc69e922a6b89c8bc79de6a08a51",
        "text": "| SiRhyme\n| TianRhyme\n| WangRhyme\n| QuRhyme\n| YuRhyme\n| HuaRhyme\n| FengRhyme\n| YueRhyme\n| XueRhyme\n| JiangRhyme",
        "lines": [
          "| SiRhyme",
          "| TianRhyme",
          "| WangRhyme",
          "| QuRhyme",
          "| YuRhyme",
          "| HuaRhyme",
          "| FengRhyme",
          "| YueRhyme",
          "| XueRhyme",
          "| JiangRhyme"
        ],
        "start_line": 20,
        "end_line": 29,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_types.ml"
      },
      {
        "hash": "2d19bc69e922a6b89c8bc79de6a08a51",
        "text": "| SiRhyme\n| TianRhyme\n| WangRhyme\n| QuRhyme\n| YuRhyme\n| HuaRhyme\n| FengRhyme\n| YueRhyme\n| XueRhyme\n| JiangRhyme",
        "lines": [
          "| SiRhyme",
          "| TianRhyme",
          "| WangRhyme",
          "| QuRhyme",
          "| YuRhyme",
          "| HuaRhyme",
          "| FengRhyme",
          "| YueRhyme",
          "| XueRhyme",
          "| JiangRhyme"
        ],
        "start_line": 22,
        "end_line": 31,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_api.ml"
      },
      {
        "hash": "2d19bc69e922a6b89c8bc79de6a08a51",
        "text": "| SiRhyme\n| TianRhyme\n| WangRhyme\n| QuRhyme\n| YuRhyme\n| HuaRhyme\n| FengRhyme\n| YueRhyme\n| XueRhyme\n| JiangRhyme",
        "lines": [
          "| SiRhyme",
          "| TianRhyme",
          "| WangRhyme",
          "| QuRhyme",
          "| YuRhyme",
          "| HuaRhyme",
          "| FengRhyme",
          "| YueRhyme",
          "| XueRhyme",
          "| JiangRhyme"
        ],
        "start_line": 23,
        "end_line": 32,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/expanded_rhyme_data.ml"
      },
      {
        "hash": "2d19bc69e922a6b89c8bc79de6a08a51",
        "text": "| SiRhyme\n| TianRhyme\n| WangRhyme\n| QuRhyme\n| YuRhyme\n| HuaRhyme\n| FengRhyme\n| YueRhyme\n| XueRhyme\n| JiangRhyme",
        "lines": [
          "| SiRhyme",
          "| TianRhyme",
          "| WangRhyme",
          "| QuRhyme",
          "| YuRhyme",
          "| HuaRhyme",
          "| FengRhyme",
          "| YueRhyme",
          "| XueRhyme",
          "| JiangRhyme"
        ],
        "start_line": 24,
        "end_line": 33,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/rhyme_group_types.ml"
      },
      {
        "hash": "2d19bc69e922a6b89c8bc79de6a08a51",
        "text": "| SiRhyme\n| TianRhyme\n| WangRhyme\n| QuRhyme\n| YuRhyme\n| HuaRhyme\n| FengRhyme\n| YueRhyme\n| XueRhyme\n| JiangRhyme",
        "lines": [
          "| SiRhyme",
          "| TianRhyme",
          "| WangRhyme",
          "| QuRhyme",
          "| YuRhyme",
          "| HuaRhyme",
          "| FengRhyme",
          "| YueRhyme",
          "| XueRhyme",
          "| JiangRhyme"
        ],
        "start_line": 22,
        "end_line": 31,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/ping_sheng/feng_rhyme_data.ml"
      },
      {
        "hash": "2d19bc69e922a6b89c8bc79de6a08a51",
        "text": "| SiRhyme\n| TianRhyme\n| WangRhyme\n| QuRhyme\n| YuRhyme\n| HuaRhyme\n| FengRhyme\n| YueRhyme\n| XueRhyme\n| JiangRhyme",
        "lines": [
          "| SiRhyme",
          "| TianRhyme",
          "| WangRhyme",
          "| QuRhyme",
          "| YuRhyme",
          "| HuaRhyme",
          "| FengRhyme",
          "| YueRhyme",
          "| XueRhyme",
          "| JiangRhyme"
        ],
        "start_line": 19,
        "end_line": 28,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/ze_sheng/yue_rhyme_data.ml"
      },
      {
        "hash": "2d19bc69e922a6b89c8bc79de6a08a51",
        "text": "| SiRhyme\n| TianRhyme\n| WangRhyme\n| QuRhyme\n| YuRhyme\n| HuaRhyme\n| FengRhyme\n| YueRhyme\n| XueRhyme\n| JiangRhyme",
        "lines": [
          "| SiRhyme",
          "| TianRhyme",
          "| WangRhyme",
          "| QuRhyme",
          "| YuRhyme",
          "| HuaRhyme",
          "| FengRhyme",
          "| YueRhyme",
          "| XueRhyme",
          "| JiangRhyme"
        ],
        "start_line": 19,
        "end_line": 28,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/ze_sheng/hui_rhyme_data.ml"
      },
      {
        "hash": "2d19bc69e922a6b89c8bc79de6a08a51",
        "text": "| SiRhyme\n| TianRhyme\n| WangRhyme\n| QuRhyme\n| YuRhyme\n| HuaRhyme\n| FengRhyme\n| YueRhyme\n| XueRhyme\n| JiangRhyme",
        "lines": [
          "| SiRhyme",
          "| TianRhyme",
          "| WangRhyme",
          "| QuRhyme",
          "| YuRhyme",
          "| HuaRhyme",
          "| FengRhyme",
          "| YueRhyme",
          "| XueRhyme",
          "| JiangRhyme"
        ],
        "start_line": 19,
        "end_line": 28,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/ze_sheng/jiang_rhyme_data.ml"
      }
    ],
    "fa6052e85c71c9d3fc40a58e349388b8": [
      {
        "hash": "fa6052e85c71c9d3fc40a58e349388b8",
        "text": "| TianRhyme\n| WangRhyme\n| QuRhyme\n| YuRhyme\n| HuaRhyme\n| FengRhyme\n| YueRhyme\n| XueRhyme\n| JiangRhyme\n| HuiRhyme",
        "lines": [
          "| TianRhyme",
          "| WangRhyme",
          "| QuRhyme",
          "| YuRhyme",
          "| HuaRhyme",
          "| FengRhyme",
          "| YueRhyme",
          "| XueRhyme",
          "| JiangRhyme",
          "| HuiRhyme"
        ],
        "start_line": 26,
        "end_line": 35,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      },
      {
        "hash": "fa6052e85c71c9d3fc40a58e349388b8",
        "text": "| TianRhyme\n| WangRhyme\n| QuRhyme\n| YuRhyme\n| HuaRhyme\n| FengRhyme\n| YueRhyme\n| XueRhyme\n| JiangRhyme\n| HuiRhyme",
        "lines": [
          "| TianRhyme",
          "| WangRhyme",
          "| QuRhyme",
          "| YuRhyme",
          "| HuaRhyme",
          "| FengRhyme",
          "| YueRhyme",
          "| XueRhyme",
          "| JiangRhyme",
          "| HuiRhyme"
        ],
        "start_line": 20,
        "end_line": 29,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_core_types.ml"
      },
      {
        "hash": "fa6052e85c71c9d3fc40a58e349388b8",
        "text": "| TianRhyme\n| WangRhyme\n| QuRhyme\n| YuRhyme\n| HuaRhyme\n| FengRhyme\n| YueRhyme\n| XueRhyme\n| JiangRhyme\n| HuiRhyme",
        "lines": [
          "| TianRhyme",
          "| WangRhyme",
          "| QuRhyme",
          "| YuRhyme",
          "| HuaRhyme",
          "| FengRhyme",
          "| YueRhyme",
          "| XueRhyme",
          "| JiangRhyme",
          "| HuiRhyme"
        ],
        "start_line": 21,
        "end_line": 30,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_types.ml"
      },
      {
        "hash": "fa6052e85c71c9d3fc40a58e349388b8",
        "text": "| TianRhyme\n| WangRhyme\n| QuRhyme\n| YuRhyme\n| HuaRhyme\n| FengRhyme\n| YueRhyme\n| XueRhyme\n| JiangRhyme\n| HuiRhyme",
        "lines": [
          "| TianRhyme",
          "| WangRhyme",
          "| QuRhyme",
          "| YuRhyme",
          "| HuaRhyme",
          "| FengRhyme",
          "| YueRhyme",
          "| XueRhyme",
          "| JiangRhyme",
          "| HuiRhyme"
        ],
        "start_line": 23,
        "end_line": 32,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_api.ml"
      },
      {
        "hash": "fa6052e85c71c9d3fc40a58e349388b8",
        "text": "| TianRhyme\n| WangRhyme\n| QuRhyme\n| YuRhyme\n| HuaRhyme\n| FengRhyme\n| YueRhyme\n| XueRhyme\n| JiangRhyme\n| HuiRhyme",
        "lines": [
          "| TianRhyme",
          "| WangRhyme",
          "| QuRhyme",
          "| YuRhyme",
          "| HuaRhyme",
          "| FengRhyme",
          "| YueRhyme",
          "| XueRhyme",
          "| JiangRhyme",
          "| HuiRhyme"
        ],
        "start_line": 24,
        "end_line": 33,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/expanded_rhyme_data.ml"
      },
      {
        "hash": "fa6052e85c71c9d3fc40a58e349388b8",
        "text": "| TianRhyme\n| WangRhyme\n| QuRhyme\n| YuRhyme\n| HuaRhyme\n| FengRhyme\n| YueRhyme\n| XueRhyme\n| JiangRhyme\n| HuiRhyme",
        "lines": [
          "| TianRhyme",
          "| WangRhyme",
          "| QuRhyme",
          "| YuRhyme",
          "| HuaRhyme",
          "| FengRhyme",
          "| YueRhyme",
          "| XueRhyme",
          "| JiangRhyme",
          "| HuiRhyme"
        ],
        "start_line": 25,
        "end_line": 34,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/rhyme_group_types.ml"
      },
      {
        "hash": "fa6052e85c71c9d3fc40a58e349388b8",
        "text": "| TianRhyme\n| WangRhyme\n| QuRhyme\n| YuRhyme\n| HuaRhyme\n| FengRhyme\n| YueRhyme\n| XueRhyme\n| JiangRhyme\n| HuiRhyme",
        "lines": [
          "| TianRhyme",
          "| WangRhyme",
          "| QuRhyme",
          "| YuRhyme",
          "| HuaRhyme",
          "| FengRhyme",
          "| YueRhyme",
          "| XueRhyme",
          "| JiangRhyme",
          "| HuiRhyme"
        ],
        "start_line": 23,
        "end_line": 32,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/ping_sheng/feng_rhyme_data.ml"
      },
      {
        "hash": "fa6052e85c71c9d3fc40a58e349388b8",
        "text": "| TianRhyme\n| WangRhyme\n| QuRhyme\n| YuRhyme\n| HuaRhyme\n| FengRhyme\n| YueRhyme\n| XueRhyme\n| JiangRhyme\n| HuiRhyme",
        "lines": [
          "| TianRhyme",
          "| WangRhyme",
          "| QuRhyme",
          "| YuRhyme",
          "| HuaRhyme",
          "| FengRhyme",
          "| YueRhyme",
          "| XueRhyme",
          "| JiangRhyme",
          "| HuiRhyme"
        ],
        "start_line": 20,
        "end_line": 29,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/ze_sheng/yue_rhyme_data.ml"
      },
      {
        "hash": "fa6052e85c71c9d3fc40a58e349388b8",
        "text": "| TianRhyme\n| WangRhyme\n| QuRhyme\n| YuRhyme\n| HuaRhyme\n| FengRhyme\n| YueRhyme\n| XueRhyme\n| JiangRhyme\n| HuiRhyme",
        "lines": [
          "| TianRhyme",
          "| WangRhyme",
          "| QuRhyme",
          "| YuRhyme",
          "| HuaRhyme",
          "| FengRhyme",
          "| YueRhyme",
          "| XueRhyme",
          "| JiangRhyme",
          "| HuiRhyme"
        ],
        "start_line": 20,
        "end_line": 29,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/ze_sheng/hui_rhyme_data.ml"
      },
      {
        "hash": "fa6052e85c71c9d3fc40a58e349388b8",
        "text": "| TianRhyme\n| WangRhyme\n| QuRhyme\n| YuRhyme\n| HuaRhyme\n| FengRhyme\n| YueRhyme\n| XueRhyme\n| JiangRhyme\n| HuiRhyme",
        "lines": [
          "| TianRhyme",
          "| WangRhyme",
          "| QuRhyme",
          "| YuRhyme",
          "| HuaRhyme",
          "| FengRhyme",
          "| YueRhyme",
          "| XueRhyme",
          "| JiangRhyme",
          "| HuiRhyme"
        ],
        "start_line": 20,
        "end_line": 29,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/ze_sheng/jiang_rhyme_data.ml"
      }
    ],
    "4ea1ceb7a7caba836c735368f669776f": [
      {
        "hash": "4ea1ceb7a7caba836c735368f669776f",
        "text": "| WangRhyme\n| QuRhyme\n| YuRhyme\n| HuaRhyme\n| FengRhyme\n| YueRhyme\n| XueRhyme\n| JiangRhyme\n| HuiRhyme\n| UnknownRhyme",
        "lines": [
          "| WangRhyme",
          "| QuRhyme",
          "| YuRhyme",
          "| HuaRhyme",
          "| FengRhyme",
          "| YueRhyme",
          "| XueRhyme",
          "| JiangRhyme",
          "| HuiRhyme",
          "| UnknownRhyme"
        ],
        "start_line": 27,
        "end_line": 36,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      },
      {
        "hash": "4ea1ceb7a7caba836c735368f669776f",
        "text": "| WangRhyme\n| QuRhyme\n| YuRhyme\n| HuaRhyme\n| FengRhyme\n| YueRhyme\n| XueRhyme\n| JiangRhyme\n| HuiRhyme\n| UnknownRhyme",
        "lines": [
          "| WangRhyme",
          "| QuRhyme",
          "| YuRhyme",
          "| HuaRhyme",
          "| FengRhyme",
          "| YueRhyme",
          "| XueRhyme",
          "| JiangRhyme",
          "| HuiRhyme",
          "| UnknownRhyme"
        ],
        "start_line": 21,
        "end_line": 30,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_core_types.ml"
      },
      {
        "hash": "4ea1ceb7a7caba836c735368f669776f",
        "text": "| WangRhyme\n| QuRhyme\n| YuRhyme\n| HuaRhyme\n| FengRhyme\n| YueRhyme\n| XueRhyme\n| JiangRhyme\n| HuiRhyme\n| UnknownRhyme",
        "lines": [
          "| WangRhyme",
          "| QuRhyme",
          "| YuRhyme",
          "| HuaRhyme",
          "| FengRhyme",
          "| YueRhyme",
          "| XueRhyme",
          "| JiangRhyme",
          "| HuiRhyme",
          "| UnknownRhyme"
        ],
        "start_line": 22,
        "end_line": 31,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_types.ml"
      },
      {
        "hash": "4ea1ceb7a7caba836c735368f669776f",
        "text": "| WangRhyme\n| QuRhyme\n| YuRhyme\n| HuaRhyme\n| FengRhyme\n| YueRhyme\n| XueRhyme\n| JiangRhyme\n| HuiRhyme\n| UnknownRhyme",
        "lines": [
          "| WangRhyme",
          "| QuRhyme",
          "| YuRhyme",
          "| HuaRhyme",
          "| FengRhyme",
          "| YueRhyme",
          "| XueRhyme",
          "| JiangRhyme",
          "| HuiRhyme",
          "| UnknownRhyme"
        ],
        "start_line": 24,
        "end_line": 33,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_api.ml"
      },
      {
        "hash": "4ea1ceb7a7caba836c735368f669776f",
        "text": "| WangRhyme\n| QuRhyme\n| YuRhyme\n| HuaRhyme\n| FengRhyme\n| YueRhyme\n| XueRhyme\n| JiangRhyme\n| HuiRhyme\n| UnknownRhyme",
        "lines": [
          "| WangRhyme",
          "| QuRhyme",
          "| YuRhyme",
          "| HuaRhyme",
          "| FengRhyme",
          "| YueRhyme",
          "| XueRhyme",
          "| JiangRhyme",
          "| HuiRhyme",
          "| UnknownRhyme"
        ],
        "start_line": 25,
        "end_line": 34,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/expanded_rhyme_data.ml"
      },
      {
        "hash": "4ea1ceb7a7caba836c735368f669776f",
        "text": "| WangRhyme\n| QuRhyme\n| YuRhyme\n| HuaRhyme\n| FengRhyme\n| YueRhyme\n| XueRhyme\n| JiangRhyme\n| HuiRhyme\n| UnknownRhyme",
        "lines": [
          "| WangRhyme",
          "| QuRhyme",
          "| YuRhyme",
          "| HuaRhyme",
          "| FengRhyme",
          "| YueRhyme",
          "| XueRhyme",
          "| JiangRhyme",
          "| HuiRhyme",
          "| UnknownRhyme"
        ],
        "start_line": 26,
        "end_line": 35,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/rhyme_group_types.ml"
      },
      {
        "hash": "4ea1ceb7a7caba836c735368f669776f",
        "text": "| WangRhyme\n| QuRhyme\n| YuRhyme\n| HuaRhyme\n| FengRhyme\n| YueRhyme\n| XueRhyme\n| JiangRhyme\n| HuiRhyme\n| UnknownRhyme",
        "lines": [
          "| WangRhyme",
          "| QuRhyme",
          "| YuRhyme",
          "| HuaRhyme",
          "| FengRhyme",
          "| YueRhyme",
          "| XueRhyme",
          "| JiangRhyme",
          "| HuiRhyme",
          "| UnknownRhyme"
        ],
        "start_line": 24,
        "end_line": 33,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/ping_sheng/feng_rhyme_data.ml"
      },
      {
        "hash": "4ea1ceb7a7caba836c735368f669776f",
        "text": "| WangRhyme\n| QuRhyme\n| YuRhyme\n| HuaRhyme\n| FengRhyme\n| YueRhyme\n| XueRhyme\n| JiangRhyme\n| HuiRhyme\n| UnknownRhyme",
        "lines": [
          "| WangRhyme",
          "| QuRhyme",
          "| YuRhyme",
          "| HuaRhyme",
          "| FengRhyme",
          "| YueRhyme",
          "| XueRhyme",
          "| JiangRhyme",
          "| HuiRhyme",
          "| UnknownRhyme"
        ],
        "start_line": 21,
        "end_line": 30,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/ze_sheng/yue_rhyme_data.ml"
      },
      {
        "hash": "4ea1ceb7a7caba836c735368f669776f",
        "text": "| WangRhyme\n| QuRhyme\n| YuRhyme\n| HuaRhyme\n| FengRhyme\n| YueRhyme\n| XueRhyme\n| JiangRhyme\n| HuiRhyme\n| UnknownRhyme",
        "lines": [
          "| WangRhyme",
          "| QuRhyme",
          "| YuRhyme",
          "| HuaRhyme",
          "| FengRhyme",
          "| YueRhyme",
          "| XueRhyme",
          "| JiangRhyme",
          "| HuiRhyme",
          "| UnknownRhyme"
        ],
        "start_line": 21,
        "end_line": 30,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/ze_sheng/hui_rhyme_data.ml"
      },
      {
        "hash": "4ea1ceb7a7caba836c735368f669776f",
        "text": "| WangRhyme\n| QuRhyme\n| YuRhyme\n| HuaRhyme\n| FengRhyme\n| YueRhyme\n| XueRhyme\n| JiangRhyme\n| HuiRhyme\n| UnknownRhyme",
        "lines": [
          "| WangRhyme",
          "| QuRhyme",
          "| YuRhyme",
          "| HuaRhyme",
          "| FengRhyme",
          "| YueRhyme",
          "| XueRhyme",
          "| JiangRhyme",
          "| HuiRhyme",
          "| UnknownRhyme"
        ],
        "start_line": 21,
        "end_line": 30,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/ze_sheng/jiang_rhyme_data.ml"
      }
    ],
    "72e1976f621dc14a483b87b45de1c674": [
      {
        "hash": "72e1976f621dc14a483b87b45de1c674",
        "text": "| QuRhyme\n| YuRhyme\n| HuaRhyme\n| FengRhyme\n| YueRhyme\n| XueRhyme\n| JiangRhyme\n| HuiRhyme\n| UnknownRhyme",
        "lines": [
          "| QuRhyme",
          "| YuRhyme",
          "| HuaRhyme",
          "| FengRhyme",
          "| YueRhyme",
          "| XueRhyme",
          "| JiangRhyme",
          "| HuiRhyme",
          "| UnknownRhyme"
        ],
        "start_line": 28,
        "end_line": 36,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      },
      {
        "hash": "72e1976f621dc14a483b87b45de1c674",
        "text": "| QuRhyme\n| YuRhyme\n| HuaRhyme\n| FengRhyme\n| YueRhyme\n| XueRhyme\n| JiangRhyme\n| HuiRhyme\n| UnknownRhyme",
        "lines": [
          "| QuRhyme",
          "| YuRhyme",
          "| HuaRhyme",
          "| FengRhyme",
          "| YueRhyme",
          "| XueRhyme",
          "| JiangRhyme",
          "| HuiRhyme",
          "| UnknownRhyme"
        ],
        "start_line": 22,
        "end_line": 30,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_core_types.ml"
      },
      {
        "hash": "72e1976f621dc14a483b87b45de1c674",
        "text": "| QuRhyme\n| YuRhyme\n| HuaRhyme\n| FengRhyme\n| YueRhyme\n| XueRhyme\n| JiangRhyme\n| HuiRhyme\n| UnknownRhyme",
        "lines": [
          "| QuRhyme",
          "| YuRhyme",
          "| HuaRhyme",
          "| FengRhyme",
          "| YueRhyme",
          "| XueRhyme",
          "| JiangRhyme",
          "| HuiRhyme",
          "| UnknownRhyme"
        ],
        "start_line": 23,
        "end_line": 31,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_types.ml"
      },
      {
        "hash": "72e1976f621dc14a483b87b45de1c674",
        "text": "| QuRhyme\n| YuRhyme\n| HuaRhyme\n| FengRhyme\n| YueRhyme\n| XueRhyme\n| JiangRhyme\n| HuiRhyme\n| UnknownRhyme",
        "lines": [
          "| QuRhyme",
          "| YuRhyme",
          "| HuaRhyme",
          "| FengRhyme",
          "| YueRhyme",
          "| XueRhyme",
          "| JiangRhyme",
          "| HuiRhyme",
          "| UnknownRhyme"
        ],
        "start_line": 25,
        "end_line": 33,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_api.ml"
      },
      {
        "hash": "72e1976f621dc14a483b87b45de1c674",
        "text": "| QuRhyme\n| YuRhyme\n| HuaRhyme\n| FengRhyme\n| YueRhyme\n| XueRhyme\n| JiangRhyme\n| HuiRhyme\n| UnknownRhyme",
        "lines": [
          "| QuRhyme",
          "| YuRhyme",
          "| HuaRhyme",
          "| FengRhyme",
          "| YueRhyme",
          "| XueRhyme",
          "| JiangRhyme",
          "| HuiRhyme",
          "| UnknownRhyme"
        ],
        "start_line": 26,
        "end_line": 34,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/expanded_rhyme_data.ml"
      },
      {
        "hash": "72e1976f621dc14a483b87b45de1c674",
        "text": "| QuRhyme\n| YuRhyme\n| HuaRhyme\n| FengRhyme\n| YueRhyme\n| XueRhyme\n| JiangRhyme\n| HuiRhyme\n| UnknownRhyme",
        "lines": [
          "| QuRhyme",
          "| YuRhyme",
          "| HuaRhyme",
          "| FengRhyme",
          "| YueRhyme",
          "| XueRhyme",
          "| JiangRhyme",
          "| HuiRhyme",
          "| UnknownRhyme"
        ],
        "start_line": 27,
        "end_line": 35,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/rhyme_group_types.ml"
      },
      {
        "hash": "72e1976f621dc14a483b87b45de1c674",
        "text": "| QuRhyme\n| YuRhyme\n| HuaRhyme\n| FengRhyme\n| YueRhyme\n| XueRhyme\n| JiangRhyme\n| HuiRhyme\n| UnknownRhyme",
        "lines": [
          "| QuRhyme",
          "| YuRhyme",
          "| HuaRhyme",
          "| FengRhyme",
          "| YueRhyme",
          "| XueRhyme",
          "| JiangRhyme",
          "| HuiRhyme",
          "| UnknownRhyme"
        ],
        "start_line": 25,
        "end_line": 33,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/ping_sheng/feng_rhyme_data.ml"
      },
      {
        "hash": "72e1976f621dc14a483b87b45de1c674",
        "text": "| QuRhyme\n| YuRhyme\n| HuaRhyme\n| FengRhyme\n| YueRhyme\n| XueRhyme\n| JiangRhyme\n| HuiRhyme\n| UnknownRhyme",
        "lines": [
          "| QuRhyme",
          "| YuRhyme",
          "| HuaRhyme",
          "| FengRhyme",
          "| YueRhyme",
          "| XueRhyme",
          "| JiangRhyme",
          "| HuiRhyme",
          "| UnknownRhyme"
        ],
        "start_line": 22,
        "end_line": 30,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/ze_sheng/yue_rhyme_data.ml"
      },
      {
        "hash": "72e1976f621dc14a483b87b45de1c674",
        "text": "| QuRhyme\n| YuRhyme\n| HuaRhyme\n| FengRhyme\n| YueRhyme\n| XueRhyme\n| JiangRhyme\n| HuiRhyme\n| UnknownRhyme",
        "lines": [
          "| QuRhyme",
          "| YuRhyme",
          "| HuaRhyme",
          "| FengRhyme",
          "| YueRhyme",
          "| XueRhyme",
          "| JiangRhyme",
          "| HuiRhyme",
          "| UnknownRhyme"
        ],
        "start_line": 22,
        "end_line": 30,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/ze_sheng/hui_rhyme_data.ml"
      },
      {
        "hash": "72e1976f621dc14a483b87b45de1c674",
        "text": "| QuRhyme\n| YuRhyme\n| HuaRhyme\n| FengRhyme\n| YueRhyme\n| XueRhyme\n| JiangRhyme\n| HuiRhyme\n| UnknownRhyme",
        "lines": [
          "| QuRhyme",
          "| YuRhyme",
          "| HuaRhyme",
          "| FengRhyme",
          "| YueRhyme",
          "| XueRhyme",
          "| JiangRhyme",
          "| HuiRhyme",
          "| UnknownRhyme"
        ],
        "start_line": 22,
        "end_line": 30,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/ze_sheng/jiang_rhyme_data.ml"
      }
    ],
    "682fd0af873550fab7fbc521143806ed": [
      {
        "hash": "682fd0af873550fab7fbc521143806ed",
        "text": "| YuRhyme\n| HuaRhyme\n| FengRhyme\n| YueRhyme\n| XueRhyme\n| JiangRhyme\n| HuiRhyme\n| UnknownRhyme",
        "lines": [
          "| YuRhyme",
          "| HuaRhyme",
          "| FengRhyme",
          "| YueRhyme",
          "| XueRhyme",
          "| JiangRhyme",
          "| HuiRhyme",
          "| UnknownRhyme"
        ],
        "start_line": 29,
        "end_line": 36,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      },
      {
        "hash": "682fd0af873550fab7fbc521143806ed",
        "text": "| YuRhyme\n| HuaRhyme\n| FengRhyme\n| YueRhyme\n| XueRhyme\n| JiangRhyme\n| HuiRhyme\n| UnknownRhyme",
        "lines": [
          "| YuRhyme",
          "| HuaRhyme",
          "| FengRhyme",
          "| YueRhyme",
          "| XueRhyme",
          "| JiangRhyme",
          "| HuiRhyme",
          "| UnknownRhyme"
        ],
        "start_line": 23,
        "end_line": 30,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_core_types.ml"
      },
      {
        "hash": "682fd0af873550fab7fbc521143806ed",
        "text": "| YuRhyme\n| HuaRhyme\n| FengRhyme\n| YueRhyme\n| XueRhyme\n| JiangRhyme\n| HuiRhyme\n| UnknownRhyme",
        "lines": [
          "| YuRhyme",
          "| HuaRhyme",
          "| FengRhyme",
          "| YueRhyme",
          "| XueRhyme",
          "| JiangRhyme",
          "| HuiRhyme",
          "| UnknownRhyme"
        ],
        "start_line": 24,
        "end_line": 31,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_types.ml"
      },
      {
        "hash": "682fd0af873550fab7fbc521143806ed",
        "text": "| YuRhyme\n| HuaRhyme\n| FengRhyme\n| YueRhyme\n| XueRhyme\n| JiangRhyme\n| HuiRhyme\n| UnknownRhyme",
        "lines": [
          "| YuRhyme",
          "| HuaRhyme",
          "| FengRhyme",
          "| YueRhyme",
          "| XueRhyme",
          "| JiangRhyme",
          "| HuiRhyme",
          "| UnknownRhyme"
        ],
        "start_line": 26,
        "end_line": 33,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_api.ml"
      },
      {
        "hash": "682fd0af873550fab7fbc521143806ed",
        "text": "| YuRhyme\n| HuaRhyme\n| FengRhyme\n| YueRhyme\n| XueRhyme\n| JiangRhyme\n| HuiRhyme\n| UnknownRhyme",
        "lines": [
          "| YuRhyme",
          "| HuaRhyme",
          "| FengRhyme",
          "| YueRhyme",
          "| XueRhyme",
          "| JiangRhyme",
          "| HuiRhyme",
          "| UnknownRhyme"
        ],
        "start_line": 27,
        "end_line": 34,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/expanded_rhyme_data.ml"
      },
      {
        "hash": "682fd0af873550fab7fbc521143806ed",
        "text": "| YuRhyme\n| HuaRhyme\n| FengRhyme\n| YueRhyme\n| XueRhyme\n| JiangRhyme\n| HuiRhyme\n| UnknownRhyme",
        "lines": [
          "| YuRhyme",
          "| HuaRhyme",
          "| FengRhyme",
          "| YueRhyme",
          "| XueRhyme",
          "| JiangRhyme",
          "| HuiRhyme",
          "| UnknownRhyme"
        ],
        "start_line": 28,
        "end_line": 35,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/rhyme_group_types.ml"
      },
      {
        "hash": "682fd0af873550fab7fbc521143806ed",
        "text": "| YuRhyme\n| HuaRhyme\n| FengRhyme\n| YueRhyme\n| XueRhyme\n| JiangRhyme\n| HuiRhyme\n| UnknownRhyme",
        "lines": [
          "| YuRhyme",
          "| HuaRhyme",
          "| FengRhyme",
          "| YueRhyme",
          "| XueRhyme",
          "| JiangRhyme",
          "| HuiRhyme",
          "| UnknownRhyme"
        ],
        "start_line": 26,
        "end_line": 33,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/ping_sheng/feng_rhyme_data.ml"
      },
      {
        "hash": "682fd0af873550fab7fbc521143806ed",
        "text": "| YuRhyme\n| HuaRhyme\n| FengRhyme\n| YueRhyme\n| XueRhyme\n| JiangRhyme\n| HuiRhyme\n| UnknownRhyme",
        "lines": [
          "| YuRhyme",
          "| HuaRhyme",
          "| FengRhyme",
          "| YueRhyme",
          "| XueRhyme",
          "| JiangRhyme",
          "| HuiRhyme",
          "| UnknownRhyme"
        ],
        "start_line": 23,
        "end_line": 30,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/ze_sheng/yue_rhyme_data.ml"
      },
      {
        "hash": "682fd0af873550fab7fbc521143806ed",
        "text": "| YuRhyme\n| HuaRhyme\n| FengRhyme\n| YueRhyme\n| XueRhyme\n| JiangRhyme\n| HuiRhyme\n| UnknownRhyme",
        "lines": [
          "| YuRhyme",
          "| HuaRhyme",
          "| FengRhyme",
          "| YueRhyme",
          "| XueRhyme",
          "| JiangRhyme",
          "| HuiRhyme",
          "| UnknownRhyme"
        ],
        "start_line": 23,
        "end_line": 30,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/ze_sheng/hui_rhyme_data.ml"
      },
      {
        "hash": "682fd0af873550fab7fbc521143806ed",
        "text": "| YuRhyme\n| HuaRhyme\n| FengRhyme\n| YueRhyme\n| XueRhyme\n| JiangRhyme\n| HuiRhyme\n| UnknownRhyme",
        "lines": [
          "| YuRhyme",
          "| HuaRhyme",
          "| FengRhyme",
          "| YueRhyme",
          "| XueRhyme",
          "| JiangRhyme",
          "| HuiRhyme",
          "| UnknownRhyme"
        ],
        "start_line": 23,
        "end_line": 30,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/ze_sheng/jiang_rhyme_data.ml"
      }
    ],
    "d23c5b6406b65eb9927cfb1d70690ab5": [
      {
        "hash": "d23c5b6406b65eb9927cfb1d70690ab5",
        "text": "| HuaRhyme\n| FengRhyme\n| YueRhyme\n| XueRhyme\n| JiangRhyme\n| HuiRhyme\n| UnknownRhyme",
        "lines": [
          "| HuaRhyme",
          "| FengRhyme",
          "| YueRhyme",
          "| XueRhyme",
          "| JiangRhyme",
          "| HuiRhyme",
          "| UnknownRhyme"
        ],
        "start_line": 30,
        "end_line": 36,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      },
      {
        "hash": "d23c5b6406b65eb9927cfb1d70690ab5",
        "text": "| HuaRhyme\n| FengRhyme\n| YueRhyme\n| XueRhyme\n| JiangRhyme\n| HuiRhyme\n| UnknownRhyme",
        "lines": [
          "| HuaRhyme",
          "| FengRhyme",
          "| YueRhyme",
          "| XueRhyme",
          "| JiangRhyme",
          "| HuiRhyme",
          "| UnknownRhyme"
        ],
        "start_line": 24,
        "end_line": 30,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_core_types.ml"
      },
      {
        "hash": "d23c5b6406b65eb9927cfb1d70690ab5",
        "text": "| HuaRhyme\n| FengRhyme\n| YueRhyme\n| XueRhyme\n| JiangRhyme\n| HuiRhyme\n| UnknownRhyme",
        "lines": [
          "| HuaRhyme",
          "| FengRhyme",
          "| YueRhyme",
          "| XueRhyme",
          "| JiangRhyme",
          "| HuiRhyme",
          "| UnknownRhyme"
        ],
        "start_line": 25,
        "end_line": 31,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_types.ml"
      },
      {
        "hash": "d23c5b6406b65eb9927cfb1d70690ab5",
        "text": "| HuaRhyme\n| FengRhyme\n| YueRhyme\n| XueRhyme\n| JiangRhyme\n| HuiRhyme\n| UnknownRhyme",
        "lines": [
          "| HuaRhyme",
          "| FengRhyme",
          "| YueRhyme",
          "| XueRhyme",
          "| JiangRhyme",
          "| HuiRhyme",
          "| UnknownRhyme"
        ],
        "start_line": 27,
        "end_line": 33,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_api.ml"
      },
      {
        "hash": "d23c5b6406b65eb9927cfb1d70690ab5",
        "text": "| HuaRhyme\n| FengRhyme\n| YueRhyme\n| XueRhyme\n| JiangRhyme\n| HuiRhyme\n| UnknownRhyme",
        "lines": [
          "| HuaRhyme",
          "| FengRhyme",
          "| YueRhyme",
          "| XueRhyme",
          "| JiangRhyme",
          "| HuiRhyme",
          "| UnknownRhyme"
        ],
        "start_line": 28,
        "end_line": 34,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/expanded_rhyme_data.ml"
      },
      {
        "hash": "d23c5b6406b65eb9927cfb1d70690ab5",
        "text": "| HuaRhyme\n| FengRhyme\n| YueRhyme\n| XueRhyme\n| JiangRhyme\n| HuiRhyme\n| UnknownRhyme",
        "lines": [
          "| HuaRhyme",
          "| FengRhyme",
          "| YueRhyme",
          "| XueRhyme",
          "| JiangRhyme",
          "| HuiRhyme",
          "| UnknownRhyme"
        ],
        "start_line": 29,
        "end_line": 35,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/rhyme_group_types.ml"
      },
      {
        "hash": "d23c5b6406b65eb9927cfb1d70690ab5",
        "text": "| HuaRhyme\n| FengRhyme\n| YueRhyme\n| XueRhyme\n| JiangRhyme\n| HuiRhyme\n| UnknownRhyme",
        "lines": [
          "| HuaRhyme",
          "| FengRhyme",
          "| YueRhyme",
          "| XueRhyme",
          "| JiangRhyme",
          "| HuiRhyme",
          "| UnknownRhyme"
        ],
        "start_line": 27,
        "end_line": 33,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/ping_sheng/feng_rhyme_data.ml"
      },
      {
        "hash": "d23c5b6406b65eb9927cfb1d70690ab5",
        "text": "| HuaRhyme\n| FengRhyme\n| YueRhyme\n| XueRhyme\n| JiangRhyme\n| HuiRhyme\n| UnknownRhyme",
        "lines": [
          "| HuaRhyme",
          "| FengRhyme",
          "| YueRhyme",
          "| XueRhyme",
          "| JiangRhyme",
          "| HuiRhyme",
          "| UnknownRhyme"
        ],
        "start_line": 24,
        "end_line": 30,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/ze_sheng/yue_rhyme_data.ml"
      },
      {
        "hash": "d23c5b6406b65eb9927cfb1d70690ab5",
        "text": "| HuaRhyme\n| FengRhyme\n| YueRhyme\n| XueRhyme\n| JiangRhyme\n| HuiRhyme\n| UnknownRhyme",
        "lines": [
          "| HuaRhyme",
          "| FengRhyme",
          "| YueRhyme",
          "| XueRhyme",
          "| JiangRhyme",
          "| HuiRhyme",
          "| UnknownRhyme"
        ],
        "start_line": 24,
        "end_line": 30,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/ze_sheng/hui_rhyme_data.ml"
      },
      {
        "hash": "d23c5b6406b65eb9927cfb1d70690ab5",
        "text": "| HuaRhyme\n| FengRhyme\n| YueRhyme\n| XueRhyme\n| JiangRhyme\n| HuiRhyme\n| UnknownRhyme",
        "lines": [
          "| HuaRhyme",
          "| FengRhyme",
          "| YueRhyme",
          "| XueRhyme",
          "| JiangRhyme",
          "| HuiRhyme",
          "| UnknownRhyme"
        ],
        "start_line": 24,
        "end_line": 30,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/ze_sheng/jiang_rhyme_data.ml"
      }
    ],
    "e1c48e6bfc7fe189b051e26fb5be2b5a": [
      {
        "hash": "e1c48e6bfc7fe189b051e26fb5be2b5a",
        "text": "| FengRhyme\n| YueRhyme\n| XueRhyme\n| JiangRhyme\n| HuiRhyme\n| UnknownRhyme",
        "lines": [
          "| FengRhyme",
          "| YueRhyme",
          "| XueRhyme",
          "| JiangRhyme",
          "| HuiRhyme",
          "| UnknownRhyme"
        ],
        "start_line": 31,
        "end_line": 36,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      },
      {
        "hash": "e1c48e6bfc7fe189b051e26fb5be2b5a",
        "text": "| FengRhyme\n| YueRhyme\n| XueRhyme\n| JiangRhyme\n| HuiRhyme\n| UnknownRhyme",
        "lines": [
          "| FengRhyme",
          "| YueRhyme",
          "| XueRhyme",
          "| JiangRhyme",
          "| HuiRhyme",
          "| UnknownRhyme"
        ],
        "start_line": 25,
        "end_line": 30,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_core_types.ml"
      },
      {
        "hash": "e1c48e6bfc7fe189b051e26fb5be2b5a",
        "text": "| FengRhyme\n| YueRhyme\n| XueRhyme\n| JiangRhyme\n| HuiRhyme\n| UnknownRhyme",
        "lines": [
          "| FengRhyme",
          "| YueRhyme",
          "| XueRhyme",
          "| JiangRhyme",
          "| HuiRhyme",
          "| UnknownRhyme"
        ],
        "start_line": 26,
        "end_line": 31,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_types.ml"
      },
      {
        "hash": "e1c48e6bfc7fe189b051e26fb5be2b5a",
        "text": "| FengRhyme\n| YueRhyme\n| XueRhyme\n| JiangRhyme\n| HuiRhyme\n| UnknownRhyme",
        "lines": [
          "| FengRhyme",
          "| YueRhyme",
          "| XueRhyme",
          "| JiangRhyme",
          "| HuiRhyme",
          "| UnknownRhyme"
        ],
        "start_line": 28,
        "end_line": 33,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_api.ml"
      },
      {
        "hash": "e1c48e6bfc7fe189b051e26fb5be2b5a",
        "text": "| FengRhyme\n| YueRhyme\n| XueRhyme\n| JiangRhyme\n| HuiRhyme\n| UnknownRhyme",
        "lines": [
          "| FengRhyme",
          "| YueRhyme",
          "| XueRhyme",
          "| JiangRhyme",
          "| HuiRhyme",
          "| UnknownRhyme"
        ],
        "start_line": 29,
        "end_line": 34,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/expanded_rhyme_data.ml"
      },
      {
        "hash": "e1c48e6bfc7fe189b051e26fb5be2b5a",
        "text": "| FengRhyme\n| YueRhyme\n| XueRhyme\n| JiangRhyme\n| HuiRhyme\n| UnknownRhyme",
        "lines": [
          "| FengRhyme",
          "| YueRhyme",
          "| XueRhyme",
          "| JiangRhyme",
          "| HuiRhyme",
          "| UnknownRhyme"
        ],
        "start_line": 30,
        "end_line": 35,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/rhyme_group_types.ml"
      },
      {
        "hash": "e1c48e6bfc7fe189b051e26fb5be2b5a",
        "text": "| FengRhyme\n| YueRhyme\n| XueRhyme\n| JiangRhyme\n| HuiRhyme\n| UnknownRhyme",
        "lines": [
          "| FengRhyme",
          "| YueRhyme",
          "| XueRhyme",
          "| JiangRhyme",
          "| HuiRhyme",
          "| UnknownRhyme"
        ],
        "start_line": 28,
        "end_line": 33,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/ping_sheng/feng_rhyme_data.ml"
      },
      {
        "hash": "e1c48e6bfc7fe189b051e26fb5be2b5a",
        "text": "| FengRhyme\n| YueRhyme\n| XueRhyme\n| JiangRhyme\n| HuiRhyme\n| UnknownRhyme",
        "lines": [
          "| FengRhyme",
          "| YueRhyme",
          "| XueRhyme",
          "| JiangRhyme",
          "| HuiRhyme",
          "| UnknownRhyme"
        ],
        "start_line": 25,
        "end_line": 30,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/ze_sheng/yue_rhyme_data.ml"
      },
      {
        "hash": "e1c48e6bfc7fe189b051e26fb5be2b5a",
        "text": "| FengRhyme\n| YueRhyme\n| XueRhyme\n| JiangRhyme\n| HuiRhyme\n| UnknownRhyme",
        "lines": [
          "| FengRhyme",
          "| YueRhyme",
          "| XueRhyme",
          "| JiangRhyme",
          "| HuiRhyme",
          "| UnknownRhyme"
        ],
        "start_line": 25,
        "end_line": 30,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/ze_sheng/hui_rhyme_data.ml"
      },
      {
        "hash": "e1c48e6bfc7fe189b051e26fb5be2b5a",
        "text": "| FengRhyme\n| YueRhyme\n| XueRhyme\n| JiangRhyme\n| HuiRhyme\n| UnknownRhyme",
        "lines": [
          "| FengRhyme",
          "| YueRhyme",
          "| XueRhyme",
          "| JiangRhyme",
          "| HuiRhyme",
          "| UnknownRhyme"
        ],
        "start_line": 25,
        "end_line": 30,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/ze_sheng/jiang_rhyme_data.ml"
      }
    ],
    "a764fb5a0cad8e318e5938b1641465f4": [
      {
        "hash": "a764fb5a0cad8e318e5938b1641465f4",
        "text": "| YueRhyme\n| XueRhyme\n| JiangRhyme\n| HuiRhyme\n| UnknownRhyme",
        "lines": [
          "| YueRhyme",
          "| XueRhyme",
          "| JiangRhyme",
          "| HuiRhyme",
          "| UnknownRhyme"
        ],
        "start_line": 32,
        "end_line": 36,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      },
      {
        "hash": "a764fb5a0cad8e318e5938b1641465f4",
        "text": "| YueRhyme\n| XueRhyme\n| JiangRhyme\n| HuiRhyme\n| UnknownRhyme",
        "lines": [
          "| YueRhyme",
          "| XueRhyme",
          "| JiangRhyme",
          "| HuiRhyme",
          "| UnknownRhyme"
        ],
        "start_line": 26,
        "end_line": 30,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_core_types.ml"
      },
      {
        "hash": "a764fb5a0cad8e318e5938b1641465f4",
        "text": "| YueRhyme\n| XueRhyme\n| JiangRhyme\n| HuiRhyme\n| UnknownRhyme",
        "lines": [
          "| YueRhyme",
          "| XueRhyme",
          "| JiangRhyme",
          "| HuiRhyme",
          "| UnknownRhyme"
        ],
        "start_line": 27,
        "end_line": 31,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_types.ml"
      },
      {
        "hash": "a764fb5a0cad8e318e5938b1641465f4",
        "text": "| YueRhyme\n| XueRhyme\n| JiangRhyme\n| HuiRhyme\n| UnknownRhyme",
        "lines": [
          "| YueRhyme",
          "| XueRhyme",
          "| JiangRhyme",
          "| HuiRhyme",
          "| UnknownRhyme"
        ],
        "start_line": 29,
        "end_line": 33,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_api.ml"
      },
      {
        "hash": "a764fb5a0cad8e318e5938b1641465f4",
        "text": "| YueRhyme\n| XueRhyme\n| JiangRhyme\n| HuiRhyme\n| UnknownRhyme",
        "lines": [
          "| YueRhyme",
          "| XueRhyme",
          "| JiangRhyme",
          "| HuiRhyme",
          "| UnknownRhyme"
        ],
        "start_line": 30,
        "end_line": 34,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/expanded_rhyme_data.ml"
      },
      {
        "hash": "a764fb5a0cad8e318e5938b1641465f4",
        "text": "| YueRhyme\n| XueRhyme\n| JiangRhyme\n| HuiRhyme\n| UnknownRhyme",
        "lines": [
          "| YueRhyme",
          "| XueRhyme",
          "| JiangRhyme",
          "| HuiRhyme",
          "| UnknownRhyme"
        ],
        "start_line": 31,
        "end_line": 35,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/rhyme_group_types.ml"
      },
      {
        "hash": "a764fb5a0cad8e318e5938b1641465f4",
        "text": "| YueRhyme\n| XueRhyme\n| JiangRhyme\n| HuiRhyme\n| UnknownRhyme",
        "lines": [
          "| YueRhyme",
          "| XueRhyme",
          "| JiangRhyme",
          "| HuiRhyme",
          "| UnknownRhyme"
        ],
        "start_line": 29,
        "end_line": 33,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/ping_sheng/feng_rhyme_data.ml"
      },
      {
        "hash": "a764fb5a0cad8e318e5938b1641465f4",
        "text": "| YueRhyme\n| XueRhyme\n| JiangRhyme\n| HuiRhyme\n| UnknownRhyme",
        "lines": [
          "| YueRhyme",
          "| XueRhyme",
          "| JiangRhyme",
          "| HuiRhyme",
          "| UnknownRhyme"
        ],
        "start_line": 26,
        "end_line": 30,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/ze_sheng/yue_rhyme_data.ml"
      },
      {
        "hash": "a764fb5a0cad8e318e5938b1641465f4",
        "text": "| YueRhyme\n| XueRhyme\n| JiangRhyme\n| HuiRhyme\n| UnknownRhyme",
        "lines": [
          "| YueRhyme",
          "| XueRhyme",
          "| JiangRhyme",
          "| HuiRhyme",
          "| UnknownRhyme"
        ],
        "start_line": 26,
        "end_line": 30,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/ze_sheng/hui_rhyme_data.ml"
      },
      {
        "hash": "a764fb5a0cad8e318e5938b1641465f4",
        "text": "| YueRhyme\n| XueRhyme\n| JiangRhyme\n| HuiRhyme\n| UnknownRhyme",
        "lines": [
          "| YueRhyme",
          "| XueRhyme",
          "| JiangRhyme",
          "| HuiRhyme",
          "| UnknownRhyme"
        ],
        "start_line": 26,
        "end_line": 30,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/ze_sheng/jiang_rhyme_data.ml"
      }
    ],
    "1b9142bc9a5174be974df4f30cd2f2c7": [
      {
        "hash": "1b9142bc9a5174be974df4f30cd2f2c7",
        "text": "| XueRhyme\n| JiangRhyme\n| HuiRhyme\n| UnknownRhyme",
        "lines": [
          "| XueRhyme",
          "| JiangRhyme",
          "| HuiRhyme",
          "| UnknownRhyme"
        ],
        "start_line": 33,
        "end_line": 36,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      },
      {
        "hash": "1b9142bc9a5174be974df4f30cd2f2c7",
        "text": "| XueRhyme\n| JiangRhyme\n| HuiRhyme\n| UnknownRhyme",
        "lines": [
          "| XueRhyme",
          "| JiangRhyme",
          "| HuiRhyme",
          "| UnknownRhyme"
        ],
        "start_line": 27,
        "end_line": 30,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_core_types.ml"
      },
      {
        "hash": "1b9142bc9a5174be974df4f30cd2f2c7",
        "text": "| XueRhyme\n| JiangRhyme\n| HuiRhyme\n| UnknownRhyme",
        "lines": [
          "| XueRhyme",
          "| JiangRhyme",
          "| HuiRhyme",
          "| UnknownRhyme"
        ],
        "start_line": 28,
        "end_line": 31,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_types.ml"
      },
      {
        "hash": "1b9142bc9a5174be974df4f30cd2f2c7",
        "text": "| XueRhyme\n| JiangRhyme\n| HuiRhyme\n| UnknownRhyme",
        "lines": [
          "| XueRhyme",
          "| JiangRhyme",
          "| HuiRhyme",
          "| UnknownRhyme"
        ],
        "start_line": 30,
        "end_line": 33,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_api.ml"
      },
      {
        "hash": "1b9142bc9a5174be974df4f30cd2f2c7",
        "text": "| XueRhyme\n| JiangRhyme\n| HuiRhyme\n| UnknownRhyme",
        "lines": [
          "| XueRhyme",
          "| JiangRhyme",
          "| HuiRhyme",
          "| UnknownRhyme"
        ],
        "start_line": 31,
        "end_line": 34,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/expanded_rhyme_data.ml"
      },
      {
        "hash": "1b9142bc9a5174be974df4f30cd2f2c7",
        "text": "| XueRhyme\n| JiangRhyme\n| HuiRhyme\n| UnknownRhyme",
        "lines": [
          "| XueRhyme",
          "| JiangRhyme",
          "| HuiRhyme",
          "| UnknownRhyme"
        ],
        "start_line": 32,
        "end_line": 35,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/rhyme_group_types.ml"
      },
      {
        "hash": "1b9142bc9a5174be974df4f30cd2f2c7",
        "text": "| XueRhyme\n| JiangRhyme\n| HuiRhyme\n| UnknownRhyme",
        "lines": [
          "| XueRhyme",
          "| JiangRhyme",
          "| HuiRhyme",
          "| UnknownRhyme"
        ],
        "start_line": 30,
        "end_line": 33,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/ping_sheng/feng_rhyme_data.ml"
      },
      {
        "hash": "1b9142bc9a5174be974df4f30cd2f2c7",
        "text": "| XueRhyme\n| JiangRhyme\n| HuiRhyme\n| UnknownRhyme",
        "lines": [
          "| XueRhyme",
          "| JiangRhyme",
          "| HuiRhyme",
          "| UnknownRhyme"
        ],
        "start_line": 27,
        "end_line": 30,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/ze_sheng/yue_rhyme_data.ml"
      },
      {
        "hash": "1b9142bc9a5174be974df4f30cd2f2c7",
        "text": "| XueRhyme\n| JiangRhyme\n| HuiRhyme\n| UnknownRhyme",
        "lines": [
          "| XueRhyme",
          "| JiangRhyme",
          "| HuiRhyme",
          "| UnknownRhyme"
        ],
        "start_line": 27,
        "end_line": 30,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/ze_sheng/hui_rhyme_data.ml"
      },
      {
        "hash": "1b9142bc9a5174be974df4f30cd2f2c7",
        "text": "| XueRhyme\n| JiangRhyme\n| HuiRhyme\n| UnknownRhyme",
        "lines": [
          "| XueRhyme",
          "| JiangRhyme",
          "| HuiRhyme",
          "| UnknownRhyme"
        ],
        "start_line": 27,
        "end_line": 30,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/ze_sheng/jiang_rhyme_data.ml"
      }
    ],
    "3054a8e54981373a23f2898a1f09041e": [
      {
        "hash": "3054a8e54981373a23f2898a1f09041e",
        "text": "type rhyme_group_data = {\ncategory : string;\ncharacters : string list;\n}",
        "lines": [
          "type rhyme_group_data = {",
          "category : string;",
          "characters : string list;",
          "}"
        ],
        "start_line": 45,
        "end_line": 48,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      },
      {
        "hash": "3054a8e54981373a23f2898a1f09041e",
        "text": "type rhyme_group_data = {\ncategory : string;\ncharacters : string list;\n}",
        "lines": [
          "type rhyme_group_data = {",
          "category : string;",
          "characters : string list;",
          "}"
        ],
        "start_line": 52,
        "end_line": 55,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_core_types.ml"
      },
      {
        "hash": "3054a8e54981373a23f2898a1f09041e",
        "text": "type rhyme_group_data = {\ncategory : string;\ncharacters : string list;\n}",
        "lines": [
          "type rhyme_group_data = {",
          "category : string;",
          "characters : string list;",
          "}"
        ],
        "start_line": 43,
        "end_line": 46,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_types.ml"
      }
    ],
    "a04ceb2d43ab2ed5603dc8f22c81b6f6": [
      {
        "hash": "a04ceb2d43ab2ed5603dc8f22c81b6f6",
        "text": "category : string;\ncharacters : string list;\n}",
        "lines": [
          "category : string;",
          "characters : string list;",
          "}"
        ],
        "start_line": 46,
        "end_line": 48,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      },
      {
        "hash": "a04ceb2d43ab2ed5603dc8f22c81b6f6",
        "text": "category : string;\ncharacters : string list;\n}",
        "lines": [
          "category : string;",
          "characters : string list;",
          "}"
        ],
        "start_line": 53,
        "end_line": 55,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_core_types.ml"
      },
      {
        "hash": "a04ceb2d43ab2ed5603dc8f22c81b6f6",
        "text": "category : string;\ncharacters : string list;\n}",
        "lines": [
          "category : string;",
          "characters : string list;",
          "}"
        ],
        "start_line": 44,
        "end_line": 46,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_types.ml"
      },
      {
        "hash": "a04ceb2d43ab2ed5603dc8f22c81b6f6",
        "text": "category : string;\ncharacters : string list;\n}",
        "lines": [
          "category : string;",
          "characters : string list;",
          "}"
        ],
        "start_line": 39,
        "end_line": 41,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_api.ml"
      },
      {
        "hash": "a04ceb2d43ab2ed5603dc8f22c81b6f6",
        "text": "category : string;\ncharacters : string list;\n}",
        "lines": [
          "category : string;",
          "characters : string list;",
          "}"
        ],
        "start_line": 62,
        "end_line": 64,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_api.ml"
      }
    ],
    "9b37330ecedcc01be5e351808259d0ce": [
      {
        "hash": "9b37330ecedcc01be5e351808259d0ce",
        "text": "type rhyme_data_file = {\nrhyme_groups : (string * rhyme_group_data) list;\nmetadata : (string * string) list;\n}",
        "lines": [
          "type rhyme_data_file = {",
          "rhyme_groups : (string * rhyme_group_data) list;",
          "metadata : (string * string) list;",
          "}"
        ],
        "start_line": 51,
        "end_line": 54,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      },
      {
        "hash": "9b37330ecedcc01be5e351808259d0ce",
        "text": "type rhyme_data_file = {\nrhyme_groups : (string * rhyme_group_data) list;\nmetadata : (string * string) list;\n}",
        "lines": [
          "type rhyme_data_file = {",
          "rhyme_groups : (string * rhyme_group_data) list;",
          "metadata : (string * string) list;",
          "}"
        ],
        "start_line": 57,
        "end_line": 60,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_core_types.ml"
      },
      {
        "hash": "9b37330ecedcc01be5e351808259d0ce",
        "text": "type rhyme_data_file = {\nrhyme_groups : (string * rhyme_group_data) list;\nmetadata : (string * string) list;\n}",
        "lines": [
          "type rhyme_data_file = {",
          "rhyme_groups : (string * rhyme_group_data) list;",
          "metadata : (string * string) list;",
          "}"
        ],
        "start_line": 49,
        "end_line": 52,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_types.ml"
      }
    ],
    "a2357b1272e55c081d71220e42b2b7ae": [
      {
        "hash": "a2357b1272e55c081d71220e42b2b7ae",
        "text": "rhyme_groups : (string * rhyme_group_data) list;\nmetadata : (string * string) list;\n}",
        "lines": [
          "rhyme_groups : (string * rhyme_group_data) list;",
          "metadata : (string * string) list;",
          "}"
        ],
        "start_line": 52,
        "end_line": 54,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      },
      {
        "hash": "a2357b1272e55c081d71220e42b2b7ae",
        "text": "rhyme_groups : (string * rhyme_group_data) list;\nmetadata : (string * string) list;\n}",
        "lines": [
          "rhyme_groups : (string * rhyme_group_data) list;",
          "metadata : (string * string) list;",
          "}"
        ],
        "start_line": 58,
        "end_line": 60,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_core_types.ml"
      },
      {
        "hash": "a2357b1272e55c081d71220e42b2b7ae",
        "text": "rhyme_groups : (string * rhyme_group_data) list;\nmetadata : (string * string) list;\n}",
        "lines": [
          "rhyme_groups : (string * rhyme_group_data) list;",
          "metadata : (string * string) list;",
          "}"
        ],
        "start_line": 50,
        "end_line": 52,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_types.ml"
      },
      {
        "hash": "a2357b1272e55c081d71220e42b2b7ae",
        "text": "rhyme_groups : (string * rhyme_group_data) list;\nmetadata : (string * string) list;\n}",
        "lines": [
          "rhyme_groups : (string * rhyme_group_data) list;",
          "metadata : (string * string) list;",
          "}"
        ],
        "start_line": 44,
        "end_line": 46,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_api.ml"
      },
      {
        "hash": "a2357b1272e55c081d71220e42b2b7ae",
        "text": "rhyme_groups : (string * rhyme_group_data) list;\nmetadata : (string * string) list;\n}",
        "lines": [
          "rhyme_groups : (string * rhyme_group_data) list;",
          "metadata : (string * string) list;",
          "}"
        ],
        "start_line": 67,
        "end_line": 69,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_api.ml"
      }
    ],
    "872a2c6baf0ffff0203bef4e33d0f845": [
      {
        "hash": "872a2c6baf0ffff0203bef4e33d0f845",
        "text": "let string_to_rhyme_category = function\n| \"平声\" | \"ping_sheng\" -> PingSheng\n| \"仄声\" | \"ze_sheng\" -> ZeSheng\n| \"上声\" | \"shang_sheng\" -> ShangSheng\n| \"去声\" | \"qu_sheng\" -> QuSheng\n| \"入声\" | \"ru_sheng\" -> RuSheng\n| _ -> PingSheng",
        "lines": [
          "let string_to_rhyme_category = function",
          "| \"平声\" | \"ping_sheng\" -> PingSheng",
          "| \"仄声\" | \"ze_sheng\" -> ZeSheng",
          "| \"上声\" | \"shang_sheng\" -> ShangSheng",
          "| \"去声\" | \"qu_sheng\" -> QuSheng",
          "| \"入声\" | \"ru_sheng\" -> RuSheng",
          "| _ -> PingSheng"
        ],
        "start_line": 59,
        "end_line": 65,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      },
      {
        "hash": "872a2c6baf0ffff0203bef4e33d0f845",
        "text": "let string_to_rhyme_category = function\n| \"平声\" | \"ping_sheng\" -> PingSheng\n| \"仄声\" | \"ze_sheng\" -> ZeSheng\n| \"上声\" | \"shang_sheng\" -> ShangSheng\n| \"去声\" | \"qu_sheng\" -> QuSheng\n| \"入声\" | \"ru_sheng\" -> RuSheng\n| _ -> PingSheng",
        "lines": [
          "let string_to_rhyme_category = function",
          "| \"平声\" | \"ping_sheng\" -> PingSheng",
          "| \"仄声\" | \"ze_sheng\" -> ZeSheng",
          "| \"上声\" | \"shang_sheng\" -> ShangSheng",
          "| \"去声\" | \"qu_sheng\" -> QuSheng",
          "| \"入声\" | \"ru_sheng\" -> RuSheng",
          "| _ -> PingSheng"
        ],
        "start_line": 93,
        "end_line": 99,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_core_types.ml"
      },
      {
        "hash": "872a2c6baf0ffff0203bef4e33d0f845",
        "text": "let string_to_rhyme_category = function\n| \"平声\" | \"ping_sheng\" -> PingSheng\n| \"仄声\" | \"ze_sheng\" -> ZeSheng\n| \"上声\" | \"shang_sheng\" -> ShangSheng\n| \"去声\" | \"qu_sheng\" -> QuSheng\n| \"入声\" | \"ru_sheng\" -> RuSheng\n| _ -> PingSheng",
        "lines": [
          "let string_to_rhyme_category = function",
          "| \"平声\" | \"ping_sheng\" -> PingSheng",
          "| \"仄声\" | \"ze_sheng\" -> ZeSheng",
          "| \"上声\" | \"shang_sheng\" -> ShangSheng",
          "| \"去声\" | \"qu_sheng\" -> QuSheng",
          "| \"入声\" | \"ru_sheng\" -> RuSheng",
          "| _ -> PingSheng"
        ],
        "start_line": 58,
        "end_line": 64,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_types.ml"
      }
    ],
    "e1b5b04e76e8674c20fb59277bfee56f": [
      {
        "hash": "e1b5b04e76e8674c20fb59277bfee56f",
        "text": "| \"平声\" | \"ping_sheng\" -> PingSheng\n| \"仄声\" | \"ze_sheng\" -> ZeSheng\n| \"上声\" | \"shang_sheng\" -> ShangSheng\n| \"去声\" | \"qu_sheng\" -> QuSheng\n| \"入声\" | \"ru_sheng\" -> RuSheng\n| _ -> PingSheng",
        "lines": [
          "| \"平声\" | \"ping_sheng\" -> PingSheng",
          "| \"仄声\" | \"ze_sheng\" -> ZeSheng",
          "| \"上声\" | \"shang_sheng\" -> ShangSheng",
          "| \"去声\" | \"qu_sheng\" -> QuSheng",
          "| \"入声\" | \"ru_sheng\" -> RuSheng",
          "| _ -> PingSheng"
        ],
        "start_line": 60,
        "end_line": 65,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      },
      {
        "hash": "e1b5b04e76e8674c20fb59277bfee56f",
        "text": "| \"平声\" | \"ping_sheng\" -> PingSheng\n| \"仄声\" | \"ze_sheng\" -> ZeSheng\n| \"上声\" | \"shang_sheng\" -> ShangSheng\n| \"去声\" | \"qu_sheng\" -> QuSheng\n| \"入声\" | \"ru_sheng\" -> RuSheng\n| _ -> PingSheng",
        "lines": [
          "| \"平声\" | \"ping_sheng\" -> PingSheng",
          "| \"仄声\" | \"ze_sheng\" -> ZeSheng",
          "| \"上声\" | \"shang_sheng\" -> ShangSheng",
          "| \"去声\" | \"qu_sheng\" -> QuSheng",
          "| \"入声\" | \"ru_sheng\" -> RuSheng",
          "| _ -> PingSheng"
        ],
        "start_line": 94,
        "end_line": 99,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_core_types.ml"
      },
      {
        "hash": "e1b5b04e76e8674c20fb59277bfee56f",
        "text": "| \"平声\" | \"ping_sheng\" -> PingSheng\n| \"仄声\" | \"ze_sheng\" -> ZeSheng\n| \"上声\" | \"shang_sheng\" -> ShangSheng\n| \"去声\" | \"qu_sheng\" -> QuSheng\n| \"入声\" | \"ru_sheng\" -> RuSheng\n| _ -> PingSheng",
        "lines": [
          "| \"平声\" | \"ping_sheng\" -> PingSheng",
          "| \"仄声\" | \"ze_sheng\" -> ZeSheng",
          "| \"上声\" | \"shang_sheng\" -> ShangSheng",
          "| \"去声\" | \"qu_sheng\" -> QuSheng",
          "| \"入声\" | \"ru_sheng\" -> RuSheng",
          "| _ -> PingSheng"
        ],
        "start_line": 59,
        "end_line": 64,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_types.ml"
      }
    ],
    "1bb0a6b2e007262c0b6ecc166b3d37b4": [
      {
        "hash": "1bb0a6b2e007262c0b6ecc166b3d37b4",
        "text": "| \"仄声\" | \"ze_sheng\" -> ZeSheng\n| \"上声\" | \"shang_sheng\" -> ShangSheng\n| \"去声\" | \"qu_sheng\" -> QuSheng\n| \"入声\" | \"ru_sheng\" -> RuSheng\n| _ -> PingSheng",
        "lines": [
          "| \"仄声\" | \"ze_sheng\" -> ZeSheng",
          "| \"上声\" | \"shang_sheng\" -> ShangSheng",
          "| \"去声\" | \"qu_sheng\" -> QuSheng",
          "| \"入声\" | \"ru_sheng\" -> RuSheng",
          "| _ -> PingSheng"
        ],
        "start_line": 61,
        "end_line": 65,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      },
      {
        "hash": "1bb0a6b2e007262c0b6ecc166b3d37b4",
        "text": "| \"仄声\" | \"ze_sheng\" -> ZeSheng\n| \"上声\" | \"shang_sheng\" -> ShangSheng\n| \"去声\" | \"qu_sheng\" -> QuSheng\n| \"入声\" | \"ru_sheng\" -> RuSheng\n| _ -> PingSheng",
        "lines": [
          "| \"仄声\" | \"ze_sheng\" -> ZeSheng",
          "| \"上声\" | \"shang_sheng\" -> ShangSheng",
          "| \"去声\" | \"qu_sheng\" -> QuSheng",
          "| \"入声\" | \"ru_sheng\" -> RuSheng",
          "| _ -> PingSheng"
        ],
        "start_line": 95,
        "end_line": 99,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_core_types.ml"
      },
      {
        "hash": "1bb0a6b2e007262c0b6ecc166b3d37b4",
        "text": "| \"仄声\" | \"ze_sheng\" -> ZeSheng\n| \"上声\" | \"shang_sheng\" -> ShangSheng\n| \"去声\" | \"qu_sheng\" -> QuSheng\n| \"入声\" | \"ru_sheng\" -> RuSheng\n| _ -> PingSheng",
        "lines": [
          "| \"仄声\" | \"ze_sheng\" -> ZeSheng",
          "| \"上声\" | \"shang_sheng\" -> ShangSheng",
          "| \"去声\" | \"qu_sheng\" -> QuSheng",
          "| \"入声\" | \"ru_sheng\" -> RuSheng",
          "| _ -> PingSheng"
        ],
        "start_line": 60,
        "end_line": 64,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_types.ml"
      }
    ],
    "175a6692f95d954f4612722e809e749e": [
      {
        "hash": "175a6692f95d954f4612722e809e749e",
        "text": "| \"上声\" | \"shang_sheng\" -> ShangSheng\n| \"去声\" | \"qu_sheng\" -> QuSheng\n| \"入声\" | \"ru_sheng\" -> RuSheng\n| _ -> PingSheng",
        "lines": [
          "| \"上声\" | \"shang_sheng\" -> ShangSheng",
          "| \"去声\" | \"qu_sheng\" -> QuSheng",
          "| \"入声\" | \"ru_sheng\" -> RuSheng",
          "| _ -> PingSheng"
        ],
        "start_line": 62,
        "end_line": 65,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      },
      {
        "hash": "175a6692f95d954f4612722e809e749e",
        "text": "| \"上声\" | \"shang_sheng\" -> ShangSheng\n| \"去声\" | \"qu_sheng\" -> QuSheng\n| \"入声\" | \"ru_sheng\" -> RuSheng\n| _ -> PingSheng",
        "lines": [
          "| \"上声\" | \"shang_sheng\" -> ShangSheng",
          "| \"去声\" | \"qu_sheng\" -> QuSheng",
          "| \"入声\" | \"ru_sheng\" -> RuSheng",
          "| _ -> PingSheng"
        ],
        "start_line": 96,
        "end_line": 99,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_core_types.ml"
      },
      {
        "hash": "175a6692f95d954f4612722e809e749e",
        "text": "| \"上声\" | \"shang_sheng\" -> ShangSheng\n| \"去声\" | \"qu_sheng\" -> QuSheng\n| \"入声\" | \"ru_sheng\" -> RuSheng\n| _ -> PingSheng",
        "lines": [
          "| \"上声\" | \"shang_sheng\" -> ShangSheng",
          "| \"去声\" | \"qu_sheng\" -> QuSheng",
          "| \"入声\" | \"ru_sheng\" -> RuSheng",
          "| _ -> PingSheng"
        ],
        "start_line": 61,
        "end_line": 64,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_types.ml"
      }
    ],
    "cc28f7426a1e07caaba4f6640bdf86c3": [
      {
        "hash": "cc28f7426a1e07caaba4f6640bdf86c3",
        "text": "| \"去声\" | \"qu_sheng\" -> QuSheng\n| \"入声\" | \"ru_sheng\" -> RuSheng\n| _ -> PingSheng",
        "lines": [
          "| \"去声\" | \"qu_sheng\" -> QuSheng",
          "| \"入声\" | \"ru_sheng\" -> RuSheng",
          "| _ -> PingSheng"
        ],
        "start_line": 63,
        "end_line": 65,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      },
      {
        "hash": "cc28f7426a1e07caaba4f6640bdf86c3",
        "text": "| \"去声\" | \"qu_sheng\" -> QuSheng\n| \"入声\" | \"ru_sheng\" -> RuSheng\n| _ -> PingSheng",
        "lines": [
          "| \"去声\" | \"qu_sheng\" -> QuSheng",
          "| \"入声\" | \"ru_sheng\" -> RuSheng",
          "| _ -> PingSheng"
        ],
        "start_line": 97,
        "end_line": 99,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_core_types.ml"
      },
      {
        "hash": "cc28f7426a1e07caaba4f6640bdf86c3",
        "text": "| \"去声\" | \"qu_sheng\" -> QuSheng\n| \"入声\" | \"ru_sheng\" -> RuSheng\n| _ -> PingSheng",
        "lines": [
          "| \"去声\" | \"qu_sheng\" -> QuSheng",
          "| \"入声\" | \"ru_sheng\" -> RuSheng",
          "| _ -> PingSheng"
        ],
        "start_line": 62,
        "end_line": 64,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_types.ml"
      }
    ],
    "282897e3a2154b7eef5097a5b7458024": [
      {
        "hash": "282897e3a2154b7eef5097a5b7458024",
        "text": "let string_to_rhyme_group = function\n| \"安韵\" | \"an_rhyme\" -> AnRhyme\n| \"思韵\" | \"si_rhyme\" -> SiRhyme\n| \"天韵\" | \"tian_rhyme\" -> TianRhyme\n| \"王韵\" | \"wang_rhyme\" -> WangRhyme\n| \"曲韵\" | \"qu_rhyme\" -> QuRhyme\n| \"雨韵\" | \"yu_rhyme\" -> YuRhyme\n| \"花韵\" | \"hua_rhyme\" -> HuaRhyme\n| \"风韵\" | \"feng_rhyme\" -> FengRhyme\n| \"月韵\" | \"yue_rhyme\" -> YueRhyme",
        "lines": [
          "let string_to_rhyme_group = function",
          "| \"安韵\" | \"an_rhyme\" -> AnRhyme",
          "| \"思韵\" | \"si_rhyme\" -> SiRhyme",
          "| \"天韵\" | \"tian_rhyme\" -> TianRhyme",
          "| \"王韵\" | \"wang_rhyme\" -> WangRhyme",
          "| \"曲韵\" | \"qu_rhyme\" -> QuRhyme",
          "| \"雨韵\" | \"yu_rhyme\" -> YuRhyme",
          "| \"花韵\" | \"hua_rhyme\" -> HuaRhyme",
          "| \"风韵\" | \"feng_rhyme\" -> FengRhyme",
          "| \"月韵\" | \"yue_rhyme\" -> YueRhyme"
        ],
        "start_line": 68,
        "end_line": 77,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      },
      {
        "hash": "282897e3a2154b7eef5097a5b7458024",
        "text": "let string_to_rhyme_group = function\n| \"安韵\" | \"an_rhyme\" -> AnRhyme\n| \"思韵\" | \"si_rhyme\" -> SiRhyme\n| \"天韵\" | \"tian_rhyme\" -> TianRhyme\n| \"王韵\" | \"wang_rhyme\" -> WangRhyme\n| \"曲韵\" | \"qu_rhyme\" -> QuRhyme\n| \"雨韵\" | \"yu_rhyme\" -> YuRhyme\n| \"花韵\" | \"hua_rhyme\" -> HuaRhyme\n| \"风韵\" | \"feng_rhyme\" -> FengRhyme\n| \"月韵\" | \"yue_rhyme\" -> YueRhyme",
        "lines": [
          "let string_to_rhyme_group = function",
          "| \"安韵\" | \"an_rhyme\" -> AnRhyme",
          "| \"思韵\" | \"si_rhyme\" -> SiRhyme",
          "| \"天韵\" | \"tian_rhyme\" -> TianRhyme",
          "| \"王韵\" | \"wang_rhyme\" -> WangRhyme",
          "| \"曲韵\" | \"qu_rhyme\" -> QuRhyme",
          "| \"雨韵\" | \"yu_rhyme\" -> YuRhyme",
          "| \"花韵\" | \"hua_rhyme\" -> HuaRhyme",
          "| \"风韵\" | \"feng_rhyme\" -> FengRhyme",
          "| \"月韵\" | \"yue_rhyme\" -> YueRhyme"
        ],
        "start_line": 67,
        "end_line": 76,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_types.ml"
      }
    ],
    "2aed01b00171bc365ce5f9aaf044c0e4": [
      {
        "hash": "2aed01b00171bc365ce5f9aaf044c0e4",
        "text": "| \"安韵\" | \"an_rhyme\" -> AnRhyme\n| \"思韵\" | \"si_rhyme\" -> SiRhyme\n| \"天韵\" | \"tian_rhyme\" -> TianRhyme\n| \"王韵\" | \"wang_rhyme\" -> WangRhyme\n| \"曲韵\" | \"qu_rhyme\" -> QuRhyme\n| \"雨韵\" | \"yu_rhyme\" -> YuRhyme\n| \"花韵\" | \"hua_rhyme\" -> HuaRhyme\n| \"风韵\" | \"feng_rhyme\" -> FengRhyme\n| \"月韵\" | \"yue_rhyme\" -> YueRhyme\n| \"雪韵\" | \"xue_rhyme\" -> XueRhyme",
        "lines": [
          "| \"安韵\" | \"an_rhyme\" -> AnRhyme",
          "| \"思韵\" | \"si_rhyme\" -> SiRhyme",
          "| \"天韵\" | \"tian_rhyme\" -> TianRhyme",
          "| \"王韵\" | \"wang_rhyme\" -> WangRhyme",
          "| \"曲韵\" | \"qu_rhyme\" -> QuRhyme",
          "| \"雨韵\" | \"yu_rhyme\" -> YuRhyme",
          "| \"花韵\" | \"hua_rhyme\" -> HuaRhyme",
          "| \"风韵\" | \"feng_rhyme\" -> FengRhyme",
          "| \"月韵\" | \"yue_rhyme\" -> YueRhyme",
          "| \"雪韵\" | \"xue_rhyme\" -> XueRhyme"
        ],
        "start_line": 69,
        "end_line": 78,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      },
      {
        "hash": "2aed01b00171bc365ce5f9aaf044c0e4",
        "text": "| \"安韵\" | \"an_rhyme\" -> AnRhyme\n| \"思韵\" | \"si_rhyme\" -> SiRhyme\n| \"天韵\" | \"tian_rhyme\" -> TianRhyme\n| \"王韵\" | \"wang_rhyme\" -> WangRhyme\n| \"曲韵\" | \"qu_rhyme\" -> QuRhyme\n| \"雨韵\" | \"yu_rhyme\" -> YuRhyme\n| \"花韵\" | \"hua_rhyme\" -> HuaRhyme\n| \"风韵\" | \"feng_rhyme\" -> FengRhyme\n| \"月韵\" | \"yue_rhyme\" -> YueRhyme\n| \"雪韵\" | \"xue_rhyme\" -> XueRhyme",
        "lines": [
          "| \"安韵\" | \"an_rhyme\" -> AnRhyme",
          "| \"思韵\" | \"si_rhyme\" -> SiRhyme",
          "| \"天韵\" | \"tian_rhyme\" -> TianRhyme",
          "| \"王韵\" | \"wang_rhyme\" -> WangRhyme",
          "| \"曲韵\" | \"qu_rhyme\" -> QuRhyme",
          "| \"雨韵\" | \"yu_rhyme\" -> YuRhyme",
          "| \"花韵\" | \"hua_rhyme\" -> HuaRhyme",
          "| \"风韵\" | \"feng_rhyme\" -> FengRhyme",
          "| \"月韵\" | \"yue_rhyme\" -> YueRhyme",
          "| \"雪韵\" | \"xue_rhyme\" -> XueRhyme"
        ],
        "start_line": 68,
        "end_line": 77,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_types.ml"
      }
    ],
    "2d467e1163230d6e840dbd27f4de419f": [
      {
        "hash": "2d467e1163230d6e840dbd27f4de419f",
        "text": "| \"思韵\" | \"si_rhyme\" -> SiRhyme\n| \"天韵\" | \"tian_rhyme\" -> TianRhyme\n| \"王韵\" | \"wang_rhyme\" -> WangRhyme\n| \"曲韵\" | \"qu_rhyme\" -> QuRhyme\n| \"雨韵\" | \"yu_rhyme\" -> YuRhyme\n| \"花韵\" | \"hua_rhyme\" -> HuaRhyme\n| \"风韵\" | \"feng_rhyme\" -> FengRhyme\n| \"月韵\" | \"yue_rhyme\" -> YueRhyme\n| \"雪韵\" | \"xue_rhyme\" -> XueRhyme\n| \"江韵\" | \"jiang_rhyme\" -> JiangRhyme",
        "lines": [
          "| \"思韵\" | \"si_rhyme\" -> SiRhyme",
          "| \"天韵\" | \"tian_rhyme\" -> TianRhyme",
          "| \"王韵\" | \"wang_rhyme\" -> WangRhyme",
          "| \"曲韵\" | \"qu_rhyme\" -> QuRhyme",
          "| \"雨韵\" | \"yu_rhyme\" -> YuRhyme",
          "| \"花韵\" | \"hua_rhyme\" -> HuaRhyme",
          "| \"风韵\" | \"feng_rhyme\" -> FengRhyme",
          "| \"月韵\" | \"yue_rhyme\" -> YueRhyme",
          "| \"雪韵\" | \"xue_rhyme\" -> XueRhyme",
          "| \"江韵\" | \"jiang_rhyme\" -> JiangRhyme"
        ],
        "start_line": 70,
        "end_line": 79,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      },
      {
        "hash": "2d467e1163230d6e840dbd27f4de419f",
        "text": "| \"思韵\" | \"si_rhyme\" -> SiRhyme\n| \"天韵\" | \"tian_rhyme\" -> TianRhyme\n| \"王韵\" | \"wang_rhyme\" -> WangRhyme\n| \"曲韵\" | \"qu_rhyme\" -> QuRhyme\n| \"雨韵\" | \"yu_rhyme\" -> YuRhyme\n| \"花韵\" | \"hua_rhyme\" -> HuaRhyme\n| \"风韵\" | \"feng_rhyme\" -> FengRhyme\n| \"月韵\" | \"yue_rhyme\" -> YueRhyme\n| \"雪韵\" | \"xue_rhyme\" -> XueRhyme\n| \"江韵\" | \"jiang_rhyme\" -> JiangRhyme",
        "lines": [
          "| \"思韵\" | \"si_rhyme\" -> SiRhyme",
          "| \"天韵\" | \"tian_rhyme\" -> TianRhyme",
          "| \"王韵\" | \"wang_rhyme\" -> WangRhyme",
          "| \"曲韵\" | \"qu_rhyme\" -> QuRhyme",
          "| \"雨韵\" | \"yu_rhyme\" -> YuRhyme",
          "| \"花韵\" | \"hua_rhyme\" -> HuaRhyme",
          "| \"风韵\" | \"feng_rhyme\" -> FengRhyme",
          "| \"月韵\" | \"yue_rhyme\" -> YueRhyme",
          "| \"雪韵\" | \"xue_rhyme\" -> XueRhyme",
          "| \"江韵\" | \"jiang_rhyme\" -> JiangRhyme"
        ],
        "start_line": 69,
        "end_line": 78,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_types.ml"
      }
    ],
    "dffd15f8c5aeebf97ba5f2fe08121166": [
      {
        "hash": "dffd15f8c5aeebf97ba5f2fe08121166",
        "text": "| \"天韵\" | \"tian_rhyme\" -> TianRhyme\n| \"王韵\" | \"wang_rhyme\" -> WangRhyme\n| \"曲韵\" | \"qu_rhyme\" -> QuRhyme\n| \"雨韵\" | \"yu_rhyme\" -> YuRhyme\n| \"花韵\" | \"hua_rhyme\" -> HuaRhyme\n| \"风韵\" | \"feng_rhyme\" -> FengRhyme\n| \"月韵\" | \"yue_rhyme\" -> YueRhyme\n| \"雪韵\" | \"xue_rhyme\" -> XueRhyme\n| \"江韵\" | \"jiang_rhyme\" -> JiangRhyme\n| \"辉韵\" | \"hui_rhyme\" -> HuiRhyme",
        "lines": [
          "| \"天韵\" | \"tian_rhyme\" -> TianRhyme",
          "| \"王韵\" | \"wang_rhyme\" -> WangRhyme",
          "| \"曲韵\" | \"qu_rhyme\" -> QuRhyme",
          "| \"雨韵\" | \"yu_rhyme\" -> YuRhyme",
          "| \"花韵\" | \"hua_rhyme\" -> HuaRhyme",
          "| \"风韵\" | \"feng_rhyme\" -> FengRhyme",
          "| \"月韵\" | \"yue_rhyme\" -> YueRhyme",
          "| \"雪韵\" | \"xue_rhyme\" -> XueRhyme",
          "| \"江韵\" | \"jiang_rhyme\" -> JiangRhyme",
          "| \"辉韵\" | \"hui_rhyme\" -> HuiRhyme"
        ],
        "start_line": 71,
        "end_line": 80,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      },
      {
        "hash": "dffd15f8c5aeebf97ba5f2fe08121166",
        "text": "| \"天韵\" | \"tian_rhyme\" -> TianRhyme\n| \"王韵\" | \"wang_rhyme\" -> WangRhyme\n| \"曲韵\" | \"qu_rhyme\" -> QuRhyme\n| \"雨韵\" | \"yu_rhyme\" -> YuRhyme\n| \"花韵\" | \"hua_rhyme\" -> HuaRhyme\n| \"风韵\" | \"feng_rhyme\" -> FengRhyme\n| \"月韵\" | \"yue_rhyme\" -> YueRhyme\n| \"雪韵\" | \"xue_rhyme\" -> XueRhyme\n| \"江韵\" | \"jiang_rhyme\" -> JiangRhyme\n| \"辉韵\" | \"hui_rhyme\" -> HuiRhyme",
        "lines": [
          "| \"天韵\" | \"tian_rhyme\" -> TianRhyme",
          "| \"王韵\" | \"wang_rhyme\" -> WangRhyme",
          "| \"曲韵\" | \"qu_rhyme\" -> QuRhyme",
          "| \"雨韵\" | \"yu_rhyme\" -> YuRhyme",
          "| \"花韵\" | \"hua_rhyme\" -> HuaRhyme",
          "| \"风韵\" | \"feng_rhyme\" -> FengRhyme",
          "| \"月韵\" | \"yue_rhyme\" -> YueRhyme",
          "| \"雪韵\" | \"xue_rhyme\" -> XueRhyme",
          "| \"江韵\" | \"jiang_rhyme\" -> JiangRhyme",
          "| \"辉韵\" | \"hui_rhyme\" -> HuiRhyme"
        ],
        "start_line": 70,
        "end_line": 79,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_types.ml"
      }
    ],
    "ca50951ccdd1f62fbd9183852128cc41": [
      {
        "hash": "ca50951ccdd1f62fbd9183852128cc41",
        "text": "| \"王韵\" | \"wang_rhyme\" -> WangRhyme\n| \"曲韵\" | \"qu_rhyme\" -> QuRhyme\n| \"雨韵\" | \"yu_rhyme\" -> YuRhyme\n| \"花韵\" | \"hua_rhyme\" -> HuaRhyme\n| \"风韵\" | \"feng_rhyme\" -> FengRhyme\n| \"月韵\" | \"yue_rhyme\" -> YueRhyme\n| \"雪韵\" | \"xue_rhyme\" -> XueRhyme\n| \"江韵\" | \"jiang_rhyme\" -> JiangRhyme\n| \"辉韵\" | \"hui_rhyme\" -> HuiRhyme\n| _ -> UnknownRhyme",
        "lines": [
          "| \"王韵\" | \"wang_rhyme\" -> WangRhyme",
          "| \"曲韵\" | \"qu_rhyme\" -> QuRhyme",
          "| \"雨韵\" | \"yu_rhyme\" -> YuRhyme",
          "| \"花韵\" | \"hua_rhyme\" -> HuaRhyme",
          "| \"风韵\" | \"feng_rhyme\" -> FengRhyme",
          "| \"月韵\" | \"yue_rhyme\" -> YueRhyme",
          "| \"雪韵\" | \"xue_rhyme\" -> XueRhyme",
          "| \"江韵\" | \"jiang_rhyme\" -> JiangRhyme",
          "| \"辉韵\" | \"hui_rhyme\" -> HuiRhyme",
          "| _ -> UnknownRhyme"
        ],
        "start_line": 72,
        "end_line": 81,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      },
      {
        "hash": "ca50951ccdd1f62fbd9183852128cc41",
        "text": "| \"王韵\" | \"wang_rhyme\" -> WangRhyme\n| \"曲韵\" | \"qu_rhyme\" -> QuRhyme\n| \"雨韵\" | \"yu_rhyme\" -> YuRhyme\n| \"花韵\" | \"hua_rhyme\" -> HuaRhyme\n| \"风韵\" | \"feng_rhyme\" -> FengRhyme\n| \"月韵\" | \"yue_rhyme\" -> YueRhyme\n| \"雪韵\" | \"xue_rhyme\" -> XueRhyme\n| \"江韵\" | \"jiang_rhyme\" -> JiangRhyme\n| \"辉韵\" | \"hui_rhyme\" -> HuiRhyme\n| _ -> UnknownRhyme",
        "lines": [
          "| \"王韵\" | \"wang_rhyme\" -> WangRhyme",
          "| \"曲韵\" | \"qu_rhyme\" -> QuRhyme",
          "| \"雨韵\" | \"yu_rhyme\" -> YuRhyme",
          "| \"花韵\" | \"hua_rhyme\" -> HuaRhyme",
          "| \"风韵\" | \"feng_rhyme\" -> FengRhyme",
          "| \"月韵\" | \"yue_rhyme\" -> YueRhyme",
          "| \"雪韵\" | \"xue_rhyme\" -> XueRhyme",
          "| \"江韵\" | \"jiang_rhyme\" -> JiangRhyme",
          "| \"辉韵\" | \"hui_rhyme\" -> HuiRhyme",
          "| _ -> UnknownRhyme"
        ],
        "start_line": 71,
        "end_line": 80,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_types.ml"
      }
    ],
    "ce5e62f346e4e23aed0fdf46a017901b": [
      {
        "hash": "ce5e62f346e4e23aed0fdf46a017901b",
        "text": "| \"曲韵\" | \"qu_rhyme\" -> QuRhyme\n| \"雨韵\" | \"yu_rhyme\" -> YuRhyme\n| \"花韵\" | \"hua_rhyme\" -> HuaRhyme\n| \"风韵\" | \"feng_rhyme\" -> FengRhyme\n| \"月韵\" | \"yue_rhyme\" -> YueRhyme\n| \"雪韵\" | \"xue_rhyme\" -> XueRhyme\n| \"江韵\" | \"jiang_rhyme\" -> JiangRhyme\n| \"辉韵\" | \"hui_rhyme\" -> HuiRhyme\n| _ -> UnknownRhyme",
        "lines": [
          "| \"曲韵\" | \"qu_rhyme\" -> QuRhyme",
          "| \"雨韵\" | \"yu_rhyme\" -> YuRhyme",
          "| \"花韵\" | \"hua_rhyme\" -> HuaRhyme",
          "| \"风韵\" | \"feng_rhyme\" -> FengRhyme",
          "| \"月韵\" | \"yue_rhyme\" -> YueRhyme",
          "| \"雪韵\" | \"xue_rhyme\" -> XueRhyme",
          "| \"江韵\" | \"jiang_rhyme\" -> JiangRhyme",
          "| \"辉韵\" | \"hui_rhyme\" -> HuiRhyme",
          "| _ -> UnknownRhyme"
        ],
        "start_line": 73,
        "end_line": 81,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      },
      {
        "hash": "ce5e62f346e4e23aed0fdf46a017901b",
        "text": "| \"曲韵\" | \"qu_rhyme\" -> QuRhyme\n| \"雨韵\" | \"yu_rhyme\" -> YuRhyme\n| \"花韵\" | \"hua_rhyme\" -> HuaRhyme\n| \"风韵\" | \"feng_rhyme\" -> FengRhyme\n| \"月韵\" | \"yue_rhyme\" -> YueRhyme\n| \"雪韵\" | \"xue_rhyme\" -> XueRhyme\n| \"江韵\" | \"jiang_rhyme\" -> JiangRhyme\n| \"辉韵\" | \"hui_rhyme\" -> HuiRhyme\n| _ -> UnknownRhyme",
        "lines": [
          "| \"曲韵\" | \"qu_rhyme\" -> QuRhyme",
          "| \"雨韵\" | \"yu_rhyme\" -> YuRhyme",
          "| \"花韵\" | \"hua_rhyme\" -> HuaRhyme",
          "| \"风韵\" | \"feng_rhyme\" -> FengRhyme",
          "| \"月韵\" | \"yue_rhyme\" -> YueRhyme",
          "| \"雪韵\" | \"xue_rhyme\" -> XueRhyme",
          "| \"江韵\" | \"jiang_rhyme\" -> JiangRhyme",
          "| \"辉韵\" | \"hui_rhyme\" -> HuiRhyme",
          "| _ -> UnknownRhyme"
        ],
        "start_line": 72,
        "end_line": 80,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_types.ml"
      }
    ],
    "930e64bd43c035d357cb8771b99307e2": [
      {
        "hash": "930e64bd43c035d357cb8771b99307e2",
        "text": "| \"雨韵\" | \"yu_rhyme\" -> YuRhyme\n| \"花韵\" | \"hua_rhyme\" -> HuaRhyme\n| \"风韵\" | \"feng_rhyme\" -> FengRhyme\n| \"月韵\" | \"yue_rhyme\" -> YueRhyme\n| \"雪韵\" | \"xue_rhyme\" -> XueRhyme\n| \"江韵\" | \"jiang_rhyme\" -> JiangRhyme\n| \"辉韵\" | \"hui_rhyme\" -> HuiRhyme\n| _ -> UnknownRhyme",
        "lines": [
          "| \"雨韵\" | \"yu_rhyme\" -> YuRhyme",
          "| \"花韵\" | \"hua_rhyme\" -> HuaRhyme",
          "| \"风韵\" | \"feng_rhyme\" -> FengRhyme",
          "| \"月韵\" | \"yue_rhyme\" -> YueRhyme",
          "| \"雪韵\" | \"xue_rhyme\" -> XueRhyme",
          "| \"江韵\" | \"jiang_rhyme\" -> JiangRhyme",
          "| \"辉韵\" | \"hui_rhyme\" -> HuiRhyme",
          "| _ -> UnknownRhyme"
        ],
        "start_line": 74,
        "end_line": 81,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      },
      {
        "hash": "930e64bd43c035d357cb8771b99307e2",
        "text": "| \"雨韵\" | \"yu_rhyme\" -> YuRhyme\n| \"花韵\" | \"hua_rhyme\" -> HuaRhyme\n| \"风韵\" | \"feng_rhyme\" -> FengRhyme\n| \"月韵\" | \"yue_rhyme\" -> YueRhyme\n| \"雪韵\" | \"xue_rhyme\" -> XueRhyme\n| \"江韵\" | \"jiang_rhyme\" -> JiangRhyme\n| \"辉韵\" | \"hui_rhyme\" -> HuiRhyme\n| _ -> UnknownRhyme",
        "lines": [
          "| \"雨韵\" | \"yu_rhyme\" -> YuRhyme",
          "| \"花韵\" | \"hua_rhyme\" -> HuaRhyme",
          "| \"风韵\" | \"feng_rhyme\" -> FengRhyme",
          "| \"月韵\" | \"yue_rhyme\" -> YueRhyme",
          "| \"雪韵\" | \"xue_rhyme\" -> XueRhyme",
          "| \"江韵\" | \"jiang_rhyme\" -> JiangRhyme",
          "| \"辉韵\" | \"hui_rhyme\" -> HuiRhyme",
          "| _ -> UnknownRhyme"
        ],
        "start_line": 73,
        "end_line": 80,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_types.ml"
      }
    ],
    "3659aa6e99eeec95657fe5792a09a5ea": [
      {
        "hash": "3659aa6e99eeec95657fe5792a09a5ea",
        "text": "| \"花韵\" | \"hua_rhyme\" -> HuaRhyme\n| \"风韵\" | \"feng_rhyme\" -> FengRhyme\n| \"月韵\" | \"yue_rhyme\" -> YueRhyme\n| \"雪韵\" | \"xue_rhyme\" -> XueRhyme\n| \"江韵\" | \"jiang_rhyme\" -> JiangRhyme\n| \"辉韵\" | \"hui_rhyme\" -> HuiRhyme\n| _ -> UnknownRhyme",
        "lines": [
          "| \"花韵\" | \"hua_rhyme\" -> HuaRhyme",
          "| \"风韵\" | \"feng_rhyme\" -> FengRhyme",
          "| \"月韵\" | \"yue_rhyme\" -> YueRhyme",
          "| \"雪韵\" | \"xue_rhyme\" -> XueRhyme",
          "| \"江韵\" | \"jiang_rhyme\" -> JiangRhyme",
          "| \"辉韵\" | \"hui_rhyme\" -> HuiRhyme",
          "| _ -> UnknownRhyme"
        ],
        "start_line": 75,
        "end_line": 81,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      },
      {
        "hash": "3659aa6e99eeec95657fe5792a09a5ea",
        "text": "| \"花韵\" | \"hua_rhyme\" -> HuaRhyme\n| \"风韵\" | \"feng_rhyme\" -> FengRhyme\n| \"月韵\" | \"yue_rhyme\" -> YueRhyme\n| \"雪韵\" | \"xue_rhyme\" -> XueRhyme\n| \"江韵\" | \"jiang_rhyme\" -> JiangRhyme\n| \"辉韵\" | \"hui_rhyme\" -> HuiRhyme\n| _ -> UnknownRhyme",
        "lines": [
          "| \"花韵\" | \"hua_rhyme\" -> HuaRhyme",
          "| \"风韵\" | \"feng_rhyme\" -> FengRhyme",
          "| \"月韵\" | \"yue_rhyme\" -> YueRhyme",
          "| \"雪韵\" | \"xue_rhyme\" -> XueRhyme",
          "| \"江韵\" | \"jiang_rhyme\" -> JiangRhyme",
          "| \"辉韵\" | \"hui_rhyme\" -> HuiRhyme",
          "| _ -> UnknownRhyme"
        ],
        "start_line": 74,
        "end_line": 80,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_types.ml"
      }
    ],
    "612c42ebd629dd01f7f9bde72fca553a": [
      {
        "hash": "612c42ebd629dd01f7f9bde72fca553a",
        "text": "| \"风韵\" | \"feng_rhyme\" -> FengRhyme\n| \"月韵\" | \"yue_rhyme\" -> YueRhyme\n| \"雪韵\" | \"xue_rhyme\" -> XueRhyme\n| \"江韵\" | \"jiang_rhyme\" -> JiangRhyme\n| \"辉韵\" | \"hui_rhyme\" -> HuiRhyme\n| _ -> UnknownRhyme",
        "lines": [
          "| \"风韵\" | \"feng_rhyme\" -> FengRhyme",
          "| \"月韵\" | \"yue_rhyme\" -> YueRhyme",
          "| \"雪韵\" | \"xue_rhyme\" -> XueRhyme",
          "| \"江韵\" | \"jiang_rhyme\" -> JiangRhyme",
          "| \"辉韵\" | \"hui_rhyme\" -> HuiRhyme",
          "| _ -> UnknownRhyme"
        ],
        "start_line": 76,
        "end_line": 81,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      },
      {
        "hash": "612c42ebd629dd01f7f9bde72fca553a",
        "text": "| \"风韵\" | \"feng_rhyme\" -> FengRhyme\n| \"月韵\" | \"yue_rhyme\" -> YueRhyme\n| \"雪韵\" | \"xue_rhyme\" -> XueRhyme\n| \"江韵\" | \"jiang_rhyme\" -> JiangRhyme\n| \"辉韵\" | \"hui_rhyme\" -> HuiRhyme\n| _ -> UnknownRhyme",
        "lines": [
          "| \"风韵\" | \"feng_rhyme\" -> FengRhyme",
          "| \"月韵\" | \"yue_rhyme\" -> YueRhyme",
          "| \"雪韵\" | \"xue_rhyme\" -> XueRhyme",
          "| \"江韵\" | \"jiang_rhyme\" -> JiangRhyme",
          "| \"辉韵\" | \"hui_rhyme\" -> HuiRhyme",
          "| _ -> UnknownRhyme"
        ],
        "start_line": 75,
        "end_line": 80,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_types.ml"
      }
    ],
    "3aeb7848f6700f3dd65296836fb0dee5": [
      {
        "hash": "3aeb7848f6700f3dd65296836fb0dee5",
        "text": "| \"月韵\" | \"yue_rhyme\" -> YueRhyme\n| \"雪韵\" | \"xue_rhyme\" -> XueRhyme\n| \"江韵\" | \"jiang_rhyme\" -> JiangRhyme\n| \"辉韵\" | \"hui_rhyme\" -> HuiRhyme\n| _ -> UnknownRhyme",
        "lines": [
          "| \"月韵\" | \"yue_rhyme\" -> YueRhyme",
          "| \"雪韵\" | \"xue_rhyme\" -> XueRhyme",
          "| \"江韵\" | \"jiang_rhyme\" -> JiangRhyme",
          "| \"辉韵\" | \"hui_rhyme\" -> HuiRhyme",
          "| _ -> UnknownRhyme"
        ],
        "start_line": 77,
        "end_line": 81,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      },
      {
        "hash": "3aeb7848f6700f3dd65296836fb0dee5",
        "text": "| \"月韵\" | \"yue_rhyme\" -> YueRhyme\n| \"雪韵\" | \"xue_rhyme\" -> XueRhyme\n| \"江韵\" | \"jiang_rhyme\" -> JiangRhyme\n| \"辉韵\" | \"hui_rhyme\" -> HuiRhyme\n| _ -> UnknownRhyme",
        "lines": [
          "| \"月韵\" | \"yue_rhyme\" -> YueRhyme",
          "| \"雪韵\" | \"xue_rhyme\" -> XueRhyme",
          "| \"江韵\" | \"jiang_rhyme\" -> JiangRhyme",
          "| \"辉韵\" | \"hui_rhyme\" -> HuiRhyme",
          "| _ -> UnknownRhyme"
        ],
        "start_line": 76,
        "end_line": 80,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_types.ml"
      }
    ],
    "b4209632ec58c10cf06853b5c4d95403": [
      {
        "hash": "b4209632ec58c10cf06853b5c4d95403",
        "text": "| \"雪韵\" | \"xue_rhyme\" -> XueRhyme\n| \"江韵\" | \"jiang_rhyme\" -> JiangRhyme\n| \"辉韵\" | \"hui_rhyme\" -> HuiRhyme\n| _ -> UnknownRhyme",
        "lines": [
          "| \"雪韵\" | \"xue_rhyme\" -> XueRhyme",
          "| \"江韵\" | \"jiang_rhyme\" -> JiangRhyme",
          "| \"辉韵\" | \"hui_rhyme\" -> HuiRhyme",
          "| _ -> UnknownRhyme"
        ],
        "start_line": 78,
        "end_line": 81,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      },
      {
        "hash": "b4209632ec58c10cf06853b5c4d95403",
        "text": "| \"雪韵\" | \"xue_rhyme\" -> XueRhyme\n| \"江韵\" | \"jiang_rhyme\" -> JiangRhyme\n| \"辉韵\" | \"hui_rhyme\" -> HuiRhyme\n| _ -> UnknownRhyme",
        "lines": [
          "| \"雪韵\" | \"xue_rhyme\" -> XueRhyme",
          "| \"江韵\" | \"jiang_rhyme\" -> JiangRhyme",
          "| \"辉韵\" | \"hui_rhyme\" -> HuiRhyme",
          "| _ -> UnknownRhyme"
        ],
        "start_line": 77,
        "end_line": 80,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_types.ml"
      }
    ],
    "a440547fac300a1b9eff9af90a112cf7": [
      {
        "hash": "a440547fac300a1b9eff9af90a112cf7",
        "text": "| \"江韵\" | \"jiang_rhyme\" -> JiangRhyme\n| \"辉韵\" | \"hui_rhyme\" -> HuiRhyme\n| _ -> UnknownRhyme",
        "lines": [
          "| \"江韵\" | \"jiang_rhyme\" -> JiangRhyme",
          "| \"辉韵\" | \"hui_rhyme\" -> HuiRhyme",
          "| _ -> UnknownRhyme"
        ],
        "start_line": 79,
        "end_line": 81,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      },
      {
        "hash": "a440547fac300a1b9eff9af90a112cf7",
        "text": "| \"江韵\" | \"jiang_rhyme\" -> JiangRhyme\n| \"辉韵\" | \"hui_rhyme\" -> HuiRhyme\n| _ -> UnknownRhyme",
        "lines": [
          "| \"江韵\" | \"jiang_rhyme\" -> JiangRhyme",
          "| \"辉韵\" | \"hui_rhyme\" -> HuiRhyme",
          "| _ -> UnknownRhyme"
        ],
        "start_line": 78,
        "end_line": 80,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_types.ml"
      }
    ],
    "915b04ac013a20219a16d8668a53fbe4": [
      {
        "hash": "915b04ac013a20219a16d8668a53fbe4",
        "text": "let is_cache_valid () =\nmatch !cached_data with\n| None -> false\n| Some _ ->\nlet current_time = Unix.time () in\ncurrent_time -. !cache_timestamp < cache_ttl",
        "lines": [
          "let is_cache_valid () =",
          "match !cached_data with",
          "| None -> false",
          "| Some _ ->",
          "let current_time = Unix.time () in",
          "current_time -. !cache_timestamp < cache_ttl"
        ],
        "start_line": 95,
        "end_line": 100,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      },
      {
        "hash": "915b04ac013a20219a16d8668a53fbe4",
        "text": "let is_cache_valid () =\nmatch !cached_data with\n| None -> false\n| Some _ ->\nlet current_time = Unix.time () in\ncurrent_time -. !cache_timestamp < cache_ttl",
        "lines": [
          "let is_cache_valid () =",
          "match !cached_data with",
          "| None -> false",
          "| Some _ ->",
          "let current_time = Unix.time () in",
          "current_time -. !cache_timestamp < cache_ttl"
        ],
        "start_line": 27,
        "end_line": 32,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_cache.ml"
      }
    ],
    "996bb0ae4aad449571b2c5fd5c565c0b": [
      {
        "hash": "996bb0ae4aad449571b2c5fd5c565c0b",
        "text": "let set_cached_data data =\ncached_data := Some data;\ncache_timestamp := Unix.time ()",
        "lines": [
          "let set_cached_data data =",
          "cached_data := Some data;",
          "cache_timestamp := Unix.time ()"
        ],
        "start_line": 109,
        "end_line": 111,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      },
      {
        "hash": "996bb0ae4aad449571b2c5fd5c565c0b",
        "text": "let set_cached_data data =\ncached_data := Some data;\ncache_timestamp := Unix.time ()",
        "lines": [
          "let set_cached_data data =",
          "cached_data := Some data;",
          "cache_timestamp := Unix.time ()"
        ],
        "start_line": 39,
        "end_line": 41,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_cache.ml"
      }
    ],
    "6b4ab3e83c7c218aa18261ac4c80420b": [
      {
        "hash": "6b4ab3e83c7c218aa18261ac4c80420b",
        "text": "let clear_cache () =\ncached_data := None;\ncache_timestamp := 0.0",
        "lines": [
          "let clear_cache () =",
          "cached_data := None;",
          "cache_timestamp := 0.0"
        ],
        "start_line": 114,
        "end_line": 116,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      },
      {
        "hash": "6b4ab3e83c7c218aa18261ac4c80420b",
        "text": "let clear_cache () =\ncached_data := None;\ncache_timestamp := 0.0",
        "lines": [
          "let clear_cache () =",
          "cached_data := None;",
          "cache_timestamp := 0.0"
        ],
        "start_line": 44,
        "end_line": 46,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_cache.ml"
      }
    ],
    "80ad503543884732882dbf4cbb4ad56a": [
      {
        "hash": "80ad503543884732882dbf4cbb4ad56a",
        "text": "let refresh_cache data =\nclear_cache ();\nset_cached_data data",
        "lines": [
          "let refresh_cache data =",
          "clear_cache ();",
          "set_cached_data data"
        ],
        "start_line": 119,
        "end_line": 121,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      },
      {
        "hash": "80ad503543884732882dbf4cbb4ad56a",
        "text": "let refresh_cache data =\nclear_cache ();\nset_cached_data data",
        "lines": [
          "let refresh_cache data =",
          "clear_cache ();",
          "set_cached_data data"
        ],
        "start_line": 49,
        "end_line": 51,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_cache.ml"
      }
    ],
    "a423fe9a04688a49f4f70b17d3de4740": [
      {
        "hash": "a423fe9a04688a49f4f70b17d3de4740",
        "text": "let fallback_rhyme_data =\n[\n(\"安韵\", { category = \"平声\"; characters = [ \"安\"; \"看\"; \"山\" ] });\n(\"思韵\", { category = \"仄声\"; characters = [ \"思\"; \"之\"; \"子\" ] });\n]",
        "lines": [
          "let fallback_rhyme_data =",
          "[",
          "(\"安韵\", { category = \"平声\"; characters = [ \"安\"; \"看\"; \"山\" ] });",
          "(\"思韵\", { category = \"仄声\"; characters = [ \"思\"; \"之\"; \"子\" ] });",
          "]"
        ],
        "start_line": 280,
        "end_line": 284,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      },
      {
        "hash": "a423fe9a04688a49f4f70b17d3de4740",
        "text": "let fallback_rhyme_data =\n[\n(\"安韵\", { category = \"平声\"; characters = [ \"安\"; \"看\"; \"山\" ] });\n(\"思韵\", { category = \"仄声\"; characters = [ \"思\"; \"之\"; \"子\" ] });\n]",
        "lines": [
          "let fallback_rhyme_data =",
          "[",
          "(\"安韵\", { category = \"平声\"; characters = [ \"安\"; \"看\"; \"山\" ] });",
          "(\"思韵\", { category = \"仄声\"; characters = [ \"思\"; \"之\"; \"子\" ] });",
          "]"
        ],
        "start_line": 15,
        "end_line": 19,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_fallback.ml"
      }
    ],
    "56f82cc59e52cddc9d4a4808676aa28e": [
      {
        "hash": "56f82cc59e52cddc9d4a4808676aa28e",
        "text": "[\n(\"安韵\", { category = \"平声\"; characters = [ \"安\"; \"看\"; \"山\" ] });\n(\"思韵\", { category = \"仄声\"; characters = [ \"思\"; \"之\"; \"子\" ] });\n]",
        "lines": [
          "[",
          "(\"安韵\", { category = \"平声\"; characters = [ \"安\"; \"看\"; \"山\" ] });",
          "(\"思韵\", { category = \"仄声\"; characters = [ \"思\"; \"之\"; \"子\" ] });",
          "]"
        ],
        "start_line": 281,
        "end_line": 284,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      },
      {
        "hash": "56f82cc59e52cddc9d4a4808676aa28e",
        "text": "[\n(\"安韵\", { category = \"平声\"; characters = [ \"安\"; \"看\"; \"山\" ] });\n(\"思韵\", { category = \"仄声\"; characters = [ \"思\"; \"之\"; \"子\" ] });\n]",
        "lines": [
          "[",
          "(\"安韵\", { category = \"平声\"; characters = [ \"安\"; \"看\"; \"山\" ] });",
          "(\"思韵\", { category = \"仄声\"; characters = [ \"思\"; \"之\"; \"子\" ] });",
          "]"
        ],
        "start_line": 16,
        "end_line": 19,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_fallback.ml"
      }
    ],
    "a37769e680f5e997d7516dc58cdcff25": [
      {
        "hash": "a37769e680f5e997d7516dc58cdcff25",
        "text": "(\"安韵\", { category = \"平声\"; characters = [ \"安\"; \"看\"; \"山\" ] });\n(\"思韵\", { category = \"仄声\"; characters = [ \"思\"; \"之\"; \"子\" ] });\n]",
        "lines": [
          "(\"安韵\", { category = \"平声\"; characters = [ \"安\"; \"看\"; \"山\" ] });",
          "(\"思韵\", { category = \"仄声\"; characters = [ \"思\"; \"之\"; \"子\" ] });",
          "]"
        ],
        "start_line": 282,
        "end_line": 284,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      },
      {
        "hash": "a37769e680f5e997d7516dc58cdcff25",
        "text": "(\"安韵\", { category = \"平声\"; characters = [ \"安\"; \"看\"; \"山\" ] });\n(\"思韵\", { category = \"仄声\"; characters = [ \"思\"; \"之\"; \"子\" ] });\n]",
        "lines": [
          "(\"安韵\", { category = \"平声\"; characters = [ \"安\"; \"看\"; \"山\" ] });",
          "(\"思韵\", { category = \"仄声\"; characters = [ \"思\"; \"之\"; \"子\" ] });",
          "]"
        ],
        "start_line": 17,
        "end_line": 19,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_fallback.ml"
      }
    ],
    "5605714bb3e9812f74c785e94fb37b62": [
      {
        "hash": "5605714bb3e9812f74c785e94fb37b62",
        "text": "let use_fallback_data () =\nPrintf.eprintf \"警告: 使用降级韵律数据\\n%!\";\nlet data = { rhyme_groups = fallback_rhyme_data; metadata = [] } in\nset_cached_data data;\ndata",
        "lines": [
          "let use_fallback_data () =",
          "Printf.eprintf \"警告: 使用降级韵律数据\\n%!\";",
          "let data = { rhyme_groups = fallback_rhyme_data; metadata = [] } in",
          "set_cached_data data;",
          "data"
        ],
        "start_line": 287,
        "end_line": 291,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      },
      {
        "hash": "5605714bb3e9812f74c785e94fb37b62",
        "text": "let use_fallback_data () =\nPrintf.eprintf \"警告: 使用降级韵律数据\\n%!\";\nlet data = { rhyme_groups = fallback_rhyme_data; metadata = [] } in\nset_cached_data data;\ndata",
        "lines": [
          "let use_fallback_data () =",
          "Printf.eprintf \"警告: 使用降级韵律数据\\n%!\";",
          "let data = { rhyme_groups = fallback_rhyme_data; metadata = [] } in",
          "set_cached_data data;",
          "data"
        ],
        "start_line": 24,
        "end_line": 28,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_fallback.ml"
      }
    ],
    "e025f0e52f6cdda8e35cb4ffc42e4b9b": [
      {
        "hash": "e025f0e52f6cdda8e35cb4ffc42e4b9b",
        "text": "Printf.eprintf \"警告: 使用降级韵律数据\\n%!\";\nlet data = { rhyme_groups = fallback_rhyme_data; metadata = [] } in\nset_cached_data data;\ndata",
        "lines": [
          "Printf.eprintf \"警告: 使用降级韵律数据\\n%!\";",
          "let data = { rhyme_groups = fallback_rhyme_data; metadata = [] } in",
          "set_cached_data data;",
          "data"
        ],
        "start_line": 288,
        "end_line": 291,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      },
      {
        "hash": "e025f0e52f6cdda8e35cb4ffc42e4b9b",
        "text": "Printf.eprintf \"警告: 使用降级韵律数据\\n%!\";\nlet data = { rhyme_groups = fallback_rhyme_data; metadata = [] } in\nset_cached_data data;\ndata",
        "lines": [
          "Printf.eprintf \"警告: 使用降级韵律数据\\n%!\";",
          "let data = { rhyme_groups = fallback_rhyme_data; metadata = [] } in",
          "set_cached_data data;",
          "data"
        ],
        "start_line": 25,
        "end_line": 28,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_fallback.ml"
      }
    ],
    "2530e2421c17d14da37a74f04be14d96": [
      {
        "hash": "2530e2421c17d14da37a74f04be14d96",
        "text": "let data = { rhyme_groups = fallback_rhyme_data; metadata = [] } in\nset_cached_data data;\ndata",
        "lines": [
          "let data = { rhyme_groups = fallback_rhyme_data; metadata = [] } in",
          "set_cached_data data;",
          "data"
        ],
        "start_line": 289,
        "end_line": 291,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_core.ml"
      },
      {
        "hash": "2530e2421c17d14da37a74f04be14d96",
        "text": "let data = { rhyme_groups = fallback_rhyme_data; metadata = [] } in\nset_cached_data data;\ndata",
        "lines": [
          "let data = { rhyme_groups = fallback_rhyme_data; metadata = [] } in",
          "set_cached_data data;",
          "data"
        ],
        "start_line": 26,
        "end_line": 28,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_fallback.ml"
      }
    ],
    "1d818a804a12805cc8d581ff6d36c0f7": [
      {
        "hash": "1d818a804a12805cc8d581ff6d36c0f7",
        "text": "try\nlet tone = List.assoc char_str Tone_data.tone_database in\nSome tone\nwith Not_found -> None",
        "lines": [
          "try",
          "let tone = List.assoc char_str Tone_data.tone_database in",
          "Some tone",
          "with Not_found -> None"
        ],
        "start_line": 21,
        "end_line": 24,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/tone_pattern.ml"
      },
      {
        "hash": "1d818a804a12805cc8d581ff6d36c0f7",
        "text": "try\nlet tone = List.assoc char_str Tone_data.tone_database in\nSome tone\nwith Not_found -> None",
        "lines": [
          "try",
          "let tone = List.assoc char_str Tone_data.tone_database in",
          "Some tone",
          "with Not_found -> None"
        ],
        "start_line": 28,
        "end_line": 31,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/tone_pattern.ml"
      }
    ],
    "cf4dafb59a87c3c7fa4b3cc5c7ce6369": [
      {
        "hash": "cf4dafb59a87c3c7fa4b3cc5c7ce6369",
        "text": "let tone = List.assoc char_str Tone_data.tone_database in\nSome tone\nwith Not_found -> None",
        "lines": [
          "let tone = List.assoc char_str Tone_data.tone_database in",
          "Some tone",
          "with Not_found -> None"
        ],
        "start_line": 22,
        "end_line": 24,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/tone_pattern.ml"
      },
      {
        "hash": "cf4dafb59a87c3c7fa4b3cc5c7ce6369",
        "text": "let tone = List.assoc char_str Tone_data.tone_database in\nSome tone\nwith Not_found -> None",
        "lines": [
          "let tone = List.assoc char_str Tone_data.tone_database in",
          "Some tone",
          "with Not_found -> None"
        ],
        "start_line": 29,
        "end_line": 31,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/tone_pattern.ml"
      }
    ],
    "b35f29629e16e0f27286b57758287d37": [
      {
        "hash": "b35f29629e16e0f27286b57758287d37",
        "text": "type data_source_entry = {\nname : string;\nsource : data_source;\npriority : int;\ndescription : string;\n}",
        "lines": [
          "type data_source_entry = {",
          "name : string;",
          "source : data_source;",
          "priority : int;",
          "description : string;",
          "}"
        ],
        "start_line": 18,
        "end_line": 23,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_data_unified.ml"
      },
      {
        "hash": "b35f29629e16e0f27286b57758287d37",
        "text": "type data_source_entry = {\nname : string;\nsource : data_source;\npriority : int;\ndescription : string;\n}",
        "lines": [
          "type data_source_entry = {",
          "name : string;",
          "source : data_source;",
          "priority : int;",
          "description : string;",
          "}"
        ],
        "start_line": 19,
        "end_line": 24,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/data_source_manager.ml"
      }
    ],
    "1dc9419922dd316bde0afd6d0e40f5f3": [
      {
        "hash": "1dc9419922dd316bde0afd6d0e40f5f3",
        "text": "name : string;\nsource : data_source;\npriority : int;\ndescription : string;\n}",
        "lines": [
          "name : string;",
          "source : data_source;",
          "priority : int;",
          "description : string;",
          "}"
        ],
        "start_line": 19,
        "end_line": 23,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_data_unified.ml"
      },
      {
        "hash": "1dc9419922dd316bde0afd6d0e40f5f3",
        "text": "name : string;\nsource : data_source;\npriority : int;\ndescription : string;\n}",
        "lines": [
          "name : string;",
          "source : data_source;",
          "priority : int;",
          "description : string;",
          "}"
        ],
        "start_line": 20,
        "end_line": 24,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/data_source_manager.ml"
      }
    ],
    "34c1cff2c82f6a15ba63fdfc0fb3061f": [
      {
        "hash": "34c1cff2c82f6a15ba63fdfc0fb3061f",
        "text": "source : data_source;\npriority : int;\ndescription : string;\n}",
        "lines": [
          "source : data_source;",
          "priority : int;",
          "description : string;",
          "}"
        ],
        "start_line": 20,
        "end_line": 23,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_data_unified.ml"
      },
      {
        "hash": "34c1cff2c82f6a15ba63fdfc0fb3061f",
        "text": "source : data_source;\npriority : int;\ndescription : string;\n}",
        "lines": [
          "source : data_source;",
          "priority : int;",
          "description : string;",
          "}"
        ],
        "start_line": 21,
        "end_line": 24,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/data_source_manager.ml"
      }
    ],
    "5dc76f48c2d3f8b46c8a22f32f085d24": [
      {
        "hash": "5dc76f48c2d3f8b46c8a22f32f085d24",
        "text": "priority : int;\ndescription : string;\n}",
        "lines": [
          "priority : int;",
          "description : string;",
          "}"
        ],
        "start_line": 21,
        "end_line": 23,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_data_unified.ml"
      },
      {
        "hash": "5dc76f48c2d3f8b46c8a22f32f085d24",
        "text": "priority : int;\ndescription : string;\n}",
        "lines": [
          "priority : int;",
          "description : string;",
          "}"
        ],
        "start_line": 9,
        "end_line": 11,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/token_registry_core.ml"
      },
      {
        "hash": "5dc76f48c2d3f8b46c8a22f32f085d24",
        "text": "priority : int;\ndescription : string;\n}",
        "lines": [
          "priority : int;",
          "description : string;",
          "}"
        ],
        "start_line": 19,
        "end_line": 21,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/token_registry.ml"
      },
      {
        "hash": "5dc76f48c2d3f8b46c8a22f32f085d24",
        "text": "priority : int;\ndescription : string;\n}",
        "lines": [
          "priority : int;",
          "description : string;",
          "}"
        ],
        "start_line": 22,
        "end_line": 24,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/data_source_manager.ml"
      }
    ],
    "adae9583e1b07251804c5b62794877b2": [
      {
        "hash": "adae9583e1b07251804c5b62794877b2",
        "text": "else find_root parent\nin\nfind_root (Sys.getcwd ())",
        "lines": [
          "else find_root parent",
          "in",
          "find_root (Sys.getcwd ())"
        ],
        "start_line": 77,
        "end_line": 79,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_data_unified.ml"
      },
      {
        "hash": "adae9583e1b07251804c5b62794877b2",
        "text": "else find_root parent\nin\nfind_root (Sys.getcwd ())",
        "lines": [
          "else find_root parent",
          "in",
          "find_root (Sys.getcwd ())"
        ],
        "start_line": 32,
        "end_line": 34,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/tone_data_loader.ml"
      }
    ],
    "6e24ff44bc3c1844769e141cb6c61dd7": [
      {
        "hash": "6e24ff44bc3c1844769e141cb6c61dd7",
        "text": "let line_lengths = List.map String.length lines in\nlet uniform_length = match line_lengths with\n| [] -> false\n| first :: rest -> List.for_all (fun len -> len = first) rest\nin",
        "lines": [
          "let line_lengths = List.map String.length lines in",
          "let uniform_length = match line_lengths with",
          "| [] -> false",
          "| first :: rest -> List.for_all (fun len -> len = first) rest",
          "in"
        ],
        "start_line": 90,
        "end_line": 94,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_artistic_engine.ml"
      },
      {
        "hash": "6e24ff44bc3c1844769e141cb6c61dd7",
        "text": "let line_lengths = List.map String.length lines in\nlet uniform_length = match line_lengths with\n| [] -> false\n| first :: rest -> List.for_all (fun len -> len = first) rest\nin",
        "lines": [
          "let line_lengths = List.map String.length lines in",
          "let uniform_length = match line_lengths with",
          "| [] -> false",
          "| first :: rest -> List.for_all (fun len -> len = first) rest",
          "in"
        ],
        "start_line": 169,
        "end_line": 173,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_artistic_engine.ml"
      }
    ],
    "e7ec288a8e63a227bd143dfc03a0baa0": [
      {
        "hash": "e7ec288a8e63a227bd143dfc03a0baa0",
        "text": "let uniform_length = match line_lengths with\n| [] -> false\n| first :: rest -> List.for_all (fun len -> len = first) rest\nin",
        "lines": [
          "let uniform_length = match line_lengths with",
          "| [] -> false",
          "| first :: rest -> List.for_all (fun len -> len = first) rest",
          "in"
        ],
        "start_line": 91,
        "end_line": 94,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_artistic_engine.ml"
      },
      {
        "hash": "e7ec288a8e63a227bd143dfc03a0baa0",
        "text": "let uniform_length = match line_lengths with\n| [] -> false\n| first :: rest -> List.for_all (fun len -> len = first) rest\nin",
        "lines": [
          "let uniform_length = match line_lengths with",
          "| [] -> false",
          "| first :: rest -> List.for_all (fun len -> len = first) rest",
          "in"
        ],
        "start_line": 170,
        "end_line": 173,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_artistic_engine.ml"
      }
    ],
    "5afad361a3e904ecaf85be58622a668d": [
      {
        "hash": "5afad361a3e904ecaf85be58622a668d",
        "text": "| [] -> false\n| first :: rest -> List.for_all (fun len -> len = first) rest\nin",
        "lines": [
          "| [] -> false",
          "| first :: rest -> List.for_all (fun len -> len = first) rest",
          "in"
        ],
        "start_line": 92,
        "end_line": 94,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_artistic_engine.ml"
      },
      {
        "hash": "5afad361a3e904ecaf85be58622a668d",
        "text": "| [] -> false\n| first :: rest -> List.for_all (fun len -> len = first) rest\nin",
        "lines": [
          "| [] -> false",
          "| first :: rest -> List.for_all (fun len -> len = first) rest",
          "in"
        ],
        "start_line": 171,
        "end_line": 173,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_artistic_engine.ml"
      }
    ],
    "c2e5559ff9c7e0f544a7c290c97b4c07": [
      {
        "hash": "c2e5559ff9c7e0f544a7c290c97b4c07",
        "text": "| AnRhyme -> \"安韵\"\n| SiRhyme -> \"思韵\"\n| TianRhyme -> \"天韵\"\n| WangRhyme -> \"望韵\"\n| QuRhyme -> \"去韵\"\n| YuRhyme -> \"鱼韵\"\n| HuaRhyme -> \"花韵\"\n| FengRhyme -> \"风韵\"\n| YueRhyme -> \"月韵\"\n| XueRhyme -> \"雪韵\"",
        "lines": [
          "| AnRhyme -> \"安韵\"",
          "| SiRhyme -> \"思韵\"",
          "| TianRhyme -> \"天韵\"",
          "| WangRhyme -> \"望韵\"",
          "| QuRhyme -> \"去韵\"",
          "| YuRhyme -> \"鱼韵\"",
          "| HuaRhyme -> \"花韵\"",
          "| FengRhyme -> \"风韵\"",
          "| YueRhyme -> \"月韵\"",
          "| XueRhyme -> \"雪韵\""
        ],
        "start_line": 78,
        "end_line": 87,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_core_types.ml"
      },
      {
        "hash": "c2e5559ff9c7e0f544a7c290c97b4c07",
        "text": "| AnRhyme -> \"安韵\"\n| SiRhyme -> \"思韵\"\n| TianRhyme -> \"天韵\"\n| WangRhyme -> \"望韵\"\n| QuRhyme -> \"去韵\"\n| YuRhyme -> \"鱼韵\"\n| HuaRhyme -> \"花韵\"\n| FengRhyme -> \"风韵\"\n| YueRhyme -> \"月韵\"\n| XueRhyme -> \"雪韵\"",
        "lines": [
          "| AnRhyme -> \"安韵\"",
          "| SiRhyme -> \"思韵\"",
          "| TianRhyme -> \"天韵\"",
          "| WangRhyme -> \"望韵\"",
          "| QuRhyme -> \"去韵\"",
          "| YuRhyme -> \"鱼韵\"",
          "| HuaRhyme -> \"花韵\"",
          "| FengRhyme -> \"风韵\"",
          "| YueRhyme -> \"月韵\"",
          "| XueRhyme -> \"雪韵\""
        ],
        "start_line": 61,
        "end_line": 70,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/rhyme_group_types.ml"
      }
    ],
    "5bcc91aaf2e86f1ef520fd98de196c21": [
      {
        "hash": "5bcc91aaf2e86f1ef520fd98de196c21",
        "text": "| SiRhyme -> \"思韵\"\n| TianRhyme -> \"天韵\"\n| WangRhyme -> \"望韵\"\n| QuRhyme -> \"去韵\"\n| YuRhyme -> \"鱼韵\"\n| HuaRhyme -> \"花韵\"\n| FengRhyme -> \"风韵\"\n| YueRhyme -> \"月韵\"\n| XueRhyme -> \"雪韵\"\n| JiangRhyme -> \"江韵\"",
        "lines": [
          "| SiRhyme -> \"思韵\"",
          "| TianRhyme -> \"天韵\"",
          "| WangRhyme -> \"望韵\"",
          "| QuRhyme -> \"去韵\"",
          "| YuRhyme -> \"鱼韵\"",
          "| HuaRhyme -> \"花韵\"",
          "| FengRhyme -> \"风韵\"",
          "| YueRhyme -> \"月韵\"",
          "| XueRhyme -> \"雪韵\"",
          "| JiangRhyme -> \"江韵\""
        ],
        "start_line": 79,
        "end_line": 88,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_core_types.ml"
      },
      {
        "hash": "5bcc91aaf2e86f1ef520fd98de196c21",
        "text": "| SiRhyme -> \"思韵\"\n| TianRhyme -> \"天韵\"\n| WangRhyme -> \"望韵\"\n| QuRhyme -> \"去韵\"\n| YuRhyme -> \"鱼韵\"\n| HuaRhyme -> \"花韵\"\n| FengRhyme -> \"风韵\"\n| YueRhyme -> \"月韵\"\n| XueRhyme -> \"雪韵\"\n| JiangRhyme -> \"江韵\"",
        "lines": [
          "| SiRhyme -> \"思韵\"",
          "| TianRhyme -> \"天韵\"",
          "| WangRhyme -> \"望韵\"",
          "| QuRhyme -> \"去韵\"",
          "| YuRhyme -> \"鱼韵\"",
          "| HuaRhyme -> \"花韵\"",
          "| FengRhyme -> \"风韵\"",
          "| YueRhyme -> \"月韵\"",
          "| XueRhyme -> \"雪韵\"",
          "| JiangRhyme -> \"江韵\""
        ],
        "start_line": 62,
        "end_line": 71,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/rhyme_group_types.ml"
      }
    ],
    "31347342efbc39dd1742d71c35377dd3": [
      {
        "hash": "31347342efbc39dd1742d71c35377dd3",
        "text": "| TianRhyme -> \"天韵\"\n| WangRhyme -> \"望韵\"\n| QuRhyme -> \"去韵\"\n| YuRhyme -> \"鱼韵\"\n| HuaRhyme -> \"花韵\"\n| FengRhyme -> \"风韵\"\n| YueRhyme -> \"月韵\"\n| XueRhyme -> \"雪韵\"\n| JiangRhyme -> \"江韵\"\n| HuiRhyme -> \"灰韵\"",
        "lines": [
          "| TianRhyme -> \"天韵\"",
          "| WangRhyme -> \"望韵\"",
          "| QuRhyme -> \"去韵\"",
          "| YuRhyme -> \"鱼韵\"",
          "| HuaRhyme -> \"花韵\"",
          "| FengRhyme -> \"风韵\"",
          "| YueRhyme -> \"月韵\"",
          "| XueRhyme -> \"雪韵\"",
          "| JiangRhyme -> \"江韵\"",
          "| HuiRhyme -> \"灰韵\""
        ],
        "start_line": 80,
        "end_line": 89,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_core_types.ml"
      },
      {
        "hash": "31347342efbc39dd1742d71c35377dd3",
        "text": "| TianRhyme -> \"天韵\"\n| WangRhyme -> \"望韵\"\n| QuRhyme -> \"去韵\"\n| YuRhyme -> \"鱼韵\"\n| HuaRhyme -> \"花韵\"\n| FengRhyme -> \"风韵\"\n| YueRhyme -> \"月韵\"\n| XueRhyme -> \"雪韵\"\n| JiangRhyme -> \"江韵\"\n| HuiRhyme -> \"灰韵\"",
        "lines": [
          "| TianRhyme -> \"天韵\"",
          "| WangRhyme -> \"望韵\"",
          "| QuRhyme -> \"去韵\"",
          "| YuRhyme -> \"鱼韵\"",
          "| HuaRhyme -> \"花韵\"",
          "| FengRhyme -> \"风韵\"",
          "| YueRhyme -> \"月韵\"",
          "| XueRhyme -> \"雪韵\"",
          "| JiangRhyme -> \"江韵\"",
          "| HuiRhyme -> \"灰韵\""
        ],
        "start_line": 63,
        "end_line": 72,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/rhyme_group_types.ml"
      }
    ],
    "39bc48a540b8484d5fa6d9644c08ed46": [
      {
        "hash": "39bc48a540b8484d5fa6d9644c08ed46",
        "text": "(\"山\", PingSheng, AnRhyme); (\"间\", PingSheng, AnRhyme); (\"闲\", PingSheng, AnRhyme);\n(\"关\", PingSheng, AnRhyme); (\"还\", PingSheng, AnRhyme); (\"班\", PingSheng, AnRhyme);\n(\"颜\", PingSheng, AnRhyme); (\"安\", PingSheng, AnRhyme); (\"删\", PingSheng, AnRhyme);\n(\"蛮\", PingSheng, AnRhyme); (\"环\", PingSheng, AnRhyme); (\"弯\", PingSheng, AnRhyme);",
        "lines": [
          "(\"山\", PingSheng, AnRhyme); (\"间\", PingSheng, AnRhyme); (\"闲\", PingSheng, AnRhyme);",
          "(\"关\", PingSheng, AnRhyme); (\"还\", PingSheng, AnRhyme); (\"班\", PingSheng, AnRhyme);",
          "(\"颜\", PingSheng, AnRhyme); (\"安\", PingSheng, AnRhyme); (\"删\", PingSheng, AnRhyme);",
          "(\"蛮\", PingSheng, AnRhyme); (\"环\", PingSheng, AnRhyme); (\"弯\", PingSheng, AnRhyme);"
        ],
        "start_line": 64,
        "end_line": 67,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/consolidated_rhyme_data.ml"
      },
      {
        "hash": "39bc48a540b8484d5fa6d9644c08ed46",
        "text": "(\"山\", PingSheng, AnRhyme); (\"间\", PingSheng, AnRhyme); (\"闲\", PingSheng, AnRhyme);\n(\"关\", PingSheng, AnRhyme); (\"还\", PingSheng, AnRhyme); (\"班\", PingSheng, AnRhyme);\n(\"颜\", PingSheng, AnRhyme); (\"安\", PingSheng, AnRhyme); (\"删\", PingSheng, AnRhyme);\n(\"蛮\", PingSheng, AnRhyme); (\"环\", PingSheng, AnRhyme); (\"弯\", PingSheng, AnRhyme);",
        "lines": [
          "(\"山\", PingSheng, AnRhyme); (\"间\", PingSheng, AnRhyme); (\"闲\", PingSheng, AnRhyme);",
          "(\"关\", PingSheng, AnRhyme); (\"还\", PingSheng, AnRhyme); (\"班\", PingSheng, AnRhyme);",
          "(\"颜\", PingSheng, AnRhyme); (\"安\", PingSheng, AnRhyme); (\"删\", PingSheng, AnRhyme);",
          "(\"蛮\", PingSheng, AnRhyme); (\"环\", PingSheng, AnRhyme); (\"弯\", PingSheng, AnRhyme);"
        ],
        "start_line": 17,
        "end_line": 20,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_rhyme_data.ml"
      }
    ],
    "845992c7725ab048ed38488f8d8fb87a": [
      {
        "hash": "845992c7725ab048ed38488f8d8fb87a",
        "text": "(\"关\", PingSheng, AnRhyme); (\"还\", PingSheng, AnRhyme); (\"班\", PingSheng, AnRhyme);\n(\"颜\", PingSheng, AnRhyme); (\"安\", PingSheng, AnRhyme); (\"删\", PingSheng, AnRhyme);\n(\"蛮\", PingSheng, AnRhyme); (\"环\", PingSheng, AnRhyme); (\"弯\", PingSheng, AnRhyme);",
        "lines": [
          "(\"关\", PingSheng, AnRhyme); (\"还\", PingSheng, AnRhyme); (\"班\", PingSheng, AnRhyme);",
          "(\"颜\", PingSheng, AnRhyme); (\"安\", PingSheng, AnRhyme); (\"删\", PingSheng, AnRhyme);",
          "(\"蛮\", PingSheng, AnRhyme); (\"环\", PingSheng, AnRhyme); (\"弯\", PingSheng, AnRhyme);"
        ],
        "start_line": 65,
        "end_line": 67,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/consolidated_rhyme_data.ml"
      },
      {
        "hash": "845992c7725ab048ed38488f8d8fb87a",
        "text": "(\"关\", PingSheng, AnRhyme); (\"还\", PingSheng, AnRhyme); (\"班\", PingSheng, AnRhyme);\n(\"颜\", PingSheng, AnRhyme); (\"安\", PingSheng, AnRhyme); (\"删\", PingSheng, AnRhyme);\n(\"蛮\", PingSheng, AnRhyme); (\"环\", PingSheng, AnRhyme); (\"弯\", PingSheng, AnRhyme);",
        "lines": [
          "(\"关\", PingSheng, AnRhyme); (\"还\", PingSheng, AnRhyme); (\"班\", PingSheng, AnRhyme);",
          "(\"颜\", PingSheng, AnRhyme); (\"安\", PingSheng, AnRhyme); (\"删\", PingSheng, AnRhyme);",
          "(\"蛮\", PingSheng, AnRhyme); (\"环\", PingSheng, AnRhyme); (\"弯\", PingSheng, AnRhyme);"
        ],
        "start_line": 18,
        "end_line": 20,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_rhyme_data.ml"
      }
    ],
    "bae23dee8b60e3faf4f37cd2a7b11856": [
      {
        "hash": "bae23dee8b60e3faf4f37cd2a7b11856",
        "text": "(\"天\", PingSheng, TianRhyme); (\"年\", PingSheng, TianRhyme); (\"先\", PingSheng, TianRhyme);\n(\"田\", PingSheng, TianRhyme); (\"边\", PingSheng, TianRhyme); (\"前\", PingSheng, TianRhyme);\n(\"连\", PingSheng, TianRhyme); (\"千\", PingSheng, TianRhyme); (\"线\", PingSheng, TianRhyme);",
        "lines": [
          "(\"天\", PingSheng, TianRhyme); (\"年\", PingSheng, TianRhyme); (\"先\", PingSheng, TianRhyme);",
          "(\"田\", PingSheng, TianRhyme); (\"边\", PingSheng, TianRhyme); (\"前\", PingSheng, TianRhyme);",
          "(\"连\", PingSheng, TianRhyme); (\"千\", PingSheng, TianRhyme); (\"线\", PingSheng, TianRhyme);"
        ],
        "start_line": 70,
        "end_line": 72,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/consolidated_rhyme_data.ml"
      },
      {
        "hash": "bae23dee8b60e3faf4f37cd2a7b11856",
        "text": "(\"天\", PingSheng, TianRhyme); (\"年\", PingSheng, TianRhyme); (\"先\", PingSheng, TianRhyme);\n(\"田\", PingSheng, TianRhyme); (\"边\", PingSheng, TianRhyme); (\"前\", PingSheng, TianRhyme);\n(\"连\", PingSheng, TianRhyme); (\"千\", PingSheng, TianRhyme); (\"线\", PingSheng, TianRhyme);",
        "lines": [
          "(\"天\", PingSheng, TianRhyme); (\"年\", PingSheng, TianRhyme); (\"先\", PingSheng, TianRhyme);",
          "(\"田\", PingSheng, TianRhyme); (\"边\", PingSheng, TianRhyme); (\"前\", PingSheng, TianRhyme);",
          "(\"连\", PingSheng, TianRhyme); (\"千\", PingSheng, TianRhyme); (\"线\", PingSheng, TianRhyme);"
        ],
        "start_line": 23,
        "end_line": 25,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_rhyme_data.ml"
      }
    ],
    "558e8a179b587fc5a8e00e87188a231e": [
      {
        "hash": "558e8a179b587fc5a8e00e87188a231e",
        "text": "type rhyme_group_data = Rhyme_json_core.rhyme_group_data = {\ncategory : string;\ncharacters : string list;\n}",
        "lines": [
          "type rhyme_group_data = Rhyme_json_core.rhyme_group_data = {",
          "category : string;",
          "characters : string list;",
          "}"
        ],
        "start_line": 38,
        "end_line": 41,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_api.ml"
      },
      {
        "hash": "558e8a179b587fc5a8e00e87188a231e",
        "text": "type rhyme_group_data = Rhyme_json_core.rhyme_group_data = {\ncategory : string;\ncharacters : string list;\n}",
        "lines": [
          "type rhyme_group_data = Rhyme_json_core.rhyme_group_data = {",
          "category : string;",
          "characters : string list;",
          "}"
        ],
        "start_line": 61,
        "end_line": 64,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_api.ml"
      }
    ],
    "ff6fce6a0dbd56f74525567b451b3033": [
      {
        "hash": "ff6fce6a0dbd56f74525567b451b3033",
        "text": "type rhyme_data_file = Rhyme_json_core.rhyme_data_file = {\nrhyme_groups : (string * rhyme_group_data) list;\nmetadata : (string * string) list;\n}",
        "lines": [
          "type rhyme_data_file = Rhyme_json_core.rhyme_data_file = {",
          "rhyme_groups : (string * rhyme_group_data) list;",
          "metadata : (string * string) list;",
          "}"
        ],
        "start_line": 43,
        "end_line": 46,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_api.ml"
      },
      {
        "hash": "ff6fce6a0dbd56f74525567b451b3033",
        "text": "type rhyme_data_file = Rhyme_json_core.rhyme_data_file = {\nrhyme_groups : (string * rhyme_group_data) list;\nmetadata : (string * string) list;\n}",
        "lines": [
          "type rhyme_data_file = Rhyme_json_core.rhyme_data_file = {",
          "rhyme_groups : (string * rhyme_group_data) list;",
          "metadata : (string * string) list;",
          "}"
        ],
        "start_line": 66,
        "end_line": 69,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/rhyme_json_api.ml"
      }
    ],
    "b1f8398f34bc8bbfc3adbc832b744132": [
      {
        "hash": "b1f8398f34bc8bbfc3adbc832b744132",
        "text": "]\nelse loaded_words\n)",
        "lines": [
          "]",
          "else loaded_words",
          ")"
        ],
        "start_line": 120,
        "end_line": 122,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_artistic_core.ml"
      },
      {
        "hash": "b1f8398f34bc8bbfc3adbc832b744132",
        "text": "]\nelse loaded_words\n)",
        "lines": [
          "]",
          "else loaded_words",
          ")"
        ],
        "start_line": 134,
        "end_line": 136,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_artistic_core.ml"
      }
    ],
    "8857aeb5975aa17c0b1eace78d43185e": [
      {
        "hash": "8857aeb5975aa17c0b1eace78d43185e",
        "text": "let chars = List.init (String.length verse) (String.get verse) in\nlet is_chinese_char c = let code = Char.code c in code >= 0x4e00 && code <= 0x9fff in\nlet chinese_chars = List.filter is_chinese_char chars in",
        "lines": [
          "let chars = List.init (String.length verse) (String.get verse) in",
          "let is_chinese_char c = let code = Char.code c in code >= 0x4e00 && code <= 0x9fff in",
          "let chinese_chars = List.filter is_chinese_char chars in"
        ],
        "start_line": 212,
        "end_line": 214,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_artistic_core.ml"
      },
      {
        "hash": "8857aeb5975aa17c0b1eace78d43185e",
        "text": "let chars = List.init (String.length verse) (String.get verse) in\nlet is_chinese_char c = let code = Char.code c in code >= 0x4e00 && code <= 0x9fff in\nlet chinese_chars = List.filter is_chinese_char chars in",
        "lines": [
          "let chars = List.init (String.length verse) (String.get verse) in",
          "let is_chinese_char c = let code = Char.code c in code >= 0x4e00 && code <= 0x9fff in",
          "let chinese_chars = List.filter is_chinese_char chars in"
        ],
        "start_line": 298,
        "end_line": 300,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_artistic_core.ml"
      }
    ],
    "24b4db394790057c916c3096162868d8": [
      {
        "hash": "24b4db394790057c916c3096162868d8",
        "text": "imagery = base_report.imagery_score;\nrhythm = base_report.rhythm_score;\nelegance = base_report.elegance_score;\n}\n}",
        "lines": [
          "imagery = base_report.imagery_score;",
          "rhythm = base_report.rhythm_score;",
          "elegance = base_report.elegance_score;",
          "}",
          "}"
        ],
        "start_line": 425,
        "end_line": 429,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_artistic_core.ml"
      },
      {
        "hash": "24b4db394790057c916c3096162868d8",
        "text": "imagery = base_report.imagery_score;\nrhythm = base_report.rhythm_score;\nelegance = base_report.elegance_score;\n}\n}",
        "lines": [
          "imagery = base_report.imagery_score;",
          "rhythm = base_report.rhythm_score;",
          "elegance = base_report.elegance_score;",
          "}",
          "}"
        ],
        "start_line": 452,
        "end_line": 456,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_artistic_core.ml"
      }
    ],
    "54d3307bb32bc87372c61f633f087c93": [
      {
        "hash": "54d3307bb32bc87372c61f633f087c93",
        "text": "rhythm = base_report.rhythm_score;\nelegance = base_report.elegance_score;\n}\n}",
        "lines": [
          "rhythm = base_report.rhythm_score;",
          "elegance = base_report.elegance_score;",
          "}",
          "}"
        ],
        "start_line": 426,
        "end_line": 429,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_artistic_core.ml"
      },
      {
        "hash": "54d3307bb32bc87372c61f633f087c93",
        "text": "rhythm = base_report.rhythm_score;\nelegance = base_report.elegance_score;\n}\n}",
        "lines": [
          "rhythm = base_report.rhythm_score;",
          "elegance = base_report.elegance_score;",
          "}",
          "}"
        ],
        "start_line": 453,
        "end_line": 456,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_artistic_core.ml"
      }
    ],
    "53be8ed4b1d11ffa599095cadcc6a939": [
      {
        "hash": "53be8ed4b1d11ffa599095cadcc6a939",
        "text": "elegance = base_report.elegance_score;\n}\n}",
        "lines": [
          "elegance = base_report.elegance_score;",
          "}",
          "}"
        ],
        "start_line": 427,
        "end_line": 429,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_artistic_core.ml"
      },
      {
        "hash": "53be8ed4b1d11ffa599095cadcc6a939",
        "text": "elegance = base_report.elegance_score;\n}\n}",
        "lines": [
          "elegance = base_report.elegance_score;",
          "}",
          "}"
        ],
        "start_line": 454,
        "end_line": 456,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/poetry_artistic_core.ml"
      }
    ],
    "88dbcd9e8a870493430a388c3066acef": [
      {
        "hash": "88dbcd9e8a870493430a388c3066acef",
        "text": "mutable current_level : log_level;\nmutable show_timestamps : bool;\nmutable show_module_name : bool;\nmutable show_colors : bool;\nmutable output_channel : out_channel;\nmutable error_channel : out_channel;\n}",
        "lines": [
          "mutable current_level : log_level;",
          "mutable show_timestamps : bool;",
          "mutable show_module_name : bool;",
          "mutable show_colors : bool;",
          "mutable output_channel : out_channel;",
          "mutable error_channel : out_channel;",
          "}"
        ],
        "start_line": 19,
        "end_line": 25,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/logging/log_core.ml"
      },
      {
        "hash": "88dbcd9e8a870493430a388c3066acef",
        "text": "mutable current_level : log_level;\nmutable show_timestamps : bool;\nmutable show_module_name : bool;\nmutable show_colors : bool;\nmutable output_channel : out_channel;\nmutable error_channel : out_channel;\n}",
        "lines": [
          "mutable current_level : log_level;",
          "mutable show_timestamps : bool;",
          "mutable show_module_name : bool;",
          "mutable show_colors : bool;",
          "mutable output_channel : out_channel;",
          "mutable error_channel : out_channel;",
          "}"
        ],
        "start_line": 10,
        "end_line": 16,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/logging/unified_logging_compat.ml"
      }
    ],
    "b5aecb10f2214c1279c7b004bc1d17c0": [
      {
        "hash": "b5aecb10f2214c1279c7b004bc1d17c0",
        "text": "mutable show_timestamps : bool;\nmutable show_module_name : bool;\nmutable show_colors : bool;\nmutable output_channel : out_channel;\nmutable error_channel : out_channel;\n}",
        "lines": [
          "mutable show_timestamps : bool;",
          "mutable show_module_name : bool;",
          "mutable show_colors : bool;",
          "mutable output_channel : out_channel;",
          "mutable error_channel : out_channel;",
          "}"
        ],
        "start_line": 20,
        "end_line": 25,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/logging/log_core.ml"
      },
      {
        "hash": "b5aecb10f2214c1279c7b004bc1d17c0",
        "text": "mutable show_timestamps : bool;\nmutable show_module_name : bool;\nmutable show_colors : bool;\nmutable output_channel : out_channel;\nmutable error_channel : out_channel;\n}",
        "lines": [
          "mutable show_timestamps : bool;",
          "mutable show_module_name : bool;",
          "mutable show_colors : bool;",
          "mutable output_channel : out_channel;",
          "mutable error_channel : out_channel;",
          "}"
        ],
        "start_line": 11,
        "end_line": 16,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/logging/unified_logging_compat.ml"
      }
    ],
    "a391d96d7c3c2c40e8090fbe7d5c1383": [
      {
        "hash": "a391d96d7c3c2c40e8090fbe7d5c1383",
        "text": "mutable show_module_name : bool;\nmutable show_colors : bool;\nmutable output_channel : out_channel;\nmutable error_channel : out_channel;\n}",
        "lines": [
          "mutable show_module_name : bool;",
          "mutable show_colors : bool;",
          "mutable output_channel : out_channel;",
          "mutable error_channel : out_channel;",
          "}"
        ],
        "start_line": 21,
        "end_line": 25,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/logging/log_core.ml"
      },
      {
        "hash": "a391d96d7c3c2c40e8090fbe7d5c1383",
        "text": "mutable show_module_name : bool;\nmutable show_colors : bool;\nmutable output_channel : out_channel;\nmutable error_channel : out_channel;\n}",
        "lines": [
          "mutable show_module_name : bool;",
          "mutable show_colors : bool;",
          "mutable output_channel : out_channel;",
          "mutable error_channel : out_channel;",
          "}"
        ],
        "start_line": 12,
        "end_line": 16,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/logging/unified_logging_compat.ml"
      }
    ],
    "85894644a396ccbfd75d16335ca81140": [
      {
        "hash": "85894644a396ccbfd75d16335ca81140",
        "text": "mutable show_colors : bool;\nmutable output_channel : out_channel;\nmutable error_channel : out_channel;\n}",
        "lines": [
          "mutable show_colors : bool;",
          "mutable output_channel : out_channel;",
          "mutable error_channel : out_channel;",
          "}"
        ],
        "start_line": 22,
        "end_line": 25,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/logging/log_core.ml"
      },
      {
        "hash": "85894644a396ccbfd75d16335ca81140",
        "text": "mutable show_colors : bool;\nmutable output_channel : out_channel;\nmutable error_channel : out_channel;\n}",
        "lines": [
          "mutable show_colors : bool;",
          "mutable output_channel : out_channel;",
          "mutable error_channel : out_channel;",
          "}"
        ],
        "start_line": 13,
        "end_line": 16,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/logging/unified_logging_compat.ml"
      }
    ],
    "84ced2d38e17ef62b8fb465a2a0a5b9e": [
      {
        "hash": "84ced2d38e17ef62b8fb465a2a0a5b9e",
        "text": "mutable output_channel : out_channel;\nmutable error_channel : out_channel;\n}",
        "lines": [
          "mutable output_channel : out_channel;",
          "mutable error_channel : out_channel;",
          "}"
        ],
        "start_line": 23,
        "end_line": 25,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/logging/log_core.ml"
      },
      {
        "hash": "84ced2d38e17ef62b8fb465a2a0a5b9e",
        "text": "mutable output_channel : out_channel;\nmutable error_channel : out_channel;\n}",
        "lines": [
          "mutable output_channel : out_channel;",
          "mutable error_channel : out_channel;",
          "}"
        ],
        "start_line": 14,
        "end_line": 16,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/logging/unified_logging_compat.ml"
      }
    ],
    "1dde5e8d82965a3205ba6598951b6640": [
      {
        "hash": "1dde5e8d82965a3205ba6598951b6640",
        "text": "let load_from_env () =\nList.iter\n(fun (env_var, setter) ->\ntry\nlet value = Sys.getenv env_var in\nsetter value\nwith Not_found -> ())\nenv_var_mappings",
        "lines": [
          "let load_from_env () =",
          "List.iter",
          "(fun (env_var, setter) ->",
          "try",
          "let value = Sys.getenv env_var in",
          "setter value",
          "with Not_found -> ())",
          "env_var_mappings"
        ],
        "start_line": 100,
        "end_line": 107,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/config/runtime_config.ml"
      },
      {
        "hash": "1dde5e8d82965a3205ba6598951b6640",
        "text": "let load_from_env () =\nList.iter\n(fun (env_var, setter) ->\ntry\nlet value = Sys.getenv env_var in\nsetter value\nwith Not_found -> ())\nenv_var_mappings",
        "lines": [
          "let load_from_env () =",
          "List.iter",
          "(fun (env_var, setter) ->",
          "try",
          "let value = Sys.getenv env_var in",
          "setter value",
          "with Not_found -> ())",
          "env_var_mappings"
        ],
        "start_line": 135,
        "end_line": 142,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/config/compiler_config.ml"
      }
    ],
    "078d1c29bade6cd91e4a7ab71f055a52": [
      {
        "hash": "078d1c29bade6cd91e4a7ab71f055a52",
        "text": "List.iter\n(fun (env_var, setter) ->\ntry\nlet value = Sys.getenv env_var in\nsetter value\nwith Not_found -> ())\nenv_var_mappings",
        "lines": [
          "List.iter",
          "(fun (env_var, setter) ->",
          "try",
          "let value = Sys.getenv env_var in",
          "setter value",
          "with Not_found -> ())",
          "env_var_mappings"
        ],
        "start_line": 101,
        "end_line": 107,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/config/runtime_config.ml"
      },
      {
        "hash": "078d1c29bade6cd91e4a7ab71f055a52",
        "text": "List.iter\n(fun (env_var, setter) ->\ntry\nlet value = Sys.getenv env_var in\nsetter value\nwith Not_found -> ())\nenv_var_mappings",
        "lines": [
          "List.iter",
          "(fun (env_var, setter) ->",
          "try",
          "let value = Sys.getenv env_var in",
          "setter value",
          "with Not_found -> ())",
          "env_var_mappings"
        ],
        "start_line": 136,
        "end_line": 142,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/config/compiler_config.ml"
      }
    ],
    "6cda6ebae146682dd2338e88270287c2": [
      {
        "hash": "6cda6ebae146682dd2338e88270287c2",
        "text": "(fun (env_var, setter) ->\ntry\nlet value = Sys.getenv env_var in\nsetter value\nwith Not_found -> ())\nenv_var_mappings",
        "lines": [
          "(fun (env_var, setter) ->",
          "try",
          "let value = Sys.getenv env_var in",
          "setter value",
          "with Not_found -> ())",
          "env_var_mappings"
        ],
        "start_line": 102,
        "end_line": 107,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/config/runtime_config.ml"
      },
      {
        "hash": "6cda6ebae146682dd2338e88270287c2",
        "text": "(fun (env_var, setter) ->\ntry\nlet value = Sys.getenv env_var in\nsetter value\nwith Not_found -> ())\nenv_var_mappings",
        "lines": [
          "(fun (env_var, setter) ->",
          "try",
          "let value = Sys.getenv env_var in",
          "setter value",
          "with Not_found -> ())",
          "env_var_mappings"
        ],
        "start_line": 137,
        "end_line": 142,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/config/compiler_config.ml"
      }
    ],
    "4ae5f75830900ebd8d072f386042663a": [
      {
        "hash": "4ae5f75830900ebd8d072f386042663a",
        "text": "try\nlet value = Sys.getenv env_var in\nsetter value\nwith Not_found -> ())\nenv_var_mappings",
        "lines": [
          "try",
          "let value = Sys.getenv env_var in",
          "setter value",
          "with Not_found -> ())",
          "env_var_mappings"
        ],
        "start_line": 103,
        "end_line": 107,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/config/runtime_config.ml"
      },
      {
        "hash": "4ae5f75830900ebd8d072f386042663a",
        "text": "try\nlet value = Sys.getenv env_var in\nsetter value\nwith Not_found -> ())\nenv_var_mappings",
        "lines": [
          "try",
          "let value = Sys.getenv env_var in",
          "setter value",
          "with Not_found -> ())",
          "env_var_mappings"
        ],
        "start_line": 138,
        "end_line": 142,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/config/compiler_config.ml"
      }
    ],
    "a10ac8c1099797b3d78e06151307289b": [
      {
        "hash": "a10ac8c1099797b3d78e06151307289b",
        "text": "let value = Sys.getenv env_var in\nsetter value\nwith Not_found -> ())\nenv_var_mappings",
        "lines": [
          "let value = Sys.getenv env_var in",
          "setter value",
          "with Not_found -> ())",
          "env_var_mappings"
        ],
        "start_line": 104,
        "end_line": 107,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/config/runtime_config.ml"
      },
      {
        "hash": "a10ac8c1099797b3d78e06151307289b",
        "text": "let value = Sys.getenv env_var in\nsetter value\nwith Not_found -> ())\nenv_var_mappings",
        "lines": [
          "let value = Sys.getenv env_var in",
          "setter value",
          "with Not_found -> ())",
          "env_var_mappings"
        ],
        "start_line": 139,
        "end_line": 142,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/config/compiler_config.ml"
      }
    ],
    "95d7733db4b51935a6bdfc3ee4628d55": [
      {
        "hash": "95d7733db4b51935a6bdfc3ee4628d55",
        "text": "setter value\nwith Not_found -> ())\nenv_var_mappings",
        "lines": [
          "setter value",
          "with Not_found -> ())",
          "env_var_mappings"
        ],
        "start_line": 105,
        "end_line": 107,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/config/runtime_config.ml"
      },
      {
        "hash": "95d7733db4b51935a6bdfc3ee4628d55",
        "text": "setter value\nwith Not_found -> ())\nenv_var_mappings",
        "lines": [
          "setter value",
          "with Not_found -> ())",
          "env_var_mappings"
        ],
        "start_line": 140,
        "end_line": 142,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/config/compiler_config.ml"
      }
    ],
    "d34cc12d58d1bbf093399949393d4701": [
      {
        "hash": "d34cc12d58d1bbf093399949393d4701",
        "text": "@author 骆言技术债务清理团队\n@version 2.0 (第六阶段优化版)\n@since 2025-07-21 Issue #788 超长文件重构优化 *)",
        "lines": [
          "@author 骆言技术债务清理团队",
          "@version 2.0 (第六阶段优化版)",
          "@since 2025-07-21 Issue #788 超长文件重构优化 *)"
        ],
        "start_line": 5,
        "end_line": 7,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/config/env_var_config.ml"
      },
      {
        "hash": "d34cc12d58d1bbf093399949393d4701",
        "text": "@author 骆言技术债务清理团队\n@version 2.0 (第六阶段优化版)\n@since 2025-07-21 Issue #788 超长文件重构优化 *)",
        "lines": [
          "@author 骆言技术债务清理团队",
          "@version 2.0 (第六阶段优化版)",
          "@since 2025-07-21 Issue #788 超长文件重构优化 *)"
        ],
        "start_line": 5,
        "end_line": 7,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_data_loader.ml"
      }
    ],
    "07a8665c69e92d2bdb5184fc4a1fab21": [
      {
        "hash": "07a8665c69e92d2bdb5184fc4a1fab21",
        "text": "| `HaveKeyword -> HaveKeyword\n| `OneKeyword -> OneKeyword\n| `NameKeyword -> NameKeyword\n| `SetKeyword -> SetKeyword\n| `AlsoKeyword -> AlsoKeyword\n| `ThenGetKeyword -> ThenGetKeyword\n| `CallKeyword -> CallKeyword\n| `ValueKeyword -> ValueKeyword\n| `AsForKeyword -> AsForKeyword\n| `NumberKeyword -> NumberKeyword",
        "lines": [
          "| `HaveKeyword -> HaveKeyword",
          "| `OneKeyword -> OneKeyword",
          "| `NameKeyword -> NameKeyword",
          "| `SetKeyword -> SetKeyword",
          "| `AlsoKeyword -> AlsoKeyword",
          "| `ThenGetKeyword -> ThenGetKeyword",
          "| `CallKeyword -> CallKeyword",
          "| `ValueKeyword -> ValueKeyword",
          "| `AsForKeyword -> AsForKeyword",
          "| `NumberKeyword -> NumberKeyword"
        ],
        "start_line": 84,
        "end_line": 93,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/basic_token_mapping.ml"
      },
      {
        "hash": "07a8665c69e92d2bdb5184fc4a1fab21",
        "text": "| `HaveKeyword -> HaveKeyword\n| `OneKeyword -> OneKeyword\n| `NameKeyword -> NameKeyword\n| `SetKeyword -> SetKeyword\n| `AlsoKeyword -> AlsoKeyword\n| `ThenGetKeyword -> ThenGetKeyword\n| `CallKeyword -> CallKeyword\n| `ValueKeyword -> ValueKeyword\n| `AsForKeyword -> AsForKeyword\n| `NumberKeyword -> NumberKeyword",
        "lines": [
          "| `HaveKeyword -> HaveKeyword",
          "| `OneKeyword -> OneKeyword",
          "| `NameKeyword -> NameKeyword",
          "| `SetKeyword -> SetKeyword",
          "| `AlsoKeyword -> AlsoKeyword",
          "| `ThenGetKeyword -> ThenGetKeyword",
          "| `CallKeyword -> CallKeyword",
          "| `ValueKeyword -> ValueKeyword",
          "| `AsForKeyword -> AsForKeyword",
          "| `NumberKeyword -> NumberKeyword"
        ],
        "start_line": 8,
        "end_line": 17,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/classical_token_mapping.ml"
      }
    ],
    "05c9ddbb74c1f57c797efe3daff42367": [
      {
        "hash": "05c9ddbb74c1f57c797efe3daff42367",
        "text": "| `DefineKeyword -> DefineKeyword\n| `AcceptKeyword -> AcceptKeyword\n| `ReturnWhenKeyword -> ReturnWhenKeyword\n| `ElseReturnKeyword -> ElseReturnKeyword\n| `MultiplyKeyword -> MultiplyKeyword\n| `DivideKeyword -> DivideKeyword\n| `AddToKeyword -> AddToKeyword\n| `SubtractKeyword -> SubtractKeyword\n| `EqualToKeyword -> EqualToKeyword\n| `LessThanEqualToKeyword -> LessThanEqualToKeyword",
        "lines": [
          "| `DefineKeyword -> DefineKeyword",
          "| `AcceptKeyword -> AcceptKeyword",
          "| `ReturnWhenKeyword -> ReturnWhenKeyword",
          "| `ElseReturnKeyword -> ElseReturnKeyword",
          "| `MultiplyKeyword -> MultiplyKeyword",
          "| `DivideKeyword -> DivideKeyword",
          "| `AddToKeyword -> AddToKeyword",
          "| `SubtractKeyword -> SubtractKeyword",
          "| `EqualToKeyword -> EqualToKeyword",
          "| `LessThanEqualToKeyword -> LessThanEqualToKeyword"
        ],
        "start_line": 107,
        "end_line": 116,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/basic_token_mapping.ml"
      },
      {
        "hash": "05c9ddbb74c1f57c797efe3daff42367",
        "text": "| `DefineKeyword -> DefineKeyword\n| `AcceptKeyword -> AcceptKeyword\n| `ReturnWhenKeyword -> ReturnWhenKeyword\n| `ElseReturnKeyword -> ElseReturnKeyword\n| `MultiplyKeyword -> MultiplyKeyword\n| `DivideKeyword -> DivideKeyword\n| `AddToKeyword -> AddToKeyword\n| `SubtractKeyword -> SubtractKeyword\n| `EqualToKeyword -> EqualToKeyword\n| `LessThanEqualToKeyword -> LessThanEqualToKeyword",
        "lines": [
          "| `DefineKeyword -> DefineKeyword",
          "| `AcceptKeyword -> AcceptKeyword",
          "| `ReturnWhenKeyword -> ReturnWhenKeyword",
          "| `ElseReturnKeyword -> ElseReturnKeyword",
          "| `MultiplyKeyword -> MultiplyKeyword",
          "| `DivideKeyword -> DivideKeyword",
          "| `AddToKeyword -> AddToKeyword",
          "| `SubtractKeyword -> SubtractKeyword",
          "| `EqualToKeyword -> EqualToKeyword",
          "| `LessThanEqualToKeyword -> LessThanEqualToKeyword"
        ],
        "start_line": 79,
        "end_line": 88,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/classical_token_mapping.ml"
      }
    ],
    "3a59bf38c1ddc8b14122dddbc87f5e6b": [
      {
        "hash": "3a59bf38c1ddc8b14122dddbc87f5e6b",
        "text": "| `AcceptKeyword -> AcceptKeyword\n| `ReturnWhenKeyword -> ReturnWhenKeyword\n| `ElseReturnKeyword -> ElseReturnKeyword\n| `MultiplyKeyword -> MultiplyKeyword\n| `DivideKeyword -> DivideKeyword\n| `AddToKeyword -> AddToKeyword\n| `SubtractKeyword -> SubtractKeyword\n| `EqualToKeyword -> EqualToKeyword\n| `LessThanEqualToKeyword -> LessThanEqualToKeyword\n| `FirstElementKeyword -> FirstElementKeyword",
        "lines": [
          "| `AcceptKeyword -> AcceptKeyword",
          "| `ReturnWhenKeyword -> ReturnWhenKeyword",
          "| `ElseReturnKeyword -> ElseReturnKeyword",
          "| `MultiplyKeyword -> MultiplyKeyword",
          "| `DivideKeyword -> DivideKeyword",
          "| `AddToKeyword -> AddToKeyword",
          "| `SubtractKeyword -> SubtractKeyword",
          "| `EqualToKeyword -> EqualToKeyword",
          "| `LessThanEqualToKeyword -> LessThanEqualToKeyword",
          "| `FirstElementKeyword -> FirstElementKeyword"
        ],
        "start_line": 108,
        "end_line": 117,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/basic_token_mapping.ml"
      },
      {
        "hash": "3a59bf38c1ddc8b14122dddbc87f5e6b",
        "text": "| `AcceptKeyword -> AcceptKeyword\n| `ReturnWhenKeyword -> ReturnWhenKeyword\n| `ElseReturnKeyword -> ElseReturnKeyword\n| `MultiplyKeyword -> MultiplyKeyword\n| `DivideKeyword -> DivideKeyword\n| `AddToKeyword -> AddToKeyword\n| `SubtractKeyword -> SubtractKeyword\n| `EqualToKeyword -> EqualToKeyword\n| `LessThanEqualToKeyword -> LessThanEqualToKeyword\n| `FirstElementKeyword -> FirstElementKeyword",
        "lines": [
          "| `AcceptKeyword -> AcceptKeyword",
          "| `ReturnWhenKeyword -> ReturnWhenKeyword",
          "| `ElseReturnKeyword -> ElseReturnKeyword",
          "| `MultiplyKeyword -> MultiplyKeyword",
          "| `DivideKeyword -> DivideKeyword",
          "| `AddToKeyword -> AddToKeyword",
          "| `SubtractKeyword -> SubtractKeyword",
          "| `EqualToKeyword -> EqualToKeyword",
          "| `LessThanEqualToKeyword -> LessThanEqualToKeyword",
          "| `FirstElementKeyword -> FirstElementKeyword"
        ],
        "start_line": 80,
        "end_line": 89,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/classical_token_mapping.ml"
      }
    ],
    "edd4ffa11fd089fc3db4733332ab4e6d": [
      {
        "hash": "edd4ffa11fd089fc3db4733332ab4e6d",
        "text": "| `ReturnWhenKeyword -> ReturnWhenKeyword\n| `ElseReturnKeyword -> ElseReturnKeyword\n| `MultiplyKeyword -> MultiplyKeyword\n| `DivideKeyword -> DivideKeyword\n| `AddToKeyword -> AddToKeyword\n| `SubtractKeyword -> SubtractKeyword\n| `EqualToKeyword -> EqualToKeyword\n| `LessThanEqualToKeyword -> LessThanEqualToKeyword\n| `FirstElementKeyword -> FirstElementKeyword\n| `RemainingKeyword -> RemainingKeyword",
        "lines": [
          "| `ReturnWhenKeyword -> ReturnWhenKeyword",
          "| `ElseReturnKeyword -> ElseReturnKeyword",
          "| `MultiplyKeyword -> MultiplyKeyword",
          "| `DivideKeyword -> DivideKeyword",
          "| `AddToKeyword -> AddToKeyword",
          "| `SubtractKeyword -> SubtractKeyword",
          "| `EqualToKeyword -> EqualToKeyword",
          "| `LessThanEqualToKeyword -> LessThanEqualToKeyword",
          "| `FirstElementKeyword -> FirstElementKeyword",
          "| `RemainingKeyword -> RemainingKeyword"
        ],
        "start_line": 109,
        "end_line": 118,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/basic_token_mapping.ml"
      },
      {
        "hash": "edd4ffa11fd089fc3db4733332ab4e6d",
        "text": "| `ReturnWhenKeyword -> ReturnWhenKeyword\n| `ElseReturnKeyword -> ElseReturnKeyword\n| `MultiplyKeyword -> MultiplyKeyword\n| `DivideKeyword -> DivideKeyword\n| `AddToKeyword -> AddToKeyword\n| `SubtractKeyword -> SubtractKeyword\n| `EqualToKeyword -> EqualToKeyword\n| `LessThanEqualToKeyword -> LessThanEqualToKeyword\n| `FirstElementKeyword -> FirstElementKeyword\n| `RemainingKeyword -> RemainingKeyword",
        "lines": [
          "| `ReturnWhenKeyword -> ReturnWhenKeyword",
          "| `ElseReturnKeyword -> ElseReturnKeyword",
          "| `MultiplyKeyword -> MultiplyKeyword",
          "| `DivideKeyword -> DivideKeyword",
          "| `AddToKeyword -> AddToKeyword",
          "| `SubtractKeyword -> SubtractKeyword",
          "| `EqualToKeyword -> EqualToKeyword",
          "| `LessThanEqualToKeyword -> LessThanEqualToKeyword",
          "| `FirstElementKeyword -> FirstElementKeyword",
          "| `RemainingKeyword -> RemainingKeyword"
        ],
        "start_line": 81,
        "end_line": 90,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/classical_token_mapping.ml"
      }
    ],
    "dc38e51680fd7e3aef6048731c1c2642": [
      {
        "hash": "dc38e51680fd7e3aef6048731c1c2642",
        "text": "| `ElseReturnKeyword -> ElseReturnKeyword\n| `MultiplyKeyword -> MultiplyKeyword\n| `DivideKeyword -> DivideKeyword\n| `AddToKeyword -> AddToKeyword\n| `SubtractKeyword -> SubtractKeyword\n| `EqualToKeyword -> EqualToKeyword\n| `LessThanEqualToKeyword -> LessThanEqualToKeyword\n| `FirstElementKeyword -> FirstElementKeyword\n| `RemainingKeyword -> RemainingKeyword\n| `EmptyKeyword -> EmptyKeyword",
        "lines": [
          "| `ElseReturnKeyword -> ElseReturnKeyword",
          "| `MultiplyKeyword -> MultiplyKeyword",
          "| `DivideKeyword -> DivideKeyword",
          "| `AddToKeyword -> AddToKeyword",
          "| `SubtractKeyword -> SubtractKeyword",
          "| `EqualToKeyword -> EqualToKeyword",
          "| `LessThanEqualToKeyword -> LessThanEqualToKeyword",
          "| `FirstElementKeyword -> FirstElementKeyword",
          "| `RemainingKeyword -> RemainingKeyword",
          "| `EmptyKeyword -> EmptyKeyword"
        ],
        "start_line": 110,
        "end_line": 119,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/basic_token_mapping.ml"
      },
      {
        "hash": "dc38e51680fd7e3aef6048731c1c2642",
        "text": "| `ElseReturnKeyword -> ElseReturnKeyword\n| `MultiplyKeyword -> MultiplyKeyword\n| `DivideKeyword -> DivideKeyword\n| `AddToKeyword -> AddToKeyword\n| `SubtractKeyword -> SubtractKeyword\n| `EqualToKeyword -> EqualToKeyword\n| `LessThanEqualToKeyword -> LessThanEqualToKeyword\n| `FirstElementKeyword -> FirstElementKeyword\n| `RemainingKeyword -> RemainingKeyword\n| `EmptyKeyword -> EmptyKeyword",
        "lines": [
          "| `ElseReturnKeyword -> ElseReturnKeyword",
          "| `MultiplyKeyword -> MultiplyKeyword",
          "| `DivideKeyword -> DivideKeyword",
          "| `AddToKeyword -> AddToKeyword",
          "| `SubtractKeyword -> SubtractKeyword",
          "| `EqualToKeyword -> EqualToKeyword",
          "| `LessThanEqualToKeyword -> LessThanEqualToKeyword",
          "| `FirstElementKeyword -> FirstElementKeyword",
          "| `RemainingKeyword -> RemainingKeyword",
          "| `EmptyKeyword -> EmptyKeyword"
        ],
        "start_line": 82,
        "end_line": 91,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/classical_token_mapping.ml"
      }
    ],
    "f24a5434e398986b4a0a034c11f56d0b": [
      {
        "hash": "f24a5434e398986b4a0a034c11f56d0b",
        "text": "| `MultiplyKeyword -> MultiplyKeyword\n| `DivideKeyword -> DivideKeyword\n| `AddToKeyword -> AddToKeyword\n| `SubtractKeyword -> SubtractKeyword\n| `EqualToKeyword -> EqualToKeyword\n| `LessThanEqualToKeyword -> LessThanEqualToKeyword\n| `FirstElementKeyword -> FirstElementKeyword\n| `RemainingKeyword -> RemainingKeyword\n| `EmptyKeyword -> EmptyKeyword\n| `CharacterCountKeyword -> CharacterCountKeyword",
        "lines": [
          "| `MultiplyKeyword -> MultiplyKeyword",
          "| `DivideKeyword -> DivideKeyword",
          "| `AddToKeyword -> AddToKeyword",
          "| `SubtractKeyword -> SubtractKeyword",
          "| `EqualToKeyword -> EqualToKeyword",
          "| `LessThanEqualToKeyword -> LessThanEqualToKeyword",
          "| `FirstElementKeyword -> FirstElementKeyword",
          "| `RemainingKeyword -> RemainingKeyword",
          "| `EmptyKeyword -> EmptyKeyword",
          "| `CharacterCountKeyword -> CharacterCountKeyword"
        ],
        "start_line": 111,
        "end_line": 120,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/basic_token_mapping.ml"
      },
      {
        "hash": "f24a5434e398986b4a0a034c11f56d0b",
        "text": "| `MultiplyKeyword -> MultiplyKeyword\n| `DivideKeyword -> DivideKeyword\n| `AddToKeyword -> AddToKeyword\n| `SubtractKeyword -> SubtractKeyword\n| `EqualToKeyword -> EqualToKeyword\n| `LessThanEqualToKeyword -> LessThanEqualToKeyword\n| `FirstElementKeyword -> FirstElementKeyword\n| `RemainingKeyword -> RemainingKeyword\n| `EmptyKeyword -> EmptyKeyword\n| `CharacterCountKeyword -> CharacterCountKeyword",
        "lines": [
          "| `MultiplyKeyword -> MultiplyKeyword",
          "| `DivideKeyword -> DivideKeyword",
          "| `AddToKeyword -> AddToKeyword",
          "| `SubtractKeyword -> SubtractKeyword",
          "| `EqualToKeyword -> EqualToKeyword",
          "| `LessThanEqualToKeyword -> LessThanEqualToKeyword",
          "| `FirstElementKeyword -> FirstElementKeyword",
          "| `RemainingKeyword -> RemainingKeyword",
          "| `EmptyKeyword -> EmptyKeyword",
          "| `CharacterCountKeyword -> CharacterCountKeyword"
        ],
        "start_line": 83,
        "end_line": 92,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/classical_token_mapping.ml"
      }
    ],
    "71efebf6fc7d57a3ea62524b49b00cb0": [
      {
        "hash": "71efebf6fc7d57a3ea62524b49b00cb0",
        "text": "| `AncientDefineKeyword -> AncientDefineKeyword\n| `AncientEndKeyword -> AncientEndKeyword\n| `AncientAlgorithmKeyword -> AncientAlgorithmKeyword\n| `AncientCompleteKeyword -> AncientCompleteKeyword\n| `AncientObserveKeyword -> AncientObserveKeyword\n| `AncientNatureKeyword -> AncientNatureKeyword\n| `AncientThenKeyword -> AncientThenKeyword\n| `AncientOtherwiseKeyword -> AncientOtherwiseKeyword\n| `AncientAnswerKeyword -> AncientAnswerKeyword\n| `AncientCombineKeyword -> AncientCombineKeyword",
        "lines": [
          "| `AncientDefineKeyword -> AncientDefineKeyword",
          "| `AncientEndKeyword -> AncientEndKeyword",
          "| `AncientAlgorithmKeyword -> AncientAlgorithmKeyword",
          "| `AncientCompleteKeyword -> AncientCompleteKeyword",
          "| `AncientObserveKeyword -> AncientObserveKeyword",
          "| `AncientNatureKeyword -> AncientNatureKeyword",
          "| `AncientThenKeyword -> AncientThenKeyword",
          "| `AncientOtherwiseKeyword -> AncientOtherwiseKeyword",
          "| `AncientAnswerKeyword -> AncientAnswerKeyword",
          "| `AncientCombineKeyword -> AncientCombineKeyword"
        ],
        "start_line": 133,
        "end_line": 142,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/basic_token_mapping.ml"
      },
      {
        "hash": "71efebf6fc7d57a3ea62524b49b00cb0",
        "text": "| `AncientDefineKeyword -> AncientDefineKeyword\n| `AncientEndKeyword -> AncientEndKeyword\n| `AncientAlgorithmKeyword -> AncientAlgorithmKeyword\n| `AncientCompleteKeyword -> AncientCompleteKeyword\n| `AncientObserveKeyword -> AncientObserveKeyword\n| `AncientNatureKeyword -> AncientNatureKeyword\n| `AncientThenKeyword -> AncientThenKeyword\n| `AncientOtherwiseKeyword -> AncientOtherwiseKeyword\n| `AncientAnswerKeyword -> AncientAnswerKeyword\n| `AncientCombineKeyword -> AncientCombineKeyword",
        "lines": [
          "| `AncientDefineKeyword -> AncientDefineKeyword",
          "| `AncientEndKeyword -> AncientEndKeyword",
          "| `AncientAlgorithmKeyword -> AncientAlgorithmKeyword",
          "| `AncientCompleteKeyword -> AncientCompleteKeyword",
          "| `AncientObserveKeyword -> AncientObserveKeyword",
          "| `AncientNatureKeyword -> AncientNatureKeyword",
          "| `AncientThenKeyword -> AncientThenKeyword",
          "| `AncientOtherwiseKeyword -> AncientOtherwiseKeyword",
          "| `AncientAnswerKeyword -> AncientAnswerKeyword",
          "| `AncientCombineKeyword -> AncientCombineKeyword"
        ],
        "start_line": 33,
        "end_line": 42,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/classical_token_mapping.ml"
      }
    ],
    "c94582fd0a7cb7b626b2e1e3696693c3": [
      {
        "hash": "c94582fd0a7cb7b626b2e1e3696693c3",
        "text": "| `AncientEndKeyword -> AncientEndKeyword\n| `AncientAlgorithmKeyword -> AncientAlgorithmKeyword\n| `AncientCompleteKeyword -> AncientCompleteKeyword\n| `AncientObserveKeyword -> AncientObserveKeyword\n| `AncientNatureKeyword -> AncientNatureKeyword\n| `AncientThenKeyword -> AncientThenKeyword\n| `AncientOtherwiseKeyword -> AncientOtherwiseKeyword\n| `AncientAnswerKeyword -> AncientAnswerKeyword\n| `AncientCombineKeyword -> AncientCombineKeyword\n| `AncientAsOneKeyword -> AncientAsOneKeyword",
        "lines": [
          "| `AncientEndKeyword -> AncientEndKeyword",
          "| `AncientAlgorithmKeyword -> AncientAlgorithmKeyword",
          "| `AncientCompleteKeyword -> AncientCompleteKeyword",
          "| `AncientObserveKeyword -> AncientObserveKeyword",
          "| `AncientNatureKeyword -> AncientNatureKeyword",
          "| `AncientThenKeyword -> AncientThenKeyword",
          "| `AncientOtherwiseKeyword -> AncientOtherwiseKeyword",
          "| `AncientAnswerKeyword -> AncientAnswerKeyword",
          "| `AncientCombineKeyword -> AncientCombineKeyword",
          "| `AncientAsOneKeyword -> AncientAsOneKeyword"
        ],
        "start_line": 134,
        "end_line": 143,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/basic_token_mapping.ml"
      },
      {
        "hash": "c94582fd0a7cb7b626b2e1e3696693c3",
        "text": "| `AncientEndKeyword -> AncientEndKeyword\n| `AncientAlgorithmKeyword -> AncientAlgorithmKeyword\n| `AncientCompleteKeyword -> AncientCompleteKeyword\n| `AncientObserveKeyword -> AncientObserveKeyword\n| `AncientNatureKeyword -> AncientNatureKeyword\n| `AncientThenKeyword -> AncientThenKeyword\n| `AncientOtherwiseKeyword -> AncientOtherwiseKeyword\n| `AncientAnswerKeyword -> AncientAnswerKeyword\n| `AncientCombineKeyword -> AncientCombineKeyword\n| `AncientAsOneKeyword -> AncientAsOneKeyword",
        "lines": [
          "| `AncientEndKeyword -> AncientEndKeyword",
          "| `AncientAlgorithmKeyword -> AncientAlgorithmKeyword",
          "| `AncientCompleteKeyword -> AncientCompleteKeyword",
          "| `AncientObserveKeyword -> AncientObserveKeyword",
          "| `AncientNatureKeyword -> AncientNatureKeyword",
          "| `AncientThenKeyword -> AncientThenKeyword",
          "| `AncientOtherwiseKeyword -> AncientOtherwiseKeyword",
          "| `AncientAnswerKeyword -> AncientAnswerKeyword",
          "| `AncientCombineKeyword -> AncientCombineKeyword",
          "| `AncientAsOneKeyword -> AncientAsOneKeyword"
        ],
        "start_line": 34,
        "end_line": 43,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/classical_token_mapping.ml"
      }
    ],
    "964de27a8d4eea50d3f4a6efe19a10df": [
      {
        "hash": "964de27a8d4eea50d3f4a6efe19a10df",
        "text": "| `AncientAlgorithmKeyword -> AncientAlgorithmKeyword\n| `AncientCompleteKeyword -> AncientCompleteKeyword\n| `AncientObserveKeyword -> AncientObserveKeyword\n| `AncientNatureKeyword -> AncientNatureKeyword\n| `AncientThenKeyword -> AncientThenKeyword\n| `AncientOtherwiseKeyword -> AncientOtherwiseKeyword\n| `AncientAnswerKeyword -> AncientAnswerKeyword\n| `AncientCombineKeyword -> AncientCombineKeyword\n| `AncientAsOneKeyword -> AncientAsOneKeyword\n| `AncientTakeKeyword -> AncientTakeKeyword",
        "lines": [
          "| `AncientAlgorithmKeyword -> AncientAlgorithmKeyword",
          "| `AncientCompleteKeyword -> AncientCompleteKeyword",
          "| `AncientObserveKeyword -> AncientObserveKeyword",
          "| `AncientNatureKeyword -> AncientNatureKeyword",
          "| `AncientThenKeyword -> AncientThenKeyword",
          "| `AncientOtherwiseKeyword -> AncientOtherwiseKeyword",
          "| `AncientAnswerKeyword -> AncientAnswerKeyword",
          "| `AncientCombineKeyword -> AncientCombineKeyword",
          "| `AncientAsOneKeyword -> AncientAsOneKeyword",
          "| `AncientTakeKeyword -> AncientTakeKeyword"
        ],
        "start_line": 135,
        "end_line": 144,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/basic_token_mapping.ml"
      },
      {
        "hash": "964de27a8d4eea50d3f4a6efe19a10df",
        "text": "| `AncientAlgorithmKeyword -> AncientAlgorithmKeyword\n| `AncientCompleteKeyword -> AncientCompleteKeyword\n| `AncientObserveKeyword -> AncientObserveKeyword\n| `AncientNatureKeyword -> AncientNatureKeyword\n| `AncientThenKeyword -> AncientThenKeyword\n| `AncientOtherwiseKeyword -> AncientOtherwiseKeyword\n| `AncientAnswerKeyword -> AncientAnswerKeyword\n| `AncientCombineKeyword -> AncientCombineKeyword\n| `AncientAsOneKeyword -> AncientAsOneKeyword\n| `AncientTakeKeyword -> AncientTakeKeyword",
        "lines": [
          "| `AncientAlgorithmKeyword -> AncientAlgorithmKeyword",
          "| `AncientCompleteKeyword -> AncientCompleteKeyword",
          "| `AncientObserveKeyword -> AncientObserveKeyword",
          "| `AncientNatureKeyword -> AncientNatureKeyword",
          "| `AncientThenKeyword -> AncientThenKeyword",
          "| `AncientOtherwiseKeyword -> AncientOtherwiseKeyword",
          "| `AncientAnswerKeyword -> AncientAnswerKeyword",
          "| `AncientCombineKeyword -> AncientCombineKeyword",
          "| `AncientAsOneKeyword -> AncientAsOneKeyword",
          "| `AncientTakeKeyword -> AncientTakeKeyword"
        ],
        "start_line": 35,
        "end_line": 44,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/classical_token_mapping.ml"
      }
    ],
    "7515aa57e42523070b0b4df6a2d48ecf": [
      {
        "hash": "7515aa57e42523070b0b4df6a2d48ecf",
        "text": "| `AncientCompleteKeyword -> AncientCompleteKeyword\n| `AncientObserveKeyword -> AncientObserveKeyword\n| `AncientNatureKeyword -> AncientNatureKeyword\n| `AncientThenKeyword -> AncientThenKeyword\n| `AncientOtherwiseKeyword -> AncientOtherwiseKeyword\n| `AncientAnswerKeyword -> AncientAnswerKeyword\n| `AncientCombineKeyword -> AncientCombineKeyword\n| `AncientAsOneKeyword -> AncientAsOneKeyword\n| `AncientTakeKeyword -> AncientTakeKeyword\n| `AncientReceiveKeyword -> AncientReceiveKeyword",
        "lines": [
          "| `AncientCompleteKeyword -> AncientCompleteKeyword",
          "| `AncientObserveKeyword -> AncientObserveKeyword",
          "| `AncientNatureKeyword -> AncientNatureKeyword",
          "| `AncientThenKeyword -> AncientThenKeyword",
          "| `AncientOtherwiseKeyword -> AncientOtherwiseKeyword",
          "| `AncientAnswerKeyword -> AncientAnswerKeyword",
          "| `AncientCombineKeyword -> AncientCombineKeyword",
          "| `AncientAsOneKeyword -> AncientAsOneKeyword",
          "| `AncientTakeKeyword -> AncientTakeKeyword",
          "| `AncientReceiveKeyword -> AncientReceiveKeyword"
        ],
        "start_line": 136,
        "end_line": 145,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/basic_token_mapping.ml"
      },
      {
        "hash": "7515aa57e42523070b0b4df6a2d48ecf",
        "text": "| `AncientCompleteKeyword -> AncientCompleteKeyword\n| `AncientObserveKeyword -> AncientObserveKeyword\n| `AncientNatureKeyword -> AncientNatureKeyword\n| `AncientThenKeyword -> AncientThenKeyword\n| `AncientOtherwiseKeyword -> AncientOtherwiseKeyword\n| `AncientAnswerKeyword -> AncientAnswerKeyword\n| `AncientCombineKeyword -> AncientCombineKeyword\n| `AncientAsOneKeyword -> AncientAsOneKeyword\n| `AncientTakeKeyword -> AncientTakeKeyword\n| `AncientReceiveKeyword -> AncientReceiveKeyword",
        "lines": [
          "| `AncientCompleteKeyword -> AncientCompleteKeyword",
          "| `AncientObserveKeyword -> AncientObserveKeyword",
          "| `AncientNatureKeyword -> AncientNatureKeyword",
          "| `AncientThenKeyword -> AncientThenKeyword",
          "| `AncientOtherwiseKeyword -> AncientOtherwiseKeyword",
          "| `AncientAnswerKeyword -> AncientAnswerKeyword",
          "| `AncientCombineKeyword -> AncientCombineKeyword",
          "| `AncientAsOneKeyword -> AncientAsOneKeyword",
          "| `AncientTakeKeyword -> AncientTakeKeyword",
          "| `AncientReceiveKeyword -> AncientReceiveKeyword"
        ],
        "start_line": 36,
        "end_line": 45,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/classical_token_mapping.ml"
      }
    ],
    "de6aea958920e9d0d022867941aa2ab0": [
      {
        "hash": "de6aea958920e9d0d022867941aa2ab0",
        "text": "| `AncientObserveKeyword -> AncientObserveKeyword\n| `AncientNatureKeyword -> AncientNatureKeyword\n| `AncientThenKeyword -> AncientThenKeyword\n| `AncientOtherwiseKeyword -> AncientOtherwiseKeyword\n| `AncientAnswerKeyword -> AncientAnswerKeyword\n| `AncientCombineKeyword -> AncientCombineKeyword\n| `AncientAsOneKeyword -> AncientAsOneKeyword\n| `AncientTakeKeyword -> AncientTakeKeyword\n| `AncientReceiveKeyword -> AncientReceiveKeyword\n| `AncientParticleThe -> AncientParticleThe",
        "lines": [
          "| `AncientObserveKeyword -> AncientObserveKeyword",
          "| `AncientNatureKeyword -> AncientNatureKeyword",
          "| `AncientThenKeyword -> AncientThenKeyword",
          "| `AncientOtherwiseKeyword -> AncientOtherwiseKeyword",
          "| `AncientAnswerKeyword -> AncientAnswerKeyword",
          "| `AncientCombineKeyword -> AncientCombineKeyword",
          "| `AncientAsOneKeyword -> AncientAsOneKeyword",
          "| `AncientTakeKeyword -> AncientTakeKeyword",
          "| `AncientReceiveKeyword -> AncientReceiveKeyword",
          "| `AncientParticleThe -> AncientParticleThe"
        ],
        "start_line": 137,
        "end_line": 146,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/basic_token_mapping.ml"
      },
      {
        "hash": "de6aea958920e9d0d022867941aa2ab0",
        "text": "| `AncientObserveKeyword -> AncientObserveKeyword\n| `AncientNatureKeyword -> AncientNatureKeyword\n| `AncientThenKeyword -> AncientThenKeyword\n| `AncientOtherwiseKeyword -> AncientOtherwiseKeyword\n| `AncientAnswerKeyword -> AncientAnswerKeyword\n| `AncientCombineKeyword -> AncientCombineKeyword\n| `AncientAsOneKeyword -> AncientAsOneKeyword\n| `AncientTakeKeyword -> AncientTakeKeyword\n| `AncientReceiveKeyword -> AncientReceiveKeyword\n| `AncientParticleThe -> AncientParticleThe",
        "lines": [
          "| `AncientObserveKeyword -> AncientObserveKeyword",
          "| `AncientNatureKeyword -> AncientNatureKeyword",
          "| `AncientThenKeyword -> AncientThenKeyword",
          "| `AncientOtherwiseKeyword -> AncientOtherwiseKeyword",
          "| `AncientAnswerKeyword -> AncientAnswerKeyword",
          "| `AncientCombineKeyword -> AncientCombineKeyword",
          "| `AncientAsOneKeyword -> AncientAsOneKeyword",
          "| `AncientTakeKeyword -> AncientTakeKeyword",
          "| `AncientReceiveKeyword -> AncientReceiveKeyword",
          "| `AncientParticleThe -> AncientParticleThe"
        ],
        "start_line": 37,
        "end_line": 46,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/classical_token_mapping.ml"
      }
    ],
    "9f440daae4ffb883eeda632f0f2c29c5": [
      {
        "hash": "9f440daae4ffb883eeda632f0f2c29c5",
        "text": "| `AncientNatureKeyword -> AncientNatureKeyword\n| `AncientThenKeyword -> AncientThenKeyword\n| `AncientOtherwiseKeyword -> AncientOtherwiseKeyword\n| `AncientAnswerKeyword -> AncientAnswerKeyword\n| `AncientCombineKeyword -> AncientCombineKeyword\n| `AncientAsOneKeyword -> AncientAsOneKeyword\n| `AncientTakeKeyword -> AncientTakeKeyword\n| `AncientReceiveKeyword -> AncientReceiveKeyword\n| `AncientParticleThe -> AncientParticleThe\n| `AncientParticleFun -> AncientParticleFun",
        "lines": [
          "| `AncientNatureKeyword -> AncientNatureKeyword",
          "| `AncientThenKeyword -> AncientThenKeyword",
          "| `AncientOtherwiseKeyword -> AncientOtherwiseKeyword",
          "| `AncientAnswerKeyword -> AncientAnswerKeyword",
          "| `AncientCombineKeyword -> AncientCombineKeyword",
          "| `AncientAsOneKeyword -> AncientAsOneKeyword",
          "| `AncientTakeKeyword -> AncientTakeKeyword",
          "| `AncientReceiveKeyword -> AncientReceiveKeyword",
          "| `AncientParticleThe -> AncientParticleThe",
          "| `AncientParticleFun -> AncientParticleFun"
        ],
        "start_line": 138,
        "end_line": 147,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/basic_token_mapping.ml"
      },
      {
        "hash": "9f440daae4ffb883eeda632f0f2c29c5",
        "text": "| `AncientNatureKeyword -> AncientNatureKeyword\n| `AncientThenKeyword -> AncientThenKeyword\n| `AncientOtherwiseKeyword -> AncientOtherwiseKeyword\n| `AncientAnswerKeyword -> AncientAnswerKeyword\n| `AncientCombineKeyword -> AncientCombineKeyword\n| `AncientAsOneKeyword -> AncientAsOneKeyword\n| `AncientTakeKeyword -> AncientTakeKeyword\n| `AncientReceiveKeyword -> AncientReceiveKeyword\n| `AncientParticleThe -> AncientParticleThe\n| `AncientParticleFun -> AncientParticleFun",
        "lines": [
          "| `AncientNatureKeyword -> AncientNatureKeyword",
          "| `AncientThenKeyword -> AncientThenKeyword",
          "| `AncientOtherwiseKeyword -> AncientOtherwiseKeyword",
          "| `AncientAnswerKeyword -> AncientAnswerKeyword",
          "| `AncientCombineKeyword -> AncientCombineKeyword",
          "| `AncientAsOneKeyword -> AncientAsOneKeyword",
          "| `AncientTakeKeyword -> AncientTakeKeyword",
          "| `AncientReceiveKeyword -> AncientReceiveKeyword",
          "| `AncientParticleThe -> AncientParticleThe",
          "| `AncientParticleFun -> AncientParticleFun"
        ],
        "start_line": 38,
        "end_line": 47,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/classical_token_mapping.ml"
      }
    ],
    "40f2922adf815c559b13bc77b8ce8031": [
      {
        "hash": "40f2922adf815c559b13bc77b8ce8031",
        "text": "| `AncientThenKeyword -> AncientThenKeyword\n| `AncientOtherwiseKeyword -> AncientOtherwiseKeyword\n| `AncientAnswerKeyword -> AncientAnswerKeyword\n| `AncientCombineKeyword -> AncientCombineKeyword\n| `AncientAsOneKeyword -> AncientAsOneKeyword\n| `AncientTakeKeyword -> AncientTakeKeyword\n| `AncientReceiveKeyword -> AncientReceiveKeyword\n| `AncientParticleThe -> AncientParticleThe\n| `AncientParticleFun -> AncientParticleFun\n| `AncientCallItKeyword -> AncientCallItKeyword",
        "lines": [
          "| `AncientThenKeyword -> AncientThenKeyword",
          "| `AncientOtherwiseKeyword -> AncientOtherwiseKeyword",
          "| `AncientAnswerKeyword -> AncientAnswerKeyword",
          "| `AncientCombineKeyword -> AncientCombineKeyword",
          "| `AncientAsOneKeyword -> AncientAsOneKeyword",
          "| `AncientTakeKeyword -> AncientTakeKeyword",
          "| `AncientReceiveKeyword -> AncientReceiveKeyword",
          "| `AncientParticleThe -> AncientParticleThe",
          "| `AncientParticleFun -> AncientParticleFun",
          "| `AncientCallItKeyword -> AncientCallItKeyword"
        ],
        "start_line": 139,
        "end_line": 148,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/basic_token_mapping.ml"
      },
      {
        "hash": "40f2922adf815c559b13bc77b8ce8031",
        "text": "| `AncientThenKeyword -> AncientThenKeyword\n| `AncientOtherwiseKeyword -> AncientOtherwiseKeyword\n| `AncientAnswerKeyword -> AncientAnswerKeyword\n| `AncientCombineKeyword -> AncientCombineKeyword\n| `AncientAsOneKeyword -> AncientAsOneKeyword\n| `AncientTakeKeyword -> AncientTakeKeyword\n| `AncientReceiveKeyword -> AncientReceiveKeyword\n| `AncientParticleThe -> AncientParticleThe\n| `AncientParticleFun -> AncientParticleFun\n| `AncientCallItKeyword -> AncientCallItKeyword",
        "lines": [
          "| `AncientThenKeyword -> AncientThenKeyword",
          "| `AncientOtherwiseKeyword -> AncientOtherwiseKeyword",
          "| `AncientAnswerKeyword -> AncientAnswerKeyword",
          "| `AncientCombineKeyword -> AncientCombineKeyword",
          "| `AncientAsOneKeyword -> AncientAsOneKeyword",
          "| `AncientTakeKeyword -> AncientTakeKeyword",
          "| `AncientReceiveKeyword -> AncientReceiveKeyword",
          "| `AncientParticleThe -> AncientParticleThe",
          "| `AncientParticleFun -> AncientParticleFun",
          "| `AncientCallItKeyword -> AncientCallItKeyword"
        ],
        "start_line": 39,
        "end_line": 48,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/classical_token_mapping.ml"
      }
    ],
    "fd9dc656d47781586e03a71a857144aa": [
      {
        "hash": "fd9dc656d47781586e03a71a857144aa",
        "text": "| `AncientOtherwiseKeyword -> AncientOtherwiseKeyword\n| `AncientAnswerKeyword -> AncientAnswerKeyword\n| `AncientCombineKeyword -> AncientCombineKeyword\n| `AncientAsOneKeyword -> AncientAsOneKeyword\n| `AncientTakeKeyword -> AncientTakeKeyword\n| `AncientReceiveKeyword -> AncientReceiveKeyword\n| `AncientParticleThe -> AncientParticleThe\n| `AncientParticleFun -> AncientParticleFun\n| `AncientCallItKeyword -> AncientCallItKeyword\n| `AncientListStartKeyword -> AncientListStartKeyword",
        "lines": [
          "| `AncientOtherwiseKeyword -> AncientOtherwiseKeyword",
          "| `AncientAnswerKeyword -> AncientAnswerKeyword",
          "| `AncientCombineKeyword -> AncientCombineKeyword",
          "| `AncientAsOneKeyword -> AncientAsOneKeyword",
          "| `AncientTakeKeyword -> AncientTakeKeyword",
          "| `AncientReceiveKeyword -> AncientReceiveKeyword",
          "| `AncientParticleThe -> AncientParticleThe",
          "| `AncientParticleFun -> AncientParticleFun",
          "| `AncientCallItKeyword -> AncientCallItKeyword",
          "| `AncientListStartKeyword -> AncientListStartKeyword"
        ],
        "start_line": 140,
        "end_line": 149,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/basic_token_mapping.ml"
      },
      {
        "hash": "fd9dc656d47781586e03a71a857144aa",
        "text": "| `AncientOtherwiseKeyword -> AncientOtherwiseKeyword\n| `AncientAnswerKeyword -> AncientAnswerKeyword\n| `AncientCombineKeyword -> AncientCombineKeyword\n| `AncientAsOneKeyword -> AncientAsOneKeyword\n| `AncientTakeKeyword -> AncientTakeKeyword\n| `AncientReceiveKeyword -> AncientReceiveKeyword\n| `AncientParticleThe -> AncientParticleThe\n| `AncientParticleFun -> AncientParticleFun\n| `AncientCallItKeyword -> AncientCallItKeyword\n| `AncientListStartKeyword -> AncientListStartKeyword",
        "lines": [
          "| `AncientOtherwiseKeyword -> AncientOtherwiseKeyword",
          "| `AncientAnswerKeyword -> AncientAnswerKeyword",
          "| `AncientCombineKeyword -> AncientCombineKeyword",
          "| `AncientAsOneKeyword -> AncientAsOneKeyword",
          "| `AncientTakeKeyword -> AncientTakeKeyword",
          "| `AncientReceiveKeyword -> AncientReceiveKeyword",
          "| `AncientParticleThe -> AncientParticleThe",
          "| `AncientParticleFun -> AncientParticleFun",
          "| `AncientCallItKeyword -> AncientCallItKeyword",
          "| `AncientListStartKeyword -> AncientListStartKeyword"
        ],
        "start_line": 40,
        "end_line": 49,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/classical_token_mapping.ml"
      }
    ],
    "9341c52fabdb4450366ea3f089947705": [
      {
        "hash": "9341c52fabdb4450366ea3f089947705",
        "text": "| `AncientAnswerKeyword -> AncientAnswerKeyword\n| `AncientCombineKeyword -> AncientCombineKeyword\n| `AncientAsOneKeyword -> AncientAsOneKeyword\n| `AncientTakeKeyword -> AncientTakeKeyword\n| `AncientReceiveKeyword -> AncientReceiveKeyword\n| `AncientParticleThe -> AncientParticleThe\n| `AncientParticleFun -> AncientParticleFun\n| `AncientCallItKeyword -> AncientCallItKeyword\n| `AncientListStartKeyword -> AncientListStartKeyword\n| `AncientListEndKeyword -> AncientListEndKeyword",
        "lines": [
          "| `AncientAnswerKeyword -> AncientAnswerKeyword",
          "| `AncientCombineKeyword -> AncientCombineKeyword",
          "| `AncientAsOneKeyword -> AncientAsOneKeyword",
          "| `AncientTakeKeyword -> AncientTakeKeyword",
          "| `AncientReceiveKeyword -> AncientReceiveKeyword",
          "| `AncientParticleThe -> AncientParticleThe",
          "| `AncientParticleFun -> AncientParticleFun",
          "| `AncientCallItKeyword -> AncientCallItKeyword",
          "| `AncientListStartKeyword -> AncientListStartKeyword",
          "| `AncientListEndKeyword -> AncientListEndKeyword"
        ],
        "start_line": 141,
        "end_line": 150,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/basic_token_mapping.ml"
      },
      {
        "hash": "9341c52fabdb4450366ea3f089947705",
        "text": "| `AncientAnswerKeyword -> AncientAnswerKeyword\n| `AncientCombineKeyword -> AncientCombineKeyword\n| `AncientAsOneKeyword -> AncientAsOneKeyword\n| `AncientTakeKeyword -> AncientTakeKeyword\n| `AncientReceiveKeyword -> AncientReceiveKeyword\n| `AncientParticleThe -> AncientParticleThe\n| `AncientParticleFun -> AncientParticleFun\n| `AncientCallItKeyword -> AncientCallItKeyword\n| `AncientListStartKeyword -> AncientListStartKeyword\n| `AncientListEndKeyword -> AncientListEndKeyword",
        "lines": [
          "| `AncientAnswerKeyword -> AncientAnswerKeyword",
          "| `AncientCombineKeyword -> AncientCombineKeyword",
          "| `AncientAsOneKeyword -> AncientAsOneKeyword",
          "| `AncientTakeKeyword -> AncientTakeKeyword",
          "| `AncientReceiveKeyword -> AncientReceiveKeyword",
          "| `AncientParticleThe -> AncientParticleThe",
          "| `AncientParticleFun -> AncientParticleFun",
          "| `AncientCallItKeyword -> AncientCallItKeyword",
          "| `AncientListStartKeyword -> AncientListStartKeyword",
          "| `AncientListEndKeyword -> AncientListEndKeyword"
        ],
        "start_line": 41,
        "end_line": 50,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/classical_token_mapping.ml"
      }
    ],
    "b7239a954edf2b6bf87c938b91984e55": [
      {
        "hash": "b7239a954edf2b6bf87c938b91984e55",
        "text": "| `AncientCombineKeyword -> AncientCombineKeyword\n| `AncientAsOneKeyword -> AncientAsOneKeyword\n| `AncientTakeKeyword -> AncientTakeKeyword\n| `AncientReceiveKeyword -> AncientReceiveKeyword\n| `AncientParticleThe -> AncientParticleThe\n| `AncientParticleFun -> AncientParticleFun\n| `AncientCallItKeyword -> AncientCallItKeyword\n| `AncientListStartKeyword -> AncientListStartKeyword\n| `AncientListEndKeyword -> AncientListEndKeyword\n| `AncientItsFirstKeyword -> AncientItsFirstKeyword",
        "lines": [
          "| `AncientCombineKeyword -> AncientCombineKeyword",
          "| `AncientAsOneKeyword -> AncientAsOneKeyword",
          "| `AncientTakeKeyword -> AncientTakeKeyword",
          "| `AncientReceiveKeyword -> AncientReceiveKeyword",
          "| `AncientParticleThe -> AncientParticleThe",
          "| `AncientParticleFun -> AncientParticleFun",
          "| `AncientCallItKeyword -> AncientCallItKeyword",
          "| `AncientListStartKeyword -> AncientListStartKeyword",
          "| `AncientListEndKeyword -> AncientListEndKeyword",
          "| `AncientItsFirstKeyword -> AncientItsFirstKeyword"
        ],
        "start_line": 142,
        "end_line": 151,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/basic_token_mapping.ml"
      },
      {
        "hash": "b7239a954edf2b6bf87c938b91984e55",
        "text": "| `AncientCombineKeyword -> AncientCombineKeyword\n| `AncientAsOneKeyword -> AncientAsOneKeyword\n| `AncientTakeKeyword -> AncientTakeKeyword\n| `AncientReceiveKeyword -> AncientReceiveKeyword\n| `AncientParticleThe -> AncientParticleThe\n| `AncientParticleFun -> AncientParticleFun\n| `AncientCallItKeyword -> AncientCallItKeyword\n| `AncientListStartKeyword -> AncientListStartKeyword\n| `AncientListEndKeyword -> AncientListEndKeyword\n| `AncientItsFirstKeyword -> AncientItsFirstKeyword",
        "lines": [
          "| `AncientCombineKeyword -> AncientCombineKeyword",
          "| `AncientAsOneKeyword -> AncientAsOneKeyword",
          "| `AncientTakeKeyword -> AncientTakeKeyword",
          "| `AncientReceiveKeyword -> AncientReceiveKeyword",
          "| `AncientParticleThe -> AncientParticleThe",
          "| `AncientParticleFun -> AncientParticleFun",
          "| `AncientCallItKeyword -> AncientCallItKeyword",
          "| `AncientListStartKeyword -> AncientListStartKeyword",
          "| `AncientListEndKeyword -> AncientListEndKeyword",
          "| `AncientItsFirstKeyword -> AncientItsFirstKeyword"
        ],
        "start_line": 42,
        "end_line": 51,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/classical_token_mapping.ml"
      }
    ],
    "95f660aa511b9ae0868acb68a7018252": [
      {
        "hash": "95f660aa511b9ae0868acb68a7018252",
        "text": "| `AncientAsOneKeyword -> AncientAsOneKeyword\n| `AncientTakeKeyword -> AncientTakeKeyword\n| `AncientReceiveKeyword -> AncientReceiveKeyword\n| `AncientParticleThe -> AncientParticleThe\n| `AncientParticleFun -> AncientParticleFun\n| `AncientCallItKeyword -> AncientCallItKeyword\n| `AncientListStartKeyword -> AncientListStartKeyword\n| `AncientListEndKeyword -> AncientListEndKeyword\n| `AncientItsFirstKeyword -> AncientItsFirstKeyword\n| `AncientItsSecondKeyword -> AncientItsSecondKeyword",
        "lines": [
          "| `AncientAsOneKeyword -> AncientAsOneKeyword",
          "| `AncientTakeKeyword -> AncientTakeKeyword",
          "| `AncientReceiveKeyword -> AncientReceiveKeyword",
          "| `AncientParticleThe -> AncientParticleThe",
          "| `AncientParticleFun -> AncientParticleFun",
          "| `AncientCallItKeyword -> AncientCallItKeyword",
          "| `AncientListStartKeyword -> AncientListStartKeyword",
          "| `AncientListEndKeyword -> AncientListEndKeyword",
          "| `AncientItsFirstKeyword -> AncientItsFirstKeyword",
          "| `AncientItsSecondKeyword -> AncientItsSecondKeyword"
        ],
        "start_line": 143,
        "end_line": 152,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/basic_token_mapping.ml"
      },
      {
        "hash": "95f660aa511b9ae0868acb68a7018252",
        "text": "| `AncientAsOneKeyword -> AncientAsOneKeyword\n| `AncientTakeKeyword -> AncientTakeKeyword\n| `AncientReceiveKeyword -> AncientReceiveKeyword\n| `AncientParticleThe -> AncientParticleThe\n| `AncientParticleFun -> AncientParticleFun\n| `AncientCallItKeyword -> AncientCallItKeyword\n| `AncientListStartKeyword -> AncientListStartKeyword\n| `AncientListEndKeyword -> AncientListEndKeyword\n| `AncientItsFirstKeyword -> AncientItsFirstKeyword\n| `AncientItsSecondKeyword -> AncientItsSecondKeyword",
        "lines": [
          "| `AncientAsOneKeyword -> AncientAsOneKeyword",
          "| `AncientTakeKeyword -> AncientTakeKeyword",
          "| `AncientReceiveKeyword -> AncientReceiveKeyword",
          "| `AncientParticleThe -> AncientParticleThe",
          "| `AncientParticleFun -> AncientParticleFun",
          "| `AncientCallItKeyword -> AncientCallItKeyword",
          "| `AncientListStartKeyword -> AncientListStartKeyword",
          "| `AncientListEndKeyword -> AncientListEndKeyword",
          "| `AncientItsFirstKeyword -> AncientItsFirstKeyword",
          "| `AncientItsSecondKeyword -> AncientItsSecondKeyword"
        ],
        "start_line": 43,
        "end_line": 52,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/classical_token_mapping.ml"
      }
    ],
    "7216eb59d1aa4f29493d4b088b6a1ed7": [
      {
        "hash": "7216eb59d1aa4f29493d4b088b6a1ed7",
        "text": "| `AncientTakeKeyword -> AncientTakeKeyword\n| `AncientReceiveKeyword -> AncientReceiveKeyword\n| `AncientParticleThe -> AncientParticleThe\n| `AncientParticleFun -> AncientParticleFun\n| `AncientCallItKeyword -> AncientCallItKeyword\n| `AncientListStartKeyword -> AncientListStartKeyword\n| `AncientListEndKeyword -> AncientListEndKeyword\n| `AncientItsFirstKeyword -> AncientItsFirstKeyword\n| `AncientItsSecondKeyword -> AncientItsSecondKeyword\n| `AncientItsThirdKeyword -> AncientItsThirdKeyword",
        "lines": [
          "| `AncientTakeKeyword -> AncientTakeKeyword",
          "| `AncientReceiveKeyword -> AncientReceiveKeyword",
          "| `AncientParticleThe -> AncientParticleThe",
          "| `AncientParticleFun -> AncientParticleFun",
          "| `AncientCallItKeyword -> AncientCallItKeyword",
          "| `AncientListStartKeyword -> AncientListStartKeyword",
          "| `AncientListEndKeyword -> AncientListEndKeyword",
          "| `AncientItsFirstKeyword -> AncientItsFirstKeyword",
          "| `AncientItsSecondKeyword -> AncientItsSecondKeyword",
          "| `AncientItsThirdKeyword -> AncientItsThirdKeyword"
        ],
        "start_line": 144,
        "end_line": 153,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/basic_token_mapping.ml"
      },
      {
        "hash": "7216eb59d1aa4f29493d4b088b6a1ed7",
        "text": "| `AncientTakeKeyword -> AncientTakeKeyword\n| `AncientReceiveKeyword -> AncientReceiveKeyword\n| `AncientParticleThe -> AncientParticleThe\n| `AncientParticleFun -> AncientParticleFun\n| `AncientCallItKeyword -> AncientCallItKeyword\n| `AncientListStartKeyword -> AncientListStartKeyword\n| `AncientListEndKeyword -> AncientListEndKeyword\n| `AncientItsFirstKeyword -> AncientItsFirstKeyword\n| `AncientItsSecondKeyword -> AncientItsSecondKeyword\n| `AncientItsThirdKeyword -> AncientItsThirdKeyword",
        "lines": [
          "| `AncientTakeKeyword -> AncientTakeKeyword",
          "| `AncientReceiveKeyword -> AncientReceiveKeyword",
          "| `AncientParticleThe -> AncientParticleThe",
          "| `AncientParticleFun -> AncientParticleFun",
          "| `AncientCallItKeyword -> AncientCallItKeyword",
          "| `AncientListStartKeyword -> AncientListStartKeyword",
          "| `AncientListEndKeyword -> AncientListEndKeyword",
          "| `AncientItsFirstKeyword -> AncientItsFirstKeyword",
          "| `AncientItsSecondKeyword -> AncientItsSecondKeyword",
          "| `AncientItsThirdKeyword -> AncientItsThirdKeyword"
        ],
        "start_line": 44,
        "end_line": 53,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/classical_token_mapping.ml"
      }
    ],
    "45ec78ebd879829b8634281bce480b44": [
      {
        "hash": "45ec78ebd879829b8634281bce480b44",
        "text": "| `AncientReceiveKeyword -> AncientReceiveKeyword\n| `AncientParticleThe -> AncientParticleThe\n| `AncientParticleFun -> AncientParticleFun\n| `AncientCallItKeyword -> AncientCallItKeyword\n| `AncientListStartKeyword -> AncientListStartKeyword\n| `AncientListEndKeyword -> AncientListEndKeyword\n| `AncientItsFirstKeyword -> AncientItsFirstKeyword\n| `AncientItsSecondKeyword -> AncientItsSecondKeyword\n| `AncientItsThirdKeyword -> AncientItsThirdKeyword\n| `AncientEmptyKeyword -> AncientEmptyKeyword",
        "lines": [
          "| `AncientReceiveKeyword -> AncientReceiveKeyword",
          "| `AncientParticleThe -> AncientParticleThe",
          "| `AncientParticleFun -> AncientParticleFun",
          "| `AncientCallItKeyword -> AncientCallItKeyword",
          "| `AncientListStartKeyword -> AncientListStartKeyword",
          "| `AncientListEndKeyword -> AncientListEndKeyword",
          "| `AncientItsFirstKeyword -> AncientItsFirstKeyword",
          "| `AncientItsSecondKeyword -> AncientItsSecondKeyword",
          "| `AncientItsThirdKeyword -> AncientItsThirdKeyword",
          "| `AncientEmptyKeyword -> AncientEmptyKeyword"
        ],
        "start_line": 145,
        "end_line": 154,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/basic_token_mapping.ml"
      },
      {
        "hash": "45ec78ebd879829b8634281bce480b44",
        "text": "| `AncientReceiveKeyword -> AncientReceiveKeyword\n| `AncientParticleThe -> AncientParticleThe\n| `AncientParticleFun -> AncientParticleFun\n| `AncientCallItKeyword -> AncientCallItKeyword\n| `AncientListStartKeyword -> AncientListStartKeyword\n| `AncientListEndKeyword -> AncientListEndKeyword\n| `AncientItsFirstKeyword -> AncientItsFirstKeyword\n| `AncientItsSecondKeyword -> AncientItsSecondKeyword\n| `AncientItsThirdKeyword -> AncientItsThirdKeyword\n| `AncientEmptyKeyword -> AncientEmptyKeyword",
        "lines": [
          "| `AncientReceiveKeyword -> AncientReceiveKeyword",
          "| `AncientParticleThe -> AncientParticleThe",
          "| `AncientParticleFun -> AncientParticleFun",
          "| `AncientCallItKeyword -> AncientCallItKeyword",
          "| `AncientListStartKeyword -> AncientListStartKeyword",
          "| `AncientListEndKeyword -> AncientListEndKeyword",
          "| `AncientItsFirstKeyword -> AncientItsFirstKeyword",
          "| `AncientItsSecondKeyword -> AncientItsSecondKeyword",
          "| `AncientItsThirdKeyword -> AncientItsThirdKeyword",
          "| `AncientEmptyKeyword -> AncientEmptyKeyword"
        ],
        "start_line": 45,
        "end_line": 54,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/classical_token_mapping.ml"
      }
    ],
    "ee7e2626142387cb22f85b7391f0137b": [
      {
        "hash": "ee7e2626142387cb22f85b7391f0137b",
        "text": "| `AncientParticleThe -> AncientParticleThe\n| `AncientParticleFun -> AncientParticleFun\n| `AncientCallItKeyword -> AncientCallItKeyword\n| `AncientListStartKeyword -> AncientListStartKeyword\n| `AncientListEndKeyword -> AncientListEndKeyword\n| `AncientItsFirstKeyword -> AncientItsFirstKeyword\n| `AncientItsSecondKeyword -> AncientItsSecondKeyword\n| `AncientItsThirdKeyword -> AncientItsThirdKeyword\n| `AncientEmptyKeyword -> AncientEmptyKeyword\n| `AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword",
        "lines": [
          "| `AncientParticleThe -> AncientParticleThe",
          "| `AncientParticleFun -> AncientParticleFun",
          "| `AncientCallItKeyword -> AncientCallItKeyword",
          "| `AncientListStartKeyword -> AncientListStartKeyword",
          "| `AncientListEndKeyword -> AncientListEndKeyword",
          "| `AncientItsFirstKeyword -> AncientItsFirstKeyword",
          "| `AncientItsSecondKeyword -> AncientItsSecondKeyword",
          "| `AncientItsThirdKeyword -> AncientItsThirdKeyword",
          "| `AncientEmptyKeyword -> AncientEmptyKeyword",
          "| `AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword"
        ],
        "start_line": 146,
        "end_line": 155,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/basic_token_mapping.ml"
      },
      {
        "hash": "ee7e2626142387cb22f85b7391f0137b",
        "text": "| `AncientParticleThe -> AncientParticleThe\n| `AncientParticleFun -> AncientParticleFun\n| `AncientCallItKeyword -> AncientCallItKeyword\n| `AncientListStartKeyword -> AncientListStartKeyword\n| `AncientListEndKeyword -> AncientListEndKeyword\n| `AncientItsFirstKeyword -> AncientItsFirstKeyword\n| `AncientItsSecondKeyword -> AncientItsSecondKeyword\n| `AncientItsThirdKeyword -> AncientItsThirdKeyword\n| `AncientEmptyKeyword -> AncientEmptyKeyword\n| `AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword",
        "lines": [
          "| `AncientParticleThe -> AncientParticleThe",
          "| `AncientParticleFun -> AncientParticleFun",
          "| `AncientCallItKeyword -> AncientCallItKeyword",
          "| `AncientListStartKeyword -> AncientListStartKeyword",
          "| `AncientListEndKeyword -> AncientListEndKeyword",
          "| `AncientItsFirstKeyword -> AncientItsFirstKeyword",
          "| `AncientItsSecondKeyword -> AncientItsSecondKeyword",
          "| `AncientItsThirdKeyword -> AncientItsThirdKeyword",
          "| `AncientEmptyKeyword -> AncientEmptyKeyword",
          "| `AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword"
        ],
        "start_line": 46,
        "end_line": 55,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/classical_token_mapping.ml"
      }
    ],
    "93526feaa74366a585515a99cc87324d": [
      {
        "hash": "93526feaa74366a585515a99cc87324d",
        "text": "| `AncientParticleFun -> AncientParticleFun\n| `AncientCallItKeyword -> AncientCallItKeyword\n| `AncientListStartKeyword -> AncientListStartKeyword\n| `AncientListEndKeyword -> AncientListEndKeyword\n| `AncientItsFirstKeyword -> AncientItsFirstKeyword\n| `AncientItsSecondKeyword -> AncientItsSecondKeyword\n| `AncientItsThirdKeyword -> AncientItsThirdKeyword\n| `AncientEmptyKeyword -> AncientEmptyKeyword\n| `AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword\n| `AncientHeadNameKeyword -> AncientHeadNameKeyword",
        "lines": [
          "| `AncientParticleFun -> AncientParticleFun",
          "| `AncientCallItKeyword -> AncientCallItKeyword",
          "| `AncientListStartKeyword -> AncientListStartKeyword",
          "| `AncientListEndKeyword -> AncientListEndKeyword",
          "| `AncientItsFirstKeyword -> AncientItsFirstKeyword",
          "| `AncientItsSecondKeyword -> AncientItsSecondKeyword",
          "| `AncientItsThirdKeyword -> AncientItsThirdKeyword",
          "| `AncientEmptyKeyword -> AncientEmptyKeyword",
          "| `AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword",
          "| `AncientHeadNameKeyword -> AncientHeadNameKeyword"
        ],
        "start_line": 147,
        "end_line": 156,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/basic_token_mapping.ml"
      },
      {
        "hash": "93526feaa74366a585515a99cc87324d",
        "text": "| `AncientParticleFun -> AncientParticleFun\n| `AncientCallItKeyword -> AncientCallItKeyword\n| `AncientListStartKeyword -> AncientListStartKeyword\n| `AncientListEndKeyword -> AncientListEndKeyword\n| `AncientItsFirstKeyword -> AncientItsFirstKeyword\n| `AncientItsSecondKeyword -> AncientItsSecondKeyword\n| `AncientItsThirdKeyword -> AncientItsThirdKeyword\n| `AncientEmptyKeyword -> AncientEmptyKeyword\n| `AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword\n| `AncientHeadNameKeyword -> AncientHeadNameKeyword",
        "lines": [
          "| `AncientParticleFun -> AncientParticleFun",
          "| `AncientCallItKeyword -> AncientCallItKeyword",
          "| `AncientListStartKeyword -> AncientListStartKeyword",
          "| `AncientListEndKeyword -> AncientListEndKeyword",
          "| `AncientItsFirstKeyword -> AncientItsFirstKeyword",
          "| `AncientItsSecondKeyword -> AncientItsSecondKeyword",
          "| `AncientItsThirdKeyword -> AncientItsThirdKeyword",
          "| `AncientEmptyKeyword -> AncientEmptyKeyword",
          "| `AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword",
          "| `AncientHeadNameKeyword -> AncientHeadNameKeyword"
        ],
        "start_line": 47,
        "end_line": 56,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/classical_token_mapping.ml"
      }
    ],
    "6fe655506f8baed3493584862bc9cc57": [
      {
        "hash": "6fe655506f8baed3493584862bc9cc57",
        "text": "| `AncientCallItKeyword -> AncientCallItKeyword\n| `AncientListStartKeyword -> AncientListStartKeyword\n| `AncientListEndKeyword -> AncientListEndKeyword\n| `AncientItsFirstKeyword -> AncientItsFirstKeyword\n| `AncientItsSecondKeyword -> AncientItsSecondKeyword\n| `AncientItsThirdKeyword -> AncientItsThirdKeyword\n| `AncientEmptyKeyword -> AncientEmptyKeyword\n| `AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword\n| `AncientHeadNameKeyword -> AncientHeadNameKeyword\n| `AncientTailNameKeyword -> AncientTailNameKeyword",
        "lines": [
          "| `AncientCallItKeyword -> AncientCallItKeyword",
          "| `AncientListStartKeyword -> AncientListStartKeyword",
          "| `AncientListEndKeyword -> AncientListEndKeyword",
          "| `AncientItsFirstKeyword -> AncientItsFirstKeyword",
          "| `AncientItsSecondKeyword -> AncientItsSecondKeyword",
          "| `AncientItsThirdKeyword -> AncientItsThirdKeyword",
          "| `AncientEmptyKeyword -> AncientEmptyKeyword",
          "| `AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword",
          "| `AncientHeadNameKeyword -> AncientHeadNameKeyword",
          "| `AncientTailNameKeyword -> AncientTailNameKeyword"
        ],
        "start_line": 148,
        "end_line": 157,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/basic_token_mapping.ml"
      },
      {
        "hash": "6fe655506f8baed3493584862bc9cc57",
        "text": "| `AncientCallItKeyword -> AncientCallItKeyword\n| `AncientListStartKeyword -> AncientListStartKeyword\n| `AncientListEndKeyword -> AncientListEndKeyword\n| `AncientItsFirstKeyword -> AncientItsFirstKeyword\n| `AncientItsSecondKeyword -> AncientItsSecondKeyword\n| `AncientItsThirdKeyword -> AncientItsThirdKeyword\n| `AncientEmptyKeyword -> AncientEmptyKeyword\n| `AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword\n| `AncientHeadNameKeyword -> AncientHeadNameKeyword\n| `AncientTailNameKeyword -> AncientTailNameKeyword",
        "lines": [
          "| `AncientCallItKeyword -> AncientCallItKeyword",
          "| `AncientListStartKeyword -> AncientListStartKeyword",
          "| `AncientListEndKeyword -> AncientListEndKeyword",
          "| `AncientItsFirstKeyword -> AncientItsFirstKeyword",
          "| `AncientItsSecondKeyword -> AncientItsSecondKeyword",
          "| `AncientItsThirdKeyword -> AncientItsThirdKeyword",
          "| `AncientEmptyKeyword -> AncientEmptyKeyword",
          "| `AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword",
          "| `AncientHeadNameKeyword -> AncientHeadNameKeyword",
          "| `AncientTailNameKeyword -> AncientTailNameKeyword"
        ],
        "start_line": 48,
        "end_line": 57,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/classical_token_mapping.ml"
      }
    ],
    "3ab91e4ce1ddf2a757709454be774b14": [
      {
        "hash": "3ab91e4ce1ddf2a757709454be774b14",
        "text": "| `AncientListStartKeyword -> AncientListStartKeyword\n| `AncientListEndKeyword -> AncientListEndKeyword\n| `AncientItsFirstKeyword -> AncientItsFirstKeyword\n| `AncientItsSecondKeyword -> AncientItsSecondKeyword\n| `AncientItsThirdKeyword -> AncientItsThirdKeyword\n| `AncientEmptyKeyword -> AncientEmptyKeyword\n| `AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword\n| `AncientHeadNameKeyword -> AncientHeadNameKeyword\n| `AncientTailNameKeyword -> AncientTailNameKeyword\n| `AncientThusAnswerKeyword -> AncientThusAnswerKeyword",
        "lines": [
          "| `AncientListStartKeyword -> AncientListStartKeyword",
          "| `AncientListEndKeyword -> AncientListEndKeyword",
          "| `AncientItsFirstKeyword -> AncientItsFirstKeyword",
          "| `AncientItsSecondKeyword -> AncientItsSecondKeyword",
          "| `AncientItsThirdKeyword -> AncientItsThirdKeyword",
          "| `AncientEmptyKeyword -> AncientEmptyKeyword",
          "| `AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword",
          "| `AncientHeadNameKeyword -> AncientHeadNameKeyword",
          "| `AncientTailNameKeyword -> AncientTailNameKeyword",
          "| `AncientThusAnswerKeyword -> AncientThusAnswerKeyword"
        ],
        "start_line": 149,
        "end_line": 158,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/basic_token_mapping.ml"
      },
      {
        "hash": "3ab91e4ce1ddf2a757709454be774b14",
        "text": "| `AncientListStartKeyword -> AncientListStartKeyword\n| `AncientListEndKeyword -> AncientListEndKeyword\n| `AncientItsFirstKeyword -> AncientItsFirstKeyword\n| `AncientItsSecondKeyword -> AncientItsSecondKeyword\n| `AncientItsThirdKeyword -> AncientItsThirdKeyword\n| `AncientEmptyKeyword -> AncientEmptyKeyword\n| `AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword\n| `AncientHeadNameKeyword -> AncientHeadNameKeyword\n| `AncientTailNameKeyword -> AncientTailNameKeyword\n| `AncientThusAnswerKeyword -> AncientThusAnswerKeyword",
        "lines": [
          "| `AncientListStartKeyword -> AncientListStartKeyword",
          "| `AncientListEndKeyword -> AncientListEndKeyword",
          "| `AncientItsFirstKeyword -> AncientItsFirstKeyword",
          "| `AncientItsSecondKeyword -> AncientItsSecondKeyword",
          "| `AncientItsThirdKeyword -> AncientItsThirdKeyword",
          "| `AncientEmptyKeyword -> AncientEmptyKeyword",
          "| `AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword",
          "| `AncientHeadNameKeyword -> AncientHeadNameKeyword",
          "| `AncientTailNameKeyword -> AncientTailNameKeyword",
          "| `AncientThusAnswerKeyword -> AncientThusAnswerKeyword"
        ],
        "start_line": 49,
        "end_line": 58,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/classical_token_mapping.ml"
      }
    ],
    "a6c6742d6623a231df5797319a0c7995": [
      {
        "hash": "a6c6742d6623a231df5797319a0c7995",
        "text": "| `AncientListEndKeyword -> AncientListEndKeyword\n| `AncientItsFirstKeyword -> AncientItsFirstKeyword\n| `AncientItsSecondKeyword -> AncientItsSecondKeyword\n| `AncientItsThirdKeyword -> AncientItsThirdKeyword\n| `AncientEmptyKeyword -> AncientEmptyKeyword\n| `AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword\n| `AncientHeadNameKeyword -> AncientHeadNameKeyword\n| `AncientTailNameKeyword -> AncientTailNameKeyword\n| `AncientThusAnswerKeyword -> AncientThusAnswerKeyword\n| `AncientAddToKeyword -> AncientAddToKeyword",
        "lines": [
          "| `AncientListEndKeyword -> AncientListEndKeyword",
          "| `AncientItsFirstKeyword -> AncientItsFirstKeyword",
          "| `AncientItsSecondKeyword -> AncientItsSecondKeyword",
          "| `AncientItsThirdKeyword -> AncientItsThirdKeyword",
          "| `AncientEmptyKeyword -> AncientEmptyKeyword",
          "| `AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword",
          "| `AncientHeadNameKeyword -> AncientHeadNameKeyword",
          "| `AncientTailNameKeyword -> AncientTailNameKeyword",
          "| `AncientThusAnswerKeyword -> AncientThusAnswerKeyword",
          "| `AncientAddToKeyword -> AncientAddToKeyword"
        ],
        "start_line": 150,
        "end_line": 159,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/basic_token_mapping.ml"
      },
      {
        "hash": "a6c6742d6623a231df5797319a0c7995",
        "text": "| `AncientListEndKeyword -> AncientListEndKeyword\n| `AncientItsFirstKeyword -> AncientItsFirstKeyword\n| `AncientItsSecondKeyword -> AncientItsSecondKeyword\n| `AncientItsThirdKeyword -> AncientItsThirdKeyword\n| `AncientEmptyKeyword -> AncientEmptyKeyword\n| `AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword\n| `AncientHeadNameKeyword -> AncientHeadNameKeyword\n| `AncientTailNameKeyword -> AncientTailNameKeyword\n| `AncientThusAnswerKeyword -> AncientThusAnswerKeyword\n| `AncientAddToKeyword -> AncientAddToKeyword",
        "lines": [
          "| `AncientListEndKeyword -> AncientListEndKeyword",
          "| `AncientItsFirstKeyword -> AncientItsFirstKeyword",
          "| `AncientItsSecondKeyword -> AncientItsSecondKeyword",
          "| `AncientItsThirdKeyword -> AncientItsThirdKeyword",
          "| `AncientEmptyKeyword -> AncientEmptyKeyword",
          "| `AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword",
          "| `AncientHeadNameKeyword -> AncientHeadNameKeyword",
          "| `AncientTailNameKeyword -> AncientTailNameKeyword",
          "| `AncientThusAnswerKeyword -> AncientThusAnswerKeyword",
          "| `AncientAddToKeyword -> AncientAddToKeyword"
        ],
        "start_line": 50,
        "end_line": 59,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/classical_token_mapping.ml"
      }
    ],
    "3c4e6d56bbe857bcf67143611a70313d": [
      {
        "hash": "3c4e6d56bbe857bcf67143611a70313d",
        "text": "| `AncientItsFirstKeyword -> AncientItsFirstKeyword\n| `AncientItsSecondKeyword -> AncientItsSecondKeyword\n| `AncientItsThirdKeyword -> AncientItsThirdKeyword\n| `AncientEmptyKeyword -> AncientEmptyKeyword\n| `AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword\n| `AncientHeadNameKeyword -> AncientHeadNameKeyword\n| `AncientTailNameKeyword -> AncientTailNameKeyword\n| `AncientThusAnswerKeyword -> AncientThusAnswerKeyword\n| `AncientAddToKeyword -> AncientAddToKeyword\n| `AncientObserveEndKeyword -> AncientObserveEndKeyword",
        "lines": [
          "| `AncientItsFirstKeyword -> AncientItsFirstKeyword",
          "| `AncientItsSecondKeyword -> AncientItsSecondKeyword",
          "| `AncientItsThirdKeyword -> AncientItsThirdKeyword",
          "| `AncientEmptyKeyword -> AncientEmptyKeyword",
          "| `AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword",
          "| `AncientHeadNameKeyword -> AncientHeadNameKeyword",
          "| `AncientTailNameKeyword -> AncientTailNameKeyword",
          "| `AncientThusAnswerKeyword -> AncientThusAnswerKeyword",
          "| `AncientAddToKeyword -> AncientAddToKeyword",
          "| `AncientObserveEndKeyword -> AncientObserveEndKeyword"
        ],
        "start_line": 151,
        "end_line": 160,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/basic_token_mapping.ml"
      },
      {
        "hash": "3c4e6d56bbe857bcf67143611a70313d",
        "text": "| `AncientItsFirstKeyword -> AncientItsFirstKeyword\n| `AncientItsSecondKeyword -> AncientItsSecondKeyword\n| `AncientItsThirdKeyword -> AncientItsThirdKeyword\n| `AncientEmptyKeyword -> AncientEmptyKeyword\n| `AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword\n| `AncientHeadNameKeyword -> AncientHeadNameKeyword\n| `AncientTailNameKeyword -> AncientTailNameKeyword\n| `AncientThusAnswerKeyword -> AncientThusAnswerKeyword\n| `AncientAddToKeyword -> AncientAddToKeyword\n| `AncientObserveEndKeyword -> AncientObserveEndKeyword",
        "lines": [
          "| `AncientItsFirstKeyword -> AncientItsFirstKeyword",
          "| `AncientItsSecondKeyword -> AncientItsSecondKeyword",
          "| `AncientItsThirdKeyword -> AncientItsThirdKeyword",
          "| `AncientEmptyKeyword -> AncientEmptyKeyword",
          "| `AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword",
          "| `AncientHeadNameKeyword -> AncientHeadNameKeyword",
          "| `AncientTailNameKeyword -> AncientTailNameKeyword",
          "| `AncientThusAnswerKeyword -> AncientThusAnswerKeyword",
          "| `AncientAddToKeyword -> AncientAddToKeyword",
          "| `AncientObserveEndKeyword -> AncientObserveEndKeyword"
        ],
        "start_line": 51,
        "end_line": 60,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/classical_token_mapping.ml"
      }
    ],
    "1394ff95c3570f61fb803d292563ef4a": [
      {
        "hash": "1394ff95c3570f61fb803d292563ef4a",
        "text": "| `AncientItsSecondKeyword -> AncientItsSecondKeyword\n| `AncientItsThirdKeyword -> AncientItsThirdKeyword\n| `AncientEmptyKeyword -> AncientEmptyKeyword\n| `AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword\n| `AncientHeadNameKeyword -> AncientHeadNameKeyword\n| `AncientTailNameKeyword -> AncientTailNameKeyword\n| `AncientThusAnswerKeyword -> AncientThusAnswerKeyword\n| `AncientAddToKeyword -> AncientAddToKeyword\n| `AncientObserveEndKeyword -> AncientObserveEndKeyword\n| `AncientBeginKeyword -> AncientBeginKeyword",
        "lines": [
          "| `AncientItsSecondKeyword -> AncientItsSecondKeyword",
          "| `AncientItsThirdKeyword -> AncientItsThirdKeyword",
          "| `AncientEmptyKeyword -> AncientEmptyKeyword",
          "| `AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword",
          "| `AncientHeadNameKeyword -> AncientHeadNameKeyword",
          "| `AncientTailNameKeyword -> AncientTailNameKeyword",
          "| `AncientThusAnswerKeyword -> AncientThusAnswerKeyword",
          "| `AncientAddToKeyword -> AncientAddToKeyword",
          "| `AncientObserveEndKeyword -> AncientObserveEndKeyword",
          "| `AncientBeginKeyword -> AncientBeginKeyword"
        ],
        "start_line": 152,
        "end_line": 161,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/basic_token_mapping.ml"
      },
      {
        "hash": "1394ff95c3570f61fb803d292563ef4a",
        "text": "| `AncientItsSecondKeyword -> AncientItsSecondKeyword\n| `AncientItsThirdKeyword -> AncientItsThirdKeyword\n| `AncientEmptyKeyword -> AncientEmptyKeyword\n| `AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword\n| `AncientHeadNameKeyword -> AncientHeadNameKeyword\n| `AncientTailNameKeyword -> AncientTailNameKeyword\n| `AncientThusAnswerKeyword -> AncientThusAnswerKeyword\n| `AncientAddToKeyword -> AncientAddToKeyword\n| `AncientObserveEndKeyword -> AncientObserveEndKeyword\n| `AncientBeginKeyword -> AncientBeginKeyword",
        "lines": [
          "| `AncientItsSecondKeyword -> AncientItsSecondKeyword",
          "| `AncientItsThirdKeyword -> AncientItsThirdKeyword",
          "| `AncientEmptyKeyword -> AncientEmptyKeyword",
          "| `AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword",
          "| `AncientHeadNameKeyword -> AncientHeadNameKeyword",
          "| `AncientTailNameKeyword -> AncientTailNameKeyword",
          "| `AncientThusAnswerKeyword -> AncientThusAnswerKeyword",
          "| `AncientAddToKeyword -> AncientAddToKeyword",
          "| `AncientObserveEndKeyword -> AncientObserveEndKeyword",
          "| `AncientBeginKeyword -> AncientBeginKeyword"
        ],
        "start_line": 52,
        "end_line": 61,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/classical_token_mapping.ml"
      }
    ],
    "11fd475339b150bb087ed3402247486a": [
      {
        "hash": "11fd475339b150bb087ed3402247486a",
        "text": "| `AncientItsThirdKeyword -> AncientItsThirdKeyword\n| `AncientEmptyKeyword -> AncientEmptyKeyword\n| `AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword\n| `AncientHeadNameKeyword -> AncientHeadNameKeyword\n| `AncientTailNameKeyword -> AncientTailNameKeyword\n| `AncientThusAnswerKeyword -> AncientThusAnswerKeyword\n| `AncientAddToKeyword -> AncientAddToKeyword\n| `AncientObserveEndKeyword -> AncientObserveEndKeyword\n| `AncientBeginKeyword -> AncientBeginKeyword\n| `AncientEndCompleteKeyword -> AncientEndCompleteKeyword",
        "lines": [
          "| `AncientItsThirdKeyword -> AncientItsThirdKeyword",
          "| `AncientEmptyKeyword -> AncientEmptyKeyword",
          "| `AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword",
          "| `AncientHeadNameKeyword -> AncientHeadNameKeyword",
          "| `AncientTailNameKeyword -> AncientTailNameKeyword",
          "| `AncientThusAnswerKeyword -> AncientThusAnswerKeyword",
          "| `AncientAddToKeyword -> AncientAddToKeyword",
          "| `AncientObserveEndKeyword -> AncientObserveEndKeyword",
          "| `AncientBeginKeyword -> AncientBeginKeyword",
          "| `AncientEndCompleteKeyword -> AncientEndCompleteKeyword"
        ],
        "start_line": 153,
        "end_line": 162,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/basic_token_mapping.ml"
      },
      {
        "hash": "11fd475339b150bb087ed3402247486a",
        "text": "| `AncientItsThirdKeyword -> AncientItsThirdKeyword\n| `AncientEmptyKeyword -> AncientEmptyKeyword\n| `AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword\n| `AncientHeadNameKeyword -> AncientHeadNameKeyword\n| `AncientTailNameKeyword -> AncientTailNameKeyword\n| `AncientThusAnswerKeyword -> AncientThusAnswerKeyword\n| `AncientAddToKeyword -> AncientAddToKeyword\n| `AncientObserveEndKeyword -> AncientObserveEndKeyword\n| `AncientBeginKeyword -> AncientBeginKeyword\n| `AncientEndCompleteKeyword -> AncientEndCompleteKeyword",
        "lines": [
          "| `AncientItsThirdKeyword -> AncientItsThirdKeyword",
          "| `AncientEmptyKeyword -> AncientEmptyKeyword",
          "| `AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword",
          "| `AncientHeadNameKeyword -> AncientHeadNameKeyword",
          "| `AncientTailNameKeyword -> AncientTailNameKeyword",
          "| `AncientThusAnswerKeyword -> AncientThusAnswerKeyword",
          "| `AncientAddToKeyword -> AncientAddToKeyword",
          "| `AncientObserveEndKeyword -> AncientObserveEndKeyword",
          "| `AncientBeginKeyword -> AncientBeginKeyword",
          "| `AncientEndCompleteKeyword -> AncientEndCompleteKeyword"
        ],
        "start_line": 53,
        "end_line": 62,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/classical_token_mapping.ml"
      }
    ],
    "798570e573688230bd8bfd9f819778ff": [
      {
        "hash": "798570e573688230bd8bfd9f819778ff",
        "text": "| `AncientEmptyKeyword -> AncientEmptyKeyword\n| `AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword\n| `AncientHeadNameKeyword -> AncientHeadNameKeyword\n| `AncientTailNameKeyword -> AncientTailNameKeyword\n| `AncientThusAnswerKeyword -> AncientThusAnswerKeyword\n| `AncientAddToKeyword -> AncientAddToKeyword\n| `AncientObserveEndKeyword -> AncientObserveEndKeyword\n| `AncientBeginKeyword -> AncientBeginKeyword\n| `AncientEndCompleteKeyword -> AncientEndCompleteKeyword\n| `AncientIsKeyword -> AncientIsKeyword",
        "lines": [
          "| `AncientEmptyKeyword -> AncientEmptyKeyword",
          "| `AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword",
          "| `AncientHeadNameKeyword -> AncientHeadNameKeyword",
          "| `AncientTailNameKeyword -> AncientTailNameKeyword",
          "| `AncientThusAnswerKeyword -> AncientThusAnswerKeyword",
          "| `AncientAddToKeyword -> AncientAddToKeyword",
          "| `AncientObserveEndKeyword -> AncientObserveEndKeyword",
          "| `AncientBeginKeyword -> AncientBeginKeyword",
          "| `AncientEndCompleteKeyword -> AncientEndCompleteKeyword",
          "| `AncientIsKeyword -> AncientIsKeyword"
        ],
        "start_line": 154,
        "end_line": 163,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/basic_token_mapping.ml"
      },
      {
        "hash": "798570e573688230bd8bfd9f819778ff",
        "text": "| `AncientEmptyKeyword -> AncientEmptyKeyword\n| `AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword\n| `AncientHeadNameKeyword -> AncientHeadNameKeyword\n| `AncientTailNameKeyword -> AncientTailNameKeyword\n| `AncientThusAnswerKeyword -> AncientThusAnswerKeyword\n| `AncientAddToKeyword -> AncientAddToKeyword\n| `AncientObserveEndKeyword -> AncientObserveEndKeyword\n| `AncientBeginKeyword -> AncientBeginKeyword\n| `AncientEndCompleteKeyword -> AncientEndCompleteKeyword\n| `AncientIsKeyword -> AncientIsKeyword",
        "lines": [
          "| `AncientEmptyKeyword -> AncientEmptyKeyword",
          "| `AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword",
          "| `AncientHeadNameKeyword -> AncientHeadNameKeyword",
          "| `AncientTailNameKeyword -> AncientTailNameKeyword",
          "| `AncientThusAnswerKeyword -> AncientThusAnswerKeyword",
          "| `AncientAddToKeyword -> AncientAddToKeyword",
          "| `AncientObserveEndKeyword -> AncientObserveEndKeyword",
          "| `AncientBeginKeyword -> AncientBeginKeyword",
          "| `AncientEndCompleteKeyword -> AncientEndCompleteKeyword",
          "| `AncientIsKeyword -> AncientIsKeyword"
        ],
        "start_line": 54,
        "end_line": 63,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/classical_token_mapping.ml"
      }
    ],
    "4a39328fe41080bdf143684a58409968": [
      {
        "hash": "4a39328fe41080bdf143684a58409968",
        "text": "| `AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword\n| `AncientHeadNameKeyword -> AncientHeadNameKeyword\n| `AncientTailNameKeyword -> AncientTailNameKeyword\n| `AncientThusAnswerKeyword -> AncientThusAnswerKeyword\n| `AncientAddToKeyword -> AncientAddToKeyword\n| `AncientObserveEndKeyword -> AncientObserveEndKeyword\n| `AncientBeginKeyword -> AncientBeginKeyword\n| `AncientEndCompleteKeyword -> AncientEndCompleteKeyword\n| `AncientIsKeyword -> AncientIsKeyword\n| `AncientArrowKeyword -> AncientArrowKeyword",
        "lines": [
          "| `AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword",
          "| `AncientHeadNameKeyword -> AncientHeadNameKeyword",
          "| `AncientTailNameKeyword -> AncientTailNameKeyword",
          "| `AncientThusAnswerKeyword -> AncientThusAnswerKeyword",
          "| `AncientAddToKeyword -> AncientAddToKeyword",
          "| `AncientObserveEndKeyword -> AncientObserveEndKeyword",
          "| `AncientBeginKeyword -> AncientBeginKeyword",
          "| `AncientEndCompleteKeyword -> AncientEndCompleteKeyword",
          "| `AncientIsKeyword -> AncientIsKeyword",
          "| `AncientArrowKeyword -> AncientArrowKeyword"
        ],
        "start_line": 155,
        "end_line": 164,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/basic_token_mapping.ml"
      },
      {
        "hash": "4a39328fe41080bdf143684a58409968",
        "text": "| `AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword\n| `AncientHeadNameKeyword -> AncientHeadNameKeyword\n| `AncientTailNameKeyword -> AncientTailNameKeyword\n| `AncientThusAnswerKeyword -> AncientThusAnswerKeyword\n| `AncientAddToKeyword -> AncientAddToKeyword\n| `AncientObserveEndKeyword -> AncientObserveEndKeyword\n| `AncientBeginKeyword -> AncientBeginKeyword\n| `AncientEndCompleteKeyword -> AncientEndCompleteKeyword\n| `AncientIsKeyword -> AncientIsKeyword\n| `AncientArrowKeyword -> AncientArrowKeyword",
        "lines": [
          "| `AncientHasHeadTailKeyword -> AncientHasHeadTailKeyword",
          "| `AncientHeadNameKeyword -> AncientHeadNameKeyword",
          "| `AncientTailNameKeyword -> AncientTailNameKeyword",
          "| `AncientThusAnswerKeyword -> AncientThusAnswerKeyword",
          "| `AncientAddToKeyword -> AncientAddToKeyword",
          "| `AncientObserveEndKeyword -> AncientObserveEndKeyword",
          "| `AncientBeginKeyword -> AncientBeginKeyword",
          "| `AncientEndCompleteKeyword -> AncientEndCompleteKeyword",
          "| `AncientIsKeyword -> AncientIsKeyword",
          "| `AncientArrowKeyword -> AncientArrowKeyword"
        ],
        "start_line": 55,
        "end_line": 64,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/classical_token_mapping.ml"
      }
    ],
    "8a1b7f1a1c376703805ede769b5ecaf0": [
      {
        "hash": "8a1b7f1a1c376703805ede769b5ecaf0",
        "text": "| `AncientHeadNameKeyword -> AncientHeadNameKeyword\n| `AncientTailNameKeyword -> AncientTailNameKeyword\n| `AncientThusAnswerKeyword -> AncientThusAnswerKeyword\n| `AncientAddToKeyword -> AncientAddToKeyword\n| `AncientObserveEndKeyword -> AncientObserveEndKeyword\n| `AncientBeginKeyword -> AncientBeginKeyword\n| `AncientEndCompleteKeyword -> AncientEndCompleteKeyword\n| `AncientIsKeyword -> AncientIsKeyword\n| `AncientArrowKeyword -> AncientArrowKeyword\n| `AncientWhenKeyword -> AncientWhenKeyword",
        "lines": [
          "| `AncientHeadNameKeyword -> AncientHeadNameKeyword",
          "| `AncientTailNameKeyword -> AncientTailNameKeyword",
          "| `AncientThusAnswerKeyword -> AncientThusAnswerKeyword",
          "| `AncientAddToKeyword -> AncientAddToKeyword",
          "| `AncientObserveEndKeyword -> AncientObserveEndKeyword",
          "| `AncientBeginKeyword -> AncientBeginKeyword",
          "| `AncientEndCompleteKeyword -> AncientEndCompleteKeyword",
          "| `AncientIsKeyword -> AncientIsKeyword",
          "| `AncientArrowKeyword -> AncientArrowKeyword",
          "| `AncientWhenKeyword -> AncientWhenKeyword"
        ],
        "start_line": 156,
        "end_line": 165,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/basic_token_mapping.ml"
      },
      {
        "hash": "8a1b7f1a1c376703805ede769b5ecaf0",
        "text": "| `AncientHeadNameKeyword -> AncientHeadNameKeyword\n| `AncientTailNameKeyword -> AncientTailNameKeyword\n| `AncientThusAnswerKeyword -> AncientThusAnswerKeyword\n| `AncientAddToKeyword -> AncientAddToKeyword\n| `AncientObserveEndKeyword -> AncientObserveEndKeyword\n| `AncientBeginKeyword -> AncientBeginKeyword\n| `AncientEndCompleteKeyword -> AncientEndCompleteKeyword\n| `AncientIsKeyword -> AncientIsKeyword\n| `AncientArrowKeyword -> AncientArrowKeyword\n| `AncientWhenKeyword -> AncientWhenKeyword",
        "lines": [
          "| `AncientHeadNameKeyword -> AncientHeadNameKeyword",
          "| `AncientTailNameKeyword -> AncientTailNameKeyword",
          "| `AncientThusAnswerKeyword -> AncientThusAnswerKeyword",
          "| `AncientAddToKeyword -> AncientAddToKeyword",
          "| `AncientObserveEndKeyword -> AncientObserveEndKeyword",
          "| `AncientBeginKeyword -> AncientBeginKeyword",
          "| `AncientEndCompleteKeyword -> AncientEndCompleteKeyword",
          "| `AncientIsKeyword -> AncientIsKeyword",
          "| `AncientArrowKeyword -> AncientArrowKeyword",
          "| `AncientWhenKeyword -> AncientWhenKeyword"
        ],
        "start_line": 56,
        "end_line": 65,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/classical_token_mapping.ml"
      }
    ],
    "f278be4a134ce822df09f2f4d283868c": [
      {
        "hash": "f278be4a134ce822df09f2f4d283868c",
        "text": "| `AncientTailNameKeyword -> AncientTailNameKeyword\n| `AncientThusAnswerKeyword -> AncientThusAnswerKeyword\n| `AncientAddToKeyword -> AncientAddToKeyword\n| `AncientObserveEndKeyword -> AncientObserveEndKeyword\n| `AncientBeginKeyword -> AncientBeginKeyword\n| `AncientEndCompleteKeyword -> AncientEndCompleteKeyword\n| `AncientIsKeyword -> AncientIsKeyword\n| `AncientArrowKeyword -> AncientArrowKeyword\n| `AncientWhenKeyword -> AncientWhenKeyword\n| `AncientCommaKeyword -> AncientCommaKeyword",
        "lines": [
          "| `AncientTailNameKeyword -> AncientTailNameKeyword",
          "| `AncientThusAnswerKeyword -> AncientThusAnswerKeyword",
          "| `AncientAddToKeyword -> AncientAddToKeyword",
          "| `AncientObserveEndKeyword -> AncientObserveEndKeyword",
          "| `AncientBeginKeyword -> AncientBeginKeyword",
          "| `AncientEndCompleteKeyword -> AncientEndCompleteKeyword",
          "| `AncientIsKeyword -> AncientIsKeyword",
          "| `AncientArrowKeyword -> AncientArrowKeyword",
          "| `AncientWhenKeyword -> AncientWhenKeyword",
          "| `AncientCommaKeyword -> AncientCommaKeyword"
        ],
        "start_line": 157,
        "end_line": 166,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/basic_token_mapping.ml"
      },
      {
        "hash": "f278be4a134ce822df09f2f4d283868c",
        "text": "| `AncientTailNameKeyword -> AncientTailNameKeyword\n| `AncientThusAnswerKeyword -> AncientThusAnswerKeyword\n| `AncientAddToKeyword -> AncientAddToKeyword\n| `AncientObserveEndKeyword -> AncientObserveEndKeyword\n| `AncientBeginKeyword -> AncientBeginKeyword\n| `AncientEndCompleteKeyword -> AncientEndCompleteKeyword\n| `AncientIsKeyword -> AncientIsKeyword\n| `AncientArrowKeyword -> AncientArrowKeyword\n| `AncientWhenKeyword -> AncientWhenKeyword\n| `AncientCommaKeyword -> AncientCommaKeyword",
        "lines": [
          "| `AncientTailNameKeyword -> AncientTailNameKeyword",
          "| `AncientThusAnswerKeyword -> AncientThusAnswerKeyword",
          "| `AncientAddToKeyword -> AncientAddToKeyword",
          "| `AncientObserveEndKeyword -> AncientObserveEndKeyword",
          "| `AncientBeginKeyword -> AncientBeginKeyword",
          "| `AncientEndCompleteKeyword -> AncientEndCompleteKeyword",
          "| `AncientIsKeyword -> AncientIsKeyword",
          "| `AncientArrowKeyword -> AncientArrowKeyword",
          "| `AncientWhenKeyword -> AncientWhenKeyword",
          "| `AncientCommaKeyword -> AncientCommaKeyword"
        ],
        "start_line": 57,
        "end_line": 66,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/classical_token_mapping.ml"
      }
    ],
    "df52379f9596796b0e91685a28b6c977": [
      {
        "hash": "df52379f9596796b0e91685a28b6c977",
        "text": "| `AncientThusAnswerKeyword -> AncientThusAnswerKeyword\n| `AncientAddToKeyword -> AncientAddToKeyword\n| `AncientObserveEndKeyword -> AncientObserveEndKeyword\n| `AncientBeginKeyword -> AncientBeginKeyword\n| `AncientEndCompleteKeyword -> AncientEndCompleteKeyword\n| `AncientIsKeyword -> AncientIsKeyword\n| `AncientArrowKeyword -> AncientArrowKeyword\n| `AncientWhenKeyword -> AncientWhenKeyword\n| `AncientCommaKeyword -> AncientCommaKeyword\n| `AfterThatKeyword -> AfterThatKeyword",
        "lines": [
          "| `AncientThusAnswerKeyword -> AncientThusAnswerKeyword",
          "| `AncientAddToKeyword -> AncientAddToKeyword",
          "| `AncientObserveEndKeyword -> AncientObserveEndKeyword",
          "| `AncientBeginKeyword -> AncientBeginKeyword",
          "| `AncientEndCompleteKeyword -> AncientEndCompleteKeyword",
          "| `AncientIsKeyword -> AncientIsKeyword",
          "| `AncientArrowKeyword -> AncientArrowKeyword",
          "| `AncientWhenKeyword -> AncientWhenKeyword",
          "| `AncientCommaKeyword -> AncientCommaKeyword",
          "| `AfterThatKeyword -> AfterThatKeyword"
        ],
        "start_line": 158,
        "end_line": 167,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/basic_token_mapping.ml"
      },
      {
        "hash": "df52379f9596796b0e91685a28b6c977",
        "text": "| `AncientThusAnswerKeyword -> AncientThusAnswerKeyword\n| `AncientAddToKeyword -> AncientAddToKeyword\n| `AncientObserveEndKeyword -> AncientObserveEndKeyword\n| `AncientBeginKeyword -> AncientBeginKeyword\n| `AncientEndCompleteKeyword -> AncientEndCompleteKeyword\n| `AncientIsKeyword -> AncientIsKeyword\n| `AncientArrowKeyword -> AncientArrowKeyword\n| `AncientWhenKeyword -> AncientWhenKeyword\n| `AncientCommaKeyword -> AncientCommaKeyword\n| `AfterThatKeyword -> AfterThatKeyword",
        "lines": [
          "| `AncientThusAnswerKeyword -> AncientThusAnswerKeyword",
          "| `AncientAddToKeyword -> AncientAddToKeyword",
          "| `AncientObserveEndKeyword -> AncientObserveEndKeyword",
          "| `AncientBeginKeyword -> AncientBeginKeyword",
          "| `AncientEndCompleteKeyword -> AncientEndCompleteKeyword",
          "| `AncientIsKeyword -> AncientIsKeyword",
          "| `AncientArrowKeyword -> AncientArrowKeyword",
          "| `AncientWhenKeyword -> AncientWhenKeyword",
          "| `AncientCommaKeyword -> AncientCommaKeyword",
          "| `AfterThatKeyword -> AfterThatKeyword"
        ],
        "start_line": 58,
        "end_line": 67,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/classical_token_mapping.ml"
      }
    ],
    "94185b28d9ebee0c0b7d379219de4c48": [
      {
        "hash": "94185b28d9ebee0c0b7d379219de4c48",
        "text": "]\nin\nPrintf.printf \"%s\" report",
        "lines": [
          "]",
          "in",
          "Printf.printf \"%s\" report"
        ],
        "start_line": 299,
        "end_line": 301,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/unified_token_mapper.ml"
      },
      {
        "hash": "94185b28d9ebee0c0b7d379219de4c48",
        "text": "]\nin\nPrintf.printf \"%s\" report",
        "lines": [
          "]",
          "in",
          "Printf.printf \"%s\" report"
        ],
        "start_line": 329,
        "end_line": 331,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/unified_token_mapper.ml"
      }
    ],
    "8eb8a23ea52267e89bdb2a6aecb88f36": [
      {
        "hash": "8eb8a23ea52267e89bdb2a6aecb88f36",
        "text": "source_token : string;\ntarget_token : token;\ncategory : string;\npriority : int;\ndescription : string;\n}",
        "lines": [
          "source_token : string;",
          "target_token : token;",
          "category : string;",
          "priority : int;",
          "description : string;",
          "}"
        ],
        "start_line": 6,
        "end_line": 11,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/token_registry_core.ml"
      },
      {
        "hash": "8eb8a23ea52267e89bdb2a6aecb88f36",
        "text": "source_token : string;\ntarget_token : token;\ncategory : string;\npriority : int;\ndescription : string;\n}",
        "lines": [
          "source_token : string;",
          "target_token : token;",
          "category : string;",
          "priority : int;",
          "description : string;",
          "}"
        ],
        "start_line": 16,
        "end_line": 21,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/token_registry.ml"
      }
    ],
    "3321f718a7426e925666e8992420a028": [
      {
        "hash": "3321f718a7426e925666e8992420a028",
        "text": "target_token : token;\ncategory : string;\npriority : int;\ndescription : string;\n}",
        "lines": [
          "target_token : token;",
          "category : string;",
          "priority : int;",
          "description : string;",
          "}"
        ],
        "start_line": 7,
        "end_line": 11,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/token_registry_core.ml"
      },
      {
        "hash": "3321f718a7426e925666e8992420a028",
        "text": "target_token : token;\ncategory : string;\npriority : int;\ndescription : string;\n}",
        "lines": [
          "target_token : token;",
          "category : string;",
          "priority : int;",
          "description : string;",
          "}"
        ],
        "start_line": 17,
        "end_line": 21,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/token_registry.ml"
      }
    ],
    "0ff0577ece3c73e6b57cc7c15f05be5c": [
      {
        "hash": "0ff0577ece3c73e6b57cc7c15f05be5c",
        "text": "category : string;\npriority : int;\ndescription : string;\n}",
        "lines": [
          "category : string;",
          "priority : int;",
          "description : string;",
          "}"
        ],
        "start_line": 8,
        "end_line": 11,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/token_registry_core.ml"
      },
      {
        "hash": "0ff0577ece3c73e6b57cc7c15f05be5c",
        "text": "category : string;\npriority : int;\ndescription : string;\n}",
        "lines": [
          "category : string;",
          "priority : int;",
          "description : string;",
          "}"
        ],
        "start_line": 18,
        "end_line": 21,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/token_mapping/token_registry.ml"
      }
    ],
    "8f99d70546f30348a6a839b918bb02d8": [
      {
        "hash": "8f99d70546f30348a6a839b918bb02d8",
        "text": "open Operator_tokens\nopen Delimiter_tokens\nopen Chinese_delimiters",
        "lines": [
          "open Operator_tokens",
          "open Delimiter_tokens",
          "open Chinese_delimiters"
        ],
        "start_line": 9,
        "end_line": 11,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/tokens/token_unified.ml"
      },
      {
        "hash": "8f99d70546f30348a6a839b918bb02d8",
        "text": "open Operator_tokens\nopen Delimiter_tokens\nopen Chinese_delimiters",
        "lines": [
          "open Operator_tokens",
          "open Delimiter_tokens",
          "open Chinese_delimiters"
        ],
        "start_line": 7,
        "end_line": 9,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/lexer/tokens/token_compatibility.ml"
      }
    ],
    "ef107daced8692fc3d93c7c790de56bd": [
      {
        "hash": "ef107daced8692fc3d93c7c790de56bd",
        "text": "open Chinese_best_practices_types.Practice_types\nopen Chinese_best_practices_types.Severity_types\nopen Utils.Base_formatter",
        "lines": [
          "open Chinese_best_practices_types.Practice_types",
          "open Chinese_best_practices_types.Severity_types",
          "open Utils.Base_formatter"
        ],
        "start_line": 3,
        "end_line": 5,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/style_consistency_checker.ml"
      },
      {
        "hash": "ef107daced8692fc3d93c7c790de56bd",
        "text": "open Chinese_best_practices_types.Practice_types\nopen Chinese_best_practices_types.Severity_types\nopen Utils.Base_formatter",
        "lines": [
          "open Chinese_best_practices_types.Practice_types",
          "open Chinese_best_practices_types.Severity_types",
          "open Utils.Base_formatter"
        ],
        "start_line": 3,
        "end_line": 5,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/classical_style_checker.ml"
      },
      {
        "hash": "ef107daced8692fc3d93c7c790de56bd",
        "text": "open Chinese_best_practices_types.Practice_types\nopen Chinese_best_practices_types.Severity_types\nopen Utils.Base_formatter",
        "lines": [
          "open Chinese_best_practices_types.Practice_types",
          "open Chinese_best_practices_types.Severity_types",
          "open Utils.Base_formatter"
        ],
        "start_line": 3,
        "end_line": 5,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/ai_friendly_checker.ml"
      }
    ],
    "4bb3313f2e186ea6a20fdd8402504ac1": [
      {
        "hash": "4bb3313f2e186ea6a20fdd8402504ac1",
        "text": "let violations = ref [] in\nList.iter\n(fun rule ->\nif\ntry\nlet _ = Str.search_forward (Str.regexp rule.pattern) code 0 in\ntrue\nwith Not_found -> false\nthen\nviolations :=",
        "lines": [
          "let violations = ref [] in",
          "List.iter",
          "(fun rule ->",
          "if",
          "try",
          "let _ = Str.search_forward (Str.regexp rule.pattern) code 0 in",
          "true",
          "with Not_found -> false",
          "then",
          "violations :="
        ],
        "start_line": 25,
        "end_line": 34,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/style_consistency_checker.ml"
      },
      {
        "hash": "4bb3313f2e186ea6a20fdd8402504ac1",
        "text": "let violations = ref [] in\nList.iter\n(fun rule ->\nif\ntry\nlet _ = Str.search_forward (Str.regexp rule.pattern) code 0 in\ntrue\nwith Not_found -> false\nthen\nviolations :=",
        "lines": [
          "let violations = ref [] in",
          "List.iter",
          "(fun rule ->",
          "if",
          "try",
          "let _ = Str.search_forward (Str.regexp rule.pattern) code 0 in",
          "true",
          "with Not_found -> false",
          "then",
          "violations :="
        ],
        "start_line": 74,
        "end_line": 83,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/style_consistency_checker.ml"
      },
      {
        "hash": "4bb3313f2e186ea6a20fdd8402504ac1",
        "text": "let violations = ref [] in\nList.iter\n(fun rule ->\nif\ntry\nlet _ = Str.search_forward (Str.regexp rule.pattern) code 0 in\ntrue\nwith Not_found -> false\nthen\nviolations :=",
        "lines": [
          "let violations = ref [] in",
          "List.iter",
          "(fun rule ->",
          "if",
          "try",
          "let _ = Str.search_forward (Str.regexp rule.pattern) code 0 in",
          "true",
          "with Not_found -> false",
          "then",
          "violations :="
        ],
        "start_line": 61,
        "end_line": 70,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/classical_style_checker.ml"
      },
      {
        "hash": "4bb3313f2e186ea6a20fdd8402504ac1",
        "text": "let violations = ref [] in\nList.iter\n(fun rule ->\nif\ntry\nlet _ = Str.search_forward (Str.regexp rule.pattern) code 0 in\ntrue\nwith Not_found -> false\nthen\nviolations :=",
        "lines": [
          "let violations = ref [] in",
          "List.iter",
          "(fun rule ->",
          "if",
          "try",
          "let _ = Str.search_forward (Str.regexp rule.pattern) code 0 in",
          "true",
          "with Not_found -> false",
          "then",
          "violations :="
        ],
        "start_line": 101,
        "end_line": 110,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/classical_style_checker.ml"
      }
    ],
    "08f9ff648ffff73883edd37eff87440a": [
      {
        "hash": "08f9ff648ffff73883edd37eff87440a",
        "text": "List.iter\n(fun rule ->\nif\ntry\nlet _ = Str.search_forward (Str.regexp rule.pattern) code 0 in\ntrue\nwith Not_found -> false\nthen\nviolations :=\n{",
        "lines": [
          "List.iter",
          "(fun rule ->",
          "if",
          "try",
          "let _ = Str.search_forward (Str.regexp rule.pattern) code 0 in",
          "true",
          "with Not_found -> false",
          "then",
          "violations :=",
          "{"
        ],
        "start_line": 26,
        "end_line": 35,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/style_consistency_checker.ml"
      },
      {
        "hash": "08f9ff648ffff73883edd37eff87440a",
        "text": "List.iter\n(fun rule ->\nif\ntry\nlet _ = Str.search_forward (Str.regexp rule.pattern) code 0 in\ntrue\nwith Not_found -> false\nthen\nviolations :=\n{",
        "lines": [
          "List.iter",
          "(fun rule ->",
          "if",
          "try",
          "let _ = Str.search_forward (Str.regexp rule.pattern) code 0 in",
          "true",
          "with Not_found -> false",
          "then",
          "violations :=",
          "{"
        ],
        "start_line": 75,
        "end_line": 84,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/style_consistency_checker.ml"
      },
      {
        "hash": "08f9ff648ffff73883edd37eff87440a",
        "text": "List.iter\n(fun rule ->\nif\ntry\nlet _ = Str.search_forward (Str.regexp rule.pattern) code 0 in\ntrue\nwith Not_found -> false\nthen\nviolations :=\n{",
        "lines": [
          "List.iter",
          "(fun rule ->",
          "if",
          "try",
          "let _ = Str.search_forward (Str.regexp rule.pattern) code 0 in",
          "true",
          "with Not_found -> false",
          "then",
          "violations :=",
          "{"
        ],
        "start_line": 29,
        "end_line": 38,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/classical_style_checker.ml"
      },
      {
        "hash": "08f9ff648ffff73883edd37eff87440a",
        "text": "List.iter\n(fun rule ->\nif\ntry\nlet _ = Str.search_forward (Str.regexp rule.pattern) code 0 in\ntrue\nwith Not_found -> false\nthen\nviolations :=\n{",
        "lines": [
          "List.iter",
          "(fun rule ->",
          "if",
          "try",
          "let _ = Str.search_forward (Str.regexp rule.pattern) code 0 in",
          "true",
          "with Not_found -> false",
          "then",
          "violations :=",
          "{"
        ],
        "start_line": 62,
        "end_line": 71,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/classical_style_checker.ml"
      },
      {
        "hash": "08f9ff648ffff73883edd37eff87440a",
        "text": "List.iter\n(fun rule ->\nif\ntry\nlet _ = Str.search_forward (Str.regexp rule.pattern) code 0 in\ntrue\nwith Not_found -> false\nthen\nviolations :=\n{",
        "lines": [
          "List.iter",
          "(fun rule ->",
          "if",
          "try",
          "let _ = Str.search_forward (Str.regexp rule.pattern) code 0 in",
          "true",
          "with Not_found -> false",
          "then",
          "violations :=",
          "{"
        ],
        "start_line": 102,
        "end_line": 111,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/classical_style_checker.ml"
      }
    ],
    "3394d01cc8de6b81bb32027b5088f72c": [
      {
        "hash": "3394d01cc8de6b81bb32027b5088f72c",
        "text": "(fun rule ->\nif\ntry\nlet _ = Str.search_forward (Str.regexp rule.pattern) code 0 in\ntrue\nwith Not_found -> false\nthen\nviolations :=\n{\nviolation = InconsistentStyle (\"风格检查\", rule.issue, rule.suggestion);",
        "lines": [
          "(fun rule ->",
          "if",
          "try",
          "let _ = Str.search_forward (Str.regexp rule.pattern) code 0 in",
          "true",
          "with Not_found -> false",
          "then",
          "violations :=",
          "{",
          "violation = InconsistentStyle (\"风格检查\", rule.issue, rule.suggestion);"
        ],
        "start_line": 27,
        "end_line": 36,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/style_consistency_checker.ml"
      },
      {
        "hash": "3394d01cc8de6b81bb32027b5088f72c",
        "text": "(fun rule ->\nif\ntry\nlet _ = Str.search_forward (Str.regexp rule.pattern) code 0 in\ntrue\nwith Not_found -> false\nthen\nviolations :=\n{\nviolation = InconsistentStyle (\"风格检查\", rule.issue, rule.suggestion);",
        "lines": [
          "(fun rule ->",
          "if",
          "try",
          "let _ = Str.search_forward (Str.regexp rule.pattern) code 0 in",
          "true",
          "with Not_found -> false",
          "then",
          "violations :=",
          "{",
          "violation = InconsistentStyle (\"风格检查\", rule.issue, rule.suggestion);"
        ],
        "start_line": 76,
        "end_line": 85,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/style_consistency_checker.ml"
      }
    ],
    "9a8d6f67f01ed53f98ad825f2be0639d": [
      {
        "hash": "9a8d6f67f01ed53f98ad825f2be0639d",
        "text": "if\ntry\nlet _ = Str.search_forward (Str.regexp rule.pattern) code 0 in\ntrue\nwith Not_found -> false\nthen\nviolations :=\n{\nviolation = InconsistentStyle (\"风格检查\", rule.issue, rule.suggestion);\nseverity = rule.severity;",
        "lines": [
          "if",
          "try",
          "let _ = Str.search_forward (Str.regexp rule.pattern) code 0 in",
          "true",
          "with Not_found -> false",
          "then",
          "violations :=",
          "{",
          "violation = InconsistentStyle (\"风格检查\", rule.issue, rule.suggestion);",
          "severity = rule.severity;"
        ],
        "start_line": 28,
        "end_line": 37,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/style_consistency_checker.ml"
      },
      {
        "hash": "9a8d6f67f01ed53f98ad825f2be0639d",
        "text": "if\ntry\nlet _ = Str.search_forward (Str.regexp rule.pattern) code 0 in\ntrue\nwith Not_found -> false\nthen\nviolations :=\n{\nviolation = InconsistentStyle (\"风格检查\", rule.issue, rule.suggestion);\nseverity = rule.severity;",
        "lines": [
          "if",
          "try",
          "let _ = Str.search_forward (Str.regexp rule.pattern) code 0 in",
          "true",
          "with Not_found -> false",
          "then",
          "violations :=",
          "{",
          "violation = InconsistentStyle (\"风格检查\", rule.issue, rule.suggestion);",
          "severity = rule.severity;"
        ],
        "start_line": 77,
        "end_line": 86,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/style_consistency_checker.ml"
      }
    ],
    "bcf9a5134d14acf18b4865288685ee8c": [
      {
        "hash": "bcf9a5134d14acf18b4865288685ee8c",
        "text": "try\nlet _ = Str.search_forward (Str.regexp rule.pattern) code 0 in\ntrue\nwith Not_found -> false\nthen\nviolations :=\n{\nviolation = InconsistentStyle (\"风格检查\", rule.issue, rule.suggestion);\nseverity = rule.severity;\nmessage = concat_strings [ \"风格不一致: \"; rule.issue ];",
        "lines": [
          "try",
          "let _ = Str.search_forward (Str.regexp rule.pattern) code 0 in",
          "true",
          "with Not_found -> false",
          "then",
          "violations :=",
          "{",
          "violation = InconsistentStyle (\"风格检查\", rule.issue, rule.suggestion);",
          "severity = rule.severity;",
          "message = concat_strings [ \"风格不一致: \"; rule.issue ];"
        ],
        "start_line": 29,
        "end_line": 38,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/style_consistency_checker.ml"
      },
      {
        "hash": "bcf9a5134d14acf18b4865288685ee8c",
        "text": "try\nlet _ = Str.search_forward (Str.regexp rule.pattern) code 0 in\ntrue\nwith Not_found -> false\nthen\nviolations :=\n{\nviolation = InconsistentStyle (\"风格检查\", rule.issue, rule.suggestion);\nseverity = rule.severity;\nmessage = concat_strings [ \"风格不一致: \"; rule.issue ];",
        "lines": [
          "try",
          "let _ = Str.search_forward (Str.regexp rule.pattern) code 0 in",
          "true",
          "with Not_found -> false",
          "then",
          "violations :=",
          "{",
          "violation = InconsistentStyle (\"风格检查\", rule.issue, rule.suggestion);",
          "severity = rule.severity;",
          "message = concat_strings [ \"风格不一致: \"; rule.issue ];"
        ],
        "start_line": 78,
        "end_line": 87,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/style_consistency_checker.ml"
      }
    ],
    "1cf387e99c6634cbc8ba215fff1f70d0": [
      {
        "hash": "1cf387e99c6634cbc8ba215fff1f70d0",
        "text": "let _ = Str.search_forward (Str.regexp rule.pattern) code 0 in\ntrue\nwith Not_found -> false\nthen\nviolations :=\n{\nviolation = InconsistentStyle (\"风格检查\", rule.issue, rule.suggestion);\nseverity = rule.severity;\nmessage = concat_strings [ \"风格不一致: \"; rule.issue ];\nsuggestion = rule.suggestion;",
        "lines": [
          "let _ = Str.search_forward (Str.regexp rule.pattern) code 0 in",
          "true",
          "with Not_found -> false",
          "then",
          "violations :=",
          "{",
          "violation = InconsistentStyle (\"风格检查\", rule.issue, rule.suggestion);",
          "severity = rule.severity;",
          "message = concat_strings [ \"风格不一致: \"; rule.issue ];",
          "suggestion = rule.suggestion;"
        ],
        "start_line": 30,
        "end_line": 39,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/style_consistency_checker.ml"
      },
      {
        "hash": "1cf387e99c6634cbc8ba215fff1f70d0",
        "text": "let _ = Str.search_forward (Str.regexp rule.pattern) code 0 in\ntrue\nwith Not_found -> false\nthen\nviolations :=\n{\nviolation = InconsistentStyle (\"风格检查\", rule.issue, rule.suggestion);\nseverity = rule.severity;\nmessage = concat_strings [ \"风格不一致: \"; rule.issue ];\nsuggestion = rule.suggestion;",
        "lines": [
          "let _ = Str.search_forward (Str.regexp rule.pattern) code 0 in",
          "true",
          "with Not_found -> false",
          "then",
          "violations :=",
          "{",
          "violation = InconsistentStyle (\"风格检查\", rule.issue, rule.suggestion);",
          "severity = rule.severity;",
          "message = concat_strings [ \"风格不一致: \"; rule.issue ];",
          "suggestion = rule.suggestion;"
        ],
        "start_line": 79,
        "end_line": 88,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/style_consistency_checker.ml"
      }
    ],
    "5d83ba990934a151a9a2d6a60bcf86d9": [
      {
        "hash": "5d83ba990934a151a9a2d6a60bcf86d9",
        "text": "true\nwith Not_found -> false\nthen\nviolations :=\n{\nviolation = InconsistentStyle (\"风格检查\", rule.issue, rule.suggestion);\nseverity = rule.severity;\nmessage = concat_strings [ \"风格不一致: \"; rule.issue ];\nsuggestion = rule.suggestion;\nconfidence = 0.75;",
        "lines": [
          "true",
          "with Not_found -> false",
          "then",
          "violations :=",
          "{",
          "violation = InconsistentStyle (\"风格检查\", rule.issue, rule.suggestion);",
          "severity = rule.severity;",
          "message = concat_strings [ \"风格不一致: \"; rule.issue ];",
          "suggestion = rule.suggestion;",
          "confidence = 0.75;"
        ],
        "start_line": 31,
        "end_line": 40,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/style_consistency_checker.ml"
      },
      {
        "hash": "5d83ba990934a151a9a2d6a60bcf86d9",
        "text": "true\nwith Not_found -> false\nthen\nviolations :=\n{\nviolation = InconsistentStyle (\"风格检查\", rule.issue, rule.suggestion);\nseverity = rule.severity;\nmessage = concat_strings [ \"风格不一致: \"; rule.issue ];\nsuggestion = rule.suggestion;\nconfidence = 0.75;",
        "lines": [
          "true",
          "with Not_found -> false",
          "then",
          "violations :=",
          "{",
          "violation = InconsistentStyle (\"风格检查\", rule.issue, rule.suggestion);",
          "severity = rule.severity;",
          "message = concat_strings [ \"风格不一致: \"; rule.issue ];",
          "suggestion = rule.suggestion;",
          "confidence = 0.75;"
        ],
        "start_line": 80,
        "end_line": 89,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/style_consistency_checker.ml"
      }
    ],
    "2ec7b0922519aa194bbe61c52148469b": [
      {
        "hash": "2ec7b0922519aa194bbe61c52148469b",
        "text": "with Not_found -> false\nthen\nviolations :=\n{\nviolation = InconsistentStyle (\"风格检查\", rule.issue, rule.suggestion);\nseverity = rule.severity;\nmessage = concat_strings [ \"风格不一致: \"; rule.issue ];\nsuggestion = rule.suggestion;\nconfidence = 0.75;\nai_friendly = true;",
        "lines": [
          "with Not_found -> false",
          "then",
          "violations :=",
          "{",
          "violation = InconsistentStyle (\"风格检查\", rule.issue, rule.suggestion);",
          "severity = rule.severity;",
          "message = concat_strings [ \"风格不一致: \"; rule.issue ];",
          "suggestion = rule.suggestion;",
          "confidence = 0.75;",
          "ai_friendly = true;"
        ],
        "start_line": 32,
        "end_line": 41,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/style_consistency_checker.ml"
      },
      {
        "hash": "2ec7b0922519aa194bbe61c52148469b",
        "text": "with Not_found -> false\nthen\nviolations :=\n{\nviolation = InconsistentStyle (\"风格检查\", rule.issue, rule.suggestion);\nseverity = rule.severity;\nmessage = concat_strings [ \"风格不一致: \"; rule.issue ];\nsuggestion = rule.suggestion;\nconfidence = 0.75;\nai_friendly = true;",
        "lines": [
          "with Not_found -> false",
          "then",
          "violations :=",
          "{",
          "violation = InconsistentStyle (\"风格检查\", rule.issue, rule.suggestion);",
          "severity = rule.severity;",
          "message = concat_strings [ \"风格不一致: \"; rule.issue ];",
          "suggestion = rule.suggestion;",
          "confidence = 0.75;",
          "ai_friendly = true;"
        ],
        "start_line": 81,
        "end_line": 90,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/style_consistency_checker.ml"
      }
    ],
    "a1c802af74a573b74d3c9d3b78b35a0a": [
      {
        "hash": "a1c802af74a573b74d3c9d3b78b35a0a",
        "text": "then\nviolations :=\n{\nviolation = InconsistentStyle (\"风格检查\", rule.issue, rule.suggestion);\nseverity = rule.severity;\nmessage = concat_strings [ \"风格不一致: \"; rule.issue ];\nsuggestion = rule.suggestion;\nconfidence = 0.75;\nai_friendly = true;\n}",
        "lines": [
          "then",
          "violations :=",
          "{",
          "violation = InconsistentStyle (\"风格检查\", rule.issue, rule.suggestion);",
          "severity = rule.severity;",
          "message = concat_strings [ \"风格不一致: \"; rule.issue ];",
          "suggestion = rule.suggestion;",
          "confidence = 0.75;",
          "ai_friendly = true;",
          "}"
        ],
        "start_line": 33,
        "end_line": 42,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/style_consistency_checker.ml"
      },
      {
        "hash": "a1c802af74a573b74d3c9d3b78b35a0a",
        "text": "then\nviolations :=\n{\nviolation = InconsistentStyle (\"风格检查\", rule.issue, rule.suggestion);\nseverity = rule.severity;\nmessage = concat_strings [ \"风格不一致: \"; rule.issue ];\nsuggestion = rule.suggestion;\nconfidence = 0.75;\nai_friendly = true;\n}",
        "lines": [
          "then",
          "violations :=",
          "{",
          "violation = InconsistentStyle (\"风格检查\", rule.issue, rule.suggestion);",
          "severity = rule.severity;",
          "message = concat_strings [ \"风格不一致: \"; rule.issue ];",
          "suggestion = rule.suggestion;",
          "confidence = 0.75;",
          "ai_friendly = true;",
          "}"
        ],
        "start_line": 82,
        "end_line": 91,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/style_consistency_checker.ml"
      }
    ],
    "bc4aee88ead935eebd210086e3462a22": [
      {
        "hash": "bc4aee88ead935eebd210086e3462a22",
        "text": "violations :=\n{\nviolation = InconsistentStyle (\"风格检查\", rule.issue, rule.suggestion);\nseverity = rule.severity;\nmessage = concat_strings [ \"风格不一致: \"; rule.issue ];\nsuggestion = rule.suggestion;\nconfidence = 0.75;\nai_friendly = true;\n}\n:: !violations)",
        "lines": [
          "violations :=",
          "{",
          "violation = InconsistentStyle (\"风格检查\", rule.issue, rule.suggestion);",
          "severity = rule.severity;",
          "message = concat_strings [ \"风格不一致: \"; rule.issue ];",
          "suggestion = rule.suggestion;",
          "confidence = 0.75;",
          "ai_friendly = true;",
          "}",
          ":: !violations)"
        ],
        "start_line": 34,
        "end_line": 43,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/style_consistency_checker.ml"
      },
      {
        "hash": "bc4aee88ead935eebd210086e3462a22",
        "text": "violations :=\n{\nviolation = InconsistentStyle (\"风格检查\", rule.issue, rule.suggestion);\nseverity = rule.severity;\nmessage = concat_strings [ \"风格不一致: \"; rule.issue ];\nsuggestion = rule.suggestion;\nconfidence = 0.75;\nai_friendly = true;\n}\n:: !violations)",
        "lines": [
          "violations :=",
          "{",
          "violation = InconsistentStyle (\"风格检查\", rule.issue, rule.suggestion);",
          "severity = rule.severity;",
          "message = concat_strings [ \"风格不一致: \"; rule.issue ];",
          "suggestion = rule.suggestion;",
          "confidence = 0.75;",
          "ai_friendly = true;",
          "}",
          ":: !violations)"
        ],
        "start_line": 83,
        "end_line": 92,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/style_consistency_checker.ml"
      }
    ],
    "a3ad55d429136f725c63d51d81115036": [
      {
        "hash": "a3ad55d429136f725c63d51d81115036",
        "text": "ai_friendly = true;\n}\n:: !violations)\ncategory_rules;",
        "lines": [
          "ai_friendly = true;",
          "}",
          ":: !violations)",
          "category_rules;"
        ],
        "start_line": 90,
        "end_line": 93,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/style_consistency_checker.ml"
      },
      {
        "hash": "a3ad55d429136f725c63d51d81115036",
        "text": "ai_friendly = true;\n}\n:: !violations)\ncategory_rules;",
        "lines": [
          "ai_friendly = true;",
          "}",
          ":: !violations)",
          "category_rules;"
        ],
        "start_line": 77,
        "end_line": 80,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/classical_style_checker.ml"
      },
      {
        "hash": "a3ad55d429136f725c63d51d81115036",
        "text": "ai_friendly = true;\n}\n:: !violations)\ncategory_rules;",
        "lines": [
          "ai_friendly = true;",
          "}",
          ":: !violations)",
          "category_rules;"
        ],
        "start_line": 84,
        "end_line": 87,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/ai_friendly_checker.ml"
      }
    ],
    "5274b045c83c4bf8161e5e957d57c818": [
      {
        "hash": "5274b045c83c4bf8161e5e957d57c818",
        "text": "}\n:: !violations)\ncategory_rules;",
        "lines": [
          "}",
          ":: !violations)",
          "category_rules;"
        ],
        "start_line": 91,
        "end_line": 93,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/style_consistency_checker.ml"
      },
      {
        "hash": "5274b045c83c4bf8161e5e957d57c818",
        "text": "}\n:: !violations)\ncategory_rules;",
        "lines": [
          "}",
          ":: !violations)",
          "category_rules;"
        ],
        "start_line": 78,
        "end_line": 80,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/classical_style_checker.ml"
      },
      {
        "hash": "5274b045c83c4bf8161e5e957d57c818",
        "text": "}\n:: !violations)\ncategory_rules;",
        "lines": [
          "}",
          ":: !violations)",
          "category_rules;"
        ],
        "start_line": 85,
        "end_line": 87,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/ai_friendly_checker.ml"
      }
    ],
    "15193d4166f25a394cad93c3727eea02": [
      {
        "hash": "15193d4166f25a394cad93c3727eea02",
        "text": "let check_with_severity_filter code min_severity =\nlet severity_rules =\nList.filter\n(fun rule ->\nmatch (rule.severity, min_severity) with\n| Error, _ -> true\n| Warning, (Warning | Info | Style) -> true\n| Style, (Style | Info) -> true\n| Info, Info -> true\n| _ -> false)",
        "lines": [
          "let check_with_severity_filter code min_severity =",
          "let severity_rules =",
          "List.filter",
          "(fun rule ->",
          "match (rule.severity, min_severity) with",
          "| Error, _ -> true",
          "| Warning, (Warning | Info | Style) -> true",
          "| Style, (Style | Info) -> true",
          "| Info, Info -> true",
          "| _ -> false)"
        ],
        "start_line": 101,
        "end_line": 110,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/style_consistency_checker.ml"
      },
      {
        "hash": "15193d4166f25a394cad93c3727eea02",
        "text": "let check_with_severity_filter code min_severity =\nlet severity_rules =\nList.filter\n(fun rule ->\nmatch (rule.severity, min_severity) with\n| Error, _ -> true\n| Warning, (Warning | Info | Style) -> true\n| Style, (Style | Info) -> true\n| Info, Info -> true\n| _ -> false)",
        "lines": [
          "let check_with_severity_filter code min_severity =",
          "let severity_rules =",
          "List.filter",
          "(fun rule ->",
          "match (rule.severity, min_severity) with",
          "| Error, _ -> true",
          "| Warning, (Warning | Info | Style) -> true",
          "| Style, (Style | Info) -> true",
          "| Info, Info -> true",
          "| _ -> false)"
        ],
        "start_line": 88,
        "end_line": 97,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/classical_style_checker.ml"
      },
      {
        "hash": "15193d4166f25a394cad93c3727eea02",
        "text": "let check_with_severity_filter code min_severity =\nlet severity_rules =\nList.filter\n(fun rule ->\nmatch (rule.severity, min_severity) with\n| Error, _ -> true\n| Warning, (Warning | Info | Style) -> true\n| Style, (Style | Info) -> true\n| Info, Info -> true\n| _ -> false)",
        "lines": [
          "let check_with_severity_filter code min_severity =",
          "let severity_rules =",
          "List.filter",
          "(fun rule ->",
          "match (rule.severity, min_severity) with",
          "| Error, _ -> true",
          "| Warning, (Warning | Info | Style) -> true",
          "| Style, (Style | Info) -> true",
          "| Info, Info -> true",
          "| _ -> false)"
        ],
        "start_line": 95,
        "end_line": 104,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/ai_friendly_checker.ml"
      }
    ],
    "fde4cef2056ef807548c63dac8acad40": [
      {
        "hash": "fde4cef2056ef807548c63dac8acad40",
        "text": "(fun rule ->\nif\ntry\nlet _ = Str.search_forward (Str.regexp rule.pattern) code 0 in\ntrue\nwith Not_found -> false\nthen\nviolations :=\n{\nviolation = ModernizationSuggestion (\"古雅体检查\", rule.issue, rule.suggestion);",
        "lines": [
          "(fun rule ->",
          "if",
          "try",
          "let _ = Str.search_forward (Str.regexp rule.pattern) code 0 in",
          "true",
          "with Not_found -> false",
          "then",
          "violations :=",
          "{",
          "violation = ModernizationSuggestion (\"古雅体检查\", rule.issue, rule.suggestion);"
        ],
        "start_line": 30,
        "end_line": 39,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/classical_style_checker.ml"
      },
      {
        "hash": "fde4cef2056ef807548c63dac8acad40",
        "text": "(fun rule ->\nif\ntry\nlet _ = Str.search_forward (Str.regexp rule.pattern) code 0 in\ntrue\nwith Not_found -> false\nthen\nviolations :=\n{\nviolation = ModernizationSuggestion (\"古雅体检查\", rule.issue, rule.suggestion);",
        "lines": [
          "(fun rule ->",
          "if",
          "try",
          "let _ = Str.search_forward (Str.regexp rule.pattern) code 0 in",
          "true",
          "with Not_found -> false",
          "then",
          "violations :=",
          "{",
          "violation = ModernizationSuggestion (\"古雅体检查\", rule.issue, rule.suggestion);"
        ],
        "start_line": 63,
        "end_line": 72,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/classical_style_checker.ml"
      },
      {
        "hash": "fde4cef2056ef807548c63dac8acad40",
        "text": "(fun rule ->\nif\ntry\nlet _ = Str.search_forward (Str.regexp rule.pattern) code 0 in\ntrue\nwith Not_found -> false\nthen\nviolations :=\n{\nviolation = ModernizationSuggestion (\"古雅体检查\", rule.issue, rule.suggestion);",
        "lines": [
          "(fun rule ->",
          "if",
          "try",
          "let _ = Str.search_forward (Str.regexp rule.pattern) code 0 in",
          "true",
          "with Not_found -> false",
          "then",
          "violations :=",
          "{",
          "violation = ModernizationSuggestion (\"古雅体检查\", rule.issue, rule.suggestion);"
        ],
        "start_line": 103,
        "end_line": 112,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/classical_style_checker.ml"
      }
    ],
    "fa297293a59267be0cfa86956265720d": [
      {
        "hash": "fa297293a59267be0cfa86956265720d",
        "text": "if\ntry\nlet _ = Str.search_forward (Str.regexp rule.pattern) code 0 in\ntrue\nwith Not_found -> false\nthen\nviolations :=\n{\nviolation = ModernizationSuggestion (\"古雅体检查\", rule.issue, rule.suggestion);\nseverity = rule.severity;",
        "lines": [
          "if",
          "try",
          "let _ = Str.search_forward (Str.regexp rule.pattern) code 0 in",
          "true",
          "with Not_found -> false",
          "then",
          "violations :=",
          "{",
          "violation = ModernizationSuggestion (\"古雅体检查\", rule.issue, rule.suggestion);",
          "severity = rule.severity;"
        ],
        "start_line": 31,
        "end_line": 40,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/classical_style_checker.ml"
      },
      {
        "hash": "fa297293a59267be0cfa86956265720d",
        "text": "if\ntry\nlet _ = Str.search_forward (Str.regexp rule.pattern) code 0 in\ntrue\nwith Not_found -> false\nthen\nviolations :=\n{\nviolation = ModernizationSuggestion (\"古雅体检查\", rule.issue, rule.suggestion);\nseverity = rule.severity;",
        "lines": [
          "if",
          "try",
          "let _ = Str.search_forward (Str.regexp rule.pattern) code 0 in",
          "true",
          "with Not_found -> false",
          "then",
          "violations :=",
          "{",
          "violation = ModernizationSuggestion (\"古雅体检查\", rule.issue, rule.suggestion);",
          "severity = rule.severity;"
        ],
        "start_line": 64,
        "end_line": 73,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/classical_style_checker.ml"
      },
      {
        "hash": "fa297293a59267be0cfa86956265720d",
        "text": "if\ntry\nlet _ = Str.search_forward (Str.regexp rule.pattern) code 0 in\ntrue\nwith Not_found -> false\nthen\nviolations :=\n{\nviolation = ModernizationSuggestion (\"古雅体检查\", rule.issue, rule.suggestion);\nseverity = rule.severity;",
        "lines": [
          "if",
          "try",
          "let _ = Str.search_forward (Str.regexp rule.pattern) code 0 in",
          "true",
          "with Not_found -> false",
          "then",
          "violations :=",
          "{",
          "violation = ModernizationSuggestion (\"古雅体检查\", rule.issue, rule.suggestion);",
          "severity = rule.severity;"
        ],
        "start_line": 104,
        "end_line": 113,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/classical_style_checker.ml"
      }
    ],
    "cde999ba22de42e66a3fe94d79978be2": [
      {
        "hash": "cde999ba22de42e66a3fe94d79978be2",
        "text": "try\nlet _ = Str.search_forward (Str.regexp rule.pattern) code 0 in\ntrue\nwith Not_found -> false\nthen\nviolations :=\n{\nviolation = ModernizationSuggestion (\"古雅体检查\", rule.issue, rule.suggestion);\nseverity = rule.severity;\nmessage = context_message_pattern \"古雅体使用问题\" rule.issue;",
        "lines": [
          "try",
          "let _ = Str.search_forward (Str.regexp rule.pattern) code 0 in",
          "true",
          "with Not_found -> false",
          "then",
          "violations :=",
          "{",
          "violation = ModernizationSuggestion (\"古雅体检查\", rule.issue, rule.suggestion);",
          "severity = rule.severity;",
          "message = context_message_pattern \"古雅体使用问题\" rule.issue;"
        ],
        "start_line": 32,
        "end_line": 41,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/classical_style_checker.ml"
      },
      {
        "hash": "cde999ba22de42e66a3fe94d79978be2",
        "text": "try\nlet _ = Str.search_forward (Str.regexp rule.pattern) code 0 in\ntrue\nwith Not_found -> false\nthen\nviolations :=\n{\nviolation = ModernizationSuggestion (\"古雅体检查\", rule.issue, rule.suggestion);\nseverity = rule.severity;\nmessage = context_message_pattern \"古雅体使用问题\" rule.issue;",
        "lines": [
          "try",
          "let _ = Str.search_forward (Str.regexp rule.pattern) code 0 in",
          "true",
          "with Not_found -> false",
          "then",
          "violations :=",
          "{",
          "violation = ModernizationSuggestion (\"古雅体检查\", rule.issue, rule.suggestion);",
          "severity = rule.severity;",
          "message = context_message_pattern \"古雅体使用问题\" rule.issue;"
        ],
        "start_line": 65,
        "end_line": 74,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/classical_style_checker.ml"
      },
      {
        "hash": "cde999ba22de42e66a3fe94d79978be2",
        "text": "try\nlet _ = Str.search_forward (Str.regexp rule.pattern) code 0 in\ntrue\nwith Not_found -> false\nthen\nviolations :=\n{\nviolation = ModernizationSuggestion (\"古雅体检查\", rule.issue, rule.suggestion);\nseverity = rule.severity;\nmessage = context_message_pattern \"古雅体使用问题\" rule.issue;",
        "lines": [
          "try",
          "let _ = Str.search_forward (Str.regexp rule.pattern) code 0 in",
          "true",
          "with Not_found -> false",
          "then",
          "violations :=",
          "{",
          "violation = ModernizationSuggestion (\"古雅体检查\", rule.issue, rule.suggestion);",
          "severity = rule.severity;",
          "message = context_message_pattern \"古雅体使用问题\" rule.issue;"
        ],
        "start_line": 105,
        "end_line": 114,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/classical_style_checker.ml"
      }
    ],
    "c7de0f943006198f659c49e39fac3f04": [
      {
        "hash": "c7de0f943006198f659c49e39fac3f04",
        "text": "let _ = Str.search_forward (Str.regexp rule.pattern) code 0 in\ntrue\nwith Not_found -> false\nthen\nviolations :=\n{\nviolation = ModernizationSuggestion (\"古雅体检查\", rule.issue, rule.suggestion);\nseverity = rule.severity;\nmessage = context_message_pattern \"古雅体使用问题\" rule.issue;\nsuggestion = context_message_pattern \"AI友好建议\" rule.suggestion;",
        "lines": [
          "let _ = Str.search_forward (Str.regexp rule.pattern) code 0 in",
          "true",
          "with Not_found -> false",
          "then",
          "violations :=",
          "{",
          "violation = ModernizationSuggestion (\"古雅体检查\", rule.issue, rule.suggestion);",
          "severity = rule.severity;",
          "message = context_message_pattern \"古雅体使用问题\" rule.issue;",
          "suggestion = context_message_pattern \"AI友好建议\" rule.suggestion;"
        ],
        "start_line": 33,
        "end_line": 42,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/classical_style_checker.ml"
      },
      {
        "hash": "c7de0f943006198f659c49e39fac3f04",
        "text": "let _ = Str.search_forward (Str.regexp rule.pattern) code 0 in\ntrue\nwith Not_found -> false\nthen\nviolations :=\n{\nviolation = ModernizationSuggestion (\"古雅体检查\", rule.issue, rule.suggestion);\nseverity = rule.severity;\nmessage = context_message_pattern \"古雅体使用问题\" rule.issue;\nsuggestion = context_message_pattern \"AI友好建议\" rule.suggestion;",
        "lines": [
          "let _ = Str.search_forward (Str.regexp rule.pattern) code 0 in",
          "true",
          "with Not_found -> false",
          "then",
          "violations :=",
          "{",
          "violation = ModernizationSuggestion (\"古雅体检查\", rule.issue, rule.suggestion);",
          "severity = rule.severity;",
          "message = context_message_pattern \"古雅体使用问题\" rule.issue;",
          "suggestion = context_message_pattern \"AI友好建议\" rule.suggestion;"
        ],
        "start_line": 66,
        "end_line": 75,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/classical_style_checker.ml"
      },
      {
        "hash": "c7de0f943006198f659c49e39fac3f04",
        "text": "let _ = Str.search_forward (Str.regexp rule.pattern) code 0 in\ntrue\nwith Not_found -> false\nthen\nviolations :=\n{\nviolation = ModernizationSuggestion (\"古雅体检查\", rule.issue, rule.suggestion);\nseverity = rule.severity;\nmessage = context_message_pattern \"古雅体使用问题\" rule.issue;\nsuggestion = context_message_pattern \"AI友好建议\" rule.suggestion;",
        "lines": [
          "let _ = Str.search_forward (Str.regexp rule.pattern) code 0 in",
          "true",
          "with Not_found -> false",
          "then",
          "violations :=",
          "{",
          "violation = ModernizationSuggestion (\"古雅体检查\", rule.issue, rule.suggestion);",
          "severity = rule.severity;",
          "message = context_message_pattern \"古雅体使用问题\" rule.issue;",
          "suggestion = context_message_pattern \"AI友好建议\" rule.suggestion;"
        ],
        "start_line": 106,
        "end_line": 115,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/classical_style_checker.ml"
      }
    ],
    "1e478632c7d8f3de5bb534a5a3374dd2": [
      {
        "hash": "1e478632c7d8f3de5bb534a5a3374dd2",
        "text": "true\nwith Not_found -> false\nthen\nviolations :=\n{\nviolation = ModernizationSuggestion (\"古雅体检查\", rule.issue, rule.suggestion);\nseverity = rule.severity;\nmessage = context_message_pattern \"古雅体使用问题\" rule.issue;\nsuggestion = context_message_pattern \"AI友好建议\" rule.suggestion;\nconfidence = 0.85;",
        "lines": [
          "true",
          "with Not_found -> false",
          "then",
          "violations :=",
          "{",
          "violation = ModernizationSuggestion (\"古雅体检查\", rule.issue, rule.suggestion);",
          "severity = rule.severity;",
          "message = context_message_pattern \"古雅体使用问题\" rule.issue;",
          "suggestion = context_message_pattern \"AI友好建议\" rule.suggestion;",
          "confidence = 0.85;"
        ],
        "start_line": 34,
        "end_line": 43,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/classical_style_checker.ml"
      },
      {
        "hash": "1e478632c7d8f3de5bb534a5a3374dd2",
        "text": "true\nwith Not_found -> false\nthen\nviolations :=\n{\nviolation = ModernizationSuggestion (\"古雅体检查\", rule.issue, rule.suggestion);\nseverity = rule.severity;\nmessage = context_message_pattern \"古雅体使用问题\" rule.issue;\nsuggestion = context_message_pattern \"AI友好建议\" rule.suggestion;\nconfidence = 0.85;",
        "lines": [
          "true",
          "with Not_found -> false",
          "then",
          "violations :=",
          "{",
          "violation = ModernizationSuggestion (\"古雅体检查\", rule.issue, rule.suggestion);",
          "severity = rule.severity;",
          "message = context_message_pattern \"古雅体使用问题\" rule.issue;",
          "suggestion = context_message_pattern \"AI友好建议\" rule.suggestion;",
          "confidence = 0.85;"
        ],
        "start_line": 67,
        "end_line": 76,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/classical_style_checker.ml"
      },
      {
        "hash": "1e478632c7d8f3de5bb534a5a3374dd2",
        "text": "true\nwith Not_found -> false\nthen\nviolations :=\n{\nviolation = ModernizationSuggestion (\"古雅体检查\", rule.issue, rule.suggestion);\nseverity = rule.severity;\nmessage = context_message_pattern \"古雅体使用问题\" rule.issue;\nsuggestion = context_message_pattern \"AI友好建议\" rule.suggestion;\nconfidence = 0.85;",
        "lines": [
          "true",
          "with Not_found -> false",
          "then",
          "violations :=",
          "{",
          "violation = ModernizationSuggestion (\"古雅体检查\", rule.issue, rule.suggestion);",
          "severity = rule.severity;",
          "message = context_message_pattern \"古雅体使用问题\" rule.issue;",
          "suggestion = context_message_pattern \"AI友好建议\" rule.suggestion;",
          "confidence = 0.85;"
        ],
        "start_line": 107,
        "end_line": 116,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/classical_style_checker.ml"
      }
    ],
    "48ea57c9886d37f599ea902ac585aff4": [
      {
        "hash": "48ea57c9886d37f599ea902ac585aff4",
        "text": "with Not_found -> false\nthen\nviolations :=\n{\nviolation = ModernizationSuggestion (\"古雅体检查\", rule.issue, rule.suggestion);\nseverity = rule.severity;\nmessage = context_message_pattern \"古雅体使用问题\" rule.issue;\nsuggestion = context_message_pattern \"AI友好建议\" rule.suggestion;\nconfidence = 0.85;\nai_friendly = true;",
        "lines": [
          "with Not_found -> false",
          "then",
          "violations :=",
          "{",
          "violation = ModernizationSuggestion (\"古雅体检查\", rule.issue, rule.suggestion);",
          "severity = rule.severity;",
          "message = context_message_pattern \"古雅体使用问题\" rule.issue;",
          "suggestion = context_message_pattern \"AI友好建议\" rule.suggestion;",
          "confidence = 0.85;",
          "ai_friendly = true;"
        ],
        "start_line": 35,
        "end_line": 44,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/classical_style_checker.ml"
      },
      {
        "hash": "48ea57c9886d37f599ea902ac585aff4",
        "text": "with Not_found -> false\nthen\nviolations :=\n{\nviolation = ModernizationSuggestion (\"古雅体检查\", rule.issue, rule.suggestion);\nseverity = rule.severity;\nmessage = context_message_pattern \"古雅体使用问题\" rule.issue;\nsuggestion = context_message_pattern \"AI友好建议\" rule.suggestion;\nconfidence = 0.85;\nai_friendly = true;",
        "lines": [
          "with Not_found -> false",
          "then",
          "violations :=",
          "{",
          "violation = ModernizationSuggestion (\"古雅体检查\", rule.issue, rule.suggestion);",
          "severity = rule.severity;",
          "message = context_message_pattern \"古雅体使用问题\" rule.issue;",
          "suggestion = context_message_pattern \"AI友好建议\" rule.suggestion;",
          "confidence = 0.85;",
          "ai_friendly = true;"
        ],
        "start_line": 68,
        "end_line": 77,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/classical_style_checker.ml"
      },
      {
        "hash": "48ea57c9886d37f599ea902ac585aff4",
        "text": "with Not_found -> false\nthen\nviolations :=\n{\nviolation = ModernizationSuggestion (\"古雅体检查\", rule.issue, rule.suggestion);\nseverity = rule.severity;\nmessage = context_message_pattern \"古雅体使用问题\" rule.issue;\nsuggestion = context_message_pattern \"AI友好建议\" rule.suggestion;\nconfidence = 0.85;\nai_friendly = true;",
        "lines": [
          "with Not_found -> false",
          "then",
          "violations :=",
          "{",
          "violation = ModernizationSuggestion (\"古雅体检查\", rule.issue, rule.suggestion);",
          "severity = rule.severity;",
          "message = context_message_pattern \"古雅体使用问题\" rule.issue;",
          "suggestion = context_message_pattern \"AI友好建议\" rule.suggestion;",
          "confidence = 0.85;",
          "ai_friendly = true;"
        ],
        "start_line": 108,
        "end_line": 117,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/classical_style_checker.ml"
      }
    ],
    "7acbc01a7244992a88ce6920178cd265": [
      {
        "hash": "7acbc01a7244992a88ce6920178cd265",
        "text": "then\nviolations :=\n{\nviolation = ModernizationSuggestion (\"古雅体检查\", rule.issue, rule.suggestion);\nseverity = rule.severity;\nmessage = context_message_pattern \"古雅体使用问题\" rule.issue;\nsuggestion = context_message_pattern \"AI友好建议\" rule.suggestion;\nconfidence = 0.85;\nai_friendly = true;\n}",
        "lines": [
          "then",
          "violations :=",
          "{",
          "violation = ModernizationSuggestion (\"古雅体检查\", rule.issue, rule.suggestion);",
          "severity = rule.severity;",
          "message = context_message_pattern \"古雅体使用问题\" rule.issue;",
          "suggestion = context_message_pattern \"AI友好建议\" rule.suggestion;",
          "confidence = 0.85;",
          "ai_friendly = true;",
          "}"
        ],
        "start_line": 36,
        "end_line": 45,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/classical_style_checker.ml"
      },
      {
        "hash": "7acbc01a7244992a88ce6920178cd265",
        "text": "then\nviolations :=\n{\nviolation = ModernizationSuggestion (\"古雅体检查\", rule.issue, rule.suggestion);\nseverity = rule.severity;\nmessage = context_message_pattern \"古雅体使用问题\" rule.issue;\nsuggestion = context_message_pattern \"AI友好建议\" rule.suggestion;\nconfidence = 0.85;\nai_friendly = true;\n}",
        "lines": [
          "then",
          "violations :=",
          "{",
          "violation = ModernizationSuggestion (\"古雅体检查\", rule.issue, rule.suggestion);",
          "severity = rule.severity;",
          "message = context_message_pattern \"古雅体使用问题\" rule.issue;",
          "suggestion = context_message_pattern \"AI友好建议\" rule.suggestion;",
          "confidence = 0.85;",
          "ai_friendly = true;",
          "}"
        ],
        "start_line": 69,
        "end_line": 78,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/classical_style_checker.ml"
      },
      {
        "hash": "7acbc01a7244992a88ce6920178cd265",
        "text": "then\nviolations :=\n{\nviolation = ModernizationSuggestion (\"古雅体检查\", rule.issue, rule.suggestion);\nseverity = rule.severity;\nmessage = context_message_pattern \"古雅体使用问题\" rule.issue;\nsuggestion = context_message_pattern \"AI友好建议\" rule.suggestion;\nconfidence = 0.85;\nai_friendly = true;\n}",
        "lines": [
          "then",
          "violations :=",
          "{",
          "violation = ModernizationSuggestion (\"古雅体检查\", rule.issue, rule.suggestion);",
          "severity = rule.severity;",
          "message = context_message_pattern \"古雅体使用问题\" rule.issue;",
          "suggestion = context_message_pattern \"AI友好建议\" rule.suggestion;",
          "confidence = 0.85;",
          "ai_friendly = true;",
          "}"
        ],
        "start_line": 109,
        "end_line": 118,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/classical_style_checker.ml"
      }
    ],
    "ad2878336c56c2d887843a969ccfb7a0": [
      {
        "hash": "ad2878336c56c2d887843a969ccfb7a0",
        "text": "violations :=\n{\nviolation = ModernizationSuggestion (\"古雅体检查\", rule.issue, rule.suggestion);\nseverity = rule.severity;\nmessage = context_message_pattern \"古雅体使用问题\" rule.issue;\nsuggestion = context_message_pattern \"AI友好建议\" rule.suggestion;\nconfidence = 0.85;\nai_friendly = true;\n}\n:: !violations)",
        "lines": [
          "violations :=",
          "{",
          "violation = ModernizationSuggestion (\"古雅体检查\", rule.issue, rule.suggestion);",
          "severity = rule.severity;",
          "message = context_message_pattern \"古雅体使用问题\" rule.issue;",
          "suggestion = context_message_pattern \"AI友好建议\" rule.suggestion;",
          "confidence = 0.85;",
          "ai_friendly = true;",
          "}",
          ":: !violations)"
        ],
        "start_line": 37,
        "end_line": 46,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/classical_style_checker.ml"
      },
      {
        "hash": "ad2878336c56c2d887843a969ccfb7a0",
        "text": "violations :=\n{\nviolation = ModernizationSuggestion (\"古雅体检查\", rule.issue, rule.suggestion);\nseverity = rule.severity;\nmessage = context_message_pattern \"古雅体使用问题\" rule.issue;\nsuggestion = context_message_pattern \"AI友好建议\" rule.suggestion;\nconfidence = 0.85;\nai_friendly = true;\n}\n:: !violations)",
        "lines": [
          "violations :=",
          "{",
          "violation = ModernizationSuggestion (\"古雅体检查\", rule.issue, rule.suggestion);",
          "severity = rule.severity;",
          "message = context_message_pattern \"古雅体使用问题\" rule.issue;",
          "suggestion = context_message_pattern \"AI友好建议\" rule.suggestion;",
          "confidence = 0.85;",
          "ai_friendly = true;",
          "}",
          ":: !violations)"
        ],
        "start_line": 70,
        "end_line": 79,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/classical_style_checker.ml"
      },
      {
        "hash": "ad2878336c56c2d887843a969ccfb7a0",
        "text": "violations :=\n{\nviolation = ModernizationSuggestion (\"古雅体检查\", rule.issue, rule.suggestion);\nseverity = rule.severity;\nmessage = context_message_pattern \"古雅体使用问题\" rule.issue;\nsuggestion = context_message_pattern \"AI友好建议\" rule.suggestion;\nconfidence = 0.85;\nai_friendly = true;\n}\n:: !violations)",
        "lines": [
          "violations :=",
          "{",
          "violation = ModernizationSuggestion (\"古雅体检查\", rule.issue, rule.suggestion);",
          "severity = rule.severity;",
          "message = context_message_pattern \"古雅体使用问题\" rule.issue;",
          "suggestion = context_message_pattern \"AI友好建议\" rule.suggestion;",
          "confidence = 0.85;",
          "ai_friendly = true;",
          "}",
          ":: !violations)"
        ],
        "start_line": 110,
        "end_line": 119,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/classical_style_checker.ml"
      }
    ],
    "a0428d426141aa0633f8cb8c7dbda526": [
      {
        "hash": "a0428d426141aa0633f8cb8c7dbda526",
        "text": "ai_friendly = true;\n}\n:: !violations)\nseverity_rules;",
        "lines": [
          "ai_friendly = true;",
          "}",
          ":: !violations)",
          "severity_rules;"
        ],
        "start_line": 117,
        "end_line": 120,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/classical_style_checker.ml"
      },
      {
        "hash": "a0428d426141aa0633f8cb8c7dbda526",
        "text": "ai_friendly = true;\n}\n:: !violations)\nseverity_rules;",
        "lines": [
          "ai_friendly = true;",
          "}",
          ":: !violations)",
          "severity_rules;"
        ],
        "start_line": 124,
        "end_line": 127,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/ai_friendly_checker.ml"
      }
    ],
    "2b30f617bf656b17388cdce81d04b37d": [
      {
        "hash": "2b30f617bf656b17388cdce81d04b37d",
        "text": "}\n:: !violations)\nseverity_rules;",
        "lines": [
          "}",
          ":: !violations)",
          "severity_rules;"
        ],
        "start_line": 118,
        "end_line": 120,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/classical_style_checker.ml"
      },
      {
        "hash": "2b30f617bf656b17388cdce81d04b37d",
        "text": "}\n:: !violations)\nseverity_rules;",
        "lines": [
          "}",
          ":: !violations)",
          "severity_rules;"
        ],
        "start_line": 125,
        "end_line": 127,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/ai_friendly_checker.ml"
      }
    ],
    "33b1868f679afb6fe2de99de58c245f1": [
      {
        "hash": "33b1868f679afb6fe2de99de58c245f1",
        "text": "List.iter\n(fun rule ->\nif\ntry\nlet _ = Str.search_forward (Str.regexp_string rule.pattern) code 0 in\ntrue\nwith Not_found -> false\nthen\nviolations :=\n{",
        "lines": [
          "List.iter",
          "(fun rule ->",
          "if",
          "try",
          "let _ = Str.search_forward (Str.regexp_string rule.pattern) code 0 in",
          "true",
          "with Not_found -> false",
          "then",
          "violations :=",
          "{"
        ],
        "start_line": 35,
        "end_line": 44,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/ai_friendly_checker.ml"
      },
      {
        "hash": "33b1868f679afb6fe2de99de58c245f1",
        "text": "List.iter\n(fun rule ->\nif\ntry\nlet _ = Str.search_forward (Str.regexp_string rule.pattern) code 0 in\ntrue\nwith Not_found -> false\nthen\nviolations :=\n{",
        "lines": [
          "List.iter",
          "(fun rule ->",
          "if",
          "try",
          "let _ = Str.search_forward (Str.regexp_string rule.pattern) code 0 in",
          "true",
          "with Not_found -> false",
          "then",
          "violations :=",
          "{"
        ],
        "start_line": 69,
        "end_line": 78,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/ai_friendly_checker.ml"
      },
      {
        "hash": "33b1868f679afb6fe2de99de58c245f1",
        "text": "List.iter\n(fun rule ->\nif\ntry\nlet _ = Str.search_forward (Str.regexp_string rule.pattern) code 0 in\ntrue\nwith Not_found -> false\nthen\nviolations :=\n{",
        "lines": [
          "List.iter",
          "(fun rule ->",
          "if",
          "try",
          "let _ = Str.search_forward (Str.regexp_string rule.pattern) code 0 in",
          "true",
          "with Not_found -> false",
          "then",
          "violations :=",
          "{"
        ],
        "start_line": 109,
        "end_line": 118,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/ai_friendly_checker.ml"
      }
    ],
    "65f1cffcbb688a35786d8f380718e865": [
      {
        "hash": "65f1cffcbb688a35786d8f380718e865",
        "text": "(fun rule ->\nif\ntry\nlet _ = Str.search_forward (Str.regexp_string rule.pattern) code 0 in\ntrue\nwith Not_found -> false\nthen\nviolations :=\n{\nviolation = Unidiomatic (\"AI友好性检查\", rule.issue, rule.suggestion);",
        "lines": [
          "(fun rule ->",
          "if",
          "try",
          "let _ = Str.search_forward (Str.regexp_string rule.pattern) code 0 in",
          "true",
          "with Not_found -> false",
          "then",
          "violations :=",
          "{",
          "violation = Unidiomatic (\"AI友好性检查\", rule.issue, rule.suggestion);"
        ],
        "start_line": 36,
        "end_line": 45,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/ai_friendly_checker.ml"
      },
      {
        "hash": "65f1cffcbb688a35786d8f380718e865",
        "text": "(fun rule ->\nif\ntry\nlet _ = Str.search_forward (Str.regexp_string rule.pattern) code 0 in\ntrue\nwith Not_found -> false\nthen\nviolations :=\n{\nviolation = Unidiomatic (\"AI友好性检查\", rule.issue, rule.suggestion);",
        "lines": [
          "(fun rule ->",
          "if",
          "try",
          "let _ = Str.search_forward (Str.regexp_string rule.pattern) code 0 in",
          "true",
          "with Not_found -> false",
          "then",
          "violations :=",
          "{",
          "violation = Unidiomatic (\"AI友好性检查\", rule.issue, rule.suggestion);"
        ],
        "start_line": 70,
        "end_line": 79,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/ai_friendly_checker.ml"
      },
      {
        "hash": "65f1cffcbb688a35786d8f380718e865",
        "text": "(fun rule ->\nif\ntry\nlet _ = Str.search_forward (Str.regexp_string rule.pattern) code 0 in\ntrue\nwith Not_found -> false\nthen\nviolations :=\n{\nviolation = Unidiomatic (\"AI友好性检查\", rule.issue, rule.suggestion);",
        "lines": [
          "(fun rule ->",
          "if",
          "try",
          "let _ = Str.search_forward (Str.regexp_string rule.pattern) code 0 in",
          "true",
          "with Not_found -> false",
          "then",
          "violations :=",
          "{",
          "violation = Unidiomatic (\"AI友好性检查\", rule.issue, rule.suggestion);"
        ],
        "start_line": 110,
        "end_line": 119,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/ai_friendly_checker.ml"
      }
    ],
    "3bc25092c406e8050bccf2d9a55a68dc": [
      {
        "hash": "3bc25092c406e8050bccf2d9a55a68dc",
        "text": "if\ntry\nlet _ = Str.search_forward (Str.regexp_string rule.pattern) code 0 in\ntrue\nwith Not_found -> false\nthen\nviolations :=\n{\nviolation = Unidiomatic (\"AI友好性检查\", rule.issue, rule.suggestion);\nseverity = rule.severity;",
        "lines": [
          "if",
          "try",
          "let _ = Str.search_forward (Str.regexp_string rule.pattern) code 0 in",
          "true",
          "with Not_found -> false",
          "then",
          "violations :=",
          "{",
          "violation = Unidiomatic (\"AI友好性检查\", rule.issue, rule.suggestion);",
          "severity = rule.severity;"
        ],
        "start_line": 37,
        "end_line": 46,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/ai_friendly_checker.ml"
      },
      {
        "hash": "3bc25092c406e8050bccf2d9a55a68dc",
        "text": "if\ntry\nlet _ = Str.search_forward (Str.regexp_string rule.pattern) code 0 in\ntrue\nwith Not_found -> false\nthen\nviolations :=\n{\nviolation = Unidiomatic (\"AI友好性检查\", rule.issue, rule.suggestion);\nseverity = rule.severity;",
        "lines": [
          "if",
          "try",
          "let _ = Str.search_forward (Str.regexp_string rule.pattern) code 0 in",
          "true",
          "with Not_found -> false",
          "then",
          "violations :=",
          "{",
          "violation = Unidiomatic (\"AI友好性检查\", rule.issue, rule.suggestion);",
          "severity = rule.severity;"
        ],
        "start_line": 71,
        "end_line": 80,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/ai_friendly_checker.ml"
      },
      {
        "hash": "3bc25092c406e8050bccf2d9a55a68dc",
        "text": "if\ntry\nlet _ = Str.search_forward (Str.regexp_string rule.pattern) code 0 in\ntrue\nwith Not_found -> false\nthen\nviolations :=\n{\nviolation = Unidiomatic (\"AI友好性检查\", rule.issue, rule.suggestion);\nseverity = rule.severity;",
        "lines": [
          "if",
          "try",
          "let _ = Str.search_forward (Str.regexp_string rule.pattern) code 0 in",
          "true",
          "with Not_found -> false",
          "then",
          "violations :=",
          "{",
          "violation = Unidiomatic (\"AI友好性检查\", rule.issue, rule.suggestion);",
          "severity = rule.severity;"
        ],
        "start_line": 111,
        "end_line": 120,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/ai_friendly_checker.ml"
      }
    ],
    "e9b0d72d390af2f2c657edf40eb24184": [
      {
        "hash": "e9b0d72d390af2f2c657edf40eb24184",
        "text": "try\nlet _ = Str.search_forward (Str.regexp_string rule.pattern) code 0 in\ntrue\nwith Not_found -> false\nthen\nviolations :=\n{\nviolation = Unidiomatic (\"AI友好性检查\", rule.issue, rule.suggestion);\nseverity = rule.severity;\nmessage = concat_strings [ \"AI理解问题: \"; rule.issue ];",
        "lines": [
          "try",
          "let _ = Str.search_forward (Str.regexp_string rule.pattern) code 0 in",
          "true",
          "with Not_found -> false",
          "then",
          "violations :=",
          "{",
          "violation = Unidiomatic (\"AI友好性检查\", rule.issue, rule.suggestion);",
          "severity = rule.severity;",
          "message = concat_strings [ \"AI理解问题: \"; rule.issue ];"
        ],
        "start_line": 38,
        "end_line": 47,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/ai_friendly_checker.ml"
      },
      {
        "hash": "e9b0d72d390af2f2c657edf40eb24184",
        "text": "try\nlet _ = Str.search_forward (Str.regexp_string rule.pattern) code 0 in\ntrue\nwith Not_found -> false\nthen\nviolations :=\n{\nviolation = Unidiomatic (\"AI友好性检查\", rule.issue, rule.suggestion);\nseverity = rule.severity;\nmessage = concat_strings [ \"AI理解问题: \"; rule.issue ];",
        "lines": [
          "try",
          "let _ = Str.search_forward (Str.regexp_string rule.pattern) code 0 in",
          "true",
          "with Not_found -> false",
          "then",
          "violations :=",
          "{",
          "violation = Unidiomatic (\"AI友好性检查\", rule.issue, rule.suggestion);",
          "severity = rule.severity;",
          "message = concat_strings [ \"AI理解问题: \"; rule.issue ];"
        ],
        "start_line": 72,
        "end_line": 81,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/ai_friendly_checker.ml"
      },
      {
        "hash": "e9b0d72d390af2f2c657edf40eb24184",
        "text": "try\nlet _ = Str.search_forward (Str.regexp_string rule.pattern) code 0 in\ntrue\nwith Not_found -> false\nthen\nviolations :=\n{\nviolation = Unidiomatic (\"AI友好性检查\", rule.issue, rule.suggestion);\nseverity = rule.severity;\nmessage = concat_strings [ \"AI理解问题: \"; rule.issue ];",
        "lines": [
          "try",
          "let _ = Str.search_forward (Str.regexp_string rule.pattern) code 0 in",
          "true",
          "with Not_found -> false",
          "then",
          "violations :=",
          "{",
          "violation = Unidiomatic (\"AI友好性检查\", rule.issue, rule.suggestion);",
          "severity = rule.severity;",
          "message = concat_strings [ \"AI理解问题: \"; rule.issue ];"
        ],
        "start_line": 112,
        "end_line": 121,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/ai_friendly_checker.ml"
      }
    ],
    "5485b54fabd006bfcc80325b72e56016": [
      {
        "hash": "5485b54fabd006bfcc80325b72e56016",
        "text": "let _ = Str.search_forward (Str.regexp_string rule.pattern) code 0 in\ntrue\nwith Not_found -> false\nthen\nviolations :=\n{\nviolation = Unidiomatic (\"AI友好性检查\", rule.issue, rule.suggestion);\nseverity = rule.severity;\nmessage = concat_strings [ \"AI理解问题: \"; rule.issue ];\nsuggestion = rule.suggestion;",
        "lines": [
          "let _ = Str.search_forward (Str.regexp_string rule.pattern) code 0 in",
          "true",
          "with Not_found -> false",
          "then",
          "violations :=",
          "{",
          "violation = Unidiomatic (\"AI友好性检查\", rule.issue, rule.suggestion);",
          "severity = rule.severity;",
          "message = concat_strings [ \"AI理解问题: \"; rule.issue ];",
          "suggestion = rule.suggestion;"
        ],
        "start_line": 39,
        "end_line": 48,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/ai_friendly_checker.ml"
      },
      {
        "hash": "5485b54fabd006bfcc80325b72e56016",
        "text": "let _ = Str.search_forward (Str.regexp_string rule.pattern) code 0 in\ntrue\nwith Not_found -> false\nthen\nviolations :=\n{\nviolation = Unidiomatic (\"AI友好性检查\", rule.issue, rule.suggestion);\nseverity = rule.severity;\nmessage = concat_strings [ \"AI理解问题: \"; rule.issue ];\nsuggestion = rule.suggestion;",
        "lines": [
          "let _ = Str.search_forward (Str.regexp_string rule.pattern) code 0 in",
          "true",
          "with Not_found -> false",
          "then",
          "violations :=",
          "{",
          "violation = Unidiomatic (\"AI友好性检查\", rule.issue, rule.suggestion);",
          "severity = rule.severity;",
          "message = concat_strings [ \"AI理解问题: \"; rule.issue ];",
          "suggestion = rule.suggestion;"
        ],
        "start_line": 73,
        "end_line": 82,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/ai_friendly_checker.ml"
      },
      {
        "hash": "5485b54fabd006bfcc80325b72e56016",
        "text": "let _ = Str.search_forward (Str.regexp_string rule.pattern) code 0 in\ntrue\nwith Not_found -> false\nthen\nviolations :=\n{\nviolation = Unidiomatic (\"AI友好性检查\", rule.issue, rule.suggestion);\nseverity = rule.severity;\nmessage = concat_strings [ \"AI理解问题: \"; rule.issue ];\nsuggestion = rule.suggestion;",
        "lines": [
          "let _ = Str.search_forward (Str.regexp_string rule.pattern) code 0 in",
          "true",
          "with Not_found -> false",
          "then",
          "violations :=",
          "{",
          "violation = Unidiomatic (\"AI友好性检查\", rule.issue, rule.suggestion);",
          "severity = rule.severity;",
          "message = concat_strings [ \"AI理解问题: \"; rule.issue ];",
          "suggestion = rule.suggestion;"
        ],
        "start_line": 113,
        "end_line": 122,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/ai_friendly_checker.ml"
      }
    ],
    "b7f9ef63e0d7ba75c836864ae924f4a1": [
      {
        "hash": "b7f9ef63e0d7ba75c836864ae924f4a1",
        "text": "true\nwith Not_found -> false\nthen\nviolations :=\n{\nviolation = Unidiomatic (\"AI友好性检查\", rule.issue, rule.suggestion);\nseverity = rule.severity;\nmessage = concat_strings [ \"AI理解问题: \"; rule.issue ];\nsuggestion = rule.suggestion;\nconfidence = 0.9;",
        "lines": [
          "true",
          "with Not_found -> false",
          "then",
          "violations :=",
          "{",
          "violation = Unidiomatic (\"AI友好性检查\", rule.issue, rule.suggestion);",
          "severity = rule.severity;",
          "message = concat_strings [ \"AI理解问题: \"; rule.issue ];",
          "suggestion = rule.suggestion;",
          "confidence = 0.9;"
        ],
        "start_line": 40,
        "end_line": 49,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/ai_friendly_checker.ml"
      },
      {
        "hash": "b7f9ef63e0d7ba75c836864ae924f4a1",
        "text": "true\nwith Not_found -> false\nthen\nviolations :=\n{\nviolation = Unidiomatic (\"AI友好性检查\", rule.issue, rule.suggestion);\nseverity = rule.severity;\nmessage = concat_strings [ \"AI理解问题: \"; rule.issue ];\nsuggestion = rule.suggestion;\nconfidence = 0.9;",
        "lines": [
          "true",
          "with Not_found -> false",
          "then",
          "violations :=",
          "{",
          "violation = Unidiomatic (\"AI友好性检查\", rule.issue, rule.suggestion);",
          "severity = rule.severity;",
          "message = concat_strings [ \"AI理解问题: \"; rule.issue ];",
          "suggestion = rule.suggestion;",
          "confidence = 0.9;"
        ],
        "start_line": 74,
        "end_line": 83,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/ai_friendly_checker.ml"
      },
      {
        "hash": "b7f9ef63e0d7ba75c836864ae924f4a1",
        "text": "true\nwith Not_found -> false\nthen\nviolations :=\n{\nviolation = Unidiomatic (\"AI友好性检查\", rule.issue, rule.suggestion);\nseverity = rule.severity;\nmessage = concat_strings [ \"AI理解问题: \"; rule.issue ];\nsuggestion = rule.suggestion;\nconfidence = 0.9;",
        "lines": [
          "true",
          "with Not_found -> false",
          "then",
          "violations :=",
          "{",
          "violation = Unidiomatic (\"AI友好性检查\", rule.issue, rule.suggestion);",
          "severity = rule.severity;",
          "message = concat_strings [ \"AI理解问题: \"; rule.issue ];",
          "suggestion = rule.suggestion;",
          "confidence = 0.9;"
        ],
        "start_line": 114,
        "end_line": 123,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/ai_friendly_checker.ml"
      }
    ],
    "f405e7eb30d6aa5dd07c060d89029288": [
      {
        "hash": "f405e7eb30d6aa5dd07c060d89029288",
        "text": "with Not_found -> false\nthen\nviolations :=\n{\nviolation = Unidiomatic (\"AI友好性检查\", rule.issue, rule.suggestion);\nseverity = rule.severity;\nmessage = concat_strings [ \"AI理解问题: \"; rule.issue ];\nsuggestion = rule.suggestion;\nconfidence = 0.9;\nai_friendly = true;",
        "lines": [
          "with Not_found -> false",
          "then",
          "violations :=",
          "{",
          "violation = Unidiomatic (\"AI友好性检查\", rule.issue, rule.suggestion);",
          "severity = rule.severity;",
          "message = concat_strings [ \"AI理解问题: \"; rule.issue ];",
          "suggestion = rule.suggestion;",
          "confidence = 0.9;",
          "ai_friendly = true;"
        ],
        "start_line": 41,
        "end_line": 50,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/ai_friendly_checker.ml"
      },
      {
        "hash": "f405e7eb30d6aa5dd07c060d89029288",
        "text": "with Not_found -> false\nthen\nviolations :=\n{\nviolation = Unidiomatic (\"AI友好性检查\", rule.issue, rule.suggestion);\nseverity = rule.severity;\nmessage = concat_strings [ \"AI理解问题: \"; rule.issue ];\nsuggestion = rule.suggestion;\nconfidence = 0.9;\nai_friendly = true;",
        "lines": [
          "with Not_found -> false",
          "then",
          "violations :=",
          "{",
          "violation = Unidiomatic (\"AI友好性检查\", rule.issue, rule.suggestion);",
          "severity = rule.severity;",
          "message = concat_strings [ \"AI理解问题: \"; rule.issue ];",
          "suggestion = rule.suggestion;",
          "confidence = 0.9;",
          "ai_friendly = true;"
        ],
        "start_line": 75,
        "end_line": 84,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/ai_friendly_checker.ml"
      },
      {
        "hash": "f405e7eb30d6aa5dd07c060d89029288",
        "text": "with Not_found -> false\nthen\nviolations :=\n{\nviolation = Unidiomatic (\"AI友好性检查\", rule.issue, rule.suggestion);\nseverity = rule.severity;\nmessage = concat_strings [ \"AI理解问题: \"; rule.issue ];\nsuggestion = rule.suggestion;\nconfidence = 0.9;\nai_friendly = true;",
        "lines": [
          "with Not_found -> false",
          "then",
          "violations :=",
          "{",
          "violation = Unidiomatic (\"AI友好性检查\", rule.issue, rule.suggestion);",
          "severity = rule.severity;",
          "message = concat_strings [ \"AI理解问题: \"; rule.issue ];",
          "suggestion = rule.suggestion;",
          "confidence = 0.9;",
          "ai_friendly = true;"
        ],
        "start_line": 115,
        "end_line": 124,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/ai_friendly_checker.ml"
      }
    ],
    "6674d59cbb3f898813d2917b21caa1e6": [
      {
        "hash": "6674d59cbb3f898813d2917b21caa1e6",
        "text": "then\nviolations :=\n{\nviolation = Unidiomatic (\"AI友好性检查\", rule.issue, rule.suggestion);\nseverity = rule.severity;\nmessage = concat_strings [ \"AI理解问题: \"; rule.issue ];\nsuggestion = rule.suggestion;\nconfidence = 0.9;\nai_friendly = true;\n}",
        "lines": [
          "then",
          "violations :=",
          "{",
          "violation = Unidiomatic (\"AI友好性检查\", rule.issue, rule.suggestion);",
          "severity = rule.severity;",
          "message = concat_strings [ \"AI理解问题: \"; rule.issue ];",
          "suggestion = rule.suggestion;",
          "confidence = 0.9;",
          "ai_friendly = true;",
          "}"
        ],
        "start_line": 42,
        "end_line": 51,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/ai_friendly_checker.ml"
      },
      {
        "hash": "6674d59cbb3f898813d2917b21caa1e6",
        "text": "then\nviolations :=\n{\nviolation = Unidiomatic (\"AI友好性检查\", rule.issue, rule.suggestion);\nseverity = rule.severity;\nmessage = concat_strings [ \"AI理解问题: \"; rule.issue ];\nsuggestion = rule.suggestion;\nconfidence = 0.9;\nai_friendly = true;\n}",
        "lines": [
          "then",
          "violations :=",
          "{",
          "violation = Unidiomatic (\"AI友好性检查\", rule.issue, rule.suggestion);",
          "severity = rule.severity;",
          "message = concat_strings [ \"AI理解问题: \"; rule.issue ];",
          "suggestion = rule.suggestion;",
          "confidence = 0.9;",
          "ai_friendly = true;",
          "}"
        ],
        "start_line": 76,
        "end_line": 85,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/ai_friendly_checker.ml"
      },
      {
        "hash": "6674d59cbb3f898813d2917b21caa1e6",
        "text": "then\nviolations :=\n{\nviolation = Unidiomatic (\"AI友好性检查\", rule.issue, rule.suggestion);\nseverity = rule.severity;\nmessage = concat_strings [ \"AI理解问题: \"; rule.issue ];\nsuggestion = rule.suggestion;\nconfidence = 0.9;\nai_friendly = true;\n}",
        "lines": [
          "then",
          "violations :=",
          "{",
          "violation = Unidiomatic (\"AI友好性检查\", rule.issue, rule.suggestion);",
          "severity = rule.severity;",
          "message = concat_strings [ \"AI理解问题: \"; rule.issue ];",
          "suggestion = rule.suggestion;",
          "confidence = 0.9;",
          "ai_friendly = true;",
          "}"
        ],
        "start_line": 116,
        "end_line": 125,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/ai_friendly_checker.ml"
      }
    ],
    "8d9b9e88fa781bd70817ed72a1840918": [
      {
        "hash": "8d9b9e88fa781bd70817ed72a1840918",
        "text": "violations :=\n{\nviolation = Unidiomatic (\"AI友好性检查\", rule.issue, rule.suggestion);\nseverity = rule.severity;\nmessage = concat_strings [ \"AI理解问题: \"; rule.issue ];\nsuggestion = rule.suggestion;\nconfidence = 0.9;\nai_friendly = true;\n}\n:: !violations)",
        "lines": [
          "violations :=",
          "{",
          "violation = Unidiomatic (\"AI友好性检查\", rule.issue, rule.suggestion);",
          "severity = rule.severity;",
          "message = concat_strings [ \"AI理解问题: \"; rule.issue ];",
          "suggestion = rule.suggestion;",
          "confidence = 0.9;",
          "ai_friendly = true;",
          "}",
          ":: !violations)"
        ],
        "start_line": 43,
        "end_line": 52,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/ai_friendly_checker.ml"
      },
      {
        "hash": "8d9b9e88fa781bd70817ed72a1840918",
        "text": "violations :=\n{\nviolation = Unidiomatic (\"AI友好性检查\", rule.issue, rule.suggestion);\nseverity = rule.severity;\nmessage = concat_strings [ \"AI理解问题: \"; rule.issue ];\nsuggestion = rule.suggestion;\nconfidence = 0.9;\nai_friendly = true;\n}\n:: !violations)",
        "lines": [
          "violations :=",
          "{",
          "violation = Unidiomatic (\"AI友好性检查\", rule.issue, rule.suggestion);",
          "severity = rule.severity;",
          "message = concat_strings [ \"AI理解问题: \"; rule.issue ];",
          "suggestion = rule.suggestion;",
          "confidence = 0.9;",
          "ai_friendly = true;",
          "}",
          ":: !violations)"
        ],
        "start_line": 77,
        "end_line": 86,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/ai_friendly_checker.ml"
      },
      {
        "hash": "8d9b9e88fa781bd70817ed72a1840918",
        "text": "violations :=\n{\nviolation = Unidiomatic (\"AI友好性检查\", rule.issue, rule.suggestion);\nseverity = rule.severity;\nmessage = concat_strings [ \"AI理解问题: \"; rule.issue ];\nsuggestion = rule.suggestion;\nconfidence = 0.9;\nai_friendly = true;\n}\n:: !violations)",
        "lines": [
          "violations :=",
          "{",
          "violation = Unidiomatic (\"AI友好性检查\", rule.issue, rule.suggestion);",
          "severity = rule.severity;",
          "message = concat_strings [ \"AI理解问题: \"; rule.issue ];",
          "suggestion = rule.suggestion;",
          "confidence = 0.9;",
          "ai_friendly = true;",
          "}",
          ":: !violations)"
        ],
        "start_line": 117,
        "end_line": 126,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/ai_friendly_checker.ml"
      }
    ],
    "0daeace4da04fb3744c01d283911ae6b": [
      {
        "hash": "0daeace4da04fb3744c01d283911ae6b",
        "text": "let violations = ref [] in\nList.iter\n(fun rule ->\nif\ntry\nlet _ = Str.search_forward (Str.regexp_string rule.pattern) code 0 in\ntrue\nwith Not_found -> false\nthen\nviolations :=",
        "lines": [
          "let violations = ref [] in",
          "List.iter",
          "(fun rule ->",
          "if",
          "try",
          "let _ = Str.search_forward (Str.regexp_string rule.pattern) code 0 in",
          "true",
          "with Not_found -> false",
          "then",
          "violations :="
        ],
        "start_line": 68,
        "end_line": 77,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/ai_friendly_checker.ml"
      },
      {
        "hash": "0daeace4da04fb3744c01d283911ae6b",
        "text": "let violations = ref [] in\nList.iter\n(fun rule ->\nif\ntry\nlet _ = Str.search_forward (Str.regexp_string rule.pattern) code 0 in\ntrue\nwith Not_found -> false\nthen\nviolations :=",
        "lines": [
          "let violations = ref [] in",
          "List.iter",
          "(fun rule ->",
          "if",
          "try",
          "let _ = Str.search_forward (Str.regexp_string rule.pattern) code 0 in",
          "true",
          "with Not_found -> false",
          "then",
          "violations :="
        ],
        "start_line": 108,
        "end_line": 117,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/ai_friendly_checker.ml"
      }
    ],
    "97d0915aabcf225b2cfd6fd839ada715": [
      {
        "hash": "97d0915aabcf225b2cfd6fd839ada715",
        "text": "List.iter\n(fun rule ->\nif\ntry\nlet _ = Str.search_forward (Str.regexp rule.pattern) code 0 in\ntrue\nwith Not_found -> false\nthen\nlet violation = Unidiomatic (rule.pattern, rule.description, rule.suggestion) in\nlet result =",
        "lines": [
          "List.iter",
          "(fun rule ->",
          "if",
          "try",
          "let _ = Str.search_forward (Str.regexp rule.pattern) code 0 in",
          "true",
          "with Not_found -> false",
          "then",
          "let violation = Unidiomatic (rule.pattern, rule.description, rule.suggestion) in",
          "let result ="
        ],
        "start_line": 11,
        "end_line": 20,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/idiomatic_checker.ml"
      },
      {
        "hash": "97d0915aabcf225b2cfd6fd839ada715",
        "text": "List.iter\n(fun rule ->\nif\ntry\nlet _ = Str.search_forward (Str.regexp rule.pattern) code 0 in\ntrue\nwith Not_found -> false\nthen\nlet violation = Unidiomatic (rule.pattern, rule.description, rule.suggestion) in\nlet result =",
        "lines": [
          "List.iter",
          "(fun rule ->",
          "if",
          "try",
          "let _ = Str.search_forward (Str.regexp rule.pattern) code 0 in",
          "true",
          "with Not_found -> false",
          "then",
          "let violation = Unidiomatic (rule.pattern, rule.description, rule.suggestion) in",
          "let result ="
        ],
        "start_line": 40,
        "end_line": 49,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/idiomatic_checker.ml"
      },
      {
        "hash": "97d0915aabcf225b2cfd6fd839ada715",
        "text": "List.iter\n(fun rule ->\nif\ntry\nlet _ = Str.search_forward (Str.regexp rule.pattern) code 0 in\ntrue\nwith Not_found -> false\nthen\nlet violation = Unidiomatic (rule.pattern, rule.description, rule.suggestion) in\nlet result =",
        "lines": [
          "List.iter",
          "(fun rule ->",
          "if",
          "try",
          "let _ = Str.search_forward (Str.regexp rule.pattern) code 0 in",
          "true",
          "with Not_found -> false",
          "then",
          "let violation = Unidiomatic (rule.pattern, rule.description, rule.suggestion) in",
          "let result ="
        ],
        "start_line": 72,
        "end_line": 81,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/idiomatic_checker.ml"
      }
    ],
    "21a5bc16a2d7f8972038298a37d022ef": [
      {
        "hash": "21a5bc16a2d7f8972038298a37d022ef",
        "text": "(fun rule ->\nif\ntry\nlet _ = Str.search_forward (Str.regexp rule.pattern) code 0 in\ntrue\nwith Not_found -> false\nthen\nlet violation = Unidiomatic (rule.pattern, rule.description, rule.suggestion) in\nlet result =\n{",
        "lines": [
          "(fun rule ->",
          "if",
          "try",
          "let _ = Str.search_forward (Str.regexp rule.pattern) code 0 in",
          "true",
          "with Not_found -> false",
          "then",
          "let violation = Unidiomatic (rule.pattern, rule.description, rule.suggestion) in",
          "let result =",
          "{"
        ],
        "start_line": 12,
        "end_line": 21,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/idiomatic_checker.ml"
      },
      {
        "hash": "21a5bc16a2d7f8972038298a37d022ef",
        "text": "(fun rule ->\nif\ntry\nlet _ = Str.search_forward (Str.regexp rule.pattern) code 0 in\ntrue\nwith Not_found -> false\nthen\nlet violation = Unidiomatic (rule.pattern, rule.description, rule.suggestion) in\nlet result =\n{",
        "lines": [
          "(fun rule ->",
          "if",
          "try",
          "let _ = Str.search_forward (Str.regexp rule.pattern) code 0 in",
          "true",
          "with Not_found -> false",
          "then",
          "let violation = Unidiomatic (rule.pattern, rule.description, rule.suggestion) in",
          "let result =",
          "{"
        ],
        "start_line": 41,
        "end_line": 50,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/idiomatic_checker.ml"
      },
      {
        "hash": "21a5bc16a2d7f8972038298a37d022ef",
        "text": "(fun rule ->\nif\ntry\nlet _ = Str.search_forward (Str.regexp rule.pattern) code 0 in\ntrue\nwith Not_found -> false\nthen\nlet violation = Unidiomatic (rule.pattern, rule.description, rule.suggestion) in\nlet result =\n{",
        "lines": [
          "(fun rule ->",
          "if",
          "try",
          "let _ = Str.search_forward (Str.regexp rule.pattern) code 0 in",
          "true",
          "with Not_found -> false",
          "then",
          "let violation = Unidiomatic (rule.pattern, rule.description, rule.suggestion) in",
          "let result =",
          "{"
        ],
        "start_line": 73,
        "end_line": 82,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/idiomatic_checker.ml"
      }
    ],
    "3132f87047610cd204a2af4f66be1caa": [
      {
        "hash": "3132f87047610cd204a2af4f66be1caa",
        "text": "if\ntry\nlet _ = Str.search_forward (Str.regexp rule.pattern) code 0 in\ntrue\nwith Not_found -> false\nthen\nlet violation = Unidiomatic (rule.pattern, rule.description, rule.suggestion) in\nlet result =\n{\nviolation;",
        "lines": [
          "if",
          "try",
          "let _ = Str.search_forward (Str.regexp rule.pattern) code 0 in",
          "true",
          "with Not_found -> false",
          "then",
          "let violation = Unidiomatic (rule.pattern, rule.description, rule.suggestion) in",
          "let result =",
          "{",
          "violation;"
        ],
        "start_line": 13,
        "end_line": 22,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/idiomatic_checker.ml"
      },
      {
        "hash": "3132f87047610cd204a2af4f66be1caa",
        "text": "if\ntry\nlet _ = Str.search_forward (Str.regexp rule.pattern) code 0 in\ntrue\nwith Not_found -> false\nthen\nlet violation = Unidiomatic (rule.pattern, rule.description, rule.suggestion) in\nlet result =\n{\nviolation;",
        "lines": [
          "if",
          "try",
          "let _ = Str.search_forward (Str.regexp rule.pattern) code 0 in",
          "true",
          "with Not_found -> false",
          "then",
          "let violation = Unidiomatic (rule.pattern, rule.description, rule.suggestion) in",
          "let result =",
          "{",
          "violation;"
        ],
        "start_line": 42,
        "end_line": 51,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/idiomatic_checker.ml"
      },
      {
        "hash": "3132f87047610cd204a2af4f66be1caa",
        "text": "if\ntry\nlet _ = Str.search_forward (Str.regexp rule.pattern) code 0 in\ntrue\nwith Not_found -> false\nthen\nlet violation = Unidiomatic (rule.pattern, rule.description, rule.suggestion) in\nlet result =\n{\nviolation;",
        "lines": [
          "if",
          "try",
          "let _ = Str.search_forward (Str.regexp rule.pattern) code 0 in",
          "true",
          "with Not_found -> false",
          "then",
          "let violation = Unidiomatic (rule.pattern, rule.description, rule.suggestion) in",
          "let result =",
          "{",
          "violation;"
        ],
        "start_line": 74,
        "end_line": 83,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/idiomatic_checker.ml"
      }
    ],
    "5115e4a8553a233a528e8a5e6a1a1623": [
      {
        "hash": "5115e4a8553a233a528e8a5e6a1a1623",
        "text": "try\nlet _ = Str.search_forward (Str.regexp rule.pattern) code 0 in\ntrue\nwith Not_found -> false\nthen\nlet violation = Unidiomatic (rule.pattern, rule.description, rule.suggestion) in\nlet result =\n{\nviolation;\nseverity = rule.severity;",
        "lines": [
          "try",
          "let _ = Str.search_forward (Str.regexp rule.pattern) code 0 in",
          "true",
          "with Not_found -> false",
          "then",
          "let violation = Unidiomatic (rule.pattern, rule.description, rule.suggestion) in",
          "let result =",
          "{",
          "violation;",
          "severity = rule.severity;"
        ],
        "start_line": 14,
        "end_line": 23,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/idiomatic_checker.ml"
      },
      {
        "hash": "5115e4a8553a233a528e8a5e6a1a1623",
        "text": "try\nlet _ = Str.search_forward (Str.regexp rule.pattern) code 0 in\ntrue\nwith Not_found -> false\nthen\nlet violation = Unidiomatic (rule.pattern, rule.description, rule.suggestion) in\nlet result =\n{\nviolation;\nseverity = rule.severity;",
        "lines": [
          "try",
          "let _ = Str.search_forward (Str.regexp rule.pattern) code 0 in",
          "true",
          "with Not_found -> false",
          "then",
          "let violation = Unidiomatic (rule.pattern, rule.description, rule.suggestion) in",
          "let result =",
          "{",
          "violation;",
          "severity = rule.severity;"
        ],
        "start_line": 43,
        "end_line": 52,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/idiomatic_checker.ml"
      },
      {
        "hash": "5115e4a8553a233a528e8a5e6a1a1623",
        "text": "try\nlet _ = Str.search_forward (Str.regexp rule.pattern) code 0 in\ntrue\nwith Not_found -> false\nthen\nlet violation = Unidiomatic (rule.pattern, rule.description, rule.suggestion) in\nlet result =\n{\nviolation;\nseverity = rule.severity;",
        "lines": [
          "try",
          "let _ = Str.search_forward (Str.regexp rule.pattern) code 0 in",
          "true",
          "with Not_found -> false",
          "then",
          "let violation = Unidiomatic (rule.pattern, rule.description, rule.suggestion) in",
          "let result =",
          "{",
          "violation;",
          "severity = rule.severity;"
        ],
        "start_line": 75,
        "end_line": 84,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/idiomatic_checker.ml"
      }
    ],
    "afec380ec7f4e2eca32ab953d72db982": [
      {
        "hash": "afec380ec7f4e2eca32ab953d72db982",
        "text": "let _ = Str.search_forward (Str.regexp rule.pattern) code 0 in\ntrue\nwith Not_found -> false\nthen\nlet violation = Unidiomatic (rule.pattern, rule.description, rule.suggestion) in\nlet result =\n{\nviolation;\nseverity = rule.severity;\nmessage = rule.description;",
        "lines": [
          "let _ = Str.search_forward (Str.regexp rule.pattern) code 0 in",
          "true",
          "with Not_found -> false",
          "then",
          "let violation = Unidiomatic (rule.pattern, rule.description, rule.suggestion) in",
          "let result =",
          "{",
          "violation;",
          "severity = rule.severity;",
          "message = rule.description;"
        ],
        "start_line": 15,
        "end_line": 24,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/idiomatic_checker.ml"
      },
      {
        "hash": "afec380ec7f4e2eca32ab953d72db982",
        "text": "let _ = Str.search_forward (Str.regexp rule.pattern) code 0 in\ntrue\nwith Not_found -> false\nthen\nlet violation = Unidiomatic (rule.pattern, rule.description, rule.suggestion) in\nlet result =\n{\nviolation;\nseverity = rule.severity;\nmessage = rule.description;",
        "lines": [
          "let _ = Str.search_forward (Str.regexp rule.pattern) code 0 in",
          "true",
          "with Not_found -> false",
          "then",
          "let violation = Unidiomatic (rule.pattern, rule.description, rule.suggestion) in",
          "let result =",
          "{",
          "violation;",
          "severity = rule.severity;",
          "message = rule.description;"
        ],
        "start_line": 44,
        "end_line": 53,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/idiomatic_checker.ml"
      },
      {
        "hash": "afec380ec7f4e2eca32ab953d72db982",
        "text": "let _ = Str.search_forward (Str.regexp rule.pattern) code 0 in\ntrue\nwith Not_found -> false\nthen\nlet violation = Unidiomatic (rule.pattern, rule.description, rule.suggestion) in\nlet result =\n{\nviolation;\nseverity = rule.severity;\nmessage = rule.description;",
        "lines": [
          "let _ = Str.search_forward (Str.regexp rule.pattern) code 0 in",
          "true",
          "with Not_found -> false",
          "then",
          "let violation = Unidiomatic (rule.pattern, rule.description, rule.suggestion) in",
          "let result =",
          "{",
          "violation;",
          "severity = rule.severity;",
          "message = rule.description;"
        ],
        "start_line": 76,
        "end_line": 85,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/idiomatic_checker.ml"
      }
    ],
    "855e89dc9fad5e85717a13af36238ade": [
      {
        "hash": "855e89dc9fad5e85717a13af36238ade",
        "text": "true\nwith Not_found -> false\nthen\nlet violation = Unidiomatic (rule.pattern, rule.description, rule.suggestion) in\nlet result =\n{\nviolation;\nseverity = rule.severity;\nmessage = rule.description;\nsuggestion = rule.suggestion;",
        "lines": [
          "true",
          "with Not_found -> false",
          "then",
          "let violation = Unidiomatic (rule.pattern, rule.description, rule.suggestion) in",
          "let result =",
          "{",
          "violation;",
          "severity = rule.severity;",
          "message = rule.description;",
          "suggestion = rule.suggestion;"
        ],
        "start_line": 16,
        "end_line": 25,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/idiomatic_checker.ml"
      },
      {
        "hash": "855e89dc9fad5e85717a13af36238ade",
        "text": "true\nwith Not_found -> false\nthen\nlet violation = Unidiomatic (rule.pattern, rule.description, rule.suggestion) in\nlet result =\n{\nviolation;\nseverity = rule.severity;\nmessage = rule.description;\nsuggestion = rule.suggestion;",
        "lines": [
          "true",
          "with Not_found -> false",
          "then",
          "let violation = Unidiomatic (rule.pattern, rule.description, rule.suggestion) in",
          "let result =",
          "{",
          "violation;",
          "severity = rule.severity;",
          "message = rule.description;",
          "suggestion = rule.suggestion;"
        ],
        "start_line": 45,
        "end_line": 54,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/idiomatic_checker.ml"
      },
      {
        "hash": "855e89dc9fad5e85717a13af36238ade",
        "text": "true\nwith Not_found -> false\nthen\nlet violation = Unidiomatic (rule.pattern, rule.description, rule.suggestion) in\nlet result =\n{\nviolation;\nseverity = rule.severity;\nmessage = rule.description;\nsuggestion = rule.suggestion;",
        "lines": [
          "true",
          "with Not_found -> false",
          "then",
          "let violation = Unidiomatic (rule.pattern, rule.description, rule.suggestion) in",
          "let result =",
          "{",
          "violation;",
          "severity = rule.severity;",
          "message = rule.description;",
          "suggestion = rule.suggestion;"
        ],
        "start_line": 77,
        "end_line": 86,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/idiomatic_checker.ml"
      }
    ],
    "8a6691a89c388b10a7efe9077f257ab0": [
      {
        "hash": "8a6691a89c388b10a7efe9077f257ab0",
        "text": "with Not_found -> false\nthen\nlet violation = Unidiomatic (rule.pattern, rule.description, rule.suggestion) in\nlet result =\n{\nviolation;\nseverity = rule.severity;\nmessage = rule.description;\nsuggestion = rule.suggestion;\nconfidence = 0.6;",
        "lines": [
          "with Not_found -> false",
          "then",
          "let violation = Unidiomatic (rule.pattern, rule.description, rule.suggestion) in",
          "let result =",
          "{",
          "violation;",
          "severity = rule.severity;",
          "message = rule.description;",
          "suggestion = rule.suggestion;",
          "confidence = 0.6;"
        ],
        "start_line": 17,
        "end_line": 26,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/idiomatic_checker.ml"
      },
      {
        "hash": "8a6691a89c388b10a7efe9077f257ab0",
        "text": "with Not_found -> false\nthen\nlet violation = Unidiomatic (rule.pattern, rule.description, rule.suggestion) in\nlet result =\n{\nviolation;\nseverity = rule.severity;\nmessage = rule.description;\nsuggestion = rule.suggestion;\nconfidence = 0.6;",
        "lines": [
          "with Not_found -> false",
          "then",
          "let violation = Unidiomatic (rule.pattern, rule.description, rule.suggestion) in",
          "let result =",
          "{",
          "violation;",
          "severity = rule.severity;",
          "message = rule.description;",
          "suggestion = rule.suggestion;",
          "confidence = 0.6;"
        ],
        "start_line": 46,
        "end_line": 55,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/idiomatic_checker.ml"
      },
      {
        "hash": "8a6691a89c388b10a7efe9077f257ab0",
        "text": "with Not_found -> false\nthen\nlet violation = Unidiomatic (rule.pattern, rule.description, rule.suggestion) in\nlet result =\n{\nviolation;\nseverity = rule.severity;\nmessage = rule.description;\nsuggestion = rule.suggestion;\nconfidence = 0.6;",
        "lines": [
          "with Not_found -> false",
          "then",
          "let violation = Unidiomatic (rule.pattern, rule.description, rule.suggestion) in",
          "let result =",
          "{",
          "violation;",
          "severity = rule.severity;",
          "message = rule.description;",
          "suggestion = rule.suggestion;",
          "confidence = 0.6;"
        ],
        "start_line": 78,
        "end_line": 87,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/idiomatic_checker.ml"
      }
    ],
    "dfaecba239005a96c4d7b7c5f8e640a8": [
      {
        "hash": "dfaecba239005a96c4d7b7c5f8e640a8",
        "text": "then\nlet violation = Unidiomatic (rule.pattern, rule.description, rule.suggestion) in\nlet result =\n{\nviolation;\nseverity = rule.severity;\nmessage = rule.description;\nsuggestion = rule.suggestion;\nconfidence = 0.6;\nai_friendly = true;",
        "lines": [
          "then",
          "let violation = Unidiomatic (rule.pattern, rule.description, rule.suggestion) in",
          "let result =",
          "{",
          "violation;",
          "severity = rule.severity;",
          "message = rule.description;",
          "suggestion = rule.suggestion;",
          "confidence = 0.6;",
          "ai_friendly = true;"
        ],
        "start_line": 18,
        "end_line": 27,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/idiomatic_checker.ml"
      },
      {
        "hash": "dfaecba239005a96c4d7b7c5f8e640a8",
        "text": "then\nlet violation = Unidiomatic (rule.pattern, rule.description, rule.suggestion) in\nlet result =\n{\nviolation;\nseverity = rule.severity;\nmessage = rule.description;\nsuggestion = rule.suggestion;\nconfidence = 0.6;\nai_friendly = true;",
        "lines": [
          "then",
          "let violation = Unidiomatic (rule.pattern, rule.description, rule.suggestion) in",
          "let result =",
          "{",
          "violation;",
          "severity = rule.severity;",
          "message = rule.description;",
          "suggestion = rule.suggestion;",
          "confidence = 0.6;",
          "ai_friendly = true;"
        ],
        "start_line": 47,
        "end_line": 56,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/idiomatic_checker.ml"
      },
      {
        "hash": "dfaecba239005a96c4d7b7c5f8e640a8",
        "text": "then\nlet violation = Unidiomatic (rule.pattern, rule.description, rule.suggestion) in\nlet result =\n{\nviolation;\nseverity = rule.severity;\nmessage = rule.description;\nsuggestion = rule.suggestion;\nconfidence = 0.6;\nai_friendly = true;",
        "lines": [
          "then",
          "let violation = Unidiomatic (rule.pattern, rule.description, rule.suggestion) in",
          "let result =",
          "{",
          "violation;",
          "severity = rule.severity;",
          "message = rule.description;",
          "suggestion = rule.suggestion;",
          "confidence = 0.6;",
          "ai_friendly = true;"
        ],
        "start_line": 79,
        "end_line": 88,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/idiomatic_checker.ml"
      }
    ],
    "226dc593531138e516c5caa386e64c52": [
      {
        "hash": "226dc593531138e516c5caa386e64c52",
        "text": "let violation = Unidiomatic (rule.pattern, rule.description, rule.suggestion) in\nlet result =\n{\nviolation;\nseverity = rule.severity;\nmessage = rule.description;\nsuggestion = rule.suggestion;\nconfidence = 0.6;\nai_friendly = true;\n}",
        "lines": [
          "let violation = Unidiomatic (rule.pattern, rule.description, rule.suggestion) in",
          "let result =",
          "{",
          "violation;",
          "severity = rule.severity;",
          "message = rule.description;",
          "suggestion = rule.suggestion;",
          "confidence = 0.6;",
          "ai_friendly = true;",
          "}"
        ],
        "start_line": 19,
        "end_line": 28,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/idiomatic_checker.ml"
      },
      {
        "hash": "226dc593531138e516c5caa386e64c52",
        "text": "let violation = Unidiomatic (rule.pattern, rule.description, rule.suggestion) in\nlet result =\n{\nviolation;\nseverity = rule.severity;\nmessage = rule.description;\nsuggestion = rule.suggestion;\nconfidence = 0.6;\nai_friendly = true;\n}",
        "lines": [
          "let violation = Unidiomatic (rule.pattern, rule.description, rule.suggestion) in",
          "let result =",
          "{",
          "violation;",
          "severity = rule.severity;",
          "message = rule.description;",
          "suggestion = rule.suggestion;",
          "confidence = 0.6;",
          "ai_friendly = true;",
          "}"
        ],
        "start_line": 48,
        "end_line": 57,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/idiomatic_checker.ml"
      },
      {
        "hash": "226dc593531138e516c5caa386e64c52",
        "text": "let violation = Unidiomatic (rule.pattern, rule.description, rule.suggestion) in\nlet result =\n{\nviolation;\nseverity = rule.severity;\nmessage = rule.description;\nsuggestion = rule.suggestion;\nconfidence = 0.6;\nai_friendly = true;\n}",
        "lines": [
          "let violation = Unidiomatic (rule.pattern, rule.description, rule.suggestion) in",
          "let result =",
          "{",
          "violation;",
          "severity = rule.severity;",
          "message = rule.description;",
          "suggestion = rule.suggestion;",
          "confidence = 0.6;",
          "ai_friendly = true;",
          "}"
        ],
        "start_line": 80,
        "end_line": 89,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/idiomatic_checker.ml"
      }
    ],
    "1b9de9f919daef4a6ea7934fe4d5689b": [
      {
        "hash": "1b9de9f919daef4a6ea7934fe4d5689b",
        "text": "let result =\n{\nviolation;\nseverity = rule.severity;\nmessage = rule.description;\nsuggestion = rule.suggestion;\nconfidence = 0.6;\nai_friendly = true;\n}\nin",
        "lines": [
          "let result =",
          "{",
          "violation;",
          "severity = rule.severity;",
          "message = rule.description;",
          "suggestion = rule.suggestion;",
          "confidence = 0.6;",
          "ai_friendly = true;",
          "}",
          "in"
        ],
        "start_line": 20,
        "end_line": 29,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/idiomatic_checker.ml"
      },
      {
        "hash": "1b9de9f919daef4a6ea7934fe4d5689b",
        "text": "let result =\n{\nviolation;\nseverity = rule.severity;\nmessage = rule.description;\nsuggestion = rule.suggestion;\nconfidence = 0.6;\nai_friendly = true;\n}\nin",
        "lines": [
          "let result =",
          "{",
          "violation;",
          "severity = rule.severity;",
          "message = rule.description;",
          "suggestion = rule.suggestion;",
          "confidence = 0.6;",
          "ai_friendly = true;",
          "}",
          "in"
        ],
        "start_line": 49,
        "end_line": 58,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/idiomatic_checker.ml"
      },
      {
        "hash": "1b9de9f919daef4a6ea7934fe4d5689b",
        "text": "let result =\n{\nviolation;\nseverity = rule.severity;\nmessage = rule.description;\nsuggestion = rule.suggestion;\nconfidence = 0.6;\nai_friendly = true;\n}\nin",
        "lines": [
          "let result =",
          "{",
          "violation;",
          "severity = rule.severity;",
          "message = rule.description;",
          "suggestion = rule.suggestion;",
          "confidence = 0.6;",
          "ai_friendly = true;",
          "}",
          "in"
        ],
        "start_line": 81,
        "end_line": 90,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/idiomatic_checker.ml"
      }
    ],
    "13ba9873fdb659f2ee9e3aec8a827f40": [
      {
        "hash": "13ba9873fdb659f2ee9e3aec8a827f40",
        "text": "{\nviolation;\nseverity = rule.severity;\nmessage = rule.description;\nsuggestion = rule.suggestion;\nconfidence = 0.6;\nai_friendly = true;\n}\nin\nviolations := result :: !violations)",
        "lines": [
          "{",
          "violation;",
          "severity = rule.severity;",
          "message = rule.description;",
          "suggestion = rule.suggestion;",
          "confidence = 0.6;",
          "ai_friendly = true;",
          "}",
          "in",
          "violations := result :: !violations)"
        ],
        "start_line": 21,
        "end_line": 30,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/idiomatic_checker.ml"
      },
      {
        "hash": "13ba9873fdb659f2ee9e3aec8a827f40",
        "text": "{\nviolation;\nseverity = rule.severity;\nmessage = rule.description;\nsuggestion = rule.suggestion;\nconfidence = 0.6;\nai_friendly = true;\n}\nin\nviolations := result :: !violations)",
        "lines": [
          "{",
          "violation;",
          "severity = rule.severity;",
          "message = rule.description;",
          "suggestion = rule.suggestion;",
          "confidence = 0.6;",
          "ai_friendly = true;",
          "}",
          "in",
          "violations := result :: !violations)"
        ],
        "start_line": 50,
        "end_line": 59,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/idiomatic_checker.ml"
      },
      {
        "hash": "13ba9873fdb659f2ee9e3aec8a827f40",
        "text": "{\nviolation;\nseverity = rule.severity;\nmessage = rule.description;\nsuggestion = rule.suggestion;\nconfidence = 0.6;\nai_friendly = true;\n}\nin\nviolations := result :: !violations)",
        "lines": [
          "{",
          "violation;",
          "severity = rule.severity;",
          "message = rule.description;",
          "suggestion = rule.suggestion;",
          "confidence = 0.6;",
          "ai_friendly = true;",
          "}",
          "in",
          "violations := result :: !violations)"
        ],
        "start_line": 82,
        "end_line": 91,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/idiomatic_checker.ml"
      }
    ],
    "c41097ed5831963dfa21325cacb0b9f5": [
      {
        "hash": "c41097ed5831963dfa21325cacb0b9f5",
        "text": "let check_category code category =\nlet category_rules = get_rules_by_category category in\nlet violations = ref [] in",
        "lines": [
          "let check_category code category =",
          "let category_rules = get_rules_by_category category in",
          "let violations = ref [] in"
        ],
        "start_line": 36,
        "end_line": 38,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/idiomatic_checker.ml"
      },
      {
        "hash": "c41097ed5831963dfa21325cacb0b9f5",
        "text": "let check_category code category =\nlet category_rules = get_rules_by_category category in\nlet violations = ref [] in",
        "lines": [
          "let check_category code category =",
          "let category_rules = get_rules_by_category category in",
          "let violations = ref [] in"
        ],
        "start_line": 36,
        "end_line": 38,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/word_order_checker.ml"
      },
      {
        "hash": "c41097ed5831963dfa21325cacb0b9f5",
        "text": "let check_category code category =\nlet category_rules = get_rules_by_category category in\nlet violations = ref [] in",
        "lines": [
          "let check_category code category =",
          "let category_rules = get_rules_by_category category in",
          "let violations = ref [] in"
        ],
        "start_line": 36,
        "end_line": 38,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/mixed_language_checker.ml"
      }
    ],
    "1849eff3fedcdc53f29e7bbeed117cac": [
      {
        "hash": "1849eff3fedcdc53f29e7bbeed117cac",
        "text": "ai_friendly = true;\n}\nin\nviolations := result :: !violations)\ncategory_rules;",
        "lines": [
          "ai_friendly = true;",
          "}",
          "in",
          "violations := result :: !violations)",
          "category_rules;"
        ],
        "start_line": 56,
        "end_line": 60,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/idiomatic_checker.ml"
      },
      {
        "hash": "1849eff3fedcdc53f29e7bbeed117cac",
        "text": "ai_friendly = true;\n}\nin\nviolations := result :: !violations)\ncategory_rules;",
        "lines": [
          "ai_friendly = true;",
          "}",
          "in",
          "violations := result :: !violations)",
          "category_rules;"
        ],
        "start_line": 56,
        "end_line": 60,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/word_order_checker.ml"
      },
      {
        "hash": "1849eff3fedcdc53f29e7bbeed117cac",
        "text": "ai_friendly = true;\n}\nin\nviolations := result :: !violations)\ncategory_rules;",
        "lines": [
          "ai_friendly = true;",
          "}",
          "in",
          "violations := result :: !violations)",
          "category_rules;"
        ],
        "start_line": 56,
        "end_line": 60,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/mixed_language_checker.ml"
      }
    ],
    "8cd5fb0dc348d211302a7c425b19810d": [
      {
        "hash": "8cd5fb0dc348d211302a7c425b19810d",
        "text": "}\nin\nviolations := result :: !violations)\ncategory_rules;",
        "lines": [
          "}",
          "in",
          "violations := result :: !violations)",
          "category_rules;"
        ],
        "start_line": 57,
        "end_line": 60,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/idiomatic_checker.ml"
      },
      {
        "hash": "8cd5fb0dc348d211302a7c425b19810d",
        "text": "}\nin\nviolations := result :: !violations)\ncategory_rules;",
        "lines": [
          "}",
          "in",
          "violations := result :: !violations)",
          "category_rules;"
        ],
        "start_line": 57,
        "end_line": 60,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/word_order_checker.ml"
      },
      {
        "hash": "8cd5fb0dc348d211302a7c425b19810d",
        "text": "}\nin\nviolations := result :: !violations)\ncategory_rules;",
        "lines": [
          "}",
          "in",
          "violations := result :: !violations)",
          "category_rules;"
        ],
        "start_line": 57,
        "end_line": 60,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/mixed_language_checker.ml"
      }
    ],
    "064ee09cd854fb1e032244bdb20381fc": [
      {
        "hash": "064ee09cd854fb1e032244bdb20381fc",
        "text": "in\nviolations := result :: !violations)\ncategory_rules;",
        "lines": [
          "in",
          "violations := result :: !violations)",
          "category_rules;"
        ],
        "start_line": 58,
        "end_line": 60,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/idiomatic_checker.ml"
      },
      {
        "hash": "064ee09cd854fb1e032244bdb20381fc",
        "text": "in\nviolations := result :: !violations)\ncategory_rules;",
        "lines": [
          "in",
          "violations := result :: !violations)",
          "category_rules;"
        ],
        "start_line": 58,
        "end_line": 60,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/word_order_checker.ml"
      },
      {
        "hash": "064ee09cd854fb1e032244bdb20381fc",
        "text": "in\nviolations := result :: !violations)\ncategory_rules;",
        "lines": [
          "in",
          "violations := result :: !violations)",
          "category_rules;"
        ],
        "start_line": 58,
        "end_line": 60,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/mixed_language_checker.ml"
      }
    ],
    "114c28778b5e7a24e6063027e6deff12": [
      {
        "hash": "114c28778b5e7a24e6063027e6deff12",
        "text": "let check_with_severity_filter code min_severity =\nlet severity_rules = get_rules_by_severity min_severity in\nlet violations = ref [] in",
        "lines": [
          "let check_with_severity_filter code min_severity =",
          "let severity_rules = get_rules_by_severity min_severity in",
          "let violations = ref [] in"
        ],
        "start_line": 68,
        "end_line": 70,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/idiomatic_checker.ml"
      },
      {
        "hash": "114c28778b5e7a24e6063027e6deff12",
        "text": "let check_with_severity_filter code min_severity =\nlet severity_rules = get_rules_by_severity min_severity in\nlet violations = ref [] in",
        "lines": [
          "let check_with_severity_filter code min_severity =",
          "let severity_rules = get_rules_by_severity min_severity in",
          "let violations = ref [] in"
        ],
        "start_line": 68,
        "end_line": 70,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/word_order_checker.ml"
      },
      {
        "hash": "114c28778b5e7a24e6063027e6deff12",
        "text": "let check_with_severity_filter code min_severity =\nlet severity_rules = get_rules_by_severity min_severity in\nlet violations = ref [] in",
        "lines": [
          "let check_with_severity_filter code min_severity =",
          "let severity_rules = get_rules_by_severity min_severity in",
          "let violations = ref [] in"
        ],
        "start_line": 68,
        "end_line": 70,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/mixed_language_checker.ml"
      }
    ],
    "729aefb38d9812d1508b625996d6d9f5": [
      {
        "hash": "729aefb38d9812d1508b625996d6d9f5",
        "text": "ai_friendly = true;\n}\nin\nviolations := result :: !violations)\nseverity_rules;",
        "lines": [
          "ai_friendly = true;",
          "}",
          "in",
          "violations := result :: !violations)",
          "severity_rules;"
        ],
        "start_line": 88,
        "end_line": 92,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/idiomatic_checker.ml"
      },
      {
        "hash": "729aefb38d9812d1508b625996d6d9f5",
        "text": "ai_friendly = true;\n}\nin\nviolations := result :: !violations)\nseverity_rules;",
        "lines": [
          "ai_friendly = true;",
          "}",
          "in",
          "violations := result :: !violations)",
          "severity_rules;"
        ],
        "start_line": 88,
        "end_line": 92,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/word_order_checker.ml"
      },
      {
        "hash": "729aefb38d9812d1508b625996d6d9f5",
        "text": "ai_friendly = true;\n}\nin\nviolations := result :: !violations)\nseverity_rules;",
        "lines": [
          "ai_friendly = true;",
          "}",
          "in",
          "violations := result :: !violations)",
          "severity_rules;"
        ],
        "start_line": 88,
        "end_line": 92,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/mixed_language_checker.ml"
      }
    ],
    "58547b3c0114195713d184c8edeabacc": [
      {
        "hash": "58547b3c0114195713d184c8edeabacc",
        "text": "}\nin\nviolations := result :: !violations)\nseverity_rules;",
        "lines": [
          "}",
          "in",
          "violations := result :: !violations)",
          "severity_rules;"
        ],
        "start_line": 89,
        "end_line": 92,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/idiomatic_checker.ml"
      },
      {
        "hash": "58547b3c0114195713d184c8edeabacc",
        "text": "}\nin\nviolations := result :: !violations)\nseverity_rules;",
        "lines": [
          "}",
          "in",
          "violations := result :: !violations)",
          "severity_rules;"
        ],
        "start_line": 89,
        "end_line": 92,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/word_order_checker.ml"
      },
      {
        "hash": "58547b3c0114195713d184c8edeabacc",
        "text": "}\nin\nviolations := result :: !violations)\nseverity_rules;",
        "lines": [
          "}",
          "in",
          "violations := result :: !violations)",
          "severity_rules;"
        ],
        "start_line": 89,
        "end_line": 92,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/mixed_language_checker.ml"
      }
    ],
    "2a4473ef4d84a78acdbe3a89e74bd878": [
      {
        "hash": "2a4473ef4d84a78acdbe3a89e74bd878",
        "text": "in\nviolations := result :: !violations)\nseverity_rules;",
        "lines": [
          "in",
          "violations := result :: !violations)",
          "severity_rules;"
        ],
        "start_line": 90,
        "end_line": 92,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/idiomatic_checker.ml"
      },
      {
        "hash": "2a4473ef4d84a78acdbe3a89e74bd878",
        "text": "in\nviolations := result :: !violations)\nseverity_rules;",
        "lines": [
          "in",
          "violations := result :: !violations)",
          "severity_rules;"
        ],
        "start_line": 90,
        "end_line": 92,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/word_order_checker.ml"
      },
      {
        "hash": "2a4473ef4d84a78acdbe3a89e74bd878",
        "text": "in\nviolations := result :: !violations)\nseverity_rules;",
        "lines": [
          "in",
          "violations := result :: !violations)",
          "severity_rules;"
        ],
        "start_line": 90,
        "end_line": 92,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/mixed_language_checker.ml"
      }
    ],
    "535a0b9d2b97d97c48f81ee561c335e1": [
      {
        "hash": "535a0b9d2b97d97c48f81ee561c335e1",
        "text": "List.iter\n(fun rule ->\nif\ntry\nlet _ = Str.search_forward (Str.regexp rule.pattern) code 0 in\ntrue\nwith Not_found -> false\nthen\nlet violation = ImproperWordOrder (rule.pattern, rule.description, rule.suggestion) in\nlet result =",
        "lines": [
          "List.iter",
          "(fun rule ->",
          "if",
          "try",
          "let _ = Str.search_forward (Str.regexp rule.pattern) code 0 in",
          "true",
          "with Not_found -> false",
          "then",
          "let violation = ImproperWordOrder (rule.pattern, rule.description, rule.suggestion) in",
          "let result ="
        ],
        "start_line": 11,
        "end_line": 20,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/word_order_checker.ml"
      },
      {
        "hash": "535a0b9d2b97d97c48f81ee561c335e1",
        "text": "List.iter\n(fun rule ->\nif\ntry\nlet _ = Str.search_forward (Str.regexp rule.pattern) code 0 in\ntrue\nwith Not_found -> false\nthen\nlet violation = ImproperWordOrder (rule.pattern, rule.description, rule.suggestion) in\nlet result =",
        "lines": [
          "List.iter",
          "(fun rule ->",
          "if",
          "try",
          "let _ = Str.search_forward (Str.regexp rule.pattern) code 0 in",
          "true",
          "with Not_found -> false",
          "then",
          "let violation = ImproperWordOrder (rule.pattern, rule.description, rule.suggestion) in",
          "let result ="
        ],
        "start_line": 40,
        "end_line": 49,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/word_order_checker.ml"
      },
      {
        "hash": "535a0b9d2b97d97c48f81ee561c335e1",
        "text": "List.iter\n(fun rule ->\nif\ntry\nlet _ = Str.search_forward (Str.regexp rule.pattern) code 0 in\ntrue\nwith Not_found -> false\nthen\nlet violation = ImproperWordOrder (rule.pattern, rule.description, rule.suggestion) in\nlet result =",
        "lines": [
          "List.iter",
          "(fun rule ->",
          "if",
          "try",
          "let _ = Str.search_forward (Str.regexp rule.pattern) code 0 in",
          "true",
          "with Not_found -> false",
          "then",
          "let violation = ImproperWordOrder (rule.pattern, rule.description, rule.suggestion) in",
          "let result ="
        ],
        "start_line": 72,
        "end_line": 81,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/word_order_checker.ml"
      }
    ],
    "a730d40e95941acbeda4ce929ecf4029": [
      {
        "hash": "a730d40e95941acbeda4ce929ecf4029",
        "text": "(fun rule ->\nif\ntry\nlet _ = Str.search_forward (Str.regexp rule.pattern) code 0 in\ntrue\nwith Not_found -> false\nthen\nlet violation = ImproperWordOrder (rule.pattern, rule.description, rule.suggestion) in\nlet result =\n{",
        "lines": [
          "(fun rule ->",
          "if",
          "try",
          "let _ = Str.search_forward (Str.regexp rule.pattern) code 0 in",
          "true",
          "with Not_found -> false",
          "then",
          "let violation = ImproperWordOrder (rule.pattern, rule.description, rule.suggestion) in",
          "let result =",
          "{"
        ],
        "start_line": 12,
        "end_line": 21,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/word_order_checker.ml"
      },
      {
        "hash": "a730d40e95941acbeda4ce929ecf4029",
        "text": "(fun rule ->\nif\ntry\nlet _ = Str.search_forward (Str.regexp rule.pattern) code 0 in\ntrue\nwith Not_found -> false\nthen\nlet violation = ImproperWordOrder (rule.pattern, rule.description, rule.suggestion) in\nlet result =\n{",
        "lines": [
          "(fun rule ->",
          "if",
          "try",
          "let _ = Str.search_forward (Str.regexp rule.pattern) code 0 in",
          "true",
          "with Not_found -> false",
          "then",
          "let violation = ImproperWordOrder (rule.pattern, rule.description, rule.suggestion) in",
          "let result =",
          "{"
        ],
        "start_line": 41,
        "end_line": 50,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/word_order_checker.ml"
      },
      {
        "hash": "a730d40e95941acbeda4ce929ecf4029",
        "text": "(fun rule ->\nif\ntry\nlet _ = Str.search_forward (Str.regexp rule.pattern) code 0 in\ntrue\nwith Not_found -> false\nthen\nlet violation = ImproperWordOrder (rule.pattern, rule.description, rule.suggestion) in\nlet result =\n{",
        "lines": [
          "(fun rule ->",
          "if",
          "try",
          "let _ = Str.search_forward (Str.regexp rule.pattern) code 0 in",
          "true",
          "with Not_found -> false",
          "then",
          "let violation = ImproperWordOrder (rule.pattern, rule.description, rule.suggestion) in",
          "let result =",
          "{"
        ],
        "start_line": 73,
        "end_line": 82,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/word_order_checker.ml"
      }
    ],
    "44afc676f4bb7a761e32e7ec997153bc": [
      {
        "hash": "44afc676f4bb7a761e32e7ec997153bc",
        "text": "if\ntry\nlet _ = Str.search_forward (Str.regexp rule.pattern) code 0 in\ntrue\nwith Not_found -> false\nthen\nlet violation = ImproperWordOrder (rule.pattern, rule.description, rule.suggestion) in\nlet result =\n{\nviolation;",
        "lines": [
          "if",
          "try",
          "let _ = Str.search_forward (Str.regexp rule.pattern) code 0 in",
          "true",
          "with Not_found -> false",
          "then",
          "let violation = ImproperWordOrder (rule.pattern, rule.description, rule.suggestion) in",
          "let result =",
          "{",
          "violation;"
        ],
        "start_line": 13,
        "end_line": 22,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/word_order_checker.ml"
      },
      {
        "hash": "44afc676f4bb7a761e32e7ec997153bc",
        "text": "if\ntry\nlet _ = Str.search_forward (Str.regexp rule.pattern) code 0 in\ntrue\nwith Not_found -> false\nthen\nlet violation = ImproperWordOrder (rule.pattern, rule.description, rule.suggestion) in\nlet result =\n{\nviolation;",
        "lines": [
          "if",
          "try",
          "let _ = Str.search_forward (Str.regexp rule.pattern) code 0 in",
          "true",
          "with Not_found -> false",
          "then",
          "let violation = ImproperWordOrder (rule.pattern, rule.description, rule.suggestion) in",
          "let result =",
          "{",
          "violation;"
        ],
        "start_line": 42,
        "end_line": 51,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/word_order_checker.ml"
      },
      {
        "hash": "44afc676f4bb7a761e32e7ec997153bc",
        "text": "if\ntry\nlet _ = Str.search_forward (Str.regexp rule.pattern) code 0 in\ntrue\nwith Not_found -> false\nthen\nlet violation = ImproperWordOrder (rule.pattern, rule.description, rule.suggestion) in\nlet result =\n{\nviolation;",
        "lines": [
          "if",
          "try",
          "let _ = Str.search_forward (Str.regexp rule.pattern) code 0 in",
          "true",
          "with Not_found -> false",
          "then",
          "let violation = ImproperWordOrder (rule.pattern, rule.description, rule.suggestion) in",
          "let result =",
          "{",
          "violation;"
        ],
        "start_line": 74,
        "end_line": 83,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/word_order_checker.ml"
      }
    ],
    "a17c2bcac327df30ebe0c0ee70dd17ed": [
      {
        "hash": "a17c2bcac327df30ebe0c0ee70dd17ed",
        "text": "try\nlet _ = Str.search_forward (Str.regexp rule.pattern) code 0 in\ntrue\nwith Not_found -> false\nthen\nlet violation = ImproperWordOrder (rule.pattern, rule.description, rule.suggestion) in\nlet result =\n{\nviolation;\nseverity = rule.severity;",
        "lines": [
          "try",
          "let _ = Str.search_forward (Str.regexp rule.pattern) code 0 in",
          "true",
          "with Not_found -> false",
          "then",
          "let violation = ImproperWordOrder (rule.pattern, rule.description, rule.suggestion) in",
          "let result =",
          "{",
          "violation;",
          "severity = rule.severity;"
        ],
        "start_line": 14,
        "end_line": 23,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/word_order_checker.ml"
      },
      {
        "hash": "a17c2bcac327df30ebe0c0ee70dd17ed",
        "text": "try\nlet _ = Str.search_forward (Str.regexp rule.pattern) code 0 in\ntrue\nwith Not_found -> false\nthen\nlet violation = ImproperWordOrder (rule.pattern, rule.description, rule.suggestion) in\nlet result =\n{\nviolation;\nseverity = rule.severity;",
        "lines": [
          "try",
          "let _ = Str.search_forward (Str.regexp rule.pattern) code 0 in",
          "true",
          "with Not_found -> false",
          "then",
          "let violation = ImproperWordOrder (rule.pattern, rule.description, rule.suggestion) in",
          "let result =",
          "{",
          "violation;",
          "severity = rule.severity;"
        ],
        "start_line": 43,
        "end_line": 52,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/word_order_checker.ml"
      },
      {
        "hash": "a17c2bcac327df30ebe0c0ee70dd17ed",
        "text": "try\nlet _ = Str.search_forward (Str.regexp rule.pattern) code 0 in\ntrue\nwith Not_found -> false\nthen\nlet violation = ImproperWordOrder (rule.pattern, rule.description, rule.suggestion) in\nlet result =\n{\nviolation;\nseverity = rule.severity;",
        "lines": [
          "try",
          "let _ = Str.search_forward (Str.regexp rule.pattern) code 0 in",
          "true",
          "with Not_found -> false",
          "then",
          "let violation = ImproperWordOrder (rule.pattern, rule.description, rule.suggestion) in",
          "let result =",
          "{",
          "violation;",
          "severity = rule.severity;"
        ],
        "start_line": 75,
        "end_line": 84,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/word_order_checker.ml"
      }
    ],
    "c1561bff30f9e7850a2ad06b1f12c68a": [
      {
        "hash": "c1561bff30f9e7850a2ad06b1f12c68a",
        "text": "let _ = Str.search_forward (Str.regexp rule.pattern) code 0 in\ntrue\nwith Not_found -> false\nthen\nlet violation = ImproperWordOrder (rule.pattern, rule.description, rule.suggestion) in\nlet result =\n{\nviolation;\nseverity = rule.severity;\nmessage = \"语序问题: \" ^ rule.description;",
        "lines": [
          "let _ = Str.search_forward (Str.regexp rule.pattern) code 0 in",
          "true",
          "with Not_found -> false",
          "then",
          "let violation = ImproperWordOrder (rule.pattern, rule.description, rule.suggestion) in",
          "let result =",
          "{",
          "violation;",
          "severity = rule.severity;",
          "message = \"语序问题: \" ^ rule.description;"
        ],
        "start_line": 15,
        "end_line": 24,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/word_order_checker.ml"
      },
      {
        "hash": "c1561bff30f9e7850a2ad06b1f12c68a",
        "text": "let _ = Str.search_forward (Str.regexp rule.pattern) code 0 in\ntrue\nwith Not_found -> false\nthen\nlet violation = ImproperWordOrder (rule.pattern, rule.description, rule.suggestion) in\nlet result =\n{\nviolation;\nseverity = rule.severity;\nmessage = \"语序问题: \" ^ rule.description;",
        "lines": [
          "let _ = Str.search_forward (Str.regexp rule.pattern) code 0 in",
          "true",
          "with Not_found -> false",
          "then",
          "let violation = ImproperWordOrder (rule.pattern, rule.description, rule.suggestion) in",
          "let result =",
          "{",
          "violation;",
          "severity = rule.severity;",
          "message = \"语序问题: \" ^ rule.description;"
        ],
        "start_line": 44,
        "end_line": 53,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/word_order_checker.ml"
      },
      {
        "hash": "c1561bff30f9e7850a2ad06b1f12c68a",
        "text": "let _ = Str.search_forward (Str.regexp rule.pattern) code 0 in\ntrue\nwith Not_found -> false\nthen\nlet violation = ImproperWordOrder (rule.pattern, rule.description, rule.suggestion) in\nlet result =\n{\nviolation;\nseverity = rule.severity;\nmessage = \"语序问题: \" ^ rule.description;",
        "lines": [
          "let _ = Str.search_forward (Str.regexp rule.pattern) code 0 in",
          "true",
          "with Not_found -> false",
          "then",
          "let violation = ImproperWordOrder (rule.pattern, rule.description, rule.suggestion) in",
          "let result =",
          "{",
          "violation;",
          "severity = rule.severity;",
          "message = \"语序问题: \" ^ rule.description;"
        ],
        "start_line": 76,
        "end_line": 85,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/word_order_checker.ml"
      }
    ],
    "cfd2d594167e7b316e44625c2e0c0b01": [
      {
        "hash": "cfd2d594167e7b316e44625c2e0c0b01",
        "text": "true\nwith Not_found -> false\nthen\nlet violation = ImproperWordOrder (rule.pattern, rule.description, rule.suggestion) in\nlet result =\n{\nviolation;\nseverity = rule.severity;\nmessage = \"语序问题: \" ^ rule.description;\nsuggestion = \"建议改为: \" ^ rule.suggestion;",
        "lines": [
          "true",
          "with Not_found -> false",
          "then",
          "let violation = ImproperWordOrder (rule.pattern, rule.description, rule.suggestion) in",
          "let result =",
          "{",
          "violation;",
          "severity = rule.severity;",
          "message = \"语序问题: \" ^ rule.description;",
          "suggestion = \"建议改为: \" ^ rule.suggestion;"
        ],
        "start_line": 16,
        "end_line": 25,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/word_order_checker.ml"
      },
      {
        "hash": "cfd2d594167e7b316e44625c2e0c0b01",
        "text": "true\nwith Not_found -> false\nthen\nlet violation = ImproperWordOrder (rule.pattern, rule.description, rule.suggestion) in\nlet result =\n{\nviolation;\nseverity = rule.severity;\nmessage = \"语序问题: \" ^ rule.description;\nsuggestion = \"建议改为: \" ^ rule.suggestion;",
        "lines": [
          "true",
          "with Not_found -> false",
          "then",
          "let violation = ImproperWordOrder (rule.pattern, rule.description, rule.suggestion) in",
          "let result =",
          "{",
          "violation;",
          "severity = rule.severity;",
          "message = \"语序问题: \" ^ rule.description;",
          "suggestion = \"建议改为: \" ^ rule.suggestion;"
        ],
        "start_line": 45,
        "end_line": 54,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/word_order_checker.ml"
      },
      {
        "hash": "cfd2d594167e7b316e44625c2e0c0b01",
        "text": "true\nwith Not_found -> false\nthen\nlet violation = ImproperWordOrder (rule.pattern, rule.description, rule.suggestion) in\nlet result =\n{\nviolation;\nseverity = rule.severity;\nmessage = \"语序问题: \" ^ rule.description;\nsuggestion = \"建议改为: \" ^ rule.suggestion;",
        "lines": [
          "true",
          "with Not_found -> false",
          "then",
          "let violation = ImproperWordOrder (rule.pattern, rule.description, rule.suggestion) in",
          "let result =",
          "{",
          "violation;",
          "severity = rule.severity;",
          "message = \"语序问题: \" ^ rule.description;",
          "suggestion = \"建议改为: \" ^ rule.suggestion;"
        ],
        "start_line": 77,
        "end_line": 86,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/word_order_checker.ml"
      }
    ],
    "e7041a19aa544abcd1f831ea13814634": [
      {
        "hash": "e7041a19aa544abcd1f831ea13814634",
        "text": "with Not_found -> false\nthen\nlet violation = ImproperWordOrder (rule.pattern, rule.description, rule.suggestion) in\nlet result =\n{\nviolation;\nseverity = rule.severity;\nmessage = \"语序问题: \" ^ rule.description;\nsuggestion = \"建议改为: \" ^ rule.suggestion;\nconfidence = 0.7;",
        "lines": [
          "with Not_found -> false",
          "then",
          "let violation = ImproperWordOrder (rule.pattern, rule.description, rule.suggestion) in",
          "let result =",
          "{",
          "violation;",
          "severity = rule.severity;",
          "message = \"语序问题: \" ^ rule.description;",
          "suggestion = \"建议改为: \" ^ rule.suggestion;",
          "confidence = 0.7;"
        ],
        "start_line": 17,
        "end_line": 26,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/word_order_checker.ml"
      },
      {
        "hash": "e7041a19aa544abcd1f831ea13814634",
        "text": "with Not_found -> false\nthen\nlet violation = ImproperWordOrder (rule.pattern, rule.description, rule.suggestion) in\nlet result =\n{\nviolation;\nseverity = rule.severity;\nmessage = \"语序问题: \" ^ rule.description;\nsuggestion = \"建议改为: \" ^ rule.suggestion;\nconfidence = 0.7;",
        "lines": [
          "with Not_found -> false",
          "then",
          "let violation = ImproperWordOrder (rule.pattern, rule.description, rule.suggestion) in",
          "let result =",
          "{",
          "violation;",
          "severity = rule.severity;",
          "message = \"语序问题: \" ^ rule.description;",
          "suggestion = \"建议改为: \" ^ rule.suggestion;",
          "confidence = 0.7;"
        ],
        "start_line": 46,
        "end_line": 55,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/word_order_checker.ml"
      },
      {
        "hash": "e7041a19aa544abcd1f831ea13814634",
        "text": "with Not_found -> false\nthen\nlet violation = ImproperWordOrder (rule.pattern, rule.description, rule.suggestion) in\nlet result =\n{\nviolation;\nseverity = rule.severity;\nmessage = \"语序问题: \" ^ rule.description;\nsuggestion = \"建议改为: \" ^ rule.suggestion;\nconfidence = 0.7;",
        "lines": [
          "with Not_found -> false",
          "then",
          "let violation = ImproperWordOrder (rule.pattern, rule.description, rule.suggestion) in",
          "let result =",
          "{",
          "violation;",
          "severity = rule.severity;",
          "message = \"语序问题: \" ^ rule.description;",
          "suggestion = \"建议改为: \" ^ rule.suggestion;",
          "confidence = 0.7;"
        ],
        "start_line": 78,
        "end_line": 87,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/word_order_checker.ml"
      }
    ],
    "ed356d0d76db304aceb9a89f984146a6": [
      {
        "hash": "ed356d0d76db304aceb9a89f984146a6",
        "text": "then\nlet violation = ImproperWordOrder (rule.pattern, rule.description, rule.suggestion) in\nlet result =\n{\nviolation;\nseverity = rule.severity;\nmessage = \"语序问题: \" ^ rule.description;\nsuggestion = \"建议改为: \" ^ rule.suggestion;\nconfidence = 0.7;\nai_friendly = true;",
        "lines": [
          "then",
          "let violation = ImproperWordOrder (rule.pattern, rule.description, rule.suggestion) in",
          "let result =",
          "{",
          "violation;",
          "severity = rule.severity;",
          "message = \"语序问题: \" ^ rule.description;",
          "suggestion = \"建议改为: \" ^ rule.suggestion;",
          "confidence = 0.7;",
          "ai_friendly = true;"
        ],
        "start_line": 18,
        "end_line": 27,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/word_order_checker.ml"
      },
      {
        "hash": "ed356d0d76db304aceb9a89f984146a6",
        "text": "then\nlet violation = ImproperWordOrder (rule.pattern, rule.description, rule.suggestion) in\nlet result =\n{\nviolation;\nseverity = rule.severity;\nmessage = \"语序问题: \" ^ rule.description;\nsuggestion = \"建议改为: \" ^ rule.suggestion;\nconfidence = 0.7;\nai_friendly = true;",
        "lines": [
          "then",
          "let violation = ImproperWordOrder (rule.pattern, rule.description, rule.suggestion) in",
          "let result =",
          "{",
          "violation;",
          "severity = rule.severity;",
          "message = \"语序问题: \" ^ rule.description;",
          "suggestion = \"建议改为: \" ^ rule.suggestion;",
          "confidence = 0.7;",
          "ai_friendly = true;"
        ],
        "start_line": 47,
        "end_line": 56,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/word_order_checker.ml"
      },
      {
        "hash": "ed356d0d76db304aceb9a89f984146a6",
        "text": "then\nlet violation = ImproperWordOrder (rule.pattern, rule.description, rule.suggestion) in\nlet result =\n{\nviolation;\nseverity = rule.severity;\nmessage = \"语序问题: \" ^ rule.description;\nsuggestion = \"建议改为: \" ^ rule.suggestion;\nconfidence = 0.7;\nai_friendly = true;",
        "lines": [
          "then",
          "let violation = ImproperWordOrder (rule.pattern, rule.description, rule.suggestion) in",
          "let result =",
          "{",
          "violation;",
          "severity = rule.severity;",
          "message = \"语序问题: \" ^ rule.description;",
          "suggestion = \"建议改为: \" ^ rule.suggestion;",
          "confidence = 0.7;",
          "ai_friendly = true;"
        ],
        "start_line": 79,
        "end_line": 88,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/word_order_checker.ml"
      }
    ],
    "9fd159e1a55802604ab15a3a36c03244": [
      {
        "hash": "9fd159e1a55802604ab15a3a36c03244",
        "text": "let violation = ImproperWordOrder (rule.pattern, rule.description, rule.suggestion) in\nlet result =\n{\nviolation;\nseverity = rule.severity;\nmessage = \"语序问题: \" ^ rule.description;\nsuggestion = \"建议改为: \" ^ rule.suggestion;\nconfidence = 0.7;\nai_friendly = true;\n}",
        "lines": [
          "let violation = ImproperWordOrder (rule.pattern, rule.description, rule.suggestion) in",
          "let result =",
          "{",
          "violation;",
          "severity = rule.severity;",
          "message = \"语序问题: \" ^ rule.description;",
          "suggestion = \"建议改为: \" ^ rule.suggestion;",
          "confidence = 0.7;",
          "ai_friendly = true;",
          "}"
        ],
        "start_line": 19,
        "end_line": 28,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/word_order_checker.ml"
      },
      {
        "hash": "9fd159e1a55802604ab15a3a36c03244",
        "text": "let violation = ImproperWordOrder (rule.pattern, rule.description, rule.suggestion) in\nlet result =\n{\nviolation;\nseverity = rule.severity;\nmessage = \"语序问题: \" ^ rule.description;\nsuggestion = \"建议改为: \" ^ rule.suggestion;\nconfidence = 0.7;\nai_friendly = true;\n}",
        "lines": [
          "let violation = ImproperWordOrder (rule.pattern, rule.description, rule.suggestion) in",
          "let result =",
          "{",
          "violation;",
          "severity = rule.severity;",
          "message = \"语序问题: \" ^ rule.description;",
          "suggestion = \"建议改为: \" ^ rule.suggestion;",
          "confidence = 0.7;",
          "ai_friendly = true;",
          "}"
        ],
        "start_line": 48,
        "end_line": 57,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/word_order_checker.ml"
      },
      {
        "hash": "9fd159e1a55802604ab15a3a36c03244",
        "text": "let violation = ImproperWordOrder (rule.pattern, rule.description, rule.suggestion) in\nlet result =\n{\nviolation;\nseverity = rule.severity;\nmessage = \"语序问题: \" ^ rule.description;\nsuggestion = \"建议改为: \" ^ rule.suggestion;\nconfidence = 0.7;\nai_friendly = true;\n}",
        "lines": [
          "let violation = ImproperWordOrder (rule.pattern, rule.description, rule.suggestion) in",
          "let result =",
          "{",
          "violation;",
          "severity = rule.severity;",
          "message = \"语序问题: \" ^ rule.description;",
          "suggestion = \"建议改为: \" ^ rule.suggestion;",
          "confidence = 0.7;",
          "ai_friendly = true;",
          "}"
        ],
        "start_line": 80,
        "end_line": 89,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/word_order_checker.ml"
      }
    ],
    "6048de38e149f24bf5bc6f1e84e24659": [
      {
        "hash": "6048de38e149f24bf5bc6f1e84e24659",
        "text": "let result =\n{\nviolation;\nseverity = rule.severity;\nmessage = \"语序问题: \" ^ rule.description;\nsuggestion = \"建议改为: \" ^ rule.suggestion;\nconfidence = 0.7;\nai_friendly = true;\n}\nin",
        "lines": [
          "let result =",
          "{",
          "violation;",
          "severity = rule.severity;",
          "message = \"语序问题: \" ^ rule.description;",
          "suggestion = \"建议改为: \" ^ rule.suggestion;",
          "confidence = 0.7;",
          "ai_friendly = true;",
          "}",
          "in"
        ],
        "start_line": 20,
        "end_line": 29,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/word_order_checker.ml"
      },
      {
        "hash": "6048de38e149f24bf5bc6f1e84e24659",
        "text": "let result =\n{\nviolation;\nseverity = rule.severity;\nmessage = \"语序问题: \" ^ rule.description;\nsuggestion = \"建议改为: \" ^ rule.suggestion;\nconfidence = 0.7;\nai_friendly = true;\n}\nin",
        "lines": [
          "let result =",
          "{",
          "violation;",
          "severity = rule.severity;",
          "message = \"语序问题: \" ^ rule.description;",
          "suggestion = \"建议改为: \" ^ rule.suggestion;",
          "confidence = 0.7;",
          "ai_friendly = true;",
          "}",
          "in"
        ],
        "start_line": 49,
        "end_line": 58,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/word_order_checker.ml"
      },
      {
        "hash": "6048de38e149f24bf5bc6f1e84e24659",
        "text": "let result =\n{\nviolation;\nseverity = rule.severity;\nmessage = \"语序问题: \" ^ rule.description;\nsuggestion = \"建议改为: \" ^ rule.suggestion;\nconfidence = 0.7;\nai_friendly = true;\n}\nin",
        "lines": [
          "let result =",
          "{",
          "violation;",
          "severity = rule.severity;",
          "message = \"语序问题: \" ^ rule.description;",
          "suggestion = \"建议改为: \" ^ rule.suggestion;",
          "confidence = 0.7;",
          "ai_friendly = true;",
          "}",
          "in"
        ],
        "start_line": 81,
        "end_line": 90,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/word_order_checker.ml"
      }
    ],
    "3b8bdf0f25628509613ad4c855022087": [
      {
        "hash": "3b8bdf0f25628509613ad4c855022087",
        "text": "{\nviolation;\nseverity = rule.severity;\nmessage = \"语序问题: \" ^ rule.description;\nsuggestion = \"建议改为: \" ^ rule.suggestion;\nconfidence = 0.7;\nai_friendly = true;\n}\nin\nviolations := result :: !violations)",
        "lines": [
          "{",
          "violation;",
          "severity = rule.severity;",
          "message = \"语序问题: \" ^ rule.description;",
          "suggestion = \"建议改为: \" ^ rule.suggestion;",
          "confidence = 0.7;",
          "ai_friendly = true;",
          "}",
          "in",
          "violations := result :: !violations)"
        ],
        "start_line": 21,
        "end_line": 30,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/word_order_checker.ml"
      },
      {
        "hash": "3b8bdf0f25628509613ad4c855022087",
        "text": "{\nviolation;\nseverity = rule.severity;\nmessage = \"语序问题: \" ^ rule.description;\nsuggestion = \"建议改为: \" ^ rule.suggestion;\nconfidence = 0.7;\nai_friendly = true;\n}\nin\nviolations := result :: !violations)",
        "lines": [
          "{",
          "violation;",
          "severity = rule.severity;",
          "message = \"语序问题: \" ^ rule.description;",
          "suggestion = \"建议改为: \" ^ rule.suggestion;",
          "confidence = 0.7;",
          "ai_friendly = true;",
          "}",
          "in",
          "violations := result :: !violations)"
        ],
        "start_line": 50,
        "end_line": 59,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/word_order_checker.ml"
      },
      {
        "hash": "3b8bdf0f25628509613ad4c855022087",
        "text": "{\nviolation;\nseverity = rule.severity;\nmessage = \"语序问题: \" ^ rule.description;\nsuggestion = \"建议改为: \" ^ rule.suggestion;\nconfidence = 0.7;\nai_friendly = true;\n}\nin\nviolations := result :: !violations)",
        "lines": [
          "{",
          "violation;",
          "severity = rule.severity;",
          "message = \"语序问题: \" ^ rule.description;",
          "suggestion = \"建议改为: \" ^ rule.suggestion;",
          "confidence = 0.7;",
          "ai_friendly = true;",
          "}",
          "in",
          "violations := result :: !violations)"
        ],
        "start_line": 82,
        "end_line": 91,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/word_order_checker.ml"
      }
    ],
    "76c0020dea80e90edc5830848068aa5d": [
      {
        "hash": "76c0020dea80e90edc5830848068aa5d",
        "text": "List.iter\n(fun rule ->\nif\ntry\nlet _ = Str.search_forward (Str.regexp rule.pattern) code 0 in\ntrue\nwith Not_found -> false\nthen\nlet violation = MixedLanguage (rule.pattern, rule.description, rule.suggestion) in\nlet result =",
        "lines": [
          "List.iter",
          "(fun rule ->",
          "if",
          "try",
          "let _ = Str.search_forward (Str.regexp rule.pattern) code 0 in",
          "true",
          "with Not_found -> false",
          "then",
          "let violation = MixedLanguage (rule.pattern, rule.description, rule.suggestion) in",
          "let result ="
        ],
        "start_line": 11,
        "end_line": 20,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/mixed_language_checker.ml"
      },
      {
        "hash": "76c0020dea80e90edc5830848068aa5d",
        "text": "List.iter\n(fun rule ->\nif\ntry\nlet _ = Str.search_forward (Str.regexp rule.pattern) code 0 in\ntrue\nwith Not_found -> false\nthen\nlet violation = MixedLanguage (rule.pattern, rule.description, rule.suggestion) in\nlet result =",
        "lines": [
          "List.iter",
          "(fun rule ->",
          "if",
          "try",
          "let _ = Str.search_forward (Str.regexp rule.pattern) code 0 in",
          "true",
          "with Not_found -> false",
          "then",
          "let violation = MixedLanguage (rule.pattern, rule.description, rule.suggestion) in",
          "let result ="
        ],
        "start_line": 40,
        "end_line": 49,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/mixed_language_checker.ml"
      },
      {
        "hash": "76c0020dea80e90edc5830848068aa5d",
        "text": "List.iter\n(fun rule ->\nif\ntry\nlet _ = Str.search_forward (Str.regexp rule.pattern) code 0 in\ntrue\nwith Not_found -> false\nthen\nlet violation = MixedLanguage (rule.pattern, rule.description, rule.suggestion) in\nlet result =",
        "lines": [
          "List.iter",
          "(fun rule ->",
          "if",
          "try",
          "let _ = Str.search_forward (Str.regexp rule.pattern) code 0 in",
          "true",
          "with Not_found -> false",
          "then",
          "let violation = MixedLanguage (rule.pattern, rule.description, rule.suggestion) in",
          "let result ="
        ],
        "start_line": 72,
        "end_line": 81,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/mixed_language_checker.ml"
      }
    ],
    "11fe079aca0c1b155cf9dee77bcac1f5": [
      {
        "hash": "11fe079aca0c1b155cf9dee77bcac1f5",
        "text": "(fun rule ->\nif\ntry\nlet _ = Str.search_forward (Str.regexp rule.pattern) code 0 in\ntrue\nwith Not_found -> false\nthen\nlet violation = MixedLanguage (rule.pattern, rule.description, rule.suggestion) in\nlet result =\n{",
        "lines": [
          "(fun rule ->",
          "if",
          "try",
          "let _ = Str.search_forward (Str.regexp rule.pattern) code 0 in",
          "true",
          "with Not_found -> false",
          "then",
          "let violation = MixedLanguage (rule.pattern, rule.description, rule.suggestion) in",
          "let result =",
          "{"
        ],
        "start_line": 12,
        "end_line": 21,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/mixed_language_checker.ml"
      },
      {
        "hash": "11fe079aca0c1b155cf9dee77bcac1f5",
        "text": "(fun rule ->\nif\ntry\nlet _ = Str.search_forward (Str.regexp rule.pattern) code 0 in\ntrue\nwith Not_found -> false\nthen\nlet violation = MixedLanguage (rule.pattern, rule.description, rule.suggestion) in\nlet result =\n{",
        "lines": [
          "(fun rule ->",
          "if",
          "try",
          "let _ = Str.search_forward (Str.regexp rule.pattern) code 0 in",
          "true",
          "with Not_found -> false",
          "then",
          "let violation = MixedLanguage (rule.pattern, rule.description, rule.suggestion) in",
          "let result =",
          "{"
        ],
        "start_line": 41,
        "end_line": 50,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/mixed_language_checker.ml"
      },
      {
        "hash": "11fe079aca0c1b155cf9dee77bcac1f5",
        "text": "(fun rule ->\nif\ntry\nlet _ = Str.search_forward (Str.regexp rule.pattern) code 0 in\ntrue\nwith Not_found -> false\nthen\nlet violation = MixedLanguage (rule.pattern, rule.description, rule.suggestion) in\nlet result =\n{",
        "lines": [
          "(fun rule ->",
          "if",
          "try",
          "let _ = Str.search_forward (Str.regexp rule.pattern) code 0 in",
          "true",
          "with Not_found -> false",
          "then",
          "let violation = MixedLanguage (rule.pattern, rule.description, rule.suggestion) in",
          "let result =",
          "{"
        ],
        "start_line": 73,
        "end_line": 82,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/mixed_language_checker.ml"
      }
    ],
    "7c43fa1f4f335857138e59aae5eb5ab3": [
      {
        "hash": "7c43fa1f4f335857138e59aae5eb5ab3",
        "text": "if\ntry\nlet _ = Str.search_forward (Str.regexp rule.pattern) code 0 in\ntrue\nwith Not_found -> false\nthen\nlet violation = MixedLanguage (rule.pattern, rule.description, rule.suggestion) in\nlet result =\n{\nviolation;",
        "lines": [
          "if",
          "try",
          "let _ = Str.search_forward (Str.regexp rule.pattern) code 0 in",
          "true",
          "with Not_found -> false",
          "then",
          "let violation = MixedLanguage (rule.pattern, rule.description, rule.suggestion) in",
          "let result =",
          "{",
          "violation;"
        ],
        "start_line": 13,
        "end_line": 22,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/mixed_language_checker.ml"
      },
      {
        "hash": "7c43fa1f4f335857138e59aae5eb5ab3",
        "text": "if\ntry\nlet _ = Str.search_forward (Str.regexp rule.pattern) code 0 in\ntrue\nwith Not_found -> false\nthen\nlet violation = MixedLanguage (rule.pattern, rule.description, rule.suggestion) in\nlet result =\n{\nviolation;",
        "lines": [
          "if",
          "try",
          "let _ = Str.search_forward (Str.regexp rule.pattern) code 0 in",
          "true",
          "with Not_found -> false",
          "then",
          "let violation = MixedLanguage (rule.pattern, rule.description, rule.suggestion) in",
          "let result =",
          "{",
          "violation;"
        ],
        "start_line": 42,
        "end_line": 51,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/mixed_language_checker.ml"
      },
      {
        "hash": "7c43fa1f4f335857138e59aae5eb5ab3",
        "text": "if\ntry\nlet _ = Str.search_forward (Str.regexp rule.pattern) code 0 in\ntrue\nwith Not_found -> false\nthen\nlet violation = MixedLanguage (rule.pattern, rule.description, rule.suggestion) in\nlet result =\n{\nviolation;",
        "lines": [
          "if",
          "try",
          "let _ = Str.search_forward (Str.regexp rule.pattern) code 0 in",
          "true",
          "with Not_found -> false",
          "then",
          "let violation = MixedLanguage (rule.pattern, rule.description, rule.suggestion) in",
          "let result =",
          "{",
          "violation;"
        ],
        "start_line": 74,
        "end_line": 83,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/mixed_language_checker.ml"
      }
    ],
    "b6744ccb42ab62685af7a0606f16c50b": [
      {
        "hash": "b6744ccb42ab62685af7a0606f16c50b",
        "text": "try\nlet _ = Str.search_forward (Str.regexp rule.pattern) code 0 in\ntrue\nwith Not_found -> false\nthen\nlet violation = MixedLanguage (rule.pattern, rule.description, rule.suggestion) in\nlet result =\n{\nviolation;\nseverity = rule.severity;",
        "lines": [
          "try",
          "let _ = Str.search_forward (Str.regexp rule.pattern) code 0 in",
          "true",
          "with Not_found -> false",
          "then",
          "let violation = MixedLanguage (rule.pattern, rule.description, rule.suggestion) in",
          "let result =",
          "{",
          "violation;",
          "severity = rule.severity;"
        ],
        "start_line": 14,
        "end_line": 23,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/mixed_language_checker.ml"
      },
      {
        "hash": "b6744ccb42ab62685af7a0606f16c50b",
        "text": "try\nlet _ = Str.search_forward (Str.regexp rule.pattern) code 0 in\ntrue\nwith Not_found -> false\nthen\nlet violation = MixedLanguage (rule.pattern, rule.description, rule.suggestion) in\nlet result =\n{\nviolation;\nseverity = rule.severity;",
        "lines": [
          "try",
          "let _ = Str.search_forward (Str.regexp rule.pattern) code 0 in",
          "true",
          "with Not_found -> false",
          "then",
          "let violation = MixedLanguage (rule.pattern, rule.description, rule.suggestion) in",
          "let result =",
          "{",
          "violation;",
          "severity = rule.severity;"
        ],
        "start_line": 43,
        "end_line": 52,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/mixed_language_checker.ml"
      },
      {
        "hash": "b6744ccb42ab62685af7a0606f16c50b",
        "text": "try\nlet _ = Str.search_forward (Str.regexp rule.pattern) code 0 in\ntrue\nwith Not_found -> false\nthen\nlet violation = MixedLanguage (rule.pattern, rule.description, rule.suggestion) in\nlet result =\n{\nviolation;\nseverity = rule.severity;",
        "lines": [
          "try",
          "let _ = Str.search_forward (Str.regexp rule.pattern) code 0 in",
          "true",
          "with Not_found -> false",
          "then",
          "let violation = MixedLanguage (rule.pattern, rule.description, rule.suggestion) in",
          "let result =",
          "{",
          "violation;",
          "severity = rule.severity;"
        ],
        "start_line": 75,
        "end_line": 84,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/mixed_language_checker.ml"
      }
    ],
    "9d576d5bd695fe57021d32f01a163768": [
      {
        "hash": "9d576d5bd695fe57021d32f01a163768",
        "text": "let _ = Str.search_forward (Str.regexp rule.pattern) code 0 in\ntrue\nwith Not_found -> false\nthen\nlet violation = MixedLanguage (rule.pattern, rule.description, rule.suggestion) in\nlet result =\n{\nviolation;\nseverity = rule.severity;\nmessage = \"检测到中英文混用: \" ^ rule.description;",
        "lines": [
          "let _ = Str.search_forward (Str.regexp rule.pattern) code 0 in",
          "true",
          "with Not_found -> false",
          "then",
          "let violation = MixedLanguage (rule.pattern, rule.description, rule.suggestion) in",
          "let result =",
          "{",
          "violation;",
          "severity = rule.severity;",
          "message = \"检测到中英文混用: \" ^ rule.description;"
        ],
        "start_line": 15,
        "end_line": 24,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/mixed_language_checker.ml"
      },
      {
        "hash": "9d576d5bd695fe57021d32f01a163768",
        "text": "let _ = Str.search_forward (Str.regexp rule.pattern) code 0 in\ntrue\nwith Not_found -> false\nthen\nlet violation = MixedLanguage (rule.pattern, rule.description, rule.suggestion) in\nlet result =\n{\nviolation;\nseverity = rule.severity;\nmessage = \"检测到中英文混用: \" ^ rule.description;",
        "lines": [
          "let _ = Str.search_forward (Str.regexp rule.pattern) code 0 in",
          "true",
          "with Not_found -> false",
          "then",
          "let violation = MixedLanguage (rule.pattern, rule.description, rule.suggestion) in",
          "let result =",
          "{",
          "violation;",
          "severity = rule.severity;",
          "message = \"检测到中英文混用: \" ^ rule.description;"
        ],
        "start_line": 44,
        "end_line": 53,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/mixed_language_checker.ml"
      },
      {
        "hash": "9d576d5bd695fe57021d32f01a163768",
        "text": "let _ = Str.search_forward (Str.regexp rule.pattern) code 0 in\ntrue\nwith Not_found -> false\nthen\nlet violation = MixedLanguage (rule.pattern, rule.description, rule.suggestion) in\nlet result =\n{\nviolation;\nseverity = rule.severity;\nmessage = \"检测到中英文混用: \" ^ rule.description;",
        "lines": [
          "let _ = Str.search_forward (Str.regexp rule.pattern) code 0 in",
          "true",
          "with Not_found -> false",
          "then",
          "let violation = MixedLanguage (rule.pattern, rule.description, rule.suggestion) in",
          "let result =",
          "{",
          "violation;",
          "severity = rule.severity;",
          "message = \"检测到中英文混用: \" ^ rule.description;"
        ],
        "start_line": 76,
        "end_line": 85,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/mixed_language_checker.ml"
      }
    ],
    "a54c162601c624720fa9ddd5c6c8f11b": [
      {
        "hash": "a54c162601c624720fa9ddd5c6c8f11b",
        "text": "true\nwith Not_found -> false\nthen\nlet violation = MixedLanguage (rule.pattern, rule.description, rule.suggestion) in\nlet result =\n{\nviolation;\nseverity = rule.severity;\nmessage = \"检测到中英文混用: \" ^ rule.description;\nsuggestion = \"建议改为: \" ^ rule.suggestion;",
        "lines": [
          "true",
          "with Not_found -> false",
          "then",
          "let violation = MixedLanguage (rule.pattern, rule.description, rule.suggestion) in",
          "let result =",
          "{",
          "violation;",
          "severity = rule.severity;",
          "message = \"检测到中英文混用: \" ^ rule.description;",
          "suggestion = \"建议改为: \" ^ rule.suggestion;"
        ],
        "start_line": 16,
        "end_line": 25,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/mixed_language_checker.ml"
      },
      {
        "hash": "a54c162601c624720fa9ddd5c6c8f11b",
        "text": "true\nwith Not_found -> false\nthen\nlet violation = MixedLanguage (rule.pattern, rule.description, rule.suggestion) in\nlet result =\n{\nviolation;\nseverity = rule.severity;\nmessage = \"检测到中英文混用: \" ^ rule.description;\nsuggestion = \"建议改为: \" ^ rule.suggestion;",
        "lines": [
          "true",
          "with Not_found -> false",
          "then",
          "let violation = MixedLanguage (rule.pattern, rule.description, rule.suggestion) in",
          "let result =",
          "{",
          "violation;",
          "severity = rule.severity;",
          "message = \"检测到中英文混用: \" ^ rule.description;",
          "suggestion = \"建议改为: \" ^ rule.suggestion;"
        ],
        "start_line": 45,
        "end_line": 54,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/mixed_language_checker.ml"
      },
      {
        "hash": "a54c162601c624720fa9ddd5c6c8f11b",
        "text": "true\nwith Not_found -> false\nthen\nlet violation = MixedLanguage (rule.pattern, rule.description, rule.suggestion) in\nlet result =\n{\nviolation;\nseverity = rule.severity;\nmessage = \"检测到中英文混用: \" ^ rule.description;\nsuggestion = \"建议改为: \" ^ rule.suggestion;",
        "lines": [
          "true",
          "with Not_found -> false",
          "then",
          "let violation = MixedLanguage (rule.pattern, rule.description, rule.suggestion) in",
          "let result =",
          "{",
          "violation;",
          "severity = rule.severity;",
          "message = \"检测到中英文混用: \" ^ rule.description;",
          "suggestion = \"建议改为: \" ^ rule.suggestion;"
        ],
        "start_line": 77,
        "end_line": 86,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/mixed_language_checker.ml"
      }
    ],
    "7321960d2d783c2d7c30a5cf24dff8fb": [
      {
        "hash": "7321960d2d783c2d7c30a5cf24dff8fb",
        "text": "with Not_found -> false\nthen\nlet violation = MixedLanguage (rule.pattern, rule.description, rule.suggestion) in\nlet result =\n{\nviolation;\nseverity = rule.severity;\nmessage = \"检测到中英文混用: \" ^ rule.description;\nsuggestion = \"建议改为: \" ^ rule.suggestion;\nconfidence = 0.8;",
        "lines": [
          "with Not_found -> false",
          "then",
          "let violation = MixedLanguage (rule.pattern, rule.description, rule.suggestion) in",
          "let result =",
          "{",
          "violation;",
          "severity = rule.severity;",
          "message = \"检测到中英文混用: \" ^ rule.description;",
          "suggestion = \"建议改为: \" ^ rule.suggestion;",
          "confidence = 0.8;"
        ],
        "start_line": 17,
        "end_line": 26,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/mixed_language_checker.ml"
      },
      {
        "hash": "7321960d2d783c2d7c30a5cf24dff8fb",
        "text": "with Not_found -> false\nthen\nlet violation = MixedLanguage (rule.pattern, rule.description, rule.suggestion) in\nlet result =\n{\nviolation;\nseverity = rule.severity;\nmessage = \"检测到中英文混用: \" ^ rule.description;\nsuggestion = \"建议改为: \" ^ rule.suggestion;\nconfidence = 0.8;",
        "lines": [
          "with Not_found -> false",
          "then",
          "let violation = MixedLanguage (rule.pattern, rule.description, rule.suggestion) in",
          "let result =",
          "{",
          "violation;",
          "severity = rule.severity;",
          "message = \"检测到中英文混用: \" ^ rule.description;",
          "suggestion = \"建议改为: \" ^ rule.suggestion;",
          "confidence = 0.8;"
        ],
        "start_line": 46,
        "end_line": 55,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/mixed_language_checker.ml"
      },
      {
        "hash": "7321960d2d783c2d7c30a5cf24dff8fb",
        "text": "with Not_found -> false\nthen\nlet violation = MixedLanguage (rule.pattern, rule.description, rule.suggestion) in\nlet result =\n{\nviolation;\nseverity = rule.severity;\nmessage = \"检测到中英文混用: \" ^ rule.description;\nsuggestion = \"建议改为: \" ^ rule.suggestion;\nconfidence = 0.8;",
        "lines": [
          "with Not_found -> false",
          "then",
          "let violation = MixedLanguage (rule.pattern, rule.description, rule.suggestion) in",
          "let result =",
          "{",
          "violation;",
          "severity = rule.severity;",
          "message = \"检测到中英文混用: \" ^ rule.description;",
          "suggestion = \"建议改为: \" ^ rule.suggestion;",
          "confidence = 0.8;"
        ],
        "start_line": 78,
        "end_line": 87,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/mixed_language_checker.ml"
      }
    ],
    "50fb1aae4e4b85e4e23c1bae6bfff8bc": [
      {
        "hash": "50fb1aae4e4b85e4e23c1bae6bfff8bc",
        "text": "then\nlet violation = MixedLanguage (rule.pattern, rule.description, rule.suggestion) in\nlet result =\n{\nviolation;\nseverity = rule.severity;\nmessage = \"检测到中英文混用: \" ^ rule.description;\nsuggestion = \"建议改为: \" ^ rule.suggestion;\nconfidence = 0.8;\nai_friendly = true;",
        "lines": [
          "then",
          "let violation = MixedLanguage (rule.pattern, rule.description, rule.suggestion) in",
          "let result =",
          "{",
          "violation;",
          "severity = rule.severity;",
          "message = \"检测到中英文混用: \" ^ rule.description;",
          "suggestion = \"建议改为: \" ^ rule.suggestion;",
          "confidence = 0.8;",
          "ai_friendly = true;"
        ],
        "start_line": 18,
        "end_line": 27,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/mixed_language_checker.ml"
      },
      {
        "hash": "50fb1aae4e4b85e4e23c1bae6bfff8bc",
        "text": "then\nlet violation = MixedLanguage (rule.pattern, rule.description, rule.suggestion) in\nlet result =\n{\nviolation;\nseverity = rule.severity;\nmessage = \"检测到中英文混用: \" ^ rule.description;\nsuggestion = \"建议改为: \" ^ rule.suggestion;\nconfidence = 0.8;\nai_friendly = true;",
        "lines": [
          "then",
          "let violation = MixedLanguage (rule.pattern, rule.description, rule.suggestion) in",
          "let result =",
          "{",
          "violation;",
          "severity = rule.severity;",
          "message = \"检测到中英文混用: \" ^ rule.description;",
          "suggestion = \"建议改为: \" ^ rule.suggestion;",
          "confidence = 0.8;",
          "ai_friendly = true;"
        ],
        "start_line": 47,
        "end_line": 56,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/mixed_language_checker.ml"
      },
      {
        "hash": "50fb1aae4e4b85e4e23c1bae6bfff8bc",
        "text": "then\nlet violation = MixedLanguage (rule.pattern, rule.description, rule.suggestion) in\nlet result =\n{\nviolation;\nseverity = rule.severity;\nmessage = \"检测到中英文混用: \" ^ rule.description;\nsuggestion = \"建议改为: \" ^ rule.suggestion;\nconfidence = 0.8;\nai_friendly = true;",
        "lines": [
          "then",
          "let violation = MixedLanguage (rule.pattern, rule.description, rule.suggestion) in",
          "let result =",
          "{",
          "violation;",
          "severity = rule.severity;",
          "message = \"检测到中英文混用: \" ^ rule.description;",
          "suggestion = \"建议改为: \" ^ rule.suggestion;",
          "confidence = 0.8;",
          "ai_friendly = true;"
        ],
        "start_line": 79,
        "end_line": 88,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/mixed_language_checker.ml"
      }
    ],
    "4343947c02fd934eb239a52b632cb97a": [
      {
        "hash": "4343947c02fd934eb239a52b632cb97a",
        "text": "let violation = MixedLanguage (rule.pattern, rule.description, rule.suggestion) in\nlet result =\n{\nviolation;\nseverity = rule.severity;\nmessage = \"检测到中英文混用: \" ^ rule.description;\nsuggestion = \"建议改为: \" ^ rule.suggestion;\nconfidence = 0.8;\nai_friendly = true;\n}",
        "lines": [
          "let violation = MixedLanguage (rule.pattern, rule.description, rule.suggestion) in",
          "let result =",
          "{",
          "violation;",
          "severity = rule.severity;",
          "message = \"检测到中英文混用: \" ^ rule.description;",
          "suggestion = \"建议改为: \" ^ rule.suggestion;",
          "confidence = 0.8;",
          "ai_friendly = true;",
          "}"
        ],
        "start_line": 19,
        "end_line": 28,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/mixed_language_checker.ml"
      },
      {
        "hash": "4343947c02fd934eb239a52b632cb97a",
        "text": "let violation = MixedLanguage (rule.pattern, rule.description, rule.suggestion) in\nlet result =\n{\nviolation;\nseverity = rule.severity;\nmessage = \"检测到中英文混用: \" ^ rule.description;\nsuggestion = \"建议改为: \" ^ rule.suggestion;\nconfidence = 0.8;\nai_friendly = true;\n}",
        "lines": [
          "let violation = MixedLanguage (rule.pattern, rule.description, rule.suggestion) in",
          "let result =",
          "{",
          "violation;",
          "severity = rule.severity;",
          "message = \"检测到中英文混用: \" ^ rule.description;",
          "suggestion = \"建议改为: \" ^ rule.suggestion;",
          "confidence = 0.8;",
          "ai_friendly = true;",
          "}"
        ],
        "start_line": 48,
        "end_line": 57,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/mixed_language_checker.ml"
      },
      {
        "hash": "4343947c02fd934eb239a52b632cb97a",
        "text": "let violation = MixedLanguage (rule.pattern, rule.description, rule.suggestion) in\nlet result =\n{\nviolation;\nseverity = rule.severity;\nmessage = \"检测到中英文混用: \" ^ rule.description;\nsuggestion = \"建议改为: \" ^ rule.suggestion;\nconfidence = 0.8;\nai_friendly = true;\n}",
        "lines": [
          "let violation = MixedLanguage (rule.pattern, rule.description, rule.suggestion) in",
          "let result =",
          "{",
          "violation;",
          "severity = rule.severity;",
          "message = \"检测到中英文混用: \" ^ rule.description;",
          "suggestion = \"建议改为: \" ^ rule.suggestion;",
          "confidence = 0.8;",
          "ai_friendly = true;",
          "}"
        ],
        "start_line": 80,
        "end_line": 89,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/mixed_language_checker.ml"
      }
    ],
    "aeeb51fa3988af2bb14f3702e4359fcc": [
      {
        "hash": "aeeb51fa3988af2bb14f3702e4359fcc",
        "text": "let result =\n{\nviolation;\nseverity = rule.severity;\nmessage = \"检测到中英文混用: \" ^ rule.description;\nsuggestion = \"建议改为: \" ^ rule.suggestion;\nconfidence = 0.8;\nai_friendly = true;\n}\nin",
        "lines": [
          "let result =",
          "{",
          "violation;",
          "severity = rule.severity;",
          "message = \"检测到中英文混用: \" ^ rule.description;",
          "suggestion = \"建议改为: \" ^ rule.suggestion;",
          "confidence = 0.8;",
          "ai_friendly = true;",
          "}",
          "in"
        ],
        "start_line": 20,
        "end_line": 29,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/mixed_language_checker.ml"
      },
      {
        "hash": "aeeb51fa3988af2bb14f3702e4359fcc",
        "text": "let result =\n{\nviolation;\nseverity = rule.severity;\nmessage = \"检测到中英文混用: \" ^ rule.description;\nsuggestion = \"建议改为: \" ^ rule.suggestion;\nconfidence = 0.8;\nai_friendly = true;\n}\nin",
        "lines": [
          "let result =",
          "{",
          "violation;",
          "severity = rule.severity;",
          "message = \"检测到中英文混用: \" ^ rule.description;",
          "suggestion = \"建议改为: \" ^ rule.suggestion;",
          "confidence = 0.8;",
          "ai_friendly = true;",
          "}",
          "in"
        ],
        "start_line": 49,
        "end_line": 58,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/mixed_language_checker.ml"
      },
      {
        "hash": "aeeb51fa3988af2bb14f3702e4359fcc",
        "text": "let result =\n{\nviolation;\nseverity = rule.severity;\nmessage = \"检测到中英文混用: \" ^ rule.description;\nsuggestion = \"建议改为: \" ^ rule.suggestion;\nconfidence = 0.8;\nai_friendly = true;\n}\nin",
        "lines": [
          "let result =",
          "{",
          "violation;",
          "severity = rule.severity;",
          "message = \"检测到中英文混用: \" ^ rule.description;",
          "suggestion = \"建议改为: \" ^ rule.suggestion;",
          "confidence = 0.8;",
          "ai_friendly = true;",
          "}",
          "in"
        ],
        "start_line": 81,
        "end_line": 90,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/mixed_language_checker.ml"
      }
    ],
    "ade448b2b4ca0e481ae463d51cd944bb": [
      {
        "hash": "ade448b2b4ca0e481ae463d51cd944bb",
        "text": "{\nviolation;\nseverity = rule.severity;\nmessage = \"检测到中英文混用: \" ^ rule.description;\nsuggestion = \"建议改为: \" ^ rule.suggestion;\nconfidence = 0.8;\nai_friendly = true;\n}\nin\nviolations := result :: !violations)",
        "lines": [
          "{",
          "violation;",
          "severity = rule.severity;",
          "message = \"检测到中英文混用: \" ^ rule.description;",
          "suggestion = \"建议改为: \" ^ rule.suggestion;",
          "confidence = 0.8;",
          "ai_friendly = true;",
          "}",
          "in",
          "violations := result :: !violations)"
        ],
        "start_line": 21,
        "end_line": 30,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/mixed_language_checker.ml"
      },
      {
        "hash": "ade448b2b4ca0e481ae463d51cd944bb",
        "text": "{\nviolation;\nseverity = rule.severity;\nmessage = \"检测到中英文混用: \" ^ rule.description;\nsuggestion = \"建议改为: \" ^ rule.suggestion;\nconfidence = 0.8;\nai_friendly = true;\n}\nin\nviolations := result :: !violations)",
        "lines": [
          "{",
          "violation;",
          "severity = rule.severity;",
          "message = \"检测到中英文混用: \" ^ rule.description;",
          "suggestion = \"建议改为: \" ^ rule.suggestion;",
          "confidence = 0.8;",
          "ai_friendly = true;",
          "}",
          "in",
          "violations := result :: !violations)"
        ],
        "start_line": 50,
        "end_line": 59,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/mixed_language_checker.ml"
      },
      {
        "hash": "ade448b2b4ca0e481ae463d51cd944bb",
        "text": "{\nviolation;\nseverity = rule.severity;\nmessage = \"检测到中英文混用: \" ^ rule.description;\nsuggestion = \"建议改为: \" ^ rule.suggestion;\nconfidence = 0.8;\nai_friendly = true;\n}\nin\nviolations := result :: !violations)",
        "lines": [
          "{",
          "violation;",
          "severity = rule.severity;",
          "message = \"检测到中英文混用: \" ^ rule.description;",
          "suggestion = \"建议改为: \" ^ rule.suggestion;",
          "confidence = 0.8;",
          "ai_friendly = true;",
          "}",
          "in",
          "violations := result :: !violations)"
        ],
        "start_line": 82,
        "end_line": 91,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/checkers/mixed_language_checker.ml"
      }
    ],
    "dca82e9cc95c46ca104bdd17e9d4de66": [
      {
        "hash": "dca82e9cc95c46ca104bdd17e9d4de66",
        "text": "pattern : string;\ndescription : string;\nsuggestion : string;\nseverity : severity;\ncategory : string;\n}",
        "lines": [
          "pattern : string;",
          "description : string;",
          "suggestion : string;",
          "severity : severity;",
          "category : string;",
          "}"
        ],
        "start_line": 6,
        "end_line": 11,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/rules/idiomatic_rules.ml"
      },
      {
        "hash": "dca82e9cc95c46ca104bdd17e9d4de66",
        "text": "pattern : string;\ndescription : string;\nsuggestion : string;\nseverity : severity;\ncategory : string;\n}",
        "lines": [
          "pattern : string;",
          "description : string;",
          "suggestion : string;",
          "severity : severity;",
          "category : string;",
          "}"
        ],
        "start_line": 6,
        "end_line": 11,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/rules/mixed_language_rules.ml"
      },
      {
        "hash": "dca82e9cc95c46ca104bdd17e9d4de66",
        "text": "pattern : string;\ndescription : string;\nsuggestion : string;\nseverity : severity;\ncategory : string;\n}",
        "lines": [
          "pattern : string;",
          "description : string;",
          "suggestion : string;",
          "severity : severity;",
          "category : string;",
          "}"
        ],
        "start_line": 6,
        "end_line": 11,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/rules/word_order_rules.ml"
      }
    ],
    "c3488c3fca064a6d704893c57537d14c": [
      {
        "hash": "c3488c3fca064a6d704893c57537d14c",
        "text": "description : string;\nsuggestion : string;\nseverity : severity;\ncategory : string;\n}",
        "lines": [
          "description : string;",
          "suggestion : string;",
          "severity : severity;",
          "category : string;",
          "}"
        ],
        "start_line": 7,
        "end_line": 11,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/rules/idiomatic_rules.ml"
      },
      {
        "hash": "c3488c3fca064a6d704893c57537d14c",
        "text": "description : string;\nsuggestion : string;\nseverity : severity;\ncategory : string;\n}",
        "lines": [
          "description : string;",
          "suggestion : string;",
          "severity : severity;",
          "category : string;",
          "}"
        ],
        "start_line": 7,
        "end_line": 11,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/rules/mixed_language_rules.ml"
      },
      {
        "hash": "c3488c3fca064a6d704893c57537d14c",
        "text": "description : string;\nsuggestion : string;\nseverity : severity;\ncategory : string;\n}",
        "lines": [
          "description : string;",
          "suggestion : string;",
          "severity : severity;",
          "category : string;",
          "}"
        ],
        "start_line": 7,
        "end_line": 11,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/rules/word_order_rules.ml"
      }
    ],
    "2be93af4684a68269f45452008c02b54": [
      {
        "hash": "2be93af4684a68269f45452008c02b54",
        "text": "suggestion : string;\nseverity : severity;\ncategory : string;\n}",
        "lines": [
          "suggestion : string;",
          "severity : severity;",
          "category : string;",
          "}"
        ],
        "start_line": 8,
        "end_line": 11,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/rules/idiomatic_rules.ml"
      },
      {
        "hash": "2be93af4684a68269f45452008c02b54",
        "text": "suggestion : string;\nseverity : severity;\ncategory : string;\n}",
        "lines": [
          "suggestion : string;",
          "severity : severity;",
          "category : string;",
          "}"
        ],
        "start_line": 8,
        "end_line": 11,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/rules/mixed_language_rules.ml"
      },
      {
        "hash": "2be93af4684a68269f45452008c02b54",
        "text": "suggestion : string;\nseverity : severity;\ncategory : string;\n}",
        "lines": [
          "suggestion : string;",
          "severity : severity;",
          "category : string;",
          "}"
        ],
        "start_line": 8,
        "end_line": 11,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/rules/word_order_rules.ml"
      }
    ],
    "9f492351f6b6cccad901471b1c04d852": [
      {
        "hash": "9f492351f6b6cccad901471b1c04d852",
        "text": "severity : severity;\ncategory : string;\n}",
        "lines": [
          "severity : severity;",
          "category : string;",
          "}"
        ],
        "start_line": 9,
        "end_line": 11,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/rules/idiomatic_rules.ml"
      },
      {
        "hash": "9f492351f6b6cccad901471b1c04d852",
        "text": "severity : severity;\ncategory : string;\n}",
        "lines": [
          "severity : severity;",
          "category : string;",
          "}"
        ],
        "start_line": 9,
        "end_line": 11,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/rules/mixed_language_rules.ml"
      },
      {
        "hash": "9f492351f6b6cccad901471b1c04d852",
        "text": "severity : severity;\ncategory : string;\n}",
        "lines": [
          "severity : severity;",
          "category : string;",
          "}"
        ],
        "start_line": 9,
        "end_line": 11,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/rules/word_order_rules.ml"
      }
    ],
    "232f93ab60dc248622403bd6539dc828": [
      {
        "hash": "232f93ab60dc248622403bd6539dc828",
        "text": "let buffer = Buffer.create 512 in\nlet error_count, warning_count, style_count, info_count =\ncount_violations_by_severity violations\nin",
        "lines": [
          "let buffer = Buffer.create 512 in",
          "let error_count, warning_count, style_count, info_count =",
          "count_violations_by_severity violations",
          "in"
        ],
        "start_line": 46,
        "end_line": 49,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/reporters/violation_reporter.ml"
      },
      {
        "hash": "232f93ab60dc248622403bd6539dc828",
        "text": "let buffer = Buffer.create 512 in\nlet error_count, warning_count, style_count, info_count =\ncount_violations_by_severity violations\nin",
        "lines": [
          "let buffer = Buffer.create 512 in",
          "let error_count, warning_count, style_count, info_count =",
          "count_violations_by_severity violations",
          "in"
        ],
        "start_line": 62,
        "end_line": 65,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/reporters/violation_reporter.ml"
      }
    ],
    "ae3a71de5dd5c8161a991dadb745b7df": [
      {
        "hash": "ae3a71de5dd5c8161a991dadb745b7df",
        "text": "let error_count, warning_count, style_count, info_count =\ncount_violations_by_severity violations\nin",
        "lines": [
          "let error_count, warning_count, style_count, info_count =",
          "count_violations_by_severity violations",
          "in"
        ],
        "start_line": 47,
        "end_line": 49,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/reporters/violation_reporter.ml"
      },
      {
        "hash": "ae3a71de5dd5c8161a991dadb745b7df",
        "text": "let error_count, warning_count, style_count, info_count =\ncount_violations_by_severity violations\nin",
        "lines": [
          "let error_count, warning_count, style_count, info_count =",
          "count_violations_by_severity violations",
          "in"
        ],
        "start_line": 63,
        "end_line": 65,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/chinese_best_practices/reporters/violation_reporter.ml"
      }
    ],
    "a15d6b460c2d70f587e6094d8ff004bc": [
      {
        "hash": "a15d6b460c2d70f587e6094d8ff004bc",
        "text": "@author 骆言技术债务清理团队\n@version 1.0\n@since 2025-07-20 *)",
        "lines": [
          "@author 骆言技术债务清理团队",
          "@version 1.0",
          "@since 2025-07-20 *)"
        ],
        "start_line": 5,
        "end_line": 7,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/poetry_json_parser.ml"
      },
      {
        "hash": "a15d6b460c2d70f587e6094d8ff004bc",
        "text": "@author 骆言技术债务清理团队\n@version 1.0\n@since 2025-07-20 *)",
        "lines": [
          "@author 骆言技术债务清理团队",
          "@version 1.0",
          "@since 2025-07-20 *)"
        ],
        "start_line": 5,
        "end_line": 7,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/poetry_word_class_loader.ml"
      },
      {
        "hash": "a15d6b460c2d70f587e6094d8ff004bc",
        "text": "@author 骆言技术债务清理团队\n@version 1.0\n@since 2025-07-20 *)",
        "lines": [
          "@author 骆言技术债务清理团队",
          "@version 1.0",
          "@since 2025-07-20 *)"
        ],
        "start_line": 5,
        "end_line": 7,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/poetry_data_fallback.ml"
      },
      {
        "hash": "a15d6b460c2d70f587e6094d8ff004bc",
        "text": "@author 骆言技术债务清理团队\n@version 1.0\n@since 2025-07-20 *)",
        "lines": [
          "@author 骆言技术债务清理团队",
          "@version 1.0",
          "@since 2025-07-20 *)"
        ],
        "start_line": 5,
        "end_line": 7,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/poetry_file_reader.ml"
      }
    ],
    "eb5c3bc50f6dd1f24218a58e3fbe822d": [
      {
        "hash": "eb5c3bc50f6dd1f24218a58e3fbe822d",
        "text": "let category_content = Poetry_json_parser.extract_field content category_name in\nlet words_content = Poetry_json_parser.extract_field category_content \"words\" in\nlet words = Poetry_json_parser.parse_string_array words_content in\nList.map (fun word -> (word, word_class)) words\nin",
        "lines": [
          "let category_content = Poetry_json_parser.extract_field content category_name in",
          "let words_content = Poetry_json_parser.extract_field category_content \"words\" in",
          "let words = Poetry_json_parser.parse_string_array words_content in",
          "List.map (fun word -> (word, word_class)) words",
          "in"
        ],
        "start_line": 143,
        "end_line": 147,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/poetry_word_class_loader.ml"
      },
      {
        "hash": "eb5c3bc50f6dd1f24218a58e3fbe822d",
        "text": "let category_content = Poetry_json_parser.extract_field content category_name in\nlet words_content = Poetry_json_parser.extract_field category_content \"words\" in\nlet words = Poetry_json_parser.parse_string_array words_content in\nList.map (fun word -> (word, word_class)) words\nin",
        "lines": [
          "let category_content = Poetry_json_parser.extract_field content category_name in",
          "let words_content = Poetry_json_parser.extract_field category_content \"words\" in",
          "let words = Poetry_json_parser.parse_string_array words_content in",
          "List.map (fun word -> (word, word_class)) words",
          "in"
        ],
        "start_line": 161,
        "end_line": 165,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/poetry_word_class_loader.ml"
      }
    ],
    "92be602d867ba5d0c5e8420ac4053d00": [
      {
        "hash": "92be602d867ba5d0c5e8420ac4053d00",
        "text": "let words_content = Poetry_json_parser.extract_field category_content \"words\" in\nlet words = Poetry_json_parser.parse_string_array words_content in\nList.map (fun word -> (word, word_class)) words\nin",
        "lines": [
          "let words_content = Poetry_json_parser.extract_field category_content \"words\" in",
          "let words = Poetry_json_parser.parse_string_array words_content in",
          "List.map (fun word -> (word, word_class)) words",
          "in"
        ],
        "start_line": 144,
        "end_line": 147,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/poetry_word_class_loader.ml"
      },
      {
        "hash": "92be602d867ba5d0c5e8420ac4053d00",
        "text": "let words_content = Poetry_json_parser.extract_field category_content \"words\" in\nlet words = Poetry_json_parser.parse_string_array words_content in\nList.map (fun word -> (word, word_class)) words\nin",
        "lines": [
          "let words_content = Poetry_json_parser.extract_field category_content \"words\" in",
          "let words = Poetry_json_parser.parse_string_array words_content in",
          "List.map (fun word -> (word, word_class)) words",
          "in"
        ],
        "start_line": 162,
        "end_line": 165,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/poetry_word_class_loader.ml"
      }
    ],
    "07e6c26754c1bd30fcae946155794b6a": [
      {
        "hash": "07e6c26754c1bd30fcae946155794b6a",
        "text": "let words = Poetry_json_parser.parse_string_array words_content in\nList.map (fun word -> (word, word_class)) words\nin",
        "lines": [
          "let words = Poetry_json_parser.parse_string_array words_content in",
          "List.map (fun word -> (word, word_class)) words",
          "in"
        ],
        "start_line": 145,
        "end_line": 147,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/poetry_word_class_loader.ml"
      },
      {
        "hash": "07e6c26754c1bd30fcae946155794b6a",
        "text": "let words = Poetry_json_parser.parse_string_array words_content in\nList.map (fun word -> (word, word_class)) words\nin",
        "lines": [
          "let words = Poetry_json_parser.parse_string_array words_content in",
          "List.map (fun word -> (word, word_class)) words",
          "in"
        ],
        "start_line": 163,
        "end_line": 165,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/poetry_word_class_loader.ml"
      }
    ],
    "087da7b3dbd70341271894813be75610": [
      {
        "hash": "087da7b3dbd70341271894813be75610",
        "text": "match subcategory with\n| 0 -> d0\n| 1 -> d1\n| 2 -> d2\n| 3 -> d3\n| 4 -> d4\n| 5 -> d5\n| 6 -> d6\n| 7 -> d7\n| 8 -> d8",
        "lines": [
          "match subcategory with",
          "| 0 -> d0",
          "| 1 -> d1",
          "| 2 -> d2",
          "| 3 -> d3",
          "| 4 -> d4",
          "| 5 -> d5",
          "| 6 -> d6",
          "| 7 -> d7",
          "| 8 -> d8"
        ],
        "start_line": 49,
        "end_line": 58,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/expanded_word_class_data.ml"
      },
      {
        "hash": "087da7b3dbd70341271894813be75610",
        "text": "match subcategory with\n| 0 -> d0\n| 1 -> d1\n| 2 -> d2\n| 3 -> d3\n| 4 -> d4\n| 5 -> d5\n| 6 -> d6\n| 7 -> d7\n| 8 -> d8",
        "lines": [
          "match subcategory with",
          "| 0 -> d0",
          "| 1 -> d1",
          "| 2 -> d2",
          "| 3 -> d3",
          "| 4 -> d4",
          "| 5 -> d5",
          "| 6 -> d6",
          "| 7 -> d7",
          "| 8 -> d8"
        ],
        "start_line": 63,
        "end_line": 72,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/expanded_word_class_data.ml"
      },
      {
        "hash": "087da7b3dbd70341271894813be75610",
        "text": "match subcategory with\n| 0 -> d0\n| 1 -> d1\n| 2 -> d2\n| 3 -> d3\n| 4 -> d4\n| 5 -> d5\n| 6 -> d6\n| 7 -> d7\n| 8 -> d8",
        "lines": [
          "match subcategory with",
          "| 0 -> d0",
          "| 1 -> d1",
          "| 2 -> d2",
          "| 3 -> d3",
          "| 4 -> d4",
          "| 5 -> d5",
          "| 6 -> d6",
          "| 7 -> d7",
          "| 8 -> d8"
        ],
        "start_line": 78,
        "end_line": 87,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/expanded_word_class_data.ml"
      }
    ],
    "d385236785f3a99aa3b522d6360b9b64": [
      {
        "hash": "d385236785f3a99aa3b522d6360b9b64",
        "text": "| 0 -> d0\n| 1 -> d1\n| 2 -> d2\n| 3 -> d3\n| 4 -> d4\n| 5 -> d5\n| 6 -> d6\n| 7 -> d7\n| 8 -> d8\n| 9 -> d9",
        "lines": [
          "| 0 -> d0",
          "| 1 -> d1",
          "| 2 -> d2",
          "| 3 -> d3",
          "| 4 -> d4",
          "| 5 -> d5",
          "| 6 -> d6",
          "| 7 -> d7",
          "| 8 -> d8",
          "| 9 -> d9"
        ],
        "start_line": 50,
        "end_line": 59,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/expanded_word_class_data.ml"
      },
      {
        "hash": "d385236785f3a99aa3b522d6360b9b64",
        "text": "| 0 -> d0\n| 1 -> d1\n| 2 -> d2\n| 3 -> d3\n| 4 -> d4\n| 5 -> d5\n| 6 -> d6\n| 7 -> d7\n| 8 -> d8\n| 9 -> d9",
        "lines": [
          "| 0 -> d0",
          "| 1 -> d1",
          "| 2 -> d2",
          "| 3 -> d3",
          "| 4 -> d4",
          "| 5 -> d5",
          "| 6 -> d6",
          "| 7 -> d7",
          "| 8 -> d8",
          "| 9 -> d9"
        ],
        "start_line": 64,
        "end_line": 73,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/expanded_word_class_data.ml"
      },
      {
        "hash": "d385236785f3a99aa3b522d6360b9b64",
        "text": "| 0 -> d0\n| 1 -> d1\n| 2 -> d2\n| 3 -> d3\n| 4 -> d4\n| 5 -> d5\n| 6 -> d6\n| 7 -> d7\n| 8 -> d8\n| 9 -> d9",
        "lines": [
          "| 0 -> d0",
          "| 1 -> d1",
          "| 2 -> d2",
          "| 3 -> d3",
          "| 4 -> d4",
          "| 5 -> d5",
          "| 6 -> d6",
          "| 7 -> d7",
          "| 8 -> d8",
          "| 9 -> d9"
        ],
        "start_line": 79,
        "end_line": 88,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/expanded_word_class_data.ml"
      }
    ],
    "0618b69ac0b7d5412772b0df7ac34c37": [
      {
        "hash": "0618b69ac0b7d5412772b0df7ac34c37",
        "text": "| 1 -> d1\n| 2 -> d2\n| 3 -> d3\n| 4 -> d4\n| 5 -> d5\n| 6 -> d6\n| 7 -> d7\n| 8 -> d8\n| 9 -> d9\n| 10 -> d10",
        "lines": [
          "| 1 -> d1",
          "| 2 -> d2",
          "| 3 -> d3",
          "| 4 -> d4",
          "| 5 -> d5",
          "| 6 -> d6",
          "| 7 -> d7",
          "| 8 -> d8",
          "| 9 -> d9",
          "| 10 -> d10"
        ],
        "start_line": 65,
        "end_line": 74,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/expanded_word_class_data.ml"
      },
      {
        "hash": "0618b69ac0b7d5412772b0df7ac34c37",
        "text": "| 1 -> d1\n| 2 -> d2\n| 3 -> d3\n| 4 -> d4\n| 5 -> d5\n| 6 -> d6\n| 7 -> d7\n| 8 -> d8\n| 9 -> d9\n| 10 -> d10",
        "lines": [
          "| 1 -> d1",
          "| 2 -> d2",
          "| 3 -> d3",
          "| 4 -> d4",
          "| 5 -> d5",
          "| 6 -> d6",
          "| 7 -> d7",
          "| 8 -> d8",
          "| 9 -> d9",
          "| 10 -> d10"
        ],
        "start_line": 80,
        "end_line": 89,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/expanded_word_class_data.ml"
      }
    ],
    "1e6d1164aa618e7f24f4908c3cb844c3": [
      {
        "hash": "1e6d1164aa618e7f24f4908c3cb844c3",
        "text": "let parse_rhyme_group = function\n| \"AnRhyme\" -> AnRhyme\n| \"SiRhyme\" -> SiRhyme\n| \"TianRhyme\" -> TianRhyme\n| \"WangRhyme\" -> WangRhyme\n| \"QuRhyme\" -> QuRhyme\n| \"YuRhyme\" -> YuRhyme\n| \"HuaRhyme\" -> HuaRhyme\n| \"FengRhyme\" -> FengRhyme\n| \"YueRhyme\" -> YueRhyme",
        "lines": [
          "let parse_rhyme_group = function",
          "| \"AnRhyme\" -> AnRhyme",
          "| \"SiRhyme\" -> SiRhyme",
          "| \"TianRhyme\" -> TianRhyme",
          "| \"WangRhyme\" -> WangRhyme",
          "| \"QuRhyme\" -> QuRhyme",
          "| \"YuRhyme\" -> YuRhyme",
          "| \"HuaRhyme\" -> HuaRhyme",
          "| \"FengRhyme\" -> FengRhyme",
          "| \"YueRhyme\" -> YueRhyme"
        ],
        "start_line": 135,
        "end_line": 144,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_data_loader.ml"
      },
      {
        "hash": "1e6d1164aa618e7f24f4908c3cb844c3",
        "text": "let parse_rhyme_group = function\n| \"AnRhyme\" -> AnRhyme\n| \"SiRhyme\" -> SiRhyme\n| \"TianRhyme\" -> TianRhyme\n| \"WangRhyme\" -> WangRhyme\n| \"QuRhyme\" -> QuRhyme\n| \"YuRhyme\" -> YuRhyme\n| \"HuaRhyme\" -> HuaRhyme\n| \"FengRhyme\" -> FengRhyme\n| \"YueRhyme\" -> YueRhyme",
        "lines": [
          "let parse_rhyme_group = function",
          "| \"AnRhyme\" -> AnRhyme",
          "| \"SiRhyme\" -> SiRhyme",
          "| \"TianRhyme\" -> TianRhyme",
          "| \"WangRhyme\" -> WangRhyme",
          "| \"QuRhyme\" -> QuRhyme",
          "| \"YuRhyme\" -> YuRhyme",
          "| \"HuaRhyme\" -> HuaRhyme",
          "| \"FengRhyme\" -> FengRhyme",
          "| \"YueRhyme\" -> YueRhyme"
        ],
        "start_line": 56,
        "end_line": 65,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/json_parser.ml"
      }
    ],
    "bd3d6921ccea17ee0195d138f4bcbe71": [
      {
        "hash": "bd3d6921ccea17ee0195d138f4bcbe71",
        "text": "| \"AnRhyme\" -> AnRhyme\n| \"SiRhyme\" -> SiRhyme\n| \"TianRhyme\" -> TianRhyme\n| \"WangRhyme\" -> WangRhyme\n| \"QuRhyme\" -> QuRhyme\n| \"YuRhyme\" -> YuRhyme\n| \"HuaRhyme\" -> HuaRhyme\n| \"FengRhyme\" -> FengRhyme\n| \"YueRhyme\" -> YueRhyme\n| \"JiangRhyme\" -> JiangRhyme",
        "lines": [
          "| \"AnRhyme\" -> AnRhyme",
          "| \"SiRhyme\" -> SiRhyme",
          "| \"TianRhyme\" -> TianRhyme",
          "| \"WangRhyme\" -> WangRhyme",
          "| \"QuRhyme\" -> QuRhyme",
          "| \"YuRhyme\" -> YuRhyme",
          "| \"HuaRhyme\" -> HuaRhyme",
          "| \"FengRhyme\" -> FengRhyme",
          "| \"YueRhyme\" -> YueRhyme",
          "| \"JiangRhyme\" -> JiangRhyme"
        ],
        "start_line": 136,
        "end_line": 145,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_data_loader.ml"
      },
      {
        "hash": "bd3d6921ccea17ee0195d138f4bcbe71",
        "text": "| \"AnRhyme\" -> AnRhyme\n| \"SiRhyme\" -> SiRhyme\n| \"TianRhyme\" -> TianRhyme\n| \"WangRhyme\" -> WangRhyme\n| \"QuRhyme\" -> QuRhyme\n| \"YuRhyme\" -> YuRhyme\n| \"HuaRhyme\" -> HuaRhyme\n| \"FengRhyme\" -> FengRhyme\n| \"YueRhyme\" -> YueRhyme\n| \"JiangRhyme\" -> JiangRhyme",
        "lines": [
          "| \"AnRhyme\" -> AnRhyme",
          "| \"SiRhyme\" -> SiRhyme",
          "| \"TianRhyme\" -> TianRhyme",
          "| \"WangRhyme\" -> WangRhyme",
          "| \"QuRhyme\" -> QuRhyme",
          "| \"YuRhyme\" -> YuRhyme",
          "| \"HuaRhyme\" -> HuaRhyme",
          "| \"FengRhyme\" -> FengRhyme",
          "| \"YueRhyme\" -> YueRhyme",
          "| \"JiangRhyme\" -> JiangRhyme"
        ],
        "start_line": 57,
        "end_line": 66,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/json_parser.ml"
      }
    ],
    "517c31af1840ef065fd9d4c3edc4a1ac": [
      {
        "hash": "517c31af1840ef065fd9d4c3edc4a1ac",
        "text": "| \"SiRhyme\" -> SiRhyme\n| \"TianRhyme\" -> TianRhyme\n| \"WangRhyme\" -> WangRhyme\n| \"QuRhyme\" -> QuRhyme\n| \"YuRhyme\" -> YuRhyme\n| \"HuaRhyme\" -> HuaRhyme\n| \"FengRhyme\" -> FengRhyme\n| \"YueRhyme\" -> YueRhyme\n| \"JiangRhyme\" -> JiangRhyme\n| \"HuiRhyme\" -> HuiRhyme",
        "lines": [
          "| \"SiRhyme\" -> SiRhyme",
          "| \"TianRhyme\" -> TianRhyme",
          "| \"WangRhyme\" -> WangRhyme",
          "| \"QuRhyme\" -> QuRhyme",
          "| \"YuRhyme\" -> YuRhyme",
          "| \"HuaRhyme\" -> HuaRhyme",
          "| \"FengRhyme\" -> FengRhyme",
          "| \"YueRhyme\" -> YueRhyme",
          "| \"JiangRhyme\" -> JiangRhyme",
          "| \"HuiRhyme\" -> HuiRhyme"
        ],
        "start_line": 137,
        "end_line": 146,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_data_loader.ml"
      },
      {
        "hash": "517c31af1840ef065fd9d4c3edc4a1ac",
        "text": "| \"SiRhyme\" -> SiRhyme\n| \"TianRhyme\" -> TianRhyme\n| \"WangRhyme\" -> WangRhyme\n| \"QuRhyme\" -> QuRhyme\n| \"YuRhyme\" -> YuRhyme\n| \"HuaRhyme\" -> HuaRhyme\n| \"FengRhyme\" -> FengRhyme\n| \"YueRhyme\" -> YueRhyme\n| \"JiangRhyme\" -> JiangRhyme\n| \"HuiRhyme\" -> HuiRhyme",
        "lines": [
          "| \"SiRhyme\" -> SiRhyme",
          "| \"TianRhyme\" -> TianRhyme",
          "| \"WangRhyme\" -> WangRhyme",
          "| \"QuRhyme\" -> QuRhyme",
          "| \"YuRhyme\" -> YuRhyme",
          "| \"HuaRhyme\" -> HuaRhyme",
          "| \"FengRhyme\" -> FengRhyme",
          "| \"YueRhyme\" -> YueRhyme",
          "| \"JiangRhyme\" -> JiangRhyme",
          "| \"HuiRhyme\" -> HuiRhyme"
        ],
        "start_line": 58,
        "end_line": 67,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/json_parser.ml"
      }
    ],
    "1480473ab0c998a16f46d7d7957503ee": [
      {
        "hash": "1480473ab0c998a16f46d7d7957503ee",
        "text": "| \"TianRhyme\" -> TianRhyme\n| \"WangRhyme\" -> WangRhyme\n| \"QuRhyme\" -> QuRhyme\n| \"YuRhyme\" -> YuRhyme\n| \"HuaRhyme\" -> HuaRhyme\n| \"FengRhyme\" -> FengRhyme\n| \"YueRhyme\" -> YueRhyme\n| \"JiangRhyme\" -> JiangRhyme\n| \"HuiRhyme\" -> HuiRhyme\n| _ -> UnknownRhyme",
        "lines": [
          "| \"TianRhyme\" -> TianRhyme",
          "| \"WangRhyme\" -> WangRhyme",
          "| \"QuRhyme\" -> QuRhyme",
          "| \"YuRhyme\" -> YuRhyme",
          "| \"HuaRhyme\" -> HuaRhyme",
          "| \"FengRhyme\" -> FengRhyme",
          "| \"YueRhyme\" -> YueRhyme",
          "| \"JiangRhyme\" -> JiangRhyme",
          "| \"HuiRhyme\" -> HuiRhyme",
          "| _ -> UnknownRhyme"
        ],
        "start_line": 138,
        "end_line": 147,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_data_loader.ml"
      },
      {
        "hash": "1480473ab0c998a16f46d7d7957503ee",
        "text": "| \"TianRhyme\" -> TianRhyme\n| \"WangRhyme\" -> WangRhyme\n| \"QuRhyme\" -> QuRhyme\n| \"YuRhyme\" -> YuRhyme\n| \"HuaRhyme\" -> HuaRhyme\n| \"FengRhyme\" -> FengRhyme\n| \"YueRhyme\" -> YueRhyme\n| \"JiangRhyme\" -> JiangRhyme\n| \"HuiRhyme\" -> HuiRhyme\n| _ -> UnknownRhyme",
        "lines": [
          "| \"TianRhyme\" -> TianRhyme",
          "| \"WangRhyme\" -> WangRhyme",
          "| \"QuRhyme\" -> QuRhyme",
          "| \"YuRhyme\" -> YuRhyme",
          "| \"HuaRhyme\" -> HuaRhyme",
          "| \"FengRhyme\" -> FengRhyme",
          "| \"YueRhyme\" -> YueRhyme",
          "| \"JiangRhyme\" -> JiangRhyme",
          "| \"HuiRhyme\" -> HuiRhyme",
          "| _ -> UnknownRhyme"
        ],
        "start_line": 59,
        "end_line": 68,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/json_parser.ml"
      }
    ],
    "ddc28bb130d594afaf2c6b8b38866d02": [
      {
        "hash": "ddc28bb130d594afaf2c6b8b38866d02",
        "text": "let format_error = function\n| FileNotFound file -> sprintf \"声调数据文件未找到: %s\" file\n| ParseError msg -> sprintf \"JSON解析失败: %s\" msg\n| InvalidData msg -> sprintf \"数据格式无效: %s\" msg",
        "lines": [
          "let format_error = function",
          "| FileNotFound file -> sprintf \"声调数据文件未找到: %s\" file",
          "| ParseError msg -> sprintf \"JSON解析失败: %s\" msg",
          "| InvalidData msg -> sprintf \"数据格式无效: %s\" msg"
        ],
        "start_line": 17,
        "end_line": 20,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/tone_data_loader.ml"
      },
      {
        "hash": "ddc28bb130d594afaf2c6b8b38866d02",
        "text": "let format_error = function\n| FileNotFound file -> sprintf \"声调数据文件未找到: %s\" file\n| ParseError msg -> sprintf \"JSON解析失败: %s\" msg\n| InvalidData msg -> sprintf \"数据格式无效: %s\" msg",
        "lines": [
          "let format_error = function",
          "| FileNotFound file -> sprintf \"声调数据文件未找到: %s\" file",
          "| ParseError msg -> sprintf \"JSON解析失败: %s\" msg",
          "| InvalidData msg -> sprintf \"数据格式无效: %s\" msg"
        ],
        "start_line": 16,
        "end_line": 19,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/tone_data/tone_data_json_loader.ml"
      }
    ],
    "cfb4a07c95ad1edf3399c2f2aabff0cf": [
      {
        "hash": "cfb4a07c95ad1edf3399c2f2aabff0cf",
        "text": "| FileNotFound file -> sprintf \"声调数据文件未找到: %s\" file\n| ParseError msg -> sprintf \"JSON解析失败: %s\" msg\n| InvalidData msg -> sprintf \"数据格式无效: %s\" msg",
        "lines": [
          "| FileNotFound file -> sprintf \"声调数据文件未找到: %s\" file",
          "| ParseError msg -> sprintf \"JSON解析失败: %s\" msg",
          "| InvalidData msg -> sprintf \"数据格式无效: %s\" msg"
        ],
        "start_line": 18,
        "end_line": 20,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/tone_data_loader.ml"
      },
      {
        "hash": "cfb4a07c95ad1edf3399c2f2aabff0cf",
        "text": "| FileNotFound file -> sprintf \"声调数据文件未找到: %s\" file\n| ParseError msg -> sprintf \"JSON解析失败: %s\" msg\n| InvalidData msg -> sprintf \"数据格式无效: %s\" msg",
        "lines": [
          "| FileNotFound file -> sprintf \"声调数据文件未找到: %s\" file",
          "| ParseError msg -> sprintf \"JSON解析失败: %s\" msg",
          "| InvalidData msg -> sprintf \"数据格式无效: %s\" msg"
        ],
        "start_line": 17,
        "end_line": 19,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/tone_data/tone_data_json_loader.ml"
      }
    ],
    "70c3ac2f3c1d2b298631a5380be62200": [
      {
        "hash": "70c3ac2f3c1d2b298631a5380be62200",
        "text": "let dune_project = Filename.concat dir \"dune-project\" in\nif Sys.file_exists dune_project then dir\nelse\nlet parent = Filename.dirname dir in\nif parent = dir then",
        "lines": [
          "let dune_project = Filename.concat dir \"dune-project\" in",
          "if Sys.file_exists dune_project then dir",
          "else",
          "let parent = Filename.dirname dir in",
          "if parent = dir then"
        ],
        "start_line": 25,
        "end_line": 29,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/tone_data_loader.ml"
      },
      {
        "hash": "70c3ac2f3c1d2b298631a5380be62200",
        "text": "let dune_project = Filename.concat dir \"dune-project\" in\nif Sys.file_exists dune_project then dir\nelse\nlet parent = Filename.dirname dir in\nif parent = dir then",
        "lines": [
          "let dune_project = Filename.concat dir \"dune-project\" in",
          "if Sys.file_exists dune_project then dir",
          "else",
          "let parent = Filename.dirname dir in",
          "if parent = dir then"
        ],
        "start_line": 24,
        "end_line": 28,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/yu_rhyme_data.ml"
      },
      {
        "hash": "70c3ac2f3c1d2b298631a5380be62200",
        "text": "let dune_project = Filename.concat dir \"dune-project\" in\nif Sys.file_exists dune_project then dir\nelse\nlet parent = Filename.dirname dir in\nif parent = dir then",
        "lines": [
          "let dune_project = Filename.concat dir \"dune-project\" in",
          "if Sys.file_exists dune_project then dir",
          "else",
          "let parent = Filename.dirname dir in",
          "if parent = dir then"
        ],
        "start_line": 23,
        "end_line": 27,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/tone_data/ru_sheng_data.ml"
      }
    ],
    "cbf8d8b0108752fedb95fb7334f67720": [
      {
        "hash": "cbf8d8b0108752fedb95fb7334f67720",
        "text": "if Sys.file_exists dune_project then dir\nelse\nlet parent = Filename.dirname dir in\nif parent = dir then",
        "lines": [
          "if Sys.file_exists dune_project then dir",
          "else",
          "let parent = Filename.dirname dir in",
          "if parent = dir then"
        ],
        "start_line": 26,
        "end_line": 29,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/tone_data_loader.ml"
      },
      {
        "hash": "cbf8d8b0108752fedb95fb7334f67720",
        "text": "if Sys.file_exists dune_project then dir\nelse\nlet parent = Filename.dirname dir in\nif parent = dir then",
        "lines": [
          "if Sys.file_exists dune_project then dir",
          "else",
          "let parent = Filename.dirname dir in",
          "if parent = dir then"
        ],
        "start_line": 25,
        "end_line": 28,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/yu_rhyme_data.ml"
      },
      {
        "hash": "cbf8d8b0108752fedb95fb7334f67720",
        "text": "if Sys.file_exists dune_project then dir\nelse\nlet parent = Filename.dirname dir in\nif parent = dir then",
        "lines": [
          "if Sys.file_exists dune_project then dir",
          "else",
          "let parent = Filename.dirname dir in",
          "if parent = dir then"
        ],
        "start_line": 24,
        "end_line": 27,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/tone_data/ru_sheng_data.ml"
      }
    ],
    "f0ae21bd3111149e04db7f0830f78ebd": [
      {
        "hash": "f0ae21bd3111149e04db7f0830f78ebd",
        "text": "else\nlet parent = Filename.dirname dir in\nif parent = dir then",
        "lines": [
          "else",
          "let parent = Filename.dirname dir in",
          "if parent = dir then"
        ],
        "start_line": 27,
        "end_line": 29,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/tone_data_loader.ml"
      },
      {
        "hash": "f0ae21bd3111149e04db7f0830f78ebd",
        "text": "else\nlet parent = Filename.dirname dir in\nif parent = dir then",
        "lines": [
          "else",
          "let parent = Filename.dirname dir in",
          "if parent = dir then"
        ],
        "start_line": 26,
        "end_line": 28,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/yu_rhyme_data.ml"
      },
      {
        "hash": "f0ae21bd3111149e04db7f0830f78ebd",
        "text": "else\nlet parent = Filename.dirname dir in\nif parent = dir then",
        "lines": [
          "else",
          "let parent = Filename.dirname dir in",
          "if parent = dir then"
        ],
        "start_line": 25,
        "end_line": 27,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/tone_data/ru_sheng_data.ml"
      }
    ],
    "2373c8489b2705f5f695611fe2248d58": [
      {
        "hash": "2373c8489b2705f5f695611fe2248d58",
        "text": "let parse_string_list json_list =\ntry\nList.map\n(function `String s -> s | _ -> raise (ToneDataError (InvalidData \"非字符串类型的数据项\")))\njson_list\nwith\n| ToneDataError e -> raise (ToneDataError e)\n| _ -> raise (ToneDataError (InvalidData \"列表格式错误\"))",
        "lines": [
          "let parse_string_list json_list =",
          "try",
          "List.map",
          "(function `String s -> s | _ -> raise (ToneDataError (InvalidData \"非字符串类型的数据项\")))",
          "json_list",
          "with",
          "| ToneDataError e -> raise (ToneDataError e)",
          "| _ -> raise (ToneDataError (InvalidData \"列表格式错误\"))"
        ],
        "start_line": 41,
        "end_line": 48,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/tone_data_loader.ml"
      },
      {
        "hash": "2373c8489b2705f5f695611fe2248d58",
        "text": "let parse_string_list json_list =\ntry\nList.map\n(function `String s -> s | _ -> raise (ToneDataError (InvalidData \"非字符串类型的数据项\")))\njson_list\nwith\n| ToneDataError e -> raise (ToneDataError e)\n| _ -> raise (ToneDataError (InvalidData \"列表格式错误\"))",
        "lines": [
          "let parse_string_list json_list =",
          "try",
          "List.map",
          "(function `String s -> s | _ -> raise (ToneDataError (InvalidData \"非字符串类型的数据项\")))",
          "json_list",
          "with",
          "| ToneDataError e -> raise (ToneDataError e)",
          "| _ -> raise (ToneDataError (InvalidData \"列表格式错误\"))"
        ],
        "start_line": 25,
        "end_line": 32,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/tone_data/tone_data_json_loader.ml"
      }
    ],
    "3729f03ec294cafeac38fa18271a04bf": [
      {
        "hash": "3729f03ec294cafeac38fa18271a04bf",
        "text": "try\nList.map\n(function `String s -> s | _ -> raise (ToneDataError (InvalidData \"非字符串类型的数据项\")))\njson_list\nwith\n| ToneDataError e -> raise (ToneDataError e)\n| _ -> raise (ToneDataError (InvalidData \"列表格式错误\"))",
        "lines": [
          "try",
          "List.map",
          "(function `String s -> s | _ -> raise (ToneDataError (InvalidData \"非字符串类型的数据项\")))",
          "json_list",
          "with",
          "| ToneDataError e -> raise (ToneDataError e)",
          "| _ -> raise (ToneDataError (InvalidData \"列表格式错误\"))"
        ],
        "start_line": 42,
        "end_line": 48,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/tone_data_loader.ml"
      },
      {
        "hash": "3729f03ec294cafeac38fa18271a04bf",
        "text": "try\nList.map\n(function `String s -> s | _ -> raise (ToneDataError (InvalidData \"非字符串类型的数据项\")))\njson_list\nwith\n| ToneDataError e -> raise (ToneDataError e)\n| _ -> raise (ToneDataError (InvalidData \"列表格式错误\"))",
        "lines": [
          "try",
          "List.map",
          "(function `String s -> s | _ -> raise (ToneDataError (InvalidData \"非字符串类型的数据项\")))",
          "json_list",
          "with",
          "| ToneDataError e -> raise (ToneDataError e)",
          "| _ -> raise (ToneDataError (InvalidData \"列表格式错误\"))"
        ],
        "start_line": 26,
        "end_line": 32,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/tone_data/tone_data_json_loader.ml"
      }
    ],
    "6c8c7fa41cf8507d060870d6c75a1e37": [
      {
        "hash": "6c8c7fa41cf8507d060870d6c75a1e37",
        "text": "List.map\n(function `String s -> s | _ -> raise (ToneDataError (InvalidData \"非字符串类型的数据项\")))\njson_list\nwith\n| ToneDataError e -> raise (ToneDataError e)\n| _ -> raise (ToneDataError (InvalidData \"列表格式错误\"))",
        "lines": [
          "List.map",
          "(function `String s -> s | _ -> raise (ToneDataError (InvalidData \"非字符串类型的数据项\")))",
          "json_list",
          "with",
          "| ToneDataError e -> raise (ToneDataError e)",
          "| _ -> raise (ToneDataError (InvalidData \"列表格式错误\"))"
        ],
        "start_line": 43,
        "end_line": 48,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/tone_data_loader.ml"
      },
      {
        "hash": "6c8c7fa41cf8507d060870d6c75a1e37",
        "text": "List.map\n(function `String s -> s | _ -> raise (ToneDataError (InvalidData \"非字符串类型的数据项\")))\njson_list\nwith\n| ToneDataError e -> raise (ToneDataError e)\n| _ -> raise (ToneDataError (InvalidData \"列表格式错误\"))",
        "lines": [
          "List.map",
          "(function `String s -> s | _ -> raise (ToneDataError (InvalidData \"非字符串类型的数据项\")))",
          "json_list",
          "with",
          "| ToneDataError e -> raise (ToneDataError e)",
          "| _ -> raise (ToneDataError (InvalidData \"列表格式错误\"))"
        ],
        "start_line": 27,
        "end_line": 32,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/tone_data/tone_data_json_loader.ml"
      }
    ],
    "987e6bdfc67daae4c73356e89eb90641": [
      {
        "hash": "987e6bdfc67daae4c73356e89eb90641",
        "text": "(function `String s -> s | _ -> raise (ToneDataError (InvalidData \"非字符串类型的数据项\")))\njson_list\nwith\n| ToneDataError e -> raise (ToneDataError e)\n| _ -> raise (ToneDataError (InvalidData \"列表格式错误\"))",
        "lines": [
          "(function `String s -> s | _ -> raise (ToneDataError (InvalidData \"非字符串类型的数据项\")))",
          "json_list",
          "with",
          "| ToneDataError e -> raise (ToneDataError e)",
          "| _ -> raise (ToneDataError (InvalidData \"列表格式错误\"))"
        ],
        "start_line": 44,
        "end_line": 48,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/tone_data_loader.ml"
      },
      {
        "hash": "987e6bdfc67daae4c73356e89eb90641",
        "text": "(function `String s -> s | _ -> raise (ToneDataError (InvalidData \"非字符串类型的数据项\")))\njson_list\nwith\n| ToneDataError e -> raise (ToneDataError e)\n| _ -> raise (ToneDataError (InvalidData \"列表格式错误\"))",
        "lines": [
          "(function `String s -> s | _ -> raise (ToneDataError (InvalidData \"非字符串类型的数据项\")))",
          "json_list",
          "with",
          "| ToneDataError e -> raise (ToneDataError e)",
          "| _ -> raise (ToneDataError (InvalidData \"列表格式错误\"))"
        ],
        "start_line": 28,
        "end_line": 32,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/tone_data/tone_data_json_loader.ml"
      }
    ],
    "d12d9af74629775e1a7e77fe8664b5be": [
      {
        "hash": "d12d9af74629775e1a7e77fe8664b5be",
        "text": "json_list\nwith\n| ToneDataError e -> raise (ToneDataError e)\n| _ -> raise (ToneDataError (InvalidData \"列表格式错误\"))",
        "lines": [
          "json_list",
          "with",
          "| ToneDataError e -> raise (ToneDataError e)",
          "| _ -> raise (ToneDataError (InvalidData \"列表格式错误\"))"
        ],
        "start_line": 45,
        "end_line": 48,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/tone_data_loader.ml"
      },
      {
        "hash": "d12d9af74629775e1a7e77fe8664b5be",
        "text": "json_list\nwith\n| ToneDataError e -> raise (ToneDataError e)\n| _ -> raise (ToneDataError (InvalidData \"列表格式错误\"))",
        "lines": [
          "json_list",
          "with",
          "| ToneDataError e -> raise (ToneDataError e)",
          "| _ -> raise (ToneDataError (InvalidData \"列表格式错误\"))"
        ],
        "start_line": 29,
        "end_line": 32,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/tone_data/tone_data_json_loader.ml"
      }
    ],
    "b726e941c2b1ecb4dcc2bd46d20b5961": [
      {
        "hash": "b726e941c2b1ecb4dcc2bd46d20b5961",
        "text": "with\n| ToneDataError e -> raise (ToneDataError e)\n| _ -> raise (ToneDataError (InvalidData \"列表格式错误\"))",
        "lines": [
          "with",
          "| ToneDataError e -> raise (ToneDataError e)",
          "| _ -> raise (ToneDataError (InvalidData \"列表格式错误\"))"
        ],
        "start_line": 46,
        "end_line": 48,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/tone_data_loader.ml"
      },
      {
        "hash": "b726e941c2b1ecb4dcc2bd46d20b5961",
        "text": "with\n| ToneDataError e -> raise (ToneDataError e)\n| _ -> raise (ToneDataError (InvalidData \"列表格式错误\"))",
        "lines": [
          "with",
          "| ToneDataError e -> raise (ToneDataError e)",
          "| _ -> raise (ToneDataError (InvalidData \"列表格式错误\"))"
        ],
        "start_line": 30,
        "end_line": 32,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/tone_data/tone_data_json_loader.ml"
      }
    ],
    "8e2ca1470a1d3ade84ee79bd16eb76fa": [
      {
        "hash": "8e2ca1470a1d3ade84ee79bd16eb76fa",
        "text": "let parse_tone_data json =\ntry\nlet open Yojson.Basic.Util in\nlet ping_sheng = json |> member \"ping_sheng_chars\" |> to_list |> parse_string_list in\nlet shang_sheng = json |> member \"shang_sheng_chars\" |> to_list |> parse_string_list in\nlet qu_sheng = json |> member \"qu_sheng_chars\" |> to_list |> parse_string_list in\nlet ru_sheng = json |> member \"ru_sheng_chars\" |> to_list |> parse_string_list in\n(ping_sheng, shang_sheng, qu_sheng, ru_sheng)\nwith\n| Yojson.Basic.Util.Type_error (msg, _) -> raise (ToneDataError (ParseError (\"JSON结构错误: \" ^ msg)))",
        "lines": [
          "let parse_tone_data json =",
          "try",
          "let open Yojson.Basic.Util in",
          "let ping_sheng = json |> member \"ping_sheng_chars\" |> to_list |> parse_string_list in",
          "let shang_sheng = json |> member \"shang_sheng_chars\" |> to_list |> parse_string_list in",
          "let qu_sheng = json |> member \"qu_sheng_chars\" |> to_list |> parse_string_list in",
          "let ru_sheng = json |> member \"ru_sheng_chars\" |> to_list |> parse_string_list in",
          "(ping_sheng, shang_sheng, qu_sheng, ru_sheng)",
          "with",
          "| Yojson.Basic.Util.Type_error (msg, _) -> raise (ToneDataError (ParseError (\"JSON结构错误: \" ^ msg)))"
        ],
        "start_line": 51,
        "end_line": 60,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/tone_data_loader.ml"
      },
      {
        "hash": "8e2ca1470a1d3ade84ee79bd16eb76fa",
        "text": "let parse_tone_data json =\ntry\nlet open Yojson.Basic.Util in\nlet ping_sheng = json |> member \"ping_sheng_chars\" |> to_list |> parse_string_list in\nlet shang_sheng = json |> member \"shang_sheng_chars\" |> to_list |> parse_string_list in\nlet qu_sheng = json |> member \"qu_sheng_chars\" |> to_list |> parse_string_list in\nlet ru_sheng = json |> member \"ru_sheng_chars\" |> to_list |> parse_string_list in\n(ping_sheng, shang_sheng, qu_sheng, ru_sheng)\nwith\n| Yojson.Basic.Util.Type_error (msg, _) -> raise (ToneDataError (ParseError (\"JSON结构错误: \" ^ msg)))",
        "lines": [
          "let parse_tone_data json =",
          "try",
          "let open Yojson.Basic.Util in",
          "let ping_sheng = json |> member \"ping_sheng_chars\" |> to_list |> parse_string_list in",
          "let shang_sheng = json |> member \"shang_sheng_chars\" |> to_list |> parse_string_list in",
          "let qu_sheng = json |> member \"qu_sheng_chars\" |> to_list |> parse_string_list in",
          "let ru_sheng = json |> member \"ru_sheng_chars\" |> to_list |> parse_string_list in",
          "(ping_sheng, shang_sheng, qu_sheng, ru_sheng)",
          "with",
          "| Yojson.Basic.Util.Type_error (msg, _) -> raise (ToneDataError (ParseError (\"JSON结构错误: \" ^ msg)))"
        ],
        "start_line": 35,
        "end_line": 44,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/tone_data/tone_data_json_loader.ml"
      }
    ],
    "633c866ef121d29946558240bc804e60": [
      {
        "hash": "633c866ef121d29946558240bc804e60",
        "text": "try\nlet open Yojson.Basic.Util in\nlet ping_sheng = json |> member \"ping_sheng_chars\" |> to_list |> parse_string_list in\nlet shang_sheng = json |> member \"shang_sheng_chars\" |> to_list |> parse_string_list in\nlet qu_sheng = json |> member \"qu_sheng_chars\" |> to_list |> parse_string_list in\nlet ru_sheng = json |> member \"ru_sheng_chars\" |> to_list |> parse_string_list in\n(ping_sheng, shang_sheng, qu_sheng, ru_sheng)\nwith\n| Yojson.Basic.Util.Type_error (msg, _) -> raise (ToneDataError (ParseError (\"JSON结构错误: \" ^ msg)))\n| _ -> raise (ToneDataError (ParseError \"未知JSON解析错误\"))",
        "lines": [
          "try",
          "let open Yojson.Basic.Util in",
          "let ping_sheng = json |> member \"ping_sheng_chars\" |> to_list |> parse_string_list in",
          "let shang_sheng = json |> member \"shang_sheng_chars\" |> to_list |> parse_string_list in",
          "let qu_sheng = json |> member \"qu_sheng_chars\" |> to_list |> parse_string_list in",
          "let ru_sheng = json |> member \"ru_sheng_chars\" |> to_list |> parse_string_list in",
          "(ping_sheng, shang_sheng, qu_sheng, ru_sheng)",
          "with",
          "| Yojson.Basic.Util.Type_error (msg, _) -> raise (ToneDataError (ParseError (\"JSON结构错误: \" ^ msg)))",
          "| _ -> raise (ToneDataError (ParseError \"未知JSON解析错误\"))"
        ],
        "start_line": 52,
        "end_line": 61,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/tone_data_loader.ml"
      },
      {
        "hash": "633c866ef121d29946558240bc804e60",
        "text": "try\nlet open Yojson.Basic.Util in\nlet ping_sheng = json |> member \"ping_sheng_chars\" |> to_list |> parse_string_list in\nlet shang_sheng = json |> member \"shang_sheng_chars\" |> to_list |> parse_string_list in\nlet qu_sheng = json |> member \"qu_sheng_chars\" |> to_list |> parse_string_list in\nlet ru_sheng = json |> member \"ru_sheng_chars\" |> to_list |> parse_string_list in\n(ping_sheng, shang_sheng, qu_sheng, ru_sheng)\nwith\n| Yojson.Basic.Util.Type_error (msg, _) -> raise (ToneDataError (ParseError (\"JSON结构错误: \" ^ msg)))\n| _ -> raise (ToneDataError (ParseError \"未知JSON解析错误\"))",
        "lines": [
          "try",
          "let open Yojson.Basic.Util in",
          "let ping_sheng = json |> member \"ping_sheng_chars\" |> to_list |> parse_string_list in",
          "let shang_sheng = json |> member \"shang_sheng_chars\" |> to_list |> parse_string_list in",
          "let qu_sheng = json |> member \"qu_sheng_chars\" |> to_list |> parse_string_list in",
          "let ru_sheng = json |> member \"ru_sheng_chars\" |> to_list |> parse_string_list in",
          "(ping_sheng, shang_sheng, qu_sheng, ru_sheng)",
          "with",
          "| Yojson.Basic.Util.Type_error (msg, _) -> raise (ToneDataError (ParseError (\"JSON结构错误: \" ^ msg)))",
          "| _ -> raise (ToneDataError (ParseError \"未知JSON解析错误\"))"
        ],
        "start_line": 36,
        "end_line": 45,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/tone_data/tone_data_json_loader.ml"
      }
    ],
    "3b569bd99ffba79df6495fe5604cf3bc": [
      {
        "hash": "3b569bd99ffba79df6495fe5604cf3bc",
        "text": "let open Yojson.Basic.Util in\nlet ping_sheng = json |> member \"ping_sheng_chars\" |> to_list |> parse_string_list in\nlet shang_sheng = json |> member \"shang_sheng_chars\" |> to_list |> parse_string_list in\nlet qu_sheng = json |> member \"qu_sheng_chars\" |> to_list |> parse_string_list in\nlet ru_sheng = json |> member \"ru_sheng_chars\" |> to_list |> parse_string_list in\n(ping_sheng, shang_sheng, qu_sheng, ru_sheng)\nwith\n| Yojson.Basic.Util.Type_error (msg, _) -> raise (ToneDataError (ParseError (\"JSON结构错误: \" ^ msg)))\n| _ -> raise (ToneDataError (ParseError \"未知JSON解析错误\"))",
        "lines": [
          "let open Yojson.Basic.Util in",
          "let ping_sheng = json |> member \"ping_sheng_chars\" |> to_list |> parse_string_list in",
          "let shang_sheng = json |> member \"shang_sheng_chars\" |> to_list |> parse_string_list in",
          "let qu_sheng = json |> member \"qu_sheng_chars\" |> to_list |> parse_string_list in",
          "let ru_sheng = json |> member \"ru_sheng_chars\" |> to_list |> parse_string_list in",
          "(ping_sheng, shang_sheng, qu_sheng, ru_sheng)",
          "with",
          "| Yojson.Basic.Util.Type_error (msg, _) -> raise (ToneDataError (ParseError (\"JSON结构错误: \" ^ msg)))",
          "| _ -> raise (ToneDataError (ParseError \"未知JSON解析错误\"))"
        ],
        "start_line": 53,
        "end_line": 61,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/tone_data_loader.ml"
      },
      {
        "hash": "3b569bd99ffba79df6495fe5604cf3bc",
        "text": "let open Yojson.Basic.Util in\nlet ping_sheng = json |> member \"ping_sheng_chars\" |> to_list |> parse_string_list in\nlet shang_sheng = json |> member \"shang_sheng_chars\" |> to_list |> parse_string_list in\nlet qu_sheng = json |> member \"qu_sheng_chars\" |> to_list |> parse_string_list in\nlet ru_sheng = json |> member \"ru_sheng_chars\" |> to_list |> parse_string_list in\n(ping_sheng, shang_sheng, qu_sheng, ru_sheng)\nwith\n| Yojson.Basic.Util.Type_error (msg, _) -> raise (ToneDataError (ParseError (\"JSON结构错误: \" ^ msg)))\n| _ -> raise (ToneDataError (ParseError \"未知JSON解析错误\"))",
        "lines": [
          "let open Yojson.Basic.Util in",
          "let ping_sheng = json |> member \"ping_sheng_chars\" |> to_list |> parse_string_list in",
          "let shang_sheng = json |> member \"shang_sheng_chars\" |> to_list |> parse_string_list in",
          "let qu_sheng = json |> member \"qu_sheng_chars\" |> to_list |> parse_string_list in",
          "let ru_sheng = json |> member \"ru_sheng_chars\" |> to_list |> parse_string_list in",
          "(ping_sheng, shang_sheng, qu_sheng, ru_sheng)",
          "with",
          "| Yojson.Basic.Util.Type_error (msg, _) -> raise (ToneDataError (ParseError (\"JSON结构错误: \" ^ msg)))",
          "| _ -> raise (ToneDataError (ParseError \"未知JSON解析错误\"))"
        ],
        "start_line": 37,
        "end_line": 45,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/tone_data/tone_data_json_loader.ml"
      }
    ],
    "7f1b4378f738ee3dc758397b772e6415": [
      {
        "hash": "7f1b4378f738ee3dc758397b772e6415",
        "text": "let ping_sheng = json |> member \"ping_sheng_chars\" |> to_list |> parse_string_list in\nlet shang_sheng = json |> member \"shang_sheng_chars\" |> to_list |> parse_string_list in\nlet qu_sheng = json |> member \"qu_sheng_chars\" |> to_list |> parse_string_list in\nlet ru_sheng = json |> member \"ru_sheng_chars\" |> to_list |> parse_string_list in\n(ping_sheng, shang_sheng, qu_sheng, ru_sheng)\nwith\n| Yojson.Basic.Util.Type_error (msg, _) -> raise (ToneDataError (ParseError (\"JSON结构错误: \" ^ msg)))\n| _ -> raise (ToneDataError (ParseError \"未知JSON解析错误\"))",
        "lines": [
          "let ping_sheng = json |> member \"ping_sheng_chars\" |> to_list |> parse_string_list in",
          "let shang_sheng = json |> member \"shang_sheng_chars\" |> to_list |> parse_string_list in",
          "let qu_sheng = json |> member \"qu_sheng_chars\" |> to_list |> parse_string_list in",
          "let ru_sheng = json |> member \"ru_sheng_chars\" |> to_list |> parse_string_list in",
          "(ping_sheng, shang_sheng, qu_sheng, ru_sheng)",
          "with",
          "| Yojson.Basic.Util.Type_error (msg, _) -> raise (ToneDataError (ParseError (\"JSON结构错误: \" ^ msg)))",
          "| _ -> raise (ToneDataError (ParseError \"未知JSON解析错误\"))"
        ],
        "start_line": 54,
        "end_line": 61,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/tone_data_loader.ml"
      },
      {
        "hash": "7f1b4378f738ee3dc758397b772e6415",
        "text": "let ping_sheng = json |> member \"ping_sheng_chars\" |> to_list |> parse_string_list in\nlet shang_sheng = json |> member \"shang_sheng_chars\" |> to_list |> parse_string_list in\nlet qu_sheng = json |> member \"qu_sheng_chars\" |> to_list |> parse_string_list in\nlet ru_sheng = json |> member \"ru_sheng_chars\" |> to_list |> parse_string_list in\n(ping_sheng, shang_sheng, qu_sheng, ru_sheng)\nwith\n| Yojson.Basic.Util.Type_error (msg, _) -> raise (ToneDataError (ParseError (\"JSON结构错误: \" ^ msg)))\n| _ -> raise (ToneDataError (ParseError \"未知JSON解析错误\"))",
        "lines": [
          "let ping_sheng = json |> member \"ping_sheng_chars\" |> to_list |> parse_string_list in",
          "let shang_sheng = json |> member \"shang_sheng_chars\" |> to_list |> parse_string_list in",
          "let qu_sheng = json |> member \"qu_sheng_chars\" |> to_list |> parse_string_list in",
          "let ru_sheng = json |> member \"ru_sheng_chars\" |> to_list |> parse_string_list in",
          "(ping_sheng, shang_sheng, qu_sheng, ru_sheng)",
          "with",
          "| Yojson.Basic.Util.Type_error (msg, _) -> raise (ToneDataError (ParseError (\"JSON结构错误: \" ^ msg)))",
          "| _ -> raise (ToneDataError (ParseError \"未知JSON解析错误\"))"
        ],
        "start_line": 38,
        "end_line": 45,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/tone_data/tone_data_json_loader.ml"
      }
    ],
    "270c7dba0cfdce45159acf4aa250a8c5": [
      {
        "hash": "270c7dba0cfdce45159acf4aa250a8c5",
        "text": "let shang_sheng = json |> member \"shang_sheng_chars\" |> to_list |> parse_string_list in\nlet qu_sheng = json |> member \"qu_sheng_chars\" |> to_list |> parse_string_list in\nlet ru_sheng = json |> member \"ru_sheng_chars\" |> to_list |> parse_string_list in\n(ping_sheng, shang_sheng, qu_sheng, ru_sheng)\nwith\n| Yojson.Basic.Util.Type_error (msg, _) -> raise (ToneDataError (ParseError (\"JSON结构错误: \" ^ msg)))\n| _ -> raise (ToneDataError (ParseError \"未知JSON解析错误\"))",
        "lines": [
          "let shang_sheng = json |> member \"shang_sheng_chars\" |> to_list |> parse_string_list in",
          "let qu_sheng = json |> member \"qu_sheng_chars\" |> to_list |> parse_string_list in",
          "let ru_sheng = json |> member \"ru_sheng_chars\" |> to_list |> parse_string_list in",
          "(ping_sheng, shang_sheng, qu_sheng, ru_sheng)",
          "with",
          "| Yojson.Basic.Util.Type_error (msg, _) -> raise (ToneDataError (ParseError (\"JSON结构错误: \" ^ msg)))",
          "| _ -> raise (ToneDataError (ParseError \"未知JSON解析错误\"))"
        ],
        "start_line": 55,
        "end_line": 61,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/tone_data_loader.ml"
      },
      {
        "hash": "270c7dba0cfdce45159acf4aa250a8c5",
        "text": "let shang_sheng = json |> member \"shang_sheng_chars\" |> to_list |> parse_string_list in\nlet qu_sheng = json |> member \"qu_sheng_chars\" |> to_list |> parse_string_list in\nlet ru_sheng = json |> member \"ru_sheng_chars\" |> to_list |> parse_string_list in\n(ping_sheng, shang_sheng, qu_sheng, ru_sheng)\nwith\n| Yojson.Basic.Util.Type_error (msg, _) -> raise (ToneDataError (ParseError (\"JSON结构错误: \" ^ msg)))\n| _ -> raise (ToneDataError (ParseError \"未知JSON解析错误\"))",
        "lines": [
          "let shang_sheng = json |> member \"shang_sheng_chars\" |> to_list |> parse_string_list in",
          "let qu_sheng = json |> member \"qu_sheng_chars\" |> to_list |> parse_string_list in",
          "let ru_sheng = json |> member \"ru_sheng_chars\" |> to_list |> parse_string_list in",
          "(ping_sheng, shang_sheng, qu_sheng, ru_sheng)",
          "with",
          "| Yojson.Basic.Util.Type_error (msg, _) -> raise (ToneDataError (ParseError (\"JSON结构错误: \" ^ msg)))",
          "| _ -> raise (ToneDataError (ParseError \"未知JSON解析错误\"))"
        ],
        "start_line": 39,
        "end_line": 45,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/tone_data/tone_data_json_loader.ml"
      }
    ],
    "d2b6037c042d1e49cc32c8ec97cadc32": [
      {
        "hash": "d2b6037c042d1e49cc32c8ec97cadc32",
        "text": "let qu_sheng = json |> member \"qu_sheng_chars\" |> to_list |> parse_string_list in\nlet ru_sheng = json |> member \"ru_sheng_chars\" |> to_list |> parse_string_list in\n(ping_sheng, shang_sheng, qu_sheng, ru_sheng)\nwith\n| Yojson.Basic.Util.Type_error (msg, _) -> raise (ToneDataError (ParseError (\"JSON结构错误: \" ^ msg)))\n| _ -> raise (ToneDataError (ParseError \"未知JSON解析错误\"))",
        "lines": [
          "let qu_sheng = json |> member \"qu_sheng_chars\" |> to_list |> parse_string_list in",
          "let ru_sheng = json |> member \"ru_sheng_chars\" |> to_list |> parse_string_list in",
          "(ping_sheng, shang_sheng, qu_sheng, ru_sheng)",
          "with",
          "| Yojson.Basic.Util.Type_error (msg, _) -> raise (ToneDataError (ParseError (\"JSON结构错误: \" ^ msg)))",
          "| _ -> raise (ToneDataError (ParseError \"未知JSON解析错误\"))"
        ],
        "start_line": 56,
        "end_line": 61,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/tone_data_loader.ml"
      },
      {
        "hash": "d2b6037c042d1e49cc32c8ec97cadc32",
        "text": "let qu_sheng = json |> member \"qu_sheng_chars\" |> to_list |> parse_string_list in\nlet ru_sheng = json |> member \"ru_sheng_chars\" |> to_list |> parse_string_list in\n(ping_sheng, shang_sheng, qu_sheng, ru_sheng)\nwith\n| Yojson.Basic.Util.Type_error (msg, _) -> raise (ToneDataError (ParseError (\"JSON结构错误: \" ^ msg)))\n| _ -> raise (ToneDataError (ParseError \"未知JSON解析错误\"))",
        "lines": [
          "let qu_sheng = json |> member \"qu_sheng_chars\" |> to_list |> parse_string_list in",
          "let ru_sheng = json |> member \"ru_sheng_chars\" |> to_list |> parse_string_list in",
          "(ping_sheng, shang_sheng, qu_sheng, ru_sheng)",
          "with",
          "| Yojson.Basic.Util.Type_error (msg, _) -> raise (ToneDataError (ParseError (\"JSON结构错误: \" ^ msg)))",
          "| _ -> raise (ToneDataError (ParseError \"未知JSON解析错误\"))"
        ],
        "start_line": 40,
        "end_line": 45,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/tone_data/tone_data_json_loader.ml"
      }
    ],
    "fdcf777d5e0b387d591c3cf3970fce17": [
      {
        "hash": "fdcf777d5e0b387d591c3cf3970fce17",
        "text": "let ru_sheng = json |> member \"ru_sheng_chars\" |> to_list |> parse_string_list in\n(ping_sheng, shang_sheng, qu_sheng, ru_sheng)\nwith\n| Yojson.Basic.Util.Type_error (msg, _) -> raise (ToneDataError (ParseError (\"JSON结构错误: \" ^ msg)))\n| _ -> raise (ToneDataError (ParseError \"未知JSON解析错误\"))",
        "lines": [
          "let ru_sheng = json |> member \"ru_sheng_chars\" |> to_list |> parse_string_list in",
          "(ping_sheng, shang_sheng, qu_sheng, ru_sheng)",
          "with",
          "| Yojson.Basic.Util.Type_error (msg, _) -> raise (ToneDataError (ParseError (\"JSON结构错误: \" ^ msg)))",
          "| _ -> raise (ToneDataError (ParseError \"未知JSON解析错误\"))"
        ],
        "start_line": 57,
        "end_line": 61,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/tone_data_loader.ml"
      },
      {
        "hash": "fdcf777d5e0b387d591c3cf3970fce17",
        "text": "let ru_sheng = json |> member \"ru_sheng_chars\" |> to_list |> parse_string_list in\n(ping_sheng, shang_sheng, qu_sheng, ru_sheng)\nwith\n| Yojson.Basic.Util.Type_error (msg, _) -> raise (ToneDataError (ParseError (\"JSON结构错误: \" ^ msg)))\n| _ -> raise (ToneDataError (ParseError \"未知JSON解析错误\"))",
        "lines": [
          "let ru_sheng = json |> member \"ru_sheng_chars\" |> to_list |> parse_string_list in",
          "(ping_sheng, shang_sheng, qu_sheng, ru_sheng)",
          "with",
          "| Yojson.Basic.Util.Type_error (msg, _) -> raise (ToneDataError (ParseError (\"JSON结构错误: \" ^ msg)))",
          "| _ -> raise (ToneDataError (ParseError \"未知JSON解析错误\"))"
        ],
        "start_line": 41,
        "end_line": 45,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/tone_data/tone_data_json_loader.ml"
      }
    ],
    "b991016072b2236416d58c8bc10dbc11": [
      {
        "hash": "b991016072b2236416d58c8bc10dbc11",
        "text": "(ping_sheng, shang_sheng, qu_sheng, ru_sheng)\nwith\n| Yojson.Basic.Util.Type_error (msg, _) -> raise (ToneDataError (ParseError (\"JSON结构错误: \" ^ msg)))\n| _ -> raise (ToneDataError (ParseError \"未知JSON解析错误\"))",
        "lines": [
          "(ping_sheng, shang_sheng, qu_sheng, ru_sheng)",
          "with",
          "| Yojson.Basic.Util.Type_error (msg, _) -> raise (ToneDataError (ParseError (\"JSON结构错误: \" ^ msg)))",
          "| _ -> raise (ToneDataError (ParseError \"未知JSON解析错误\"))"
        ],
        "start_line": 58,
        "end_line": 61,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/tone_data_loader.ml"
      },
      {
        "hash": "b991016072b2236416d58c8bc10dbc11",
        "text": "(ping_sheng, shang_sheng, qu_sheng, ru_sheng)\nwith\n| Yojson.Basic.Util.Type_error (msg, _) -> raise (ToneDataError (ParseError (\"JSON结构错误: \" ^ msg)))\n| _ -> raise (ToneDataError (ParseError \"未知JSON解析错误\"))",
        "lines": [
          "(ping_sheng, shang_sheng, qu_sheng, ru_sheng)",
          "with",
          "| Yojson.Basic.Util.Type_error (msg, _) -> raise (ToneDataError (ParseError (\"JSON结构错误: \" ^ msg)))",
          "| _ -> raise (ToneDataError (ParseError \"未知JSON解析错误\"))"
        ],
        "start_line": 42,
        "end_line": 45,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/tone_data/tone_data_json_loader.ml"
      }
    ],
    "fc18f6afdcf3056c8c702afe819a78c7": [
      {
        "hash": "fc18f6afdcf3056c8c702afe819a78c7",
        "text": "with\n| Yojson.Basic.Util.Type_error (msg, _) -> raise (ToneDataError (ParseError (\"JSON结构错误: \" ^ msg)))\n| _ -> raise (ToneDataError (ParseError \"未知JSON解析错误\"))",
        "lines": [
          "with",
          "| Yojson.Basic.Util.Type_error (msg, _) -> raise (ToneDataError (ParseError (\"JSON结构错误: \" ^ msg)))",
          "| _ -> raise (ToneDataError (ParseError \"未知JSON解析错误\"))"
        ],
        "start_line": 59,
        "end_line": 61,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/tone_data_loader.ml"
      },
      {
        "hash": "fc18f6afdcf3056c8c702afe819a78c7",
        "text": "with\n| Yojson.Basic.Util.Type_error (msg, _) -> raise (ToneDataError (ParseError (\"JSON结构错误: \" ^ msg)))\n| _ -> raise (ToneDataError (ParseError \"未知JSON解析错误\"))",
        "lines": [
          "with",
          "| Yojson.Basic.Util.Type_error (msg, _) -> raise (ToneDataError (ParseError (\"JSON结构错误: \" ^ msg)))",
          "| _ -> raise (ToneDataError (ParseError \"未知JSON解析错误\"))"
        ],
        "start_line": 43,
        "end_line": 45,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/tone_data/tone_data_json_loader.ml"
      }
    ],
    "0119d839483de7219cd4013782645033": [
      {
        "hash": "0119d839483de7219cd4013782645033",
        "text": "let load_tone_data_from_json () =\ntry\nif not (Sys.file_exists tone_data_file) then raise (ToneDataError (FileNotFound tone_data_file));",
        "lines": [
          "let load_tone_data_from_json () =",
          "try",
          "if not (Sys.file_exists tone_data_file) then raise (ToneDataError (FileNotFound tone_data_file));"
        ],
        "start_line": 64,
        "end_line": 66,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/tone_data_loader.ml"
      },
      {
        "hash": "0119d839483de7219cd4013782645033",
        "text": "let load_tone_data_from_json () =\ntry\nif not (Sys.file_exists tone_data_file) then raise (ToneDataError (FileNotFound tone_data_file));",
        "lines": [
          "let load_tone_data_from_json () =",
          "try",
          "if not (Sys.file_exists tone_data_file) then raise (ToneDataError (FileNotFound tone_data_file));"
        ],
        "start_line": 48,
        "end_line": 50,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/tone_data/tone_data_json_loader.ml"
      }
    ],
    "e55a000dcc7cc9be570ed9f69351a76d": [
      {
        "hash": "e55a000dcc7cc9be570ed9f69351a76d",
        "text": "let json = Yojson.Basic.from_file tone_data_file in\nparse_tone_data json\nwith\n| ToneDataError e -> raise (ToneDataError e)\n| Sys_error msg -> raise (ToneDataError (FileNotFound msg))\n| Yojson.Json_error msg -> raise (ToneDataError (ParseError msg))",
        "lines": [
          "let json = Yojson.Basic.from_file tone_data_file in",
          "parse_tone_data json",
          "with",
          "| ToneDataError e -> raise (ToneDataError e)",
          "| Sys_error msg -> raise (ToneDataError (FileNotFound msg))",
          "| Yojson.Json_error msg -> raise (ToneDataError (ParseError msg))"
        ],
        "start_line": 68,
        "end_line": 73,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/tone_data_loader.ml"
      },
      {
        "hash": "e55a000dcc7cc9be570ed9f69351a76d",
        "text": "let json = Yojson.Basic.from_file tone_data_file in\nparse_tone_data json\nwith\n| ToneDataError e -> raise (ToneDataError e)\n| Sys_error msg -> raise (ToneDataError (FileNotFound msg))\n| Yojson.Json_error msg -> raise (ToneDataError (ParseError msg))",
        "lines": [
          "let json = Yojson.Basic.from_file tone_data_file in",
          "parse_tone_data json",
          "with",
          "| ToneDataError e -> raise (ToneDataError e)",
          "| Sys_error msg -> raise (ToneDataError (FileNotFound msg))",
          "| Yojson.Json_error msg -> raise (ToneDataError (ParseError msg))"
        ],
        "start_line": 52,
        "end_line": 57,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/tone_data/tone_data_json_loader.ml"
      }
    ],
    "1eeb1f69c15bdd32e4391e591ec1bac6": [
      {
        "hash": "1eeb1f69c15bdd32e4391e591ec1bac6",
        "text": "parse_tone_data json\nwith\n| ToneDataError e -> raise (ToneDataError e)\n| Sys_error msg -> raise (ToneDataError (FileNotFound msg))\n| Yojson.Json_error msg -> raise (ToneDataError (ParseError msg))",
        "lines": [
          "parse_tone_data json",
          "with",
          "| ToneDataError e -> raise (ToneDataError e)",
          "| Sys_error msg -> raise (ToneDataError (FileNotFound msg))",
          "| Yojson.Json_error msg -> raise (ToneDataError (ParseError msg))"
        ],
        "start_line": 69,
        "end_line": 73,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/tone_data_loader.ml"
      },
      {
        "hash": "1eeb1f69c15bdd32e4391e591ec1bac6",
        "text": "parse_tone_data json\nwith\n| ToneDataError e -> raise (ToneDataError e)\n| Sys_error msg -> raise (ToneDataError (FileNotFound msg))\n| Yojson.Json_error msg -> raise (ToneDataError (ParseError msg))",
        "lines": [
          "parse_tone_data json",
          "with",
          "| ToneDataError e -> raise (ToneDataError e)",
          "| Sys_error msg -> raise (ToneDataError (FileNotFound msg))",
          "| Yojson.Json_error msg -> raise (ToneDataError (ParseError msg))"
        ],
        "start_line": 53,
        "end_line": 57,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/tone_data/tone_data_json_loader.ml"
      }
    ],
    "e915d440e07d5e58de8626228d662e43": [
      {
        "hash": "e915d440e07d5e58de8626228d662e43",
        "text": "with\n| ToneDataError e -> raise (ToneDataError e)\n| Sys_error msg -> raise (ToneDataError (FileNotFound msg))\n| Yojson.Json_error msg -> raise (ToneDataError (ParseError msg))",
        "lines": [
          "with",
          "| ToneDataError e -> raise (ToneDataError e)",
          "| Sys_error msg -> raise (ToneDataError (FileNotFound msg))",
          "| Yojson.Json_error msg -> raise (ToneDataError (ParseError msg))"
        ],
        "start_line": 70,
        "end_line": 73,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/tone_data_loader.ml"
      },
      {
        "hash": "e915d440e07d5e58de8626228d662e43",
        "text": "with\n| ToneDataError e -> raise (ToneDataError e)\n| Sys_error msg -> raise (ToneDataError (FileNotFound msg))\n| Yojson.Json_error msg -> raise (ToneDataError (ParseError msg))",
        "lines": [
          "with",
          "| ToneDataError e -> raise (ToneDataError e)",
          "| Sys_error msg -> raise (ToneDataError (FileNotFound msg))",
          "| Yojson.Json_error msg -> raise (ToneDataError (ParseError msg))"
        ],
        "start_line": 54,
        "end_line": 57,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/tone_data/tone_data_json_loader.ml"
      }
    ],
    "cc24641de7aeae773af8600ecb59e5cc": [
      {
        "hash": "cc24641de7aeae773af8600ecb59e5cc",
        "text": "| ToneDataError e -> raise (ToneDataError e)\n| Sys_error msg -> raise (ToneDataError (FileNotFound msg))\n| Yojson.Json_error msg -> raise (ToneDataError (ParseError msg))",
        "lines": [
          "| ToneDataError e -> raise (ToneDataError e)",
          "| Sys_error msg -> raise (ToneDataError (FileNotFound msg))",
          "| Yojson.Json_error msg -> raise (ToneDataError (ParseError msg))"
        ],
        "start_line": 71,
        "end_line": 73,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/tone_data_loader.ml"
      },
      {
        "hash": "cc24641de7aeae773af8600ecb59e5cc",
        "text": "| ToneDataError e -> raise (ToneDataError e)\n| Sys_error msg -> raise (ToneDataError (FileNotFound msg))\n| Yojson.Json_error msg -> raise (ToneDataError (ParseError msg))",
        "lines": [
          "| ToneDataError e -> raise (ToneDataError e)",
          "| Sys_error msg -> raise (ToneDataError (FileNotFound msg))",
          "| Yojson.Json_error msg -> raise (ToneDataError (ParseError msg))"
        ],
        "start_line": 55,
        "end_line": 57,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/tone_data/tone_data_json_loader.ml"
      }
    ],
    "50fa87c49d59e6184d3b6ffa0c5a3f9b": [
      {
        "hash": "50fa87c49d59e6184d3b6ffa0c5a3f9b",
        "text": "let get_cached_tone_data () =\nmatch !cached_data with\n| Some data -> data\n| None ->\nlet data = load_tone_data_from_json () in\ncached_data := Some data;\ndata",
        "lines": [
          "let get_cached_tone_data () =",
          "match !cached_data with",
          "| Some data -> data",
          "| None ->",
          "let data = load_tone_data_from_json () in",
          "cached_data := Some data;",
          "data"
        ],
        "start_line": 78,
        "end_line": 84,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/tone_data_loader.ml"
      },
      {
        "hash": "50fa87c49d59e6184d3b6ffa0c5a3f9b",
        "text": "let get_cached_tone_data () =\nmatch !cached_data with\n| Some data -> data\n| None ->\nlet data = load_tone_data_from_json () in\ncached_data := Some data;\ndata",
        "lines": [
          "let get_cached_tone_data () =",
          "match !cached_data with",
          "| Some data -> data",
          "| None ->",
          "let data = load_tone_data_from_json () in",
          "cached_data := Some data;",
          "data"
        ],
        "start_line": 62,
        "end_line": 68,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/tone_data/tone_data_json_loader.ml"
      }
    ],
    "31fd3976d9a4a5f91916643f7d3fe44c": [
      {
        "hash": "31fd3976d9a4a5f91916643f7d3fe44c",
        "text": "match !cached_data with\n| Some data -> data\n| None ->\nlet data = load_tone_data_from_json () in\ncached_data := Some data;\ndata",
        "lines": [
          "match !cached_data with",
          "| Some data -> data",
          "| None ->",
          "let data = load_tone_data_from_json () in",
          "cached_data := Some data;",
          "data"
        ],
        "start_line": 79,
        "end_line": 84,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/tone_data_loader.ml"
      },
      {
        "hash": "31fd3976d9a4a5f91916643f7d3fe44c",
        "text": "match !cached_data with\n| Some data -> data\n| None ->\nlet data = load_tone_data_from_json () in\ncached_data := Some data;\ndata",
        "lines": [
          "match !cached_data with",
          "| Some data -> data",
          "| None ->",
          "let data = load_tone_data_from_json () in",
          "cached_data := Some data;",
          "data"
        ],
        "start_line": 63,
        "end_line": 68,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/tone_data/tone_data_json_loader.ml"
      }
    ],
    "9fd5c45c92314885e9b761d6990f71fd": [
      {
        "hash": "9fd5c45c92314885e9b761d6990f71fd",
        "text": "| Some data -> data\n| None ->\nlet data = load_tone_data_from_json () in\ncached_data := Some data;\ndata",
        "lines": [
          "| Some data -> data",
          "| None ->",
          "let data = load_tone_data_from_json () in",
          "cached_data := Some data;",
          "data"
        ],
        "start_line": 80,
        "end_line": 84,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/tone_data_loader.ml"
      },
      {
        "hash": "9fd5c45c92314885e9b761d6990f71fd",
        "text": "| Some data -> data\n| None ->\nlet data = load_tone_data_from_json () in\ncached_data := Some data;\ndata",
        "lines": [
          "| Some data -> data",
          "| None ->",
          "let data = load_tone_data_from_json () in",
          "cached_data := Some data;",
          "data"
        ],
        "start_line": 64,
        "end_line": 68,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/tone_data/tone_data_json_loader.ml"
      }
    ],
    "3454ec5eabd1a78e2bf98e7e21d8b3ee": [
      {
        "hash": "3454ec5eabd1a78e2bf98e7e21d8b3ee",
        "text": "| None ->\nlet data = load_tone_data_from_json () in\ncached_data := Some data;\ndata",
        "lines": [
          "| None ->",
          "let data = load_tone_data_from_json () in",
          "cached_data := Some data;",
          "data"
        ],
        "start_line": 81,
        "end_line": 84,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/tone_data_loader.ml"
      },
      {
        "hash": "3454ec5eabd1a78e2bf98e7e21d8b3ee",
        "text": "| None ->\nlet data = load_tone_data_from_json () in\ncached_data := Some data;\ndata",
        "lines": [
          "| None ->",
          "let data = load_tone_data_from_json () in",
          "cached_data := Some data;",
          "data"
        ],
        "start_line": 65,
        "end_line": 68,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/tone_data/tone_data_json_loader.ml"
      }
    ],
    "7563d87fe7d897f4d6249837dd3088fb": [
      {
        "hash": "7563d87fe7d897f4d6249837dd3088fb",
        "text": "let data = load_tone_data_from_json () in\ncached_data := Some data;\ndata",
        "lines": [
          "let data = load_tone_data_from_json () in",
          "cached_data := Some data;",
          "data"
        ],
        "start_line": 82,
        "end_line": 84,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/tone_data_loader.ml"
      },
      {
        "hash": "7563d87fe7d897f4d6249837dd3088fb",
        "text": "let data = load_tone_data_from_json () in\ncached_data := Some data;\ndata",
        "lines": [
          "let data = load_tone_data_from_json () in",
          "cached_data := Some data;",
          "data"
        ],
        "start_line": 66,
        "end_line": 68,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/tone_data/tone_data_json_loader.ml"
      }
    ],
    "ffb05d83be1985c8ba6453b3c6e070f4": [
      {
        "hash": "ffb05d83be1985c8ba6453b3c6e070f4",
        "text": "let fallback_shang_sheng = [ \"上\"; \"老\"; \"好\"; \"小\"; \"少\"; \"早\"; \"草\"; \"手\"; \"口\"; \"九\" ]\nlet fallback_qu_sheng = [ \"去\"; \"次\"; \"事\"; \"字\"; \"自\"; \"大\"; \"代\"; \"带\"; \"待\"; \"戴\" ]\nlet fallback_ru_sheng = [ \"入\"; \"出\"; \"国\"; \"德\"; \"得\"; \"北\"; \"白\"; \"百\"; \"柏\"; \"拍\" ]",
        "lines": [
          "let fallback_shang_sheng = [ \"上\"; \"老\"; \"好\"; \"小\"; \"少\"; \"早\"; \"草\"; \"手\"; \"口\"; \"九\" ]",
          "let fallback_qu_sheng = [ \"去\"; \"次\"; \"事\"; \"字\"; \"自\"; \"大\"; \"代\"; \"带\"; \"待\"; \"戴\" ]",
          "let fallback_ru_sheng = [ \"入\"; \"出\"; \"国\"; \"德\"; \"得\"; \"北\"; \"白\"; \"百\"; \"柏\"; \"拍\" ]"
        ],
        "start_line": 89,
        "end_line": 91,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/tone_data_loader.ml"
      },
      {
        "hash": "ffb05d83be1985c8ba6453b3c6e070f4",
        "text": "let fallback_shang_sheng = [ \"上\"; \"老\"; \"好\"; \"小\"; \"少\"; \"早\"; \"草\"; \"手\"; \"口\"; \"九\" ]\nlet fallback_qu_sheng = [ \"去\"; \"次\"; \"事\"; \"字\"; \"自\"; \"大\"; \"代\"; \"带\"; \"待\"; \"戴\" ]\nlet fallback_ru_sheng = [ \"入\"; \"出\"; \"国\"; \"德\"; \"得\"; \"北\"; \"白\"; \"百\"; \"柏\"; \"拍\" ]",
        "lines": [
          "let fallback_shang_sheng = [ \"上\"; \"老\"; \"好\"; \"小\"; \"少\"; \"早\"; \"草\"; \"手\"; \"口\"; \"九\" ]",
          "let fallback_qu_sheng = [ \"去\"; \"次\"; \"事\"; \"字\"; \"自\"; \"大\"; \"代\"; \"带\"; \"待\"; \"戴\" ]",
          "let fallback_ru_sheng = [ \"入\"; \"出\"; \"国\"; \"德\"; \"得\"; \"北\"; \"白\"; \"百\"; \"柏\"; \"拍\" ]"
        ],
        "start_line": 73,
        "end_line": 75,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/tone_data/tone_data_json_loader.ml"
      }
    ],
    "5f8efeeded49903f5b650a8410f50b1e": [
      {
        "hash": "5f8efeeded49903f5b650a8410f50b1e",
        "text": "let safe_load_tone_data () =\ntry get_cached_tone_data ()\nwith ToneDataError e ->\neprintf \"警告: %s，使用降级数据\\n\" (format_error e);\n(fallback_ping_sheng, fallback_shang_sheng, fallback_qu_sheng, fallback_ru_sheng)",
        "lines": [
          "let safe_load_tone_data () =",
          "try get_cached_tone_data ()",
          "with ToneDataError e ->",
          "eprintf \"警告: %s，使用降级数据\\n\" (format_error e);",
          "(fallback_ping_sheng, fallback_shang_sheng, fallback_qu_sheng, fallback_ru_sheng)"
        ],
        "start_line": 94,
        "end_line": 98,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/tone_data_loader.ml"
      },
      {
        "hash": "5f8efeeded49903f5b650a8410f50b1e",
        "text": "let safe_load_tone_data () =\ntry get_cached_tone_data ()\nwith ToneDataError e ->\neprintf \"警告: %s，使用降级数据\\n\" (format_error e);\n(fallback_ping_sheng, fallback_shang_sheng, fallback_qu_sheng, fallback_ru_sheng)",
        "lines": [
          "let safe_load_tone_data () =",
          "try get_cached_tone_data ()",
          "with ToneDataError e ->",
          "eprintf \"警告: %s，使用降级数据\\n\" (format_error e);",
          "(fallback_ping_sheng, fallback_shang_sheng, fallback_qu_sheng, fallback_ru_sheng)"
        ],
        "start_line": 78,
        "end_line": 82,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/tone_data/tone_data_json_loader.ml"
      }
    ],
    "7b11c0d4923bac10a0ca3c3a9b4f81d6": [
      {
        "hash": "7b11c0d4923bac10a0ca3c3a9b4f81d6",
        "text": "try get_cached_tone_data ()\nwith ToneDataError e ->\neprintf \"警告: %s，使用降级数据\\n\" (format_error e);\n(fallback_ping_sheng, fallback_shang_sheng, fallback_qu_sheng, fallback_ru_sheng)",
        "lines": [
          "try get_cached_tone_data ()",
          "with ToneDataError e ->",
          "eprintf \"警告: %s，使用降级数据\\n\" (format_error e);",
          "(fallback_ping_sheng, fallback_shang_sheng, fallback_qu_sheng, fallback_ru_sheng)"
        ],
        "start_line": 95,
        "end_line": 98,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/tone_data_loader.ml"
      },
      {
        "hash": "7b11c0d4923bac10a0ca3c3a9b4f81d6",
        "text": "try get_cached_tone_data ()\nwith ToneDataError e ->\neprintf \"警告: %s，使用降级数据\\n\" (format_error e);\n(fallback_ping_sheng, fallback_shang_sheng, fallback_qu_sheng, fallback_ru_sheng)",
        "lines": [
          "try get_cached_tone_data ()",
          "with ToneDataError e ->",
          "eprintf \"警告: %s，使用降级数据\\n\" (format_error e);",
          "(fallback_ping_sheng, fallback_shang_sheng, fallback_qu_sheng, fallback_ru_sheng)"
        ],
        "start_line": 79,
        "end_line": 82,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/tone_data/tone_data_json_loader.ml"
      }
    ],
    "fc040b0ff36fa84025756a5f78cc5030": [
      {
        "hash": "fc040b0ff36fa84025756a5f78cc5030",
        "text": "with ToneDataError e ->\neprintf \"警告: %s，使用降级数据\\n\" (format_error e);\n(fallback_ping_sheng, fallback_shang_sheng, fallback_qu_sheng, fallback_ru_sheng)",
        "lines": [
          "with ToneDataError e ->",
          "eprintf \"警告: %s，使用降级数据\\n\" (format_error e);",
          "(fallback_ping_sheng, fallback_shang_sheng, fallback_qu_sheng, fallback_ru_sheng)"
        ],
        "start_line": 96,
        "end_line": 98,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/tone_data_loader.ml"
      },
      {
        "hash": "fc040b0ff36fa84025756a5f78cc5030",
        "text": "with ToneDataError e ->\neprintf \"警告: %s，使用降级数据\\n\" (format_error e);\n(fallback_ping_sheng, fallback_shang_sheng, fallback_qu_sheng, fallback_ru_sheng)",
        "lines": [
          "with ToneDataError e ->",
          "eprintf \"警告: %s，使用降级数据\\n\" (format_error e);",
          "(fallback_ping_sheng, fallback_shang_sheng, fallback_qu_sheng, fallback_ru_sheng)"
        ],
        "start_line": 80,
        "end_line": 82,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/tone_data/tone_data_json_loader.ml"
      }
    ],
    "eb487404f50bf1dc353c602b46f76041": [
      {
        "hash": "eb487404f50bf1dc353c602b46f76041",
        "text": "let get_ping_sheng_chars () =\nlet ping_sheng, _, _, _ = safe_load_tone_data () in\nping_sheng",
        "lines": [
          "let get_ping_sheng_chars () =",
          "let ping_sheng, _, _, _ = safe_load_tone_data () in",
          "ping_sheng"
        ],
        "start_line": 103,
        "end_line": 105,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/tone_data_loader.ml"
      },
      {
        "hash": "eb487404f50bf1dc353c602b46f76041",
        "text": "let get_ping_sheng_chars () =\nlet ping_sheng, _, _, _ = safe_load_tone_data () in\nping_sheng",
        "lines": [
          "let get_ping_sheng_chars () =",
          "let ping_sheng, _, _, _ = safe_load_tone_data () in",
          "ping_sheng"
        ],
        "start_line": 87,
        "end_line": 89,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/tone_data/tone_data_json_loader.ml"
      }
    ],
    "8581688e8c4b91ef922543029db91f4a": [
      {
        "hash": "8581688e8c4b91ef922543029db91f4a",
        "text": "let get_shang_sheng_chars () =\nlet _, shang_sheng, _, _ = safe_load_tone_data () in\nshang_sheng",
        "lines": [
          "let get_shang_sheng_chars () =",
          "let _, shang_sheng, _, _ = safe_load_tone_data () in",
          "shang_sheng"
        ],
        "start_line": 108,
        "end_line": 110,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/tone_data_loader.ml"
      },
      {
        "hash": "8581688e8c4b91ef922543029db91f4a",
        "text": "let get_shang_sheng_chars () =\nlet _, shang_sheng, _, _ = safe_load_tone_data () in\nshang_sheng",
        "lines": [
          "let get_shang_sheng_chars () =",
          "let _, shang_sheng, _, _ = safe_load_tone_data () in",
          "shang_sheng"
        ],
        "start_line": 92,
        "end_line": 94,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/tone_data/tone_data_json_loader.ml"
      }
    ],
    "6e893353d0d3354eae9e3f5859a23f7d": [
      {
        "hash": "6e893353d0d3354eae9e3f5859a23f7d",
        "text": "let get_qu_sheng_chars () =\nlet _, _, qu_sheng, _ = safe_load_tone_data () in\nqu_sheng",
        "lines": [
          "let get_qu_sheng_chars () =",
          "let _, _, qu_sheng, _ = safe_load_tone_data () in",
          "qu_sheng"
        ],
        "start_line": 113,
        "end_line": 115,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/tone_data_loader.ml"
      },
      {
        "hash": "6e893353d0d3354eae9e3f5859a23f7d",
        "text": "let get_qu_sheng_chars () =\nlet _, _, qu_sheng, _ = safe_load_tone_data () in\nqu_sheng",
        "lines": [
          "let get_qu_sheng_chars () =",
          "let _, _, qu_sheng, _ = safe_load_tone_data () in",
          "qu_sheng"
        ],
        "start_line": 97,
        "end_line": 99,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/tone_data/tone_data_json_loader.ml"
      }
    ],
    "a152cdc0341220af80c4e5a59ec2b6bf": [
      {
        "hash": "a152cdc0341220af80c4e5a59ec2b6bf",
        "text": "let get_ru_sheng_chars () =\nlet _, _, _, ru_sheng = safe_load_tone_data () in\nru_sheng",
        "lines": [
          "let get_ru_sheng_chars () =",
          "let _, _, _, ru_sheng = safe_load_tone_data () in",
          "ru_sheng"
        ],
        "start_line": 118,
        "end_line": 120,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/tone_data_loader.ml"
      },
      {
        "hash": "a152cdc0341220af80c4e5a59ec2b6bf",
        "text": "let get_ru_sheng_chars () =\nlet _, _, _, ru_sheng = safe_load_tone_data () in\nru_sheng",
        "lines": [
          "let get_ru_sheng_chars () =",
          "let _, _, _, ru_sheng = safe_load_tone_data () in",
          "ru_sheng"
        ],
        "start_line": 102,
        "end_line": 104,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/tone_data/tone_data_json_loader.ml"
      }
    ],
    "57ec0900ef4f728cb4c545c79f204cc7": [
      {
        "hash": "57ec0900ef4f728cb4c545c79f204cc7",
        "text": "let reload_tone_data () =\ncached_data := None;\nsafe_load_tone_data ()",
        "lines": [
          "let reload_tone_data () =",
          "cached_data := None;",
          "safe_load_tone_data ()"
        ],
        "start_line": 126,
        "end_line": 128,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/tone_data_loader.ml"
      },
      {
        "hash": "57ec0900ef4f728cb4c545c79f204cc7",
        "text": "let reload_tone_data () =\ncached_data := None;\nsafe_load_tone_data ()",
        "lines": [
          "let reload_tone_data () =",
          "cached_data := None;",
          "safe_load_tone_data ()"
        ],
        "start_line": 110,
        "end_line": 112,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/tone_data/tone_data_json_loader.ml"
      }
    ],
    "4dcac205d6f635085bbff5fb29d7b0ca": [
      {
        "hash": "4dcac205d6f635085bbff5fb29d7b0ca",
        "text": "let validate_data () =\ntry\nlet ping, shang, qu, ru = get_cached_tone_data () in\nlet total_chars = List.length ping + List.length shang + List.length qu + List.length ru in\nprintf \"声调数据验证通过 - 总字符数: %d\\n\" total_chars;\nprintf \" 平声: %d, 上声: %d, 去声: %d, 入声: %d\\n\" (List.length ping) (List.length shang)\n(List.length qu) (List.length ru);\ntrue\nwith ToneDataError e ->\neprintf \"数据验证失败: %s\\n\" (format_error e);",
        "lines": [
          "let validate_data () =",
          "try",
          "let ping, shang, qu, ru = get_cached_tone_data () in",
          "let total_chars = List.length ping + List.length shang + List.length qu + List.length ru in",
          "printf \"声调数据验证通过 - 总字符数: %d\\n\" total_chars;",
          "printf \" 平声: %d, 上声: %d, 去声: %d, 入声: %d\\n\" (List.length ping) (List.length shang)",
          "(List.length qu) (List.length ru);",
          "true",
          "with ToneDataError e ->",
          "eprintf \"数据验证失败: %s\\n\" (format_error e);"
        ],
        "start_line": 131,
        "end_line": 140,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/tone_data_loader.ml"
      },
      {
        "hash": "4dcac205d6f635085bbff5fb29d7b0ca",
        "text": "let validate_data () =\ntry\nlet ping, shang, qu, ru = get_cached_tone_data () in\nlet total_chars = List.length ping + List.length shang + List.length qu + List.length ru in\nprintf \"声调数据验证通过 - 总字符数: %d\\n\" total_chars;\nprintf \" 平声: %d, 上声: %d, 去声: %d, 入声: %d\\n\" (List.length ping) (List.length shang)\n(List.length qu) (List.length ru);\ntrue\nwith ToneDataError e ->\neprintf \"数据验证失败: %s\\n\" (format_error e);",
        "lines": [
          "let validate_data () =",
          "try",
          "let ping, shang, qu, ru = get_cached_tone_data () in",
          "let total_chars = List.length ping + List.length shang + List.length qu + List.length ru in",
          "printf \"声调数据验证通过 - 总字符数: %d\\n\" total_chars;",
          "printf \" 平声: %d, 上声: %d, 去声: %d, 入声: %d\\n\" (List.length ping) (List.length shang)",
          "(List.length qu) (List.length ru);",
          "true",
          "with ToneDataError e ->",
          "eprintf \"数据验证失败: %s\\n\" (format_error e);"
        ],
        "start_line": 115,
        "end_line": 124,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/tone_data/tone_data_json_loader.ml"
      }
    ],
    "cfec24e11317042f091b39e3ccf8a9e3": [
      {
        "hash": "cfec24e11317042f091b39e3ccf8a9e3",
        "text": "try\nlet ping, shang, qu, ru = get_cached_tone_data () in\nlet total_chars = List.length ping + List.length shang + List.length qu + List.length ru in\nprintf \"声调数据验证通过 - 总字符数: %d\\n\" total_chars;\nprintf \" 平声: %d, 上声: %d, 去声: %d, 入声: %d\\n\" (List.length ping) (List.length shang)\n(List.length qu) (List.length ru);\ntrue\nwith ToneDataError e ->\neprintf \"数据验证失败: %s\\n\" (format_error e);\nfalse",
        "lines": [
          "try",
          "let ping, shang, qu, ru = get_cached_tone_data () in",
          "let total_chars = List.length ping + List.length shang + List.length qu + List.length ru in",
          "printf \"声调数据验证通过 - 总字符数: %d\\n\" total_chars;",
          "printf \" 平声: %d, 上声: %d, 去声: %d, 入声: %d\\n\" (List.length ping) (List.length shang)",
          "(List.length qu) (List.length ru);",
          "true",
          "with ToneDataError e ->",
          "eprintf \"数据验证失败: %s\\n\" (format_error e);",
          "false"
        ],
        "start_line": 132,
        "end_line": 141,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/tone_data_loader.ml"
      },
      {
        "hash": "cfec24e11317042f091b39e3ccf8a9e3",
        "text": "try\nlet ping, shang, qu, ru = get_cached_tone_data () in\nlet total_chars = List.length ping + List.length shang + List.length qu + List.length ru in\nprintf \"声调数据验证通过 - 总字符数: %d\\n\" total_chars;\nprintf \" 平声: %d, 上声: %d, 去声: %d, 入声: %d\\n\" (List.length ping) (List.length shang)\n(List.length qu) (List.length ru);\ntrue\nwith ToneDataError e ->\neprintf \"数据验证失败: %s\\n\" (format_error e);\nfalse",
        "lines": [
          "try",
          "let ping, shang, qu, ru = get_cached_tone_data () in",
          "let total_chars = List.length ping + List.length shang + List.length qu + List.length ru in",
          "printf \"声调数据验证通过 - 总字符数: %d\\n\" total_chars;",
          "printf \" 平声: %d, 上声: %d, 去声: %d, 入声: %d\\n\" (List.length ping) (List.length shang)",
          "(List.length qu) (List.length ru);",
          "true",
          "with ToneDataError e ->",
          "eprintf \"数据验证失败: %s\\n\" (format_error e);",
          "false"
        ],
        "start_line": 116,
        "end_line": 125,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/tone_data/tone_data_json_loader.ml"
      }
    ],
    "bf18de94cad9501c76a3be4ea2eadcb1": [
      {
        "hash": "bf18de94cad9501c76a3be4ea2eadcb1",
        "text": "let ping, shang, qu, ru = get_cached_tone_data () in\nlet total_chars = List.length ping + List.length shang + List.length qu + List.length ru in\nprintf \"声调数据验证通过 - 总字符数: %d\\n\" total_chars;\nprintf \" 平声: %d, 上声: %d, 去声: %d, 入声: %d\\n\" (List.length ping) (List.length shang)\n(List.length qu) (List.length ru);\ntrue\nwith ToneDataError e ->\neprintf \"数据验证失败: %s\\n\" (format_error e);\nfalse",
        "lines": [
          "let ping, shang, qu, ru = get_cached_tone_data () in",
          "let total_chars = List.length ping + List.length shang + List.length qu + List.length ru in",
          "printf \"声调数据验证通过 - 总字符数: %d\\n\" total_chars;",
          "printf \" 平声: %d, 上声: %d, 去声: %d, 入声: %d\\n\" (List.length ping) (List.length shang)",
          "(List.length qu) (List.length ru);",
          "true",
          "with ToneDataError e ->",
          "eprintf \"数据验证失败: %s\\n\" (format_error e);",
          "false"
        ],
        "start_line": 133,
        "end_line": 141,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/tone_data_loader.ml"
      },
      {
        "hash": "bf18de94cad9501c76a3be4ea2eadcb1",
        "text": "let ping, shang, qu, ru = get_cached_tone_data () in\nlet total_chars = List.length ping + List.length shang + List.length qu + List.length ru in\nprintf \"声调数据验证通过 - 总字符数: %d\\n\" total_chars;\nprintf \" 平声: %d, 上声: %d, 去声: %d, 入声: %d\\n\" (List.length ping) (List.length shang)\n(List.length qu) (List.length ru);\ntrue\nwith ToneDataError e ->\neprintf \"数据验证失败: %s\\n\" (format_error e);\nfalse",
        "lines": [
          "let ping, shang, qu, ru = get_cached_tone_data () in",
          "let total_chars = List.length ping + List.length shang + List.length qu + List.length ru in",
          "printf \"声调数据验证通过 - 总字符数: %d\\n\" total_chars;",
          "printf \" 平声: %d, 上声: %d, 去声: %d, 入声: %d\\n\" (List.length ping) (List.length shang)",
          "(List.length qu) (List.length ru);",
          "true",
          "with ToneDataError e ->",
          "eprintf \"数据验证失败: %s\\n\" (format_error e);",
          "false"
        ],
        "start_line": 117,
        "end_line": 125,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/tone_data/tone_data_json_loader.ml"
      }
    ],
    "1fe15501f3482b5b7f8a3f3807fca520": [
      {
        "hash": "1fe15501f3482b5b7f8a3f3807fca520",
        "text": "let total_chars = List.length ping + List.length shang + List.length qu + List.length ru in\nprintf \"声调数据验证通过 - 总字符数: %d\\n\" total_chars;\nprintf \" 平声: %d, 上声: %d, 去声: %d, 入声: %d\\n\" (List.length ping) (List.length shang)\n(List.length qu) (List.length ru);\ntrue\nwith ToneDataError e ->\neprintf \"数据验证失败: %s\\n\" (format_error e);\nfalse",
        "lines": [
          "let total_chars = List.length ping + List.length shang + List.length qu + List.length ru in",
          "printf \"声调数据验证通过 - 总字符数: %d\\n\" total_chars;",
          "printf \" 平声: %d, 上声: %d, 去声: %d, 入声: %d\\n\" (List.length ping) (List.length shang)",
          "(List.length qu) (List.length ru);",
          "true",
          "with ToneDataError e ->",
          "eprintf \"数据验证失败: %s\\n\" (format_error e);",
          "false"
        ],
        "start_line": 134,
        "end_line": 141,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/tone_data_loader.ml"
      },
      {
        "hash": "1fe15501f3482b5b7f8a3f3807fca520",
        "text": "let total_chars = List.length ping + List.length shang + List.length qu + List.length ru in\nprintf \"声调数据验证通过 - 总字符数: %d\\n\" total_chars;\nprintf \" 平声: %d, 上声: %d, 去声: %d, 入声: %d\\n\" (List.length ping) (List.length shang)\n(List.length qu) (List.length ru);\ntrue\nwith ToneDataError e ->\neprintf \"数据验证失败: %s\\n\" (format_error e);\nfalse",
        "lines": [
          "let total_chars = List.length ping + List.length shang + List.length qu + List.length ru in",
          "printf \"声调数据验证通过 - 总字符数: %d\\n\" total_chars;",
          "printf \" 平声: %d, 上声: %d, 去声: %d, 入声: %d\\n\" (List.length ping) (List.length shang)",
          "(List.length qu) (List.length ru);",
          "true",
          "with ToneDataError e ->",
          "eprintf \"数据验证失败: %s\\n\" (format_error e);",
          "false"
        ],
        "start_line": 118,
        "end_line": 125,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/tone_data/tone_data_json_loader.ml"
      }
    ],
    "cfb1906616605690ad6ff8f94618e2e4": [
      {
        "hash": "cfb1906616605690ad6ff8f94618e2e4",
        "text": "printf \"声调数据验证通过 - 总字符数: %d\\n\" total_chars;\nprintf \" 平声: %d, 上声: %d, 去声: %d, 入声: %d\\n\" (List.length ping) (List.length shang)\n(List.length qu) (List.length ru);\ntrue\nwith ToneDataError e ->\neprintf \"数据验证失败: %s\\n\" (format_error e);\nfalse",
        "lines": [
          "printf \"声调数据验证通过 - 总字符数: %d\\n\" total_chars;",
          "printf \" 平声: %d, 上声: %d, 去声: %d, 入声: %d\\n\" (List.length ping) (List.length shang)",
          "(List.length qu) (List.length ru);",
          "true",
          "with ToneDataError e ->",
          "eprintf \"数据验证失败: %s\\n\" (format_error e);",
          "false"
        ],
        "start_line": 135,
        "end_line": 141,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/tone_data_loader.ml"
      },
      {
        "hash": "cfb1906616605690ad6ff8f94618e2e4",
        "text": "printf \"声调数据验证通过 - 总字符数: %d\\n\" total_chars;\nprintf \" 平声: %d, 上声: %d, 去声: %d, 入声: %d\\n\" (List.length ping) (List.length shang)\n(List.length qu) (List.length ru);\ntrue\nwith ToneDataError e ->\neprintf \"数据验证失败: %s\\n\" (format_error e);\nfalse",
        "lines": [
          "printf \"声调数据验证通过 - 总字符数: %d\\n\" total_chars;",
          "printf \" 平声: %d, 上声: %d, 去声: %d, 入声: %d\\n\" (List.length ping) (List.length shang)",
          "(List.length qu) (List.length ru);",
          "true",
          "with ToneDataError e ->",
          "eprintf \"数据验证失败: %s\\n\" (format_error e);",
          "false"
        ],
        "start_line": 119,
        "end_line": 125,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/tone_data/tone_data_json_loader.ml"
      }
    ],
    "9e7835f9748e14b2aac50c471cf69e99": [
      {
        "hash": "9e7835f9748e14b2aac50c471cf69e99",
        "text": "printf \" 平声: %d, 上声: %d, 去声: %d, 入声: %d\\n\" (List.length ping) (List.length shang)\n(List.length qu) (List.length ru);\ntrue\nwith ToneDataError e ->\neprintf \"数据验证失败: %s\\n\" (format_error e);\nfalse",
        "lines": [
          "printf \" 平声: %d, 上声: %d, 去声: %d, 入声: %d\\n\" (List.length ping) (List.length shang)",
          "(List.length qu) (List.length ru);",
          "true",
          "with ToneDataError e ->",
          "eprintf \"数据验证失败: %s\\n\" (format_error e);",
          "false"
        ],
        "start_line": 136,
        "end_line": 141,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/tone_data_loader.ml"
      },
      {
        "hash": "9e7835f9748e14b2aac50c471cf69e99",
        "text": "printf \" 平声: %d, 上声: %d, 去声: %d, 入声: %d\\n\" (List.length ping) (List.length shang)\n(List.length qu) (List.length ru);\ntrue\nwith ToneDataError e ->\neprintf \"数据验证失败: %s\\n\" (format_error e);\nfalse",
        "lines": [
          "printf \" 平声: %d, 上声: %d, 去声: %d, 入声: %d\\n\" (List.length ping) (List.length shang)",
          "(List.length qu) (List.length ru);",
          "true",
          "with ToneDataError e ->",
          "eprintf \"数据验证失败: %s\\n\" (format_error e);",
          "false"
        ],
        "start_line": 120,
        "end_line": 125,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/tone_data/tone_data_json_loader.ml"
      }
    ],
    "b053ce5830427b0f592718672e0e23bf": [
      {
        "hash": "b053ce5830427b0f592718672e0e23bf",
        "text": "(List.length qu) (List.length ru);\ntrue\nwith ToneDataError e ->\neprintf \"数据验证失败: %s\\n\" (format_error e);\nfalse",
        "lines": [
          "(List.length qu) (List.length ru);",
          "true",
          "with ToneDataError e ->",
          "eprintf \"数据验证失败: %s\\n\" (format_error e);",
          "false"
        ],
        "start_line": 137,
        "end_line": 141,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/tone_data_loader.ml"
      },
      {
        "hash": "b053ce5830427b0f592718672e0e23bf",
        "text": "(List.length qu) (List.length ru);\ntrue\nwith ToneDataError e ->\neprintf \"数据验证失败: %s\\n\" (format_error e);\nfalse",
        "lines": [
          "(List.length qu) (List.length ru);",
          "true",
          "with ToneDataError e ->",
          "eprintf \"数据验证失败: %s\\n\" (format_error e);",
          "false"
        ],
        "start_line": 121,
        "end_line": 125,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/tone_data/tone_data_json_loader.ml"
      }
    ],
    "81828d0a960d22b3adce8a3c62bbe716": [
      {
        "hash": "81828d0a960d22b3adce8a3c62bbe716",
        "text": "true\nwith ToneDataError e ->\neprintf \"数据验证失败: %s\\n\" (format_error e);\nfalse",
        "lines": [
          "true",
          "with ToneDataError e ->",
          "eprintf \"数据验证失败: %s\\n\" (format_error e);",
          "false"
        ],
        "start_line": 138,
        "end_line": 141,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/tone_data_loader.ml"
      },
      {
        "hash": "81828d0a960d22b3adce8a3c62bbe716",
        "text": "true\nwith ToneDataError e ->\neprintf \"数据验证失败: %s\\n\" (format_error e);\nfalse",
        "lines": [
          "true",
          "with ToneDataError e ->",
          "eprintf \"数据验证失败: %s\\n\" (format_error e);",
          "false"
        ],
        "start_line": 122,
        "end_line": 125,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/tone_data/tone_data_json_loader.ml"
      }
    ],
    "b80d49ce38eb7b6c99298ebf73defb2a": [
      {
        "hash": "b80d49ce38eb7b6c99298ebf73defb2a",
        "text": "with ToneDataError e ->\neprintf \"数据验证失败: %s\\n\" (format_error e);\nfalse",
        "lines": [
          "with ToneDataError e ->",
          "eprintf \"数据验证失败: %s\\n\" (format_error e);",
          "false"
        ],
        "start_line": 139,
        "end_line": 141,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/tone_data_loader.ml"
      },
      {
        "hash": "b80d49ce38eb7b6c99298ebf73defb2a",
        "text": "with ToneDataError e ->\neprintf \"数据验证失败: %s\\n\" (format_error e);\nfalse",
        "lines": [
          "with ToneDataError e ->",
          "eprintf \"数据验证失败: %s\\n\" (format_error e);",
          "false"
        ],
        "start_line": 123,
        "end_line": 125,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/tone_data/tone_data_json_loader.ml"
      }
    ],
    "159a0db55ac5917af3e1d894882895ad": [
      {
        "hash": "159a0db55ac5917af3e1d894882895ad",
        "text": "@author 骆言诗词编程团队 - Phase 15 超长文件重构\n@version 1.0\n@since 2025-07-21 *)",
        "lines": [
          "@author 骆言诗词编程团队 - Phase 15 超长文件重构",
          "@version 1.0",
          "@since 2025-07-21 *)"
        ],
        "start_line": 5,
        "end_line": 7,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/data_source_manager.ml"
      },
      {
        "hash": "159a0db55ac5917af3e1d894882895ad",
        "text": "@author 骆言诗词编程团队 - Phase 15 超长文件重构\n@version 1.0\n@since 2025-07-21 *)",
        "lines": [
          "@author 骆言诗词编程团队 - Phase 15 超长文件重构",
          "@version 1.0",
          "@since 2025-07-21 *)"
        ],
        "start_line": 5,
        "end_line": 7,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/cache_manager.ml"
      },
      {
        "hash": "159a0db55ac5917af3e1d894882895ad",
        "text": "@author 骆言诗词编程团队 - Phase 15 超长文件重构\n@version 1.0\n@since 2025-07-21 *)",
        "lines": [
          "@author 骆言诗词编程团队 - Phase 15 超长文件重构",
          "@version 1.0",
          "@since 2025-07-21 *)"
        ],
        "start_line": 5,
        "end_line": 7,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/file_helper.ml"
      },
      {
        "hash": "159a0db55ac5917af3e1d894882895ad",
        "text": "@author 骆言诗词编程团队 - Phase 15 超长文件重构\n@version 1.0\n@since 2025-07-21 *)",
        "lines": [
          "@author 骆言诗词编程团队 - Phase 15 超长文件重构",
          "@version 1.0",
          "@since 2025-07-21 *)"
        ],
        "start_line": 5,
        "end_line": 7,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/json_parser.ml"
      }
    ],
    "45c5f29c3b983c968638591ca4b3195a": [
      {
        "hash": "45c5f29c3b983c968638591ca4b3195a",
        "text": "| FileNotFound of string\n| ParseError of string * string\n| ValidationError of string",
        "lines": [
          "| FileNotFound of string",
          "| ParseError of string * string",
          "| ValidationError of string"
        ],
        "start_line": 14,
        "end_line": 16,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/externalized_data_loader.ml"
      },
      {
        "hash": "45c5f29c3b983c968638591ca4b3195a",
        "text": "| FileNotFound of string\n| ParseError of string * string\n| ValidationError of string",
        "lines": [
          "| FileNotFound of string",
          "| ParseError of string * string",
          "| ValidationError of string"
        ],
        "start_line": 14,
        "end_line": 16,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/expanded_data_loader.ml"
      }
    ],
    "0bd4064a6f6de96b60ac6afd44bbf361": [
      {
        "hash": "0bd4064a6f6de96b60ac6afd44bbf361",
        "text": "let format_error = function\n| FileNotFound file -> sprintf \"数据文件未找到: %s\" file\n| ParseError (file, msg) -> sprintf \"解析文件 %s 失败: %s\" file msg\n| ValidationError msg -> sprintf \"数据验证失败: %s\" msg",
        "lines": [
          "let format_error = function",
          "| FileNotFound file -> sprintf \"数据文件未找到: %s\" file",
          "| ParseError (file, msg) -> sprintf \"解析文件 %s 失败: %s\" file msg",
          "| ValidationError msg -> sprintf \"数据验证失败: %s\" msg"
        ],
        "start_line": 20,
        "end_line": 23,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/externalized_data_loader.ml"
      },
      {
        "hash": "0bd4064a6f6de96b60ac6afd44bbf361",
        "text": "let format_error = function\n| FileNotFound file -> sprintf \"数据文件未找到: %s\" file\n| ParseError (file, msg) -> sprintf \"解析文件 %s 失败: %s\" file msg\n| ValidationError msg -> sprintf \"数据验证失败: %s\" msg",
        "lines": [
          "let format_error = function",
          "| FileNotFound file -> sprintf \"数据文件未找到: %s\" file",
          "| ParseError (file, msg) -> sprintf \"解析文件 %s 失败: %s\" file msg",
          "| ValidationError msg -> sprintf \"数据验证失败: %s\" msg"
        ],
        "start_line": 20,
        "end_line": 23,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/expanded_data_loader.ml"
      }
    ],
    "4f54c273f5a0875359100af8a470dd3f": [
      {
        "hash": "4f54c273f5a0875359100af8a470dd3f",
        "text": "| FileNotFound file -> sprintf \"数据文件未找到: %s\" file\n| ParseError (file, msg) -> sprintf \"解析文件 %s 失败: %s\" file msg\n| ValidationError msg -> sprintf \"数据验证失败: %s\" msg",
        "lines": [
          "| FileNotFound file -> sprintf \"数据文件未找到: %s\" file",
          "| ParseError (file, msg) -> sprintf \"解析文件 %s 失败: %s\" file msg",
          "| ValidationError msg -> sprintf \"数据验证失败: %s\" msg"
        ],
        "start_line": 21,
        "end_line": 23,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/externalized_data_loader.ml"
      },
      {
        "hash": "4f54c273f5a0875359100af8a470dd3f",
        "text": "| FileNotFound file -> sprintf \"数据文件未找到: %s\" file\n| ParseError (file, msg) -> sprintf \"解析文件 %s 失败: %s\" file msg\n| ValidationError msg -> sprintf \"数据验证失败: %s\" msg",
        "lines": [
          "| FileNotFound file -> sprintf \"数据文件未找到: %s\" file",
          "| ParseError (file, msg) -> sprintf \"解析文件 %s 失败: %s\" file msg",
          "| ValidationError msg -> sprintf \"数据验证失败: %s\" msg"
        ],
        "start_line": 21,
        "end_line": 23,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/expanded_data_loader.ml"
      }
    ],
    "ed79ccb8567ca6796527449e34d9e1fe": [
      {
        "hash": "ed79ccb8567ca6796527449e34d9e1fe",
        "text": "@author 骆言诗词编程团队\n@version 1.0\n@since 2025-07-19 - Phase 14.2 模块化重构 *)",
        "lines": [
          "@author 骆言诗词编程团队",
          "@version 1.0",
          "@since 2025-07-19 - Phase 14.2 模块化重构 *)"
        ],
        "start_line": 5,
        "end_line": 7,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/unified_rhyme_database.ml"
      },
      {
        "hash": "ed79ccb8567ca6796527449e34d9e1fe",
        "text": "@author 骆言诗词编程团队\n@version 1.0\n@since 2025-07-19 - Phase 14.2 模块化重构 *)",
        "lines": [
          "@author 骆言诗词编程团队",
          "@version 1.0",
          "@since 2025-07-19 - Phase 14.2 模块化重构 *)"
        ],
        "start_line": 5,
        "end_line": 7,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/hua_rhyme_data.ml"
      },
      {
        "hash": "ed79ccb8567ca6796527449e34d9e1fe",
        "text": "@author 骆言诗词编程团队\n@version 1.0\n@since 2025-07-19 - Phase 14.2 模块化重构 *)",
        "lines": [
          "@author 骆言诗词编程团队",
          "@version 1.0",
          "@since 2025-07-19 - Phase 14.2 模块化重构 *)"
        ],
        "start_line": 5,
        "end_line": 7,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/rhyme_group_types.ml"
      }
    ],
    "9042023d97833d01490c1a0cae9cf25d": [
      {
        "hash": "9042023d97833d01490c1a0cae9cf25d",
        "text": "@author 骆言诗词编程团队\n@version 2.0 (数据外化重构版)\n@since 2025-07-21 - 技术债务改进第二阶段 *)",
        "lines": [
          "@author 骆言诗词编程团队",
          "@version 2.0 (数据外化重构版)",
          "@since 2025-07-21 - 技术债务改进第二阶段 *)"
        ],
        "start_line": 7,
        "end_line": 9,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/yu_rhyme_data.ml"
      },
      {
        "hash": "9042023d97833d01490c1a0cae9cf25d",
        "text": "@author 骆言诗词编程团队\n@version 2.0 (数据外化重构版)\n@since 2025-07-21 - 技术债务改进第二阶段 *)",
        "lines": [
          "@author 骆言诗词编程团队",
          "@version 2.0 (数据外化重构版)",
          "@since 2025-07-21 - 技术债务改进第二阶段 *)"
        ],
        "start_line": 7,
        "end_line": 9,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/tone_data/ru_sheng_data.ml"
      }
    ],
    "466c73ae2dd02f33fd652980b2f3cd4a": [
      {
        "hash": "466c73ae2dd02f33fd652980b2f3cd4a",
        "text": "let get_data_file_path filename =\nlet rec find_project_root dir =\nlet dune_project = Filename.concat dir \"dune-project\" in\nif Sys.file_exists dune_project then dir\nelse\nlet parent = Filename.dirname dir in\nif parent = dir then",
        "lines": [
          "let get_data_file_path filename =",
          "let rec find_project_root dir =",
          "let dune_project = Filename.concat dir \"dune-project\" in",
          "if Sys.file_exists dune_project then dir",
          "else",
          "let parent = Filename.dirname dir in",
          "if parent = dir then"
        ],
        "start_line": 22,
        "end_line": 28,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/yu_rhyme_data.ml"
      },
      {
        "hash": "466c73ae2dd02f33fd652980b2f3cd4a",
        "text": "let get_data_file_path filename =\nlet rec find_project_root dir =\nlet dune_project = Filename.concat dir \"dune-project\" in\nif Sys.file_exists dune_project then dir\nelse\nlet parent = Filename.dirname dir in\nif parent = dir then",
        "lines": [
          "let get_data_file_path filename =",
          "let rec find_project_root dir =",
          "let dune_project = Filename.concat dir \"dune-project\" in",
          "if Sys.file_exists dune_project then dir",
          "else",
          "let parent = Filename.dirname dir in",
          "if parent = dir then"
        ],
        "start_line": 21,
        "end_line": 27,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/tone_data/ru_sheng_data.ml"
      }
    ],
    "b17e824181ec049810a7e5a18eda51e0": [
      {
        "hash": "b17e824181ec049810a7e5a18eda51e0",
        "text": "let rec find_project_root dir =\nlet dune_project = Filename.concat dir \"dune-project\" in\nif Sys.file_exists dune_project then dir\nelse\nlet parent = Filename.dirname dir in\nif parent = dir then",
        "lines": [
          "let rec find_project_root dir =",
          "let dune_project = Filename.concat dir \"dune-project\" in",
          "if Sys.file_exists dune_project then dir",
          "else",
          "let parent = Filename.dirname dir in",
          "if parent = dir then"
        ],
        "start_line": 23,
        "end_line": 28,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/yu_rhyme_data.ml"
      },
      {
        "hash": "b17e824181ec049810a7e5a18eda51e0",
        "text": "let rec find_project_root dir =\nlet dune_project = Filename.concat dir \"dune-project\" in\nif Sys.file_exists dune_project then dir\nelse\nlet parent = Filename.dirname dir in\nif parent = dir then",
        "lines": [
          "let rec find_project_root dir =",
          "let dune_project = Filename.concat dir \"dune-project\" in",
          "if Sys.file_exists dune_project then dir",
          "else",
          "let parent = Filename.dirname dir in",
          "if parent = dir then"
        ],
        "start_line": 22,
        "end_line": 27,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/tone_data/ru_sheng_data.ml"
      }
    ],
    "2824a61530512bcbcfb69d9fdbb0f266": [
      {
        "hash": "2824a61530512bcbcfb69d9fdbb0f266",
        "text": "@author 骆言诗词编程团队\n@version 2.0 - JSON数据外化重构\n@since 2025-07-21 *)",
        "lines": [
          "@author 骆言诗词编程团队",
          "@version 2.0 - JSON数据外化重构",
          "@since 2025-07-21 *)"
        ],
        "start_line": 5,
        "end_line": 7,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/tone_data/shang_sheng_data.ml"
      },
      {
        "hash": "2824a61530512bcbcfb69d9fdbb0f266",
        "text": "@author 骆言诗词编程团队\n@version 2.0 - JSON数据外化重构\n@since 2025-07-21 *)",
        "lines": [
          "@author 骆言诗词编程团队",
          "@version 2.0 - JSON数据外化重构",
          "@since 2025-07-21 *)"
        ],
        "start_line": 5,
        "end_line": 7,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/tone_data/ping_sheng_data.ml"
      }
    ],
    "419e7e7def8624fd036f537d2021627a": [
      {
        "hash": "419e7e7def8624fd036f537d2021627a",
        "text": "@author 骆言诗词编程团队\n@version 1.0\n@since 2025-07-19 - Phase 14.3 模块化重构 *)",
        "lines": [
          "@author 骆言诗词编程团队",
          "@version 1.0",
          "@since 2025-07-19 - Phase 14.3 模块化重构 *)"
        ],
        "start_line": 5,
        "end_line": 7,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/ze_sheng/yue_rhyme_data.ml"
      },
      {
        "hash": "419e7e7def8624fd036f537d2021627a",
        "text": "@author 骆言诗词编程团队\n@version 1.0\n@since 2025-07-19 - Phase 14.3 模块化重构 *)",
        "lines": [
          "@author 骆言诗词编程团队",
          "@version 1.0",
          "@since 2025-07-19 - Phase 14.3 模块化重构 *)"
        ],
        "start_line": 5,
        "end_line": 7,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/ze_sheng/hui_rhyme_data.ml"
      },
      {
        "hash": "419e7e7def8624fd036f537d2021627a",
        "text": "@author 骆言诗词编程团队\n@version 1.0\n@since 2025-07-19 - Phase 14.3 模块化重构 *)",
        "lines": [
          "@author 骆言诗词编程团队",
          "@version 1.0",
          "@since 2025-07-19 - Phase 14.3 模块化重构 *)"
        ],
        "start_line": 5,
        "end_line": 7,
        "file": "/home/zc/chinese-ocaml-worktrees/chinese-ocaml/src/poetry/data/rhyme_groups/ze_sheng/jiang_rhyme_data.ml"
      }
    ]
  }
}