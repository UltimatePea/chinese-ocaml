「：骆言禁用字符检测脚本：」
「：替代脚本实现，提供精确的注释和字符串跳过功能：」

「：主要检测函数：检查单个文件中的禁用字符：」
夫「检查文件禁用字符」者受 文件名 焉算法乃
  设「文件内容」为读取文件 文件名 在
  设「违规计数」为0 在
  
  「：分行处理文件内容：」
  设「行列表」为字符串分割 文件内容 『\数』 在
  设「行号」为1 在
  
  「：遍历每一行检查禁用字符：」
  递归夫「检查每行」者受 剩余行列表 当前行号 焉算法乃
    观「剩余行列表」之性
    若 空空如也 则 答 违规计数
    若 有首有尾 首名为「当前行」 尾名为「其余行」 则
      设「清理后的行」为移除注释和字符串 当前行 在
      设「发现违规」为检测行中禁用字符 清理后的行 当前行号 文件名 在
      若 发现违规 则
        设「违规计数」为违规计数 加 1 在
      答
      检查每行 其余行 （当前行号 加 1）
    观毕
  也
  
  检查每行 行列表 1
也

「：移除注释和字符串内容的函数：」
夫「移除注释和字符串」者受 原始行 焉算法乃
  「：第一步：移除行注释：」
  设「无井号注释」为移除井号注释 原始行 在
  设「无双斜杠注释」为移除双斜杠注释 无井号注释 在
  
  「：第二步：移除块注释：」
  设「无块注释」为移除块注释 无双斜杠注释 在
  
  「：第三步：移除字符串内容：」
  设「无骆言字符串」为移除骆言字符串 无块注释 在
  设「无英文字符串」为移除英文字符串 无骆言字符串 在
  
  答 无英文字符串
也

「：检测行中禁用字符的函数：」
夫「检测行中禁用字符」者受 清理后行 行号 文件名 焉算法乃
  「：英文字母模式：」
  设「字母模式」为『[A-Za-z]』在
  
  「：英文符号模式：」
  设「符号模式」为『[!@#$%^&*()+\-=\[\]{}|:";'<>?,./`~_]』在
  
  设「发现字母」为字符串匹配 清理后行 字母模式 在
  设「发现符号」为字符串匹配 清理后行 符号模式 在
  
  若 发现字母 则
    打印 『❌ 英文字母违规：』
    打印 （字符串连接 『文件：』 文件名）
    打印 （字符串连接 『第』 （字符串连接 （整数转字符串 行号） 『行：』））
    打印 清理后行
    答 真
  否
  若 发现符号 则  
    打印 『❌ 英文符号违规：』
    打印 （字符串连接 『文件：』 文件名）
    打印 （字符串连接 『第』 （字符串连接 （整数转字符串 行号） 『行：』））
    打印 清理后行
    答 真
  否
  答 假
也

「：主程序：检查所有骆言文件：」
夫「主检查程序」者受 无参数 焉算法乃
  打印 『骆言禁用字符检测脚本启动...』
  
  「：获取所有骆言文件列表：」
  设「文件列表」为列出目录 『.』 在
  设「过滤后文件」为过滤ly文件 文件列表 在
  
  设「总违规数」为0 在
  设「检查文件数」为0 在
  
  「：遍历检查每个文件：」
  递归夫「检查文件列表」者受 文件列表 焉算法乃
    观「文件列表」之性
    若 空空如也 则 答 总违规数
    若 有首有尾 首名为「当前文件」 尾名为「剩余文件」 则
      设「当前违规」为检查文件禁用字符 当前文件 在
      设「总违规数」为总违规数 加 当前违规 在
      设「检查文件数」为检查文件数 加 1 在
      检查文件列表 剩余文件
    观毕
  也
  
  设「最终违规数」为检查文件列表 过滤后文件 在
  
  打印 『检查完成！』
  打印 （字符串连接 『检查文件数：』 （整数转字符串 检查文件数））
  打印 （字符串连接 『发现违规：』 （整数转字符串 最终违规数））
  
  若 最终违规数 大于 0 则
    打印 『❌ 发现禁用字符违规，请修正后重试』
    答 1 「：返回错误退出代码：」
  否
    打印 『✅ 所有文件通过字符检查』  
    答 0 「：返回成功退出代码：」
也

「：启动主程序：」
主检查程序 无参数