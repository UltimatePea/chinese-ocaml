(* 斐波那契数列性能基准测试 *)

(* 经典递归实现 *)
递归 让 经典斐波那契 = 函数 n ->
  匹配 n 与
  | 0 -> 0
  | 1 -> 1
  | _ -> 经典斐波那契 (n - 1) + 经典斐波那契 (n - 2)

(* 尾递归实现 *)
递归 让 尾递归斐波那契 = 函数 n ->
  递归 让 辅助 = 函数 i a b ->
    如果 i <= 0 那么
      a
    否则
      辅助 (i - 1) b (a + b)
  在
  辅助 n 0 1

(* 迭代实现 *)
让 迭代斐波那契 = 函数 n ->
  如果 n <= 1 那么
    n
  否则
    递归 让 循环 = 函数 i prev2 prev1 ->
      如果 i >= n 那么
        prev1
      否则
        循环 (i + 1) prev1 (prev1 + prev2)
    在
    循环 2 0 1

(* 批量计算测试 *)
递归 让 批量斐波那契 = 函数 实现 上限 ->
  递归 让 计算批次 = 函数 i acc ->
    如果 i > 上限 那么
      acc
    否则
      计算批次 (i + 1) (acc + 实现 i)
  在
  计算批次 1 0

(* 性能测试函数 *)
让 性能测试 = 函数 实现名称 实现函数 测试值 ->
  打印 ("开始 " ^ 实现名称 ^ " 性能测试");
  
  (* 单个值计算测试 *)
  打印 ("计算单个值: " ^ 实现名称);
  让 结果1 = 实现函数 测试值 在
  打印 实现名称;
  打印 结果1;
  
  (* 批量计算测试 *)
  打印 ("批量计算: " ^ 实现名称);
  让 结果2 = 批量斐波那契 实现函数 (测试值 - 5) 在
  打印 实现名称;
  打印 结果2;
  
  结果1 + 结果2

(* 综合性能对比 *)
让 综合测试 = 函数 测试规模 ->
  打印 "=== 斐波那契数列性能基准测试 ===";
  打印 "测试规模:";
  打印 测试规模;
  
  (* 经典递归测试 *)
  让 经典结果 = 性能测试 "经典递归" 经典斐波那契 测试规模 在
  
  (* 尾递归测试 *)
  让 尾递归结果 = 性能测试 "尾递归" 尾递归斐波那契 (测试规模 + 10) 在
  
  (* 迭代测试 *)
  让 迭代结果 = 性能测试 "迭代实现" 迭代斐波那契 (测试规模 + 10) 在
  
  打印 "=== 性能测试完成 ===";
  打印 "经典递归总分:";
  打印 经典结果;
  打印 "尾递归总分:";
  打印 尾递归结果;
  打印 "迭代实现总分:";
  打印 迭代结果;
  
  经典结果 + 尾递归结果 + 迭代结果

(* 执行基准测试 *)
让 测试规模 = 20  (* 减小递归测试规模 *)
让 最终结果 = 综合测试 测试规模;
打印 "斐波那契基准测试完成，总分:";
打印 最终结果