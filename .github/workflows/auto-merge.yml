name: Auto-merge PRs

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
  check_suite:
    types: [completed]
  status: {}

jobs:
  auto-merge:
    runs-on: ubuntu-latest
    if: >
      github.event_name == 'pull_request' && (
        github.actor == 'dependabot[bot]' ||
        contains(github.event.pull_request.labels.*.name, 'auto-merge') ||
        contains(github.event.pull_request.title, '[auto-merge]')
      )
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
        
    - name: Wait for CI checks
      uses: fountainhead/action-wait-for-check@v1.2.0
      id: wait-for-ci
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        checkName: "build-and-test"
        ref: ${{ github.event.pull_request.head.sha }}
        timeoutSeconds: 1800
        intervalSeconds: 30
        
    - name: Check PR requirements
      id: check-requirements
      run: |
        set -e
        
        # Check if PR is ready for merge
        if [[ "${{ github.event.pull_request.draft }}" == "true" ]]; then
          echo "::error::PR is still in draft mode"
          exit 1
        fi
        
        # Check if CI passed
        if [[ "${{ steps.wait-for-ci.outputs.conclusion }}" != "success" ]]; then
          echo "::error::CI checks did not pass"
          exit 1
        fi
        
        # Check if there are merge conflicts
        if [[ "${{ github.event.pull_request.mergeable }}" == "false" ]]; then
          echo "::error::PR has merge conflicts"
          exit 1
        fi
        
        # For dependabot PRs, check if it's a minor/patch version update
        if [[ "${{ github.actor }}" == "dependabot[bot]" ]]; then
          echo "Processing dependabot PR"
          
          # Get PR title to check update type
          pr_title="${{ github.event.pull_request.title }}"
          
          # Auto-merge only patch and minor updates
          if echo "$pr_title" | grep -qE "(patch|minor)"; then
            echo "auto_merge=true" >> $GITHUB_OUTPUT
          elif echo "$pr_title" | grep -qE "major"; then
            echo "auto_merge=false" >> $GITHUB_OUTPUT
            echo "::warning::Major version update detected, skipping auto-merge"
          else
            echo "auto_merge=true" >> $GITHUB_OUTPUT
          fi
        else
          echo "auto_merge=true" >> $GITHUB_OUTPUT
        fi
        
    - name: Auto-approve dependabot PRs
      if: github.actor == 'dependabot[bot]' && steps.check-requirements.outputs.auto_merge == 'true'
      run: |
        gh pr review ${{ github.event.pull_request.number }} --approve --body "Auto-approved by CI"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Enable auto-merge
      if: steps.check-requirements.outputs.auto_merge == 'true'
      run: |
        # Enable auto-merge with squash strategy
        gh pr merge ${{ github.event.pull_request.number }} --auto --squash --delete-branch
        
        # Add a comment explaining the auto-merge
        gh pr comment ${{ github.event.pull_request.number }} --body "ü§ñ Auto-merging this PR as all CI checks have passed and requirements are met."
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Notify on auto-merge failure
      if: failure() && steps.check-requirements.outputs.auto_merge == 'true'
      run: |
        gh pr comment ${{ github.event.pull_request.number }} --body "‚ùå Auto-merge failed. Please check the CI logs and merge manually if appropriate."
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}