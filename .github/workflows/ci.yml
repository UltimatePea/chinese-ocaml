name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  OCAML_VERSION: 5.2.0

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup OCaml
      uses: ocaml/setup-ocaml@v3
      with:
        ocaml-compiler: ${{ env.OCAML_VERSION }}
        
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config
        opam install -y dune menhir ppx_deriving alcotest
        
    - name: Build project
      run: |
        opam exec -- dune build
        
    - name: Run tests
      run: |
        opam exec -- dune runtest
        
    - name: 验证示例程序编译
      run: |
        echo "=== 验证示例程序编译 ==="
        # 检查示例目录中的所有.ly文件
        find 示例 -name "*.ly" -type f | while read file; do
          echo "编译检查: $file"
          opam exec -- dune exec src/main.exe -- -check "$file" || exit 1
        done
        
    - name: 验证标准库编译  
      run: |
        echo "=== 验证标准库编译 ==="
        # 检查标准库目录中的所有.ly文件
        find 标准库 -name "*.ly" -type f | while read file; do
          echo "编译检查: $file"
          opam exec -- dune exec src/main.exe -- -check "$file" || exit 1
        done
        
    - name: 验证自举程序编译
      run: |
        echo "=== 验证自举程序编译 ==="  
        # 检查自举目录中的所有.ly文件
        find 自举 -name "*.ly" -type f | while read file; do
          echo "编译检查: $file"
          opam exec -- dune exec src/main.exe -- -check "$file" || exit 1
        done
          
  check-formatting:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup OCaml
      uses: ocaml/setup-ocaml@v3
      with:
        ocaml-compiler: ${{ env.OCAML_VERSION }}
        
    - name: Install ocamlformat
      run: opam install -y ocamlformat
      
    - name: Check formatting
      run: |
        opam exec -- dune build @fmt || echo "No formatting rules defined"
        
        
  deploy:
    needs: [build-and-test, check-formatting]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup OCaml
      uses: ocaml/setup-ocaml@v3
      with:
        ocaml-compiler: ${{ env.OCAML_VERSION }}
        
    - name: Install dependencies
      run: |
        opam install -y dune menhir ppx_deriving alcotest
        
    - name: Build release
      run: |
        opam exec -- dune build --profile release
        
    - name: Create release assets
      run: |
        mkdir -p release
        cp _build/default/src/main.exe release/yyocamlc
        cp README.md release/
        tar -czf yyocamlc-linux-x64.tar.gz -C release .
        
    - name: Upload release assets
      uses: actions/upload-artifact@v4
      with:
        name: release-assets
        path: yyocamlc-linux-x64.tar.gz