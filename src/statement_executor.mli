(** 骆言解释器语句执行模块接口 - Chinese Programming Language Interpreter Statement Executor Interface

    这个模块是骆言编程语言语句执行的核心实现，负责将抽象语法树中的语句 转换为实际的程序执行效果。语句执行是语言解释器的重要组成部分，
    它处理程序的控制流、变量绑定、函数定义、模块操作等核心语言构造。

    该模块的主要职责包括：
    - 实现所有语句类型的执行逻辑
    - 管理程序执行过程中的环境状态
    - 处理语句执行中的错误和异常
    - 支持程序的顺序执行和控制流转移
    - 维护语句执行的副作用和状态更新

    支持的语句类型：
    - 表达式语句：求值表达式并产生副作用
    - 变量定义语句：创建新的变量绑定
    - 函数定义语句：定义用户函数
    - 条件语句：if-then-else分支执行
    - 循环语句：while、for循环控制
    - 跳转语句：break、continue、return
    - 模块语句：模块定义、导入、导出
    - 异常处理语句：try-catch-finally
    - 类型定义语句：用户定义类型
    - 宏定义语句：宏定义和展开

    @author 骆言项目组
    @since 0.1.0 *)

val execute_stmt :
  (string * Value_operations.runtime_value) list ->
  Ast.stmt ->
  (string * Value_operations.runtime_value) list * Value_operations.runtime_value
(** 执行单个语句，返回更新后的环境和执行结果

    @param env 当前执行环境，表示为 (变量名, 变量值) 对的列表
    @param stmt 待执行的语句抽象语法树节点
    @return 元组包含 (更新后的环境, 语句执行结果值)

    该函数是语句执行的核心入口点，支持所有类型的语句执行：

    1. 表达式语句执行：
    - 求值表达式并返回其结果
    - 处理表达式产生的副作用
    - 环境通常不会改变

    2. 变量定义语句执行：
    - 求值初始化表达式
    - 在环境中添加新的变量绑定
    - 支持变量遮蔽和作用域管理
    - 处理可变和不可变变量

    3. 函数定义语句执行：
    - 创建函数的闭包对象
    - 在环境中注册函数名称
    - 支持递归函数的前向声明
    - 处理函数重载和多态

    4. 条件语句执行：
    - 求值条件表达式
    - 根据条件真假选择分支
    - 执行相应的语句块
    - 返回分支执行的结果

    5. 循环语句执行：
    - 实现while循环的重复执行
    - 处理循环条件的动态求值
    - 支持break和continue控制
    - 管理循环变量的作用域

    6. 跳转语句执行：
    - 实现return语句的函数返回
    - 处理break和continue的循环控制
    - 支持异常抛出和捕获
    - 管理控制流的转移

    7. 模块语句执行：
    - 处理模块定义和导出
    - 实现模块导入和符号绑定
    - 支持模块的嵌套和作用域
    - 管理模块的初始化和清理

    8. 异常处理语句执行：
    - 实现try-catch-finally语义
    - 处理异常的抛出和捕获
    - 支持异常类型的匹配
    - 管理异常处理的资源清理

    9. 类型定义语句执行：
    - 处理用户定义的数据类型
    - 注册类型构造器函数
    - 支持递归类型定义
    - 管理类型的作用域和可见性

    10. 宏定义语句执行：
    - 注册宏定义到宏表
    - 支持宏的参数模式匹配
    - 处理宏展开的延迟求值
    - 管理宏的作用域和优先级

    环境管理特性：
    - 支持变量绑定的增加、修改、查找
    - 维护作用域链和变量遮蔽
    - 处理函数调用时的环境扩展
    - 支持闭包捕获和词法作用域

    错误处理和异常管理：
    - 捕获语句执行过程中的运行时错误
    - 提供详细的错误信息和调用栈
    - 支持异常的传播和处理
    - 实现程序的优雅错误恢复

    @raise RuntimeError 当语句执行过程中发生运行时错误时
    @raise TypeError 当语句涉及不兼容的类型操作时
    @raise UnboundVariable 当引用未定义的变量时
    @raise RedefinitionError 当重复定义同名变量时
    @raise ControlFlowError 当控制流语句在错误上下文中使用时 *)

val execute_program : Ast.stmt list -> (Value_operations.runtime_value, string) result
(** 执行完整程序，返回程序执行结果或错误信息

    @param program 待执行的程序，表示为语句列表
    @return Result类型，成功时包含程序最终结果值，失败时包含错误信息

    该函数提供程序级别的执行接口，实现程序的完整执行流程：

    1. 程序初始化：
    - 创建初始的全局执行环境
    - 初始化内置函数和全局变量
    - 设置程序执行的上下文

    2. 语句顺序执行：
    - 按照程序中语句的顺序逐个执行
    - 每个语句的执行结果更新环境
    - 维护程序执行的连续性

    3. 错误处理和恢复：
    - 捕获程序执行过程中的所有异常
    - 将异常信息转换为可读的错误消息
    - 支持程序的优雅终止

    4. 程序终止：
    - 处理程序的正常终止
    - 清理程序执行过程中的资源
    - 返回程序的最终执行结果

    程序执行模式：
    - 顺序执行：默认按语句顺序执行
    - 异常终止：遇到未处理异常时终止
    - 返回终止：遇到return语句时终止
    - 正常终止：所有语句执行完毕后终止

    程序结果值：
    - 如果程序包含表达式语句，返回最后一个表达式的值
    - 如果程序包含return语句，返回return的值
    - 如果程序只包含定义语句，返回unit值
    - 如果程序为空，返回unit值

    错误信息格式：
    - 包含错误类型和详细描述
    - 提供错误发生的位置信息
    - 包含相关的调用栈信息
    - 支持多语言的错误消息

    性能和资源管理：
    - 优化程序执行的性能
    - 管理程序执行过程中的内存使用
    - 支持程序执行的中断和恢复
    - 提供程序执行的统计信息

    该函数是程序执行的最高层接口，适用于：
    - 批处理模式的程序执行
    - 脚本文件的解释执行
    - 程序测试和验证
    - 程序性能分析和调试 *)
