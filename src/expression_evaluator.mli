(** 骆言解释器表达式求值模块接口 - Chinese Programming Language Interpreter Expression Evaluator Interface

    这个模块是骆言编程语言表达式求值的核心实现，负责将抽象语法树中的表达式 转换为运行时值。表达式求值是语言解释器的核心功能，涵盖了所有类型的表达式
    计算，包括算术表达式、逻辑表达式、函数调用、变量引用等。

    该模块的主要职责包括：
    - 实现所有表达式类型的求值逻辑
    - 管理表达式求值过程中的环境和作用域
    - 处理表达式求值中的错误和异常
    - 支持表达式的递归求值和类型检查
    - 优化表达式求值的性能和内存使用

    支持的表达式类型：
    - 字面量：整数、浮点数、字符串、布尔值
    - 变量引用：标识符查找和值获取
    - 函数调用：用户定义函数和内置函数调用
    - 算术表达式：加减乘除、比较运算等
    - 逻辑表达式：与或非、条件表达式等
    - 数据结构：列表、元组、记录构造和访问
    - 高阶表达式：匿名函数、函数应用等

    @author 骆言项目组
    @since 0.1.0 *)

open Value_operations

val eval_expr : runtime_env -> Ast.expr -> runtime_value
(** 求值表达式，将抽象语法树表达式转换为运行时值

    @param env 运行时环境，包含变量绑定和函数定义
    @param expr 待求值的表达式抽象语法树节点
    @return 表达式求值的结果值

    该函数是表达式求值的统一入口点，支持所有类型的表达式求值：

    1. 字面量表达式求值：
    - 整数字面量：直接返回整数值
    - 浮点数字面量：直接返回浮点数值
    - 字符串字面量：直接返回字符串值
    - 布尔值字面量：直接返回布尔值
    - 单位值：返回unit值

    2. 变量引用表达式求值：
    - 在当前环境中查找变量名称
    - 返回变量绑定的值
    - 支持作用域嵌套和遮蔽

    3. 函数调用表达式求值：
    - 求值函数表达式获得函数值
    - 求值所有参数表达式
    - 执行函数调用并返回结果
    - 支持递归调用和尾递归优化

    4. 算术表达式求值：
    - 求值左右操作数
    - 执行算术运算
    - 支持类型转换和溢出检查

    5. 逻辑表达式求值：
    - 实现短路求值优化
    - 支持比较运算和逻辑运算
    - 处理类型兼容性检查

    6. 数据结构表达式求值：
    - 列表构造和元素访问
    - 元组构造和元素提取
    - 记录构造和字段访问
    - 数组创建和索引访问

    7. 控制流表达式求值：
    - 条件表达式的分支选择
    - 模式匹配的模式选择
    - 异常处理的try-catch语义

    8. 高阶表达式求值：
    - 匿名函数（lambda）的闭包捕获
    - 函数应用的参数传递
    - 部分应用的柯里化处理

    表达式求值过程中的环境管理：
    - 维护变量绑定的作用域链
    - 处理函数调用时的环境扩展
    - 支持词法作用域和闭包捕获
    - 管理递归函数的自引用

    性能优化特性：
    - 短路求值：逻辑运算符的提前终止
    - 尾递归优化：避免栈溢出
    - 值缓存：重复计算的结果复用
    - 内存管理：及时释放临时值

    @raise RuntimeError 当表达式求值过程中发生运行时错误时
    @raise TypeError 当表达式涉及不兼容的类型运算时
    @raise UnboundVariable 当引用未定义的变量时
    @raise DivisionByZero 当除零运算时
    @raise StackOverflow 当递归深度超过限制时
    @raise InvalidOperation 当执行无效操作时 *)
