(*
 * 语法分析器测试
 * 验证语法分析器的基本功能
 *)

使用 基础工具.工具库
使用 基础工具.抽象语法树
使用 词法分析.词法分析器
使用 语法分析.语法分析器

(* 测试用例结构 *)
类型 语法测试用例 为 {
  名称: 字符串;
  输入: 字符串;
  应该成功: 布尔值;
}

(* 基础语法测试用例 *)
设 基础语法测试用例列表 为 [
  {
    名称 为 "简单整数字面量";
    输入 为 "42";
    应该成功 为 true;
  };
  
  {
    名称 为 "简单字符串字面量";
    输入 为 "\"你好\"";
    应该成功 为 true;
  };
  
  {
    名称 为 "简单变量";
    输入 为 "x";
    应该成功 为 true;
  };
  
  {
    名称 为 "算术表达式";
    输入 为 "1 + 2";
    应该成功 为 true;
  };
  
  {
    名称 为 "复杂算术表达式";
    输入 为 "1 + 2 * 3";
    应该成功 为 true;
  };
  
  {
    名称 为 "括号表达式";
    输入 为 "(1 + 2) * 3";
    应该成功 为 true;
  };
  
  {
    名称 为 "条件表达式";
    输入 为 "如果 真 那么 1 否则 2";
    应该成功 为 true;
  };
  
  {
    名称 为 "让绑定表达式";
    输入 为 "夫 x 为 42 在 x + 1";
    应该成功 为 true;
  };
  
  {
    名称 为 "函数表达式";
    输入 为 "函数 x -> x + 1";
    应该成功 为 true;
  };
  
  {
    名称 为 "多参数函数";
    输入 为 "函数 x y -> x + y";
    应该成功 为 true;
  };
  
  {
    名称 为 "不匹配的括号";
    输入 为 "(1 + 2";
    应该成功 为 false;
  };
  
  {
    名称 为 "缺少那么";
    输入 为 "如果 真 1 否则 2";
    应该成功 为 false;
  };
]

(* 运行单个语法测试用例 *)
夫 运行语法测试用例 者 受 测试用例 焉 算法 乃
  打印调试信息 ("运行语法测试: " ^ 测试用例.名称);
  
  (* 首先进行词法分析 *)
  观 词法分析 测试用例.输入 "测试文件" 之 性
  | 失败 错误信息 ->
      打印调试信息 ("词法分析失败: " ^ 测试用例.名称);
      not 测试用例.应该成功
  | 成功 (词法单元列表, _) ->
      (* 然后进行语法分析 *)
      观 语法分析 词法单元列表 "测试文件" 之 性
      | 失败 错误信息 ->
          设 结果 为 not 测试用例.应该成功 在
          if 结果 then
            打印调试信息 ("测试通过: " ^ 测试用例.名称 ^ " (期望失败)")
          else
            打印调试信息 ("测试失败: " ^ 测试用例.名称 ^ " (意外失败)");
          结果
      | 成功 (程序, _) ->
          设 结果 为 测试用例.应该成功 在
          if 结果 then
            打印调试信息 ("测试通过: " ^ 测试用例.名称 ^ " (成功解析)")
          else
            打印调试信息 ("测试失败: " ^ 测试用例.名称 ^ " (意外成功)");
          结果
是谓

(* 运行所有语法测试 *)
夫 运行所有语法测试 者 受 () 焉 算法 乃
  打印调试信息 "开始语法分析器测试...";
  
  设 通过数量 为 ref 0 在
  设 总数量 为 List.length 基础语法测试用例列表 在
  
  List.iter (夫 参数函数 者 受 测试用例 焉 算法 乃
    if 运行语法测试用例 测试用例 then
      通过数量 := !通过数量 + 1
  ) 基础语法测试用例列表;
  
  打印调试信息 ("语法测试完成: " ^ 
                (整数转字符串 !通过数量) ^ "/" ^ 
                (整数转字符串 总数量) ^ " 测试通过");
  
  !通过数量 为 总数量
是谓

(* AST遍历测试 *)
夫 测试AST遍历 者 受 () 焉 算法 乃
  打印调试信息 "测试AST遍历功能...";
  
  设 测试输入 为 "1 + 2 * 3" 在
  
  观 词法分析 测试输入 "测试文件" 之 性
  | 失败 _ -> 
      打印调试信息 "AST遍历测试失败：词法分析错误";
      false
  | 成功 (词法单元列表, _) ->
      观 语法分析 词法单元列表 "测试文件" 之 性
      | 失败 _ ->
          打印调试信息 "AST遍历测试失败：语法分析错误";
          false
      | 成功 (程序, _) ->
          (* 简单验证程序结构 *)
          设 语句数量 为 List.length 程序 在
          if 语句数量 > 0 then (
            打印调试信息 ("AST遍历测试通过：解析出 " ^ (整数转字符串 语句数量) ^ " 个语句");
            true
          ) else (
            打印调试信息 "AST遍历测试失败：没有解析出语句";
            false
          )
是谓

(* 主测试函数 *)
夫 主函数 者 受 () 焉 算法 乃
  设 语法测试结果 为 运行所有语法测试 () 在
  设 AST测试结果 为 测试AST遍历 () 在
  
  if 语法测试结果 && AST测试结果 then
    打印调试信息 "所有语法分析器测试通过！"
  else
    打印调试信息 "部分语法分析器测试失败！"
是谓