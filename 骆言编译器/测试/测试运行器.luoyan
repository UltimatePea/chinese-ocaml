(*
 * 测试运行器 - 统一运行所有测试
 * 集成测试框架，验证编译器各组件功能
 *)

使用 基础工具.工具库

(* 测试结果统计 *)
类型 测试统计 = {
  mutable 总测试数: 整数;
  mutable 通过测试数: 整数;
  mutable 失败测试数: 整数;
}

(* 创建测试统计 *)
让 创建测试统计 = 函数 () -> {
  总测试数 = 0;
  通过测试数 = 0;
  失败测试数 = 0;
}

(* 更新测试统计 *)
让 更新测试统计 = 函数 统计 通过 ->
  统计.总测试数 := 统计.总测试数 + 1;
  if 通过 then
    统计.通过测试数 := 统计.通过测试数 + 1
  else
    统计.失败测试数 := 统计.失败测试数 + 1

(* 打印测试统计 *)
让 打印测试统计 = 函数 统计 ->
  打印调试信息 ("=" * 50);
  打印调试信息 "测试统计报告";
  打印调试信息 ("=" * 50);
  打印调试信息 ("总测试数: " ^ (整数转字符串 统计.总测试数));
  打印调试信息 ("通过测试数: " ^ (整数转字符串 统计.通过测试数));
  打印调试信息 ("失败测试数: " ^ (整数转字符串 统计.失败测试数));
  
  let 通过率 = 
    if 统计.总测试数 > 0 then
      (浮点数转字符串 ((float_of_int 统计.通过测试数) /. (float_of_int 统计.总测试数) *. 100.0)) ^ "%"
    else
      "N/A"
  在
  打印调试信息 ("通过率: " ^ 通过率);
  打印调试信息 ("=" * 50)

(* 运行测试模块 *)
让 运行测试模块 = 函数 模块名 测试函数 统计 ->
  打印调试信息 ("");
  打印调试信息 ("运行 " ^ 模块名 ^ " 测试...");
  打印调试信息 ("-" * 30);
  
  let 开始时间 = Unix.gettimeofday () 在
  let 结果 = 测试函数 () 在
  let 结束时间 = Unix.gettimeofday () 在
  let 耗时 = 结束时间 -. 开始时间 在
  
  更新测试统计 统计 结果;
  
  打印调试信息 ("-" * 30);
  if 结果 then
    打印调试信息 (模块名 ^ " 测试通过 ✓ (耗时: " ^ (浮点数转字符串 耗时) ^ "s)")
  else
    打印调试信息 (模块名 ^ " 测试失败 ✗ (耗时: " ^ (浮点数转字符串 耗时) ^ "s)")

(* 集成测试 - 端到端验证 *)
让 运行集成测试 = 函数 () ->
  打印调试信息 "运行集成测试...";
  
  let 测试程序 = "让 阶乘 = 函数 n -> 如果 n <= 1 那么 1 否则 n * 阶乘 (n - 1) 在 阶乘 5" 在
  
  (* 测试完整的编译流程：词法分析 -> 语法分析 *)
  匹配 词法分析.词法分析 测试程序 "集成测试" 的
  | 失败 _ ->
      打印调试信息 "集成测试失败：词法分析阶段";
      false
  | 成功 (词法单元列表, _) ->
      匹配 语法分析.语法分析 词法单元列表 "集成测试" 的
      | 失败 _ ->
          打印调试信息 "集成测试失败：语法分析阶段";
          false
      | 成功 (程序, _) ->
          打印调试信息 "集成测试通过：完整编译流程成功";
          true

(* 性能测试 *)
让 运行性能测试 = 函数 () ->
  打印调试信息 "运行性能测试...";
  
  let 大型程序 = String.concat "\n" [
    "让 x1 = 1 在";
    "让 x2 = 2 在";
    "让 x3 = 3 在";
    "让 x4 = 4 在";
    "让 x5 = 5 在";
    "x1 + x2 + x3 + x4 + x5";
  ] 在
  
  let 开始时间 = Unix.gettimeofday () 在
  
  let 词法分析结果 = 词法分析.词法分析 大型程序 "性能测试" 在
  
  匹配 词法分析结果 的
  | 失败 _ -> 
      打印调试信息 "性能测试失败：词法分析阶段";
      false
  | 成功 (词法单元列表, _) ->
      let 语法分析结果 = 语法分析.语法分析 词法单元列表 "性能测试" 在
      
      匹配 语法分析结果 的
      | 失败 _ ->
          打印调试信息 "性能测试失败：语法分析阶段";
          false
      | 成功 (程序, _) ->
          let 结束时间 = Unix.gettimeofday () 在
          let 总耗时 = 结束时间 -. 开始时间 在
          
          打印调试信息 ("性能测试通过：编译耗时 " ^ (浮点数转字符串 总耗时) ^ "s");
          
          (* 简单的性能基准：应该在1秒内完成 *)
          总耗时 < 1.0

(* 错误处理测试 *)
让 运行错误处理测试 = 函数 () ->
  打印调试信息 "运行错误处理测试...";
  
  let 错误程序列表 = [
    ("语法错误1", "让 x =");  (* 缺少值表达式 *)
    ("语法错误2", "如果 真 那么 1");  (* 缺少否则分支 *)
    ("语法错误3", "(1 + 2");  (* 不匹配的括号 *)
    ("词法错误", "\"未终止字符串");  (* 未终止的字符串 *)
  ] 在
  
  let 通过数量 = ref 0 在
  let 总数量 = List.length 错误程序列表 在
  
  List.iter (函数 (错误名, 错误程序) ->
    匹配 词法分析.词法分析 错误程序 "错误测试" 的
    | 失败 _ ->
        打印调试信息 (错误名 ^ ": 词法分析正确报告错误 ✓");
        通过数量 := !通过数量 + 1
    | 成功 (词法单元列表, _) ->
        匹配 语法分析.语法分析 词法单元列表 "错误测试" 的
        | 失败 _ ->
            打印调试信息 (错误名 ^ ": 语法分析正确报告错误 ✓");
            通过数量 := !通过数量 + 1
        | 成功 _ ->
            打印调试信息 (错误名 ^ ": 未能检测到错误 ✗")
  ) 错误程序列表;
  
  let 成功 = !通过数量 = 总数量 在
  打印调试信息 ("错误处理测试: " ^ (整数转字符串 !通过数量) ^ "/" ^ (整数转字符串 总数量) ^ " 通过");
  成功

(* 主测试运行器 *)
让 主函数 = 函数 () ->
  let 统计 = 创建测试统计 () 在
  
  打印调试信息 "骆言编译器测试套件";
  打印调试信息 ("开始时间: " ^ (Unix.gettimeofday () |> 浮点数转字符串));
  
  (* 运行各个模块的测试 *)
  运行测试模块 "词法分析器" 词法分析器测试.主函数 统计;
  运行测试模块 "语法分析器" 语法分析器测试.主函数 统计;
  运行测试模块 "集成测试" 运行集成测试 统计;
  运行测试模块 "性能测试" 运行性能测试 统计;
  运行测试模块 "错误处理" 运行错误处理测试 统计;
  
  (* 打印最终统计 *)
  打印测试统计 统计;
  
  (* 输出测试结果 *)
  if 统计.失败测试数 = 0 then (
    打印调试信息 "🎉 所有测试通过！编译器组件工作正常。";
    打印调试信息 "✅ 骆言编译器已准备就绪进入下一开发阶段。"
  ) else (
    打印调试信息 ("⚠️  有 " ^ (整数转字符串 统计.失败测试数) ^ " 个测试失败，需要修复。");
    打印调试信息 "❌ 请检查错误日志并修复问题。"
  );
  
  统计.失败测试数 = 0