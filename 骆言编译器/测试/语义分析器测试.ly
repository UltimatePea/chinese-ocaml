(*
 * 语义分析器测试 - 测试语义分析功能
 * 包括符号表管理、类型检查和错误检测
 *)

「：引入测试框架和相关模块：」
使用 基础工具.工具库
使用 基础工具.位置信息
使用 基础工具.错误处理
使用 基础工具.抽象语法树
使用 词法分析.词法分析器
使用 语法分析.语法分析器
使用 语义分析.语义分析器

「：测试辅助函数：」
夫 创建测试位置 者 受 () 焉 算法 乃
  创建位置范围 (创建位置 "测试" 1 1) (创建位置 "测试" 1 10)
是谓

「：解析并分析代码字符串：」
夫 解析并分析 者 受 代码 焉 算法 乃
  设 词法结果 为 词法分析 代码 "测试" 在
  观 词法结果 之 性
  | 编译失败 错误列表 焉 算法 乃
      打印字符串 "词法分析失败:";
      打印换行 ();
      List.iter (夫 参数函数 者 受 错误 ->
        打印字符串 ("  " ^ (格式化编译错误 错误));
        打印换行 ()
      ) 错误列表;
      编译失败 错误列表
  | 编译成功 词法单元列表 焉 算法 乃
      设 语法结果 为 语法分析 词法单元列表 "测试" 在
      观 语法结果 之 性
      | 编译失败 错误列表 ->
          打印字符串 "语法分析失败:";
          打印换行 ();
          List.iter (夫 参数函数 者 受 错误 ->
            打印字符串 ("  " ^ (格式化编译错误 错误));
            打印换行 ()
          ) 错误列表;
          编译失败 错误列表
      | 编译成功 程序 ->
          语义分析 程序 "测试"
观毕
是谓

「：测试用例：基础类型检查：」
夫 测试基础类型检查 者 受 () 焉 算法 乃
  打印字符串 "测试基础类型检查...";
  打印换行 ();
  
  设 测试用例 为 [
    「：测试基础字面量：」
    ("夫 x 为 42", "整数字面量应该通过类型检查");
    ("夫 y 为 3.14", "浮点数字面量应该通过类型检查");
    ("夫 s 为 \"你好\"", "字符串字面量应该通过类型检查");
    ("夫 b 为 真", "布尔字面量应该通过类型检查");
    
    「：测试算术运算：」
    ("夫 加法 为 1 + 2", "整数加法应该通过类型检查");
    ("夫 乘法 为 3.0 * 4.0", "浮点数乘法应该通过类型检查");
    
    「：测试逻辑运算：」
    ("夫 逻辑 为 真 && 假", "布尔逻辑运算应该通过类型检查");
    ("夫 比较 为 5 > 3", "数值比较应该通过类型检查");
  ] 在
  
  List.iteri (夫 参数函数 者 受 索引 (代码, 描述) 焉 算法 乃
    打印字符串 ("  测试 " ^ (字符串化整数 (索引 + 1)) ^ ": " ^ 描述);
    打印换行 ();
    观 解析并分析 代码 之 性
    | 编译成功 () ->
        打印字符串 "    ✓ 通过";
        打印换行 ()
    | 编译失败 错误列表 ->
        打印字符串 "    ✗ 失败: ";
        if 错误列表 <> [] then
          打印字符串 (格式化编译错误 (List.hd 错误列表))
        else
          打印字符串 "未知错误";
        打印换行 ()
  ) 测试用例
是谓

「：测试用例：类型错误检测：」
夫 测试类型错误检测 者 受 () 焉 算法 乃
  打印字符串 "测试类型错误检测...";
  打印换行 ();
  
  设 错误测试用例 为 [
    「：类型不匹配错误：」
    ("夫 错误1 为 1 + \"字符串\"", "整数和字符串相加应该报错");
    ("夫 错误2 为 真 * 假", "布尔值相乘应该报错");
    ("夫 错误3 为 \"文本\" && 真", "字符串和布尔值逻辑运算应该报错");
    
    「：条件表达式类型错误：」
    ("夫 错误4 为 如果 5 那么 1 否则 2", "非布尔条件应该报错");
    ("夫 错误5 为 如果 真 那么 1 否则 \"不匹配\"", "分支类型不匹配应该报错");
    
    「：函数调用类型错误：」
    ("夫 f 者 受 x -> x + 1 在 f \"错误\"", "参数类型错误应该报错");
  ] 在
  
  List.iteri (夫 参数函数 者 受 索引 (代码, 描述) 焉 算法 乃
    打印字符串 ("  测试 " ^ (字符串化整数 (索引 + 1)) ^ ": " ^ 描述);
    打印换行 ();
    观 解析并分析 代码 之 性
    | 编译失败 错误列表 ->
        if List.exists (夫 参数函数 者 受 错误 ->
          观 错误 之 性
          | 类型错误 (_, _) -> 真
          | _ -> 假
        ) 错误列表 then (
          打印字符串 "    ✓ 正确检测到类型错误";
          打印换行 ()
        ) else (
          打印字符串 "    ✗ 检测到错误但不是类型错误";
          打印换行 ()
        )
    | 编译成功 () ->
        打印字符串 "    ✗ 应该检测到类型错误但没有";
        打印换行 ()
  ) 错误测试用例
是谓

「：测试用例：变量作用域：」
夫 测试变量作用域 者 受 () 焉 算法 乃
  打印字符串 "测试变量作用域...";
  打印换行 ();
  
  设 作用域测试用例 为 [
    「：正确的作用域使用：」
    ("夫 x 为 1 在 夫 y 为 x + 2 在 y", "内层作用域访问外层变量应该成功");
    ("夫 f 者 受 x -> 夫 y 为 x * 2 在 y 在 f 5", "函数参数和局部变量应该正确");
    
    「：作用域遮蔽：」
    ("夫 x 为 1 在 夫 x 为 2 在 x", "变量遮蔽应该使用内层定义");
    
    「：递归函数：」
    ("夫 递归 阶乘 者 受 n -> 如果 n <= 1 那么 1 否则 n * 阶乘 (n - 1) 在 阶乘 5", 
     "递归函数应该能够引用自身");
  ] 在
  
  List.iteri (夫 参数函数 者 受 索引 (代码, 描述) 焉 算法 乃
    打印字符串 ("  测试 " ^ (字符串化整数 (索引 + 1)) ^ ": " ^ 描述);
    打印换行 ();
    观 解析并分析 代码 之 性
    | 编译成功 () ->
        打印字符串 "    ✓ 通过";
        打印换行 ()
    | 编译失败 错误列表 ->
        打印字符串 "    ✗ 失败: ";
        if 错误列表 <> [] then
          打印字符串 (格式化编译错误 (List.hd 错误列表))
        else
          打印字符串 "未知错误";
        打印换行 ()
  ) 作用域测试用例
是谓

「：测试用例：未定义变量检测：」
夫 测试未定义变量检测 者 受 () 焉 算法 乃
  打印字符串 "测试未定义变量检测...";
  打印换行 ();
  
  设 未定义变量测试 为 [
    ("未定义变量", "直接使用未定义变量应该报错");
    ("夫 x 为 y", "使用未定义变量y应该报错");
    ("夫 f 者 受 x -> y 在 f 1", "函数体中使用未定义变量应该报错");
  ] 在
  
  List.iteri (夫 参数函数 者 受 索引 (代码, 描述) 焉 算法 乃
    打印字符串 ("  测试 " ^ (字符串化整数 (索引 + 1)) ^ ": " ^ 描述);
    打印换行 ();
    观 解析并分析 代码 之 性
    | 编译失败 错误列表 ->
        if List.exists (夫 参数函数 者 受 错误 ->
          观 错误 之 性
          | 语义错误 (信息, _) -> 字符串包含 信息 "未定义"
          | _ -> 假
        ) 错误列表 then (
          打印字符串 "    ✓ 正确检测到未定义变量";
          打印换行 ()
        ) else (
          打印字符串 "    ✗ 检测到错误但不是未定义变量错误";
          打印换行 ()
        )
    | 编译成功 () ->
        打印字符串 "    ✗ 应该检测到未定义变量但没有";
        打印换行 ()
  ) 未定义变量测试
是谓

「：测试用例：函数类型推导：」
夫 测试函数类型推导 者 受 () 焉 算法 乃
  打印字符串 "测试函数类型推导...";
  打印换行 ();
  
  设 函数测试用例 为 [
    「：简单函数：」
    ("夫 身份函数 者 受 x -> x", "身份函数应该通过类型检查");
    ("夫 常量函数 者 受 x -> 42", "常量函数应该通过类型检查");
    ("夫 加一 者 受 x -> x + 1", "整数函数应该通过类型检查");
    
    「：高阶函数：」
    ("夫 应用 者 受 f -> 函数 x -> f x", "高阶函数应该通过类型检查");
    ("夫 组合 者 受 f -> 函数 g -> 函数 x -> f (g x)", "函数组合应该通过类型检查");
    
    「：递归函数：」
    ("夫 递归 长度 者 受 列表 -> 观 列表 之 性 | [] -> 0 | _ :: 尾部 -> 1 + 长度 尾部", 
     "递归列表函数应该通过类型检查");
  ] 在
  
  List.iteri (夫 参数函数 者 受 索引 (代码, 描述) 焉 算法 乃
    打印字符串 ("  测试 " ^ (字符串化整数 (索引 + 1)) ^ ": " ^ 描述);
    打印换行 ();
    观 解析并分析 代码 之 性
    | 编译成功 () ->
        打印字符串 "    ✓ 通过";
        打印换行 ()
    | 编译失败 错误列表 ->
        打印字符串 "    ✗ 失败: ";
        if 错误列表 <> [] then
          打印字符串 (格式化编译错误 (List.hd 错误列表))
        else
          打印字符串 "未知错误";
        打印换行 ()
  ) 函数测试用例
是谓

「：测试用例：复合数据类型：」
夫 测试复合数据类型 者 受 () 焉 算法 乃
  打印字符串 "测试复合数据类型...";
  打印换行 ();
  
  设 复合类型测试 为 [
    「：列表类型：」
    ("夫 整数列表 为 [1; 2; 3]", "整数列表应该通过类型检查");
    ("夫 字符串列表 为 [\"你好\"; \"世界\"]", "字符串列表应该通过类型检查");
    ("夫 空列表 为 []", "空列表应该通过类型检查");
    
    「：元组类型：」
    ("夫 整数对 为 (1, 2)", "整数对应该通过类型检查");
    ("夫 混合元组 为 (1, \"文本\", 真)", "混合类型元组应该通过类型检查");
    
    「：引用类型：」
    ("夫 整数引用 为 引用 42", "整数引用应该通过类型检查");
    ("夫 引用值 为 !整数引用", "解引用应该通过类型检查");
    
    「：数组类型：」
    ("夫 整数数组 为 [|1; 2; 3|]", "整数数组应该通过类型检查");
    ("夫 数组元素 为 整数数组.(0)", "数组访问应该通过类型检查");
  ] 在
  
  List.iteri (夫 参数函数 者 受 索引 (代码, 描述) 焉 算法 乃
    打印字符串 ("  测试 " ^ (字符串化整数 (索引 + 1)) ^ ": " ^ 描述);
    打印换行 ();
    观 解析并分析 代码 之 性
    | 编译成功 () ->
        打印字符串 "    ✓ 通过";
        打印换行 ()
    | 编译失败 错误列表 ->
        打印字符串 "    ✗ 失败: ";
        if 错误列表 <> [] then
          打印字符串 (格式化编译错误 (List.hd 错误列表))
        else
          打印字符串 "未知错误";
        打印换行 ()
  ) 复合类型测试
是谓

「：主测试函数：」
夫 运行语义分析器测试 者 受 () 焉 算法 乃
  打印字符串 "========================================";
  打印换行 ();
  打印字符串 "       语义分析器测试套件";
  打印换行 ();
  打印字符串 "========================================";
  打印换行 ();
  打印换行 ();
  
  测试基础类型检查 ();
  打印换行 ();
  
  测试类型错误检测 ();
  打印换行 ();
  
  测试变量作用域 ();
  打印换行 ();
  
  测试未定义变量检测 ();
  打印换行 ();
  
  测试函数类型推导 ();
  打印换行 ();
  
  测试复合数据类型 ();
  打印换行 ();
  
  打印字符串 "========================================";
  打印换行 ();
  打印字符串 "       语义分析器测试完成";
  打印换行 ();
  打印字符串 "========================================";
  打印换行 ()
是谓

「：导出测试函数：」
设 () 为 运行语义分析器测试 ()