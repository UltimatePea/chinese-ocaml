(*
 * 语义分析器测试 - 测试语义分析功能
 * 包括符号表管理、类型检查和错误检测
 *)

(* 引入测试框架和相关模块 *)
使用 基础工具.工具库
使用 基础工具.位置信息
使用 基础工具.错误处理
使用 基础工具.抽象语法树
使用 词法分析.词法分析器
使用 语法分析.语法分析器
使用 语义分析.语义分析器

(* 测试辅助函数 *)
让 创建测试位置 = 函数 () ->
  创建位置范围 (创建位置 "测试" 1 1) (创建位置 "测试" 1 10)

(* 解析并分析代码字符串 *)
让 解析并分析 = 函数 代码 ->
  let 词法结果 = 词法分析 代码 "测试" 在
  匹配 词法结果 的
  | 编译失败 错误列表 ->
      打印字符串 "词法分析失败:";
      打印换行 ();
      List.iter (函数 错误 ->
        打印字符串 ("  " ^ (格式化编译错误 错误));
        打印换行 ()
      ) 错误列表;
      编译失败 错误列表
  | 编译成功 词法单元列表 ->
      let 语法结果 = 语法分析 词法单元列表 "测试" 在
      匹配 语法结果 的
      | 编译失败 错误列表 ->
          打印字符串 "语法分析失败:";
          打印换行 ();
          List.iter (函数 错误 ->
            打印字符串 ("  " ^ (格式化编译错误 错误));
            打印换行 ()
          ) 错误列表;
          编译失败 错误列表
      | 编译成功 程序 ->
          语义分析 程序 "测试"

(* 测试用例：基础类型检查 *)
让 测试基础类型检查 = 函数 () ->
  打印字符串 "测试基础类型检查...";
  打印换行 ();
  
  let 测试用例 = [
    (* 测试基础字面量 *)
    ("让 x = 42", "整数字面量应该通过类型检查");
    ("让 y = 3.14", "浮点数字面量应该通过类型检查");
    ("让 s = \"你好\"", "字符串字面量应该通过类型检查");
    ("让 b = 真", "布尔字面量应该通过类型检查");
    
    (* 测试算术运算 *)
    ("让 加法 = 1 + 2", "整数加法应该通过类型检查");
    ("让 乘法 = 3.0 * 4.0", "浮点数乘法应该通过类型检查");
    
    (* 测试逻辑运算 *)
    ("让 逻辑 = 真 && 假", "布尔逻辑运算应该通过类型检查");
    ("让 比较 = 5 > 3", "数值比较应该通过类型检查");
  ] 在
  
  List.iteri (函数 索引 (代码, 描述) ->
    打印字符串 ("  测试 " ^ (字符串化整数 (索引 + 1)) ^ ": " ^ 描述);
    打印换行 ();
    匹配 解析并分析 代码 的
    | 编译成功 () ->
        打印字符串 "    ✓ 通过";
        打印换行 ()
    | 编译失败 错误列表 ->
        打印字符串 "    ✗ 失败: ";
        if 错误列表 <> [] then
          打印字符串 (格式化编译错误 (List.hd 错误列表))
        else
          打印字符串 "未知错误";
        打印换行 ()
  ) 测试用例

(* 测试用例：类型错误检测 *)
让 测试类型错误检测 = 函数 () ->
  打印字符串 "测试类型错误检测...";
  打印换行 ();
  
  let 错误测试用例 = [
    (* 类型不匹配错误 *)
    ("让 错误1 = 1 + \"字符串\"", "整数和字符串相加应该报错");
    ("让 错误2 = 真 * 假", "布尔值相乘应该报错");
    ("让 错误3 = \"文本\" && 真", "字符串和布尔值逻辑运算应该报错");
    
    (* 条件表达式类型错误 *)
    ("让 错误4 = 如果 5 那么 1 否则 2", "非布尔条件应该报错");
    ("让 错误5 = 如果 真 那么 1 否则 \"不匹配\"", "分支类型不匹配应该报错");
    
    (* 函数调用类型错误 *)
    ("让 f = 函数 x -> x + 1 在 f \"错误\"", "参数类型错误应该报错");
  ] 在
  
  List.iteri (函数 索引 (代码, 描述) ->
    打印字符串 ("  测试 " ^ (字符串化整数 (索引 + 1)) ^ ": " ^ 描述);
    打印换行 ();
    匹配 解析并分析 代码 的
    | 编译失败 错误列表 ->
        if List.exists (函数 错误 ->
          匹配 错误 的
          | 类型错误 (_, _) -> 真
          | _ -> 假
        ) 错误列表 then (
          打印字符串 "    ✓ 正确检测到类型错误";
          打印换行 ()
        ) else (
          打印字符串 "    ✗ 检测到错误但不是类型错误";
          打印换行 ()
        )
    | 编译成功 () ->
        打印字符串 "    ✗ 应该检测到类型错误但没有";
        打印换行 ()
  ) 错误测试用例

(* 测试用例：变量作用域 *)
让 测试变量作用域 = 函数 () ->
  打印字符串 "测试变量作用域...";
  打印换行 ();
  
  let 作用域测试用例 = [
    (* 正确的作用域使用 *)
    ("让 x = 1 在 让 y = x + 2 在 y", "内层作用域访问外层变量应该成功");
    ("让 f = 函数 x -> 让 y = x * 2 在 y 在 f 5", "函数参数和局部变量应该正确");
    
    (* 作用域遮蔽 *)
    ("让 x = 1 在 让 x = 2 在 x", "变量遮蔽应该使用内层定义");
    
    (* 递归函数 *)
    ("让 递归 阶乘 = 函数 n -> 如果 n <= 1 那么 1 否则 n * 阶乘 (n - 1) 在 阶乘 5", 
     "递归函数应该能够引用自身");
  ] 在
  
  List.iteri (函数 索引 (代码, 描述) ->
    打印字符串 ("  测试 " ^ (字符串化整数 (索引 + 1)) ^ ": " ^ 描述);
    打印换行 ();
    匹配 解析并分析 代码 的
    | 编译成功 () ->
        打印字符串 "    ✓ 通过";
        打印换行 ()
    | 编译失败 错误列表 ->
        打印字符串 "    ✗ 失败: ";
        if 错误列表 <> [] then
          打印字符串 (格式化编译错误 (List.hd 错误列表))
        else
          打印字符串 "未知错误";
        打印换行 ()
  ) 作用域测试用例

(* 测试用例：未定义变量检测 *)
让 测试未定义变量检测 = 函数 () ->
  打印字符串 "测试未定义变量检测...";
  打印换行 ();
  
  let 未定义变量测试 = [
    ("未定义变量", "直接使用未定义变量应该报错");
    ("让 x = y", "使用未定义变量y应该报错");
    ("让 f = 函数 x -> y 在 f 1", "函数体中使用未定义变量应该报错");
  ] 在
  
  List.iteri (函数 索引 (代码, 描述) ->
    打印字符串 ("  测试 " ^ (字符串化整数 (索引 + 1)) ^ ": " ^ 描述);
    打印换行 ();
    匹配 解析并分析 代码 的
    | 编译失败 错误列表 ->
        if List.exists (函数 错误 ->
          匹配 错误 的
          | 语义错误 (信息, _) -> 字符串包含 信息 "未定义"
          | _ -> 假
        ) 错误列表 then (
          打印字符串 "    ✓ 正确检测到未定义变量";
          打印换行 ()
        ) else (
          打印字符串 "    ✗ 检测到错误但不是未定义变量错误";
          打印换行 ()
        )
    | 编译成功 () ->
        打印字符串 "    ✗ 应该检测到未定义变量但没有";
        打印换行 ()
  ) 未定义变量测试

(* 测试用例：函数类型推导 *)
让 测试函数类型推导 = 函数 () ->
  打印字符串 "测试函数类型推导...";
  打印换行 ();
  
  let 函数测试用例 = [
    (* 简单函数 *)
    ("让 身份函数 = 函数 x -> x", "身份函数应该通过类型检查");
    ("让 常量函数 = 函数 x -> 42", "常量函数应该通过类型检查");
    ("让 加一 = 函数 x -> x + 1", "整数函数应该通过类型检查");
    
    (* 高阶函数 *)
    ("让 应用 = 函数 f -> 函数 x -> f x", "高阶函数应该通过类型检查");
    ("让 组合 = 函数 f -> 函数 g -> 函数 x -> f (g x)", "函数组合应该通过类型检查");
    
    (* 递归函数 *)
    ("让 递归 长度 = 函数 列表 -> 匹配 列表 的 | [] -> 0 | _ :: 尾部 -> 1 + 长度 尾部", 
     "递归列表函数应该通过类型检查");
  ] 在
  
  List.iteri (函数 索引 (代码, 描述) ->
    打印字符串 ("  测试 " ^ (字符串化整数 (索引 + 1)) ^ ": " ^ 描述);
    打印换行 ();
    匹配 解析并分析 代码 的
    | 编译成功 () ->
        打印字符串 "    ✓ 通过";
        打印换行 ()
    | 编译失败 错误列表 ->
        打印字符串 "    ✗ 失败: ";
        if 错误列表 <> [] then
          打印字符串 (格式化编译错误 (List.hd 错误列表))
        else
          打印字符串 "未知错误";
        打印换行 ()
  ) 函数测试用例

(* 测试用例：复合数据类型 *)
让 测试复合数据类型 = 函数 () ->
  打印字符串 "测试复合数据类型...";
  打印换行 ();
  
  let 复合类型测试 = [
    (* 列表类型 *)
    ("让 整数列表 = [1; 2; 3]", "整数列表应该通过类型检查");
    ("让 字符串列表 = [\"你好\"; \"世界\"]", "字符串列表应该通过类型检查");
    ("让 空列表 = []", "空列表应该通过类型检查");
    
    (* 元组类型 *)
    ("让 整数对 = (1, 2)", "整数对应该通过类型检查");
    ("让 混合元组 = (1, \"文本\", 真)", "混合类型元组应该通过类型检查");
    
    (* 引用类型 *)
    ("让 整数引用 = 引用 42", "整数引用应该通过类型检查");
    ("让 引用值 = !整数引用", "解引用应该通过类型检查");
    
    (* 数组类型 *)
    ("让 整数数组 = [|1; 2; 3|]", "整数数组应该通过类型检查");
    ("让 数组元素 = 整数数组.(0)", "数组访问应该通过类型检查");
  ] 在
  
  List.iteri (函数 索引 (代码, 描述) ->
    打印字符串 ("  测试 " ^ (字符串化整数 (索引 + 1)) ^ ": " ^ 描述);
    打印换行 ();
    匹配 解析并分析 代码 的
    | 编译成功 () ->
        打印字符串 "    ✓ 通过";
        打印换行 ()
    | 编译失败 错误列表 ->
        打印字符串 "    ✗ 失败: ";
        if 错误列表 <> [] then
          打印字符串 (格式化编译错误 (List.hd 错误列表))
        else
          打印字符串 "未知错误";
        打印换行 ()
  ) 复合类型测试

(* 主测试函数 *)
让 运行语义分析器测试 = 函数 () ->
  打印字符串 "========================================";
  打印换行 ();
  打印字符串 "       语义分析器测试套件";
  打印换行 ();
  打印字符串 "========================================";
  打印换行 ();
  打印换行 ();
  
  测试基础类型检查 ();
  打印换行 ();
  
  测试类型错误检测 ();
  打印换行 ();
  
  测试变量作用域 ();
  打印换行 ();
  
  测试未定义变量检测 ();
  打印换行 ();
  
  测试函数类型推导 ();
  打印换行 ();
  
  测试复合数据类型 ();
  打印换行 ();
  
  打印字符串 "========================================";
  打印换行 ();
  打印字符串 "       语义分析器测试完成";
  打印换行 ();
  打印字符串 "========================================";
  打印换行 ()

(* 导出测试函数 *)
让 () = 运行语义分析器测试 ()