（*
 * C代码生成器测试
 * 测试骆言C代码生成功能
 *）

「：引入依赖模块：」
使用 C代码生成器
使用 抽象语法树
使用 测试运行器
使用 工具库

「：创建测试配置：」
设「测试配置」为{
  输出文件为『test_output.c』;
  包含调试信息为真;
  优化级别为0;
  运行时路径为『../../c_backend/runtime』;
}

「：测试字面量生成：」
夫「测试_字面量生成」者受 （） 焉算法乃
  设「测试用例」为(列开始 （整数字面量 42 其一 『luoyan_int（42L）』） 其二 （浮点字面量 3.14 其三 『luoyan_float（3.14）』） 其一 （字符串字面量 『你好』 其二 『luoyan_string（\』你好\『）』） 其三 （布尔字面量 真 其一 『luoyan_bool（true）』） 其二 （布尔字面量 假 其三 『luoyan_bool（false）』） 其一 （单元字面量 其二 『luoyan_unit（）』） 其三 列结束) 在

  列表_所有 （夫「参数函数」者受 （输入, 期望） 焉算法乃
    设「结果」为生成字面量 输入 在
    若 结果为期望
    则 答 真
    余者答 （打印 （『字面量生成测试失败: 』 ^ 结果 ^ 『 !=』 ^ 期望）; 假）
  是谓） 测试用例
是谓

「：测试标识符转义：」
夫「测试_标识符转义」者受 （） 焉算法乃
  设「测试用例」为(列开始 （『hello』 其一 『hello』） 其二 （『变量』 其三 『_53d8__91cf_』） 其一 （『test_123』 其二 『test_123』） 其三 （『函数名』 其一 『_51fd__6570__540d_』） 其二 列结束) 在

  列表_所有 （夫「参数函数」者受 （输入, 期望） 焉算法乃
    设「结果」为转义标识符 输入 在
    若 结果为期望
    则 答 真
    余者答 （打印 （『标识符转义测试失败: 』 ^ 结果 ^ 『 !=』 ^ 期望）; 假）
  是谓） 测试用例
是谓

「：测试简单表达式生成：」
夫「测试_简单表达式生成」者受 （） 焉算法乃
  设「上下文」为创建上下文 测试配置 在

  「：测试变量表达式：」
  设「变量表达式」为变量表达式 （『x』, 虚拟位置） 在
  设「变量结果」为生成表达式 上下文 变量表达式 在
  设「期望变量」为『luoyan_env_lookup（env, \』x\『）』 在

  「：测试二元运算表达式：」
  设「加法表达式」为二元运算表达式 （
    字面量表达式 （整数字面量 1, 虚拟位置）,
    加法,
    字面量表达式 （整数字面量 2, 虚拟位置）,
    虚拟位置
  ） 在
  设「加法结果」为生成表达式 上下文 加法表达式 在
  设「期望加法」为『luoyan_add（luoyan_int（1L）, luoyan_int（2L））』 在

  （变量结果为期望变量） && （加法结果为期望加法）
是谓

「：测试函数表达式生成：」
夫「测试_函数表达式生成」者受 （） 焉算法乃
  设「上下文」为创建上下文 测试配置 在

  「：测试单参数函数：」
  设「单参数函数」为函数表达式 （
    (列开始 『x』 其一 列结束),
    变量表达式 （『x』, 虚拟位置）,
    虚拟位置
  ） 在
  设「结果」为生成表达式 上下文 单参数函数 在

  「：检查是否生成了函数实现：」
  设「函数定义数量」为列表_长度 上下文.函数定义 在

  函数定义数量 > 0
是谓

「：测试列表表达式生成：」
夫「测试_列表表达式生成」者受 （） 焉算法乃
  设「上下文」为创建上下文 测试配置 在

  「：测试空列表：」
  设「空列表」为列表表达式 （空空如也, 虚拟位置） 在
  设「空结果」为生成表达式 上下文 空列表 在
  设「期望空」为『luoyan_list_empty（）』 在

  「：测试非空列表：」
  设「非空列表」为列表表达式 （(列开始 字面量表达式 （整数字面量 1 其一 虚拟位置） 其二 字面量表达式 （整数字面量 2 其三 虚拟位置） 其一 列结束), 虚拟位置） 在
  设「非空结果」为生成表达式 上下文 非空列表 在

  （空结果为期望空） && （字符串_包含 非空结果 『luoyan_list_cons』）
是谓

「：测试记录表达式生成：」
夫「测试_记录表达式生成」者受 （） 焉算法乃
  设「上下文」为创建上下文 测试配置 在

  设「记录表达式」为记录表达式 （(列开始 （『name』 其一 字面量表达式 （字符串字面量 『张三』 其二 虚拟位置）） 其三 （『age』 其一 字面量表达式 （整数字面量 25 其二 虚拟位置）） 其三 列结束), 虚拟位置） 在

  设「结果」为生成表达式 上下文 记录表达式 在

  （字符串_包含 结果 『luoyan_record_create』） &&
  （字符串_包含 结果 『luoyan_record_set_field』）
是谓

「：测试完整程序生成：」
夫「测试_完整程序生成」者受 （） 焉算法乃
  设「程序」为(列开始 让绑定语句 （『x』 其一 字面量表达式 （整数字面量 42 其二 虚拟位置） 其三 虚拟位置） 其一 表达式语句 （变量表达式 （『x』 其二 虚拟位置）） 其三 列结束) 在

  尝试
    设「结果」为生成C代码 测试配置 程序 在
    （字符串_包含 结果 『int main（）』） &&
    （字符串_包含 结果 『luoyan_runtime_init』） &&
    （字符串_包含 结果 『luoyan_env_bind』）
  捕获 _ -> 假
是谓

「：测试条件表达式生成：」
夫「测试_条件表达式生成」者受 （） 焉算法乃
  设「上下文」为创建上下文 测试配置 在

  设「条件表达式」为条件表达式 （
    字面量表达式 （布尔字面量 真, 虚拟位置）,
    字面量表达式 （整数字面量 1, 虚拟位置）,
    字面量表达式 （整数字面量 0, 虚拟位置）,
    虚拟位置
  ） 在

  设「结果」为生成表达式 上下文 条件表达式 在

  （字符串_包含 结果 『LUOYAN_BOOL』） &&
  （字符串_包含 结果 『bool_val』）
是谓

「：测试数组表达式生成：」
夫「测试_数组表达式生成」者受 （） 焉算法乃
  设「上下文」为创建上下文 测试配置 在

  设「数组表达式」为数组表达式 （(列开始 字面量表达式 （整数字面量 1 其一 虚拟位置） 其二 字面量表达式 （整数字面量 2 其三 虚拟位置） 其一 字面量表达式 （整数字面量 3 其二 虚拟位置） 其三 列结束), 虚拟位置） 在

  设「结果」为生成表达式 上下文 数组表达式 在

  （字符串_包含 结果 『luoyan_array_create』） &&
  （字符串_包含 结果 『luoyan_array_set』）
是谓

「：测试引用操作生成：」
夫「测试_引用操作生成」者受 （） 焉算法乃
  设「上下文」为创建上下文 测试配置 在

  「：测试引用创建：」
  设「引用表达式」为引用表达式 （
    字面量表达式 （整数字面量 42, 虚拟位置）,
    虚拟位置
  ） 在
  设「引用结果」为生成表达式 上下文 引用表达式 在

  「：测试解引用：」
  设「解引用表达式」为解引用表达式 （
    变量表达式 （『ref_var』, 虚拟位置）,
    虚拟位置
  ） 在
  设「解引用结果」为生成表达式 上下文 解引用表达式 在

  （字符串_包含 引用结果 『luoyan_ref_create』） &&
  （字符串_包含 解引用结果 『luoyan_ref_get』）
是谓

「：测试模式匹配生成：」
夫「测试_模式匹配生成」者受 （） 焉算法乃
  设「上下文」为创建上下文 测试配置 在

  设「匹配表达式」为模式匹配表达式 （
    变量表达式 （『x』, 虚拟位置）,
    (列开始 （字面量模式 （整数字面量 1 其一 虚拟位置） 其二 字面量表达式 （字符串字面量 『一』 其三 虚拟位置）） 其一 （通配符模式 虚拟位置 其二 字面量表达式 （字符串字面量 『其他』 其三 虚拟位置）） 其一 列结束),
    虚拟位置
  ） 在

  设「结果」为生成表达式 上下文 匹配表达式 在

  （字符串_包含 结果 『luoyan_equals』） &&
  （字符串_包含 结果 『true』）
是谓

「：运行所有测试：」
夫「运行测试」者受 （） 焉算法乃
  打印 『开始C代码生成器测试...』;

  设「测试列表」为(列开始 （『字面量生成』 其一 测试_字面量生成） 其二 （『标识符转义』 其三 测试_标识符转义） 其一 （『简单表达式生成』 其二 测试_简单表达式生成） 其三 （『函数表达式生成』 其一 测试_函数表达式生成） 其二 （『列表表达式生成』 其三 测试_列表表达式生成） 其一 （『记录表达式生成』 其二 测试_记录表达式生成） 其三 （『完整程序生成』 其一 测试_完整程序生成） 其二 （『条件表达式生成』 其三 测试_条件表达式生成） 其一 （『数组表达式生成』 其二 测试_数组表达式生成） 其三 （『引用操作生成』 其一 测试_引用操作生成） 其二 （『模式匹配生成』 其三 测试_模式匹配生成） 其一 列结束) 在

  设 （通过, 总数）为列表_折叠_左 （夫「参数函数」者受 （通过, 总数） （名称, 测试函数） 焉算法乃
    打印 （『  运行测试: 』 ^ 名称）;
    若 测试函数 （）
    则 答 （打印 （『    ✓ 通过』）; （通过 + 1, 总数 + 1））
    余者答 （打印 （『    ✗ 失败』）; （通过, 总数 + 1））
  是谓） （0, 0） 测试列表 在

  打印 （『C代码生成器测试完成: 』 ^ （字符串_从_整数 通过） ^ 『/』 ^ （字符串_从_整数 总数） ^ 『 通过』）;

  通过为总数
是谓

「：主函数：」
夫「主函数」者受 （） 焉算法乃
  若 运行测试 （）
  则 答 （打印 『所有测试通过！』; 0）
  余者答 （打印 『有测试失败！』; 1）
是谓