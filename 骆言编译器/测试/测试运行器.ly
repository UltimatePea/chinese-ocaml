（*
 * 测试运行器 - 统一运行所有测试
 * 集成测试框架，验证编译器各组件功能
 *）

使用 基础工具.工具库

「：测试结果统计：」
类型 测试统计为{
  mutable 总测试数: 整数;
  mutable 通过测试数: 整数;
  mutable 失败测试数: 整数;
}

「：创建测试统计：」
夫「创建测试统计」者受 （） 焉算法乃 {
  总测试数为0;
  通过测试数为0;
  失败测试数为0;
}
是谓

「：更新测试统计：」
夫「更新测试统计」者受 统计 通过 焉算法乃
  统计.总测试数 :=统计.总测试数 + 1;
  if 通过 then
    统计.通过测试数 :=统计.通过测试数 + 1
  else
    统计.失败测试数 :=统计.失败测试数 + 1
是谓

「：打印测试统计：」
夫「打印测试统计」者受 统计 焉算法乃
  打印调试信息 （『=』 * 50）;
  打印调试信息 『测试统计报告』;
  打印调试信息 （『=』 * 50）;
  打印调试信息 （『总测试数: 』 ^ （整数转字符串 统计.总测试数））;
  打印调试信息 （『通过测试数: 』 ^ （整数转字符串 统计.通过测试数））;
  打印调试信息 （『失败测试数: 』 ^ （整数转字符串 统计.失败测试数））;
  
  设「通过率」为    if 统计.总测试数 > 0 then
      （浮点数转字符串 （（float_of_int 统计.通过测试数） /. （float_of_int 统计.总测试数） *. 100.0）） ^ 『%』
    else
      『N/A』
  在
  打印调试信息 （『通过率: 』 ^ 通过率）;
  打印调试信息 （『=』 * 50）
是谓

「：运行测试模块：」
夫「运行测试模块」者受 模块名 测试函数 统计 焉算法乃
  打印调试信息 （『』）;
  打印调试信息 （『运行 』 ^ 模块名 ^ 『 测试...』）;
  打印调试信息 （『-』 * 30）;
  
  设「开始时间」为Unix.gettimeofday （） 在
  设「结果」为测试函数 （） 在
  设「结束时间」为Unix.gettimeofday （） 在
  设「耗时」为结束时间 -. 开始时间 在
  
  更新测试统计 统计 结果;
  
  打印调试信息 （『-』 * 30）;
  if 结果 then
    打印调试信息 （模块名 ^ 『 测试通过 ✓ （耗时: 』 ^ （浮点数转字符串 耗时） ^ 『s）』）
  else
    打印调试信息 （模块名 ^ 『 测试失败 ✗ （耗时: 』 ^ （浮点数转字符串 耗时） ^ 『s）』）
是谓

「：集成测试 - 端到端验证：」
夫「运行集成测试」者受 （） 焉算法乃
  打印调试信息 『运行集成测试...』;
  
  设「测试程序」为『夫「阶乘」者受 n -> 若 n <=1 则 答 1 余者答 n * 阶乘 （n - 1） 在 阶乘 5』 在
  
  「：测试完整的编译流程：词法分析 -> 语法分析：」
  观 词法分析.词法分析 测试程序 『集成测试』 之 性
  | 失败 _ 焉算法乃
      打印调试信息 『集成测试失败：词法分析阶段』;
      false
  | 成功 （词法单元列表, _） 焉算法乃
      观 语法分析.语法分析 词法单元列表 『集成测试』 之 性
      | 失败 _ ->
          打印调试信息 『集成测试失败：语法分析阶段』;
          false
      | 成功 （程序, _） ->
          打印调试信息 『集成测试通过：完整编译流程成功』;
          true
观毕
是谓

「：性能测试：」
夫「运行性能测试」者受 （） 焉算法乃
  打印调试信息 『运行性能测试...』;
  
  设「大型程序」为String.concat 『\n』 (列开始 『夫 x1为1 在』 其一 『夫 x2为2 在』 其二 『夫 x3为3 在』 其三 『夫 x4为4 在』 其一 『夫 x5为5 在』 其二 『x1 + x2 + x3 + x4 + x5』 其三 列结束) 在
  
  设「开始时间」为Unix.gettimeofday （） 在
  
  设「词法分析结果」为词法分析.词法分析 大型程序 『性能测试』 在
  
  观「词法分析结果」之性
  | 失败 _ -> 
      打印调试信息 『性能测试失败：词法分析阶段』;
      false
  | 成功 （词法单元列表, _） 焉算法乃
      设「语法分析结果」为语法分析.语法分析 词法单元列表 『性能测试』 在
      
      观「语法分析结果」之性
      | 失败 _ ->
          打印调试信息 『性能测试失败：语法分析阶段』;
          false
      | 成功 （程序, _） ->
          设「结束时间」为Unix.gettimeofday （） 在
          设「总耗时」为结束时间 -. 开始时间 在
          
          打印调试信息 （『性能测试通过：编译耗时 』 ^ （浮点数转字符串 总耗时） ^ 『s』）;
          
          「：简单的性能基准：应该在1秒内完成：」
          总耗时 < 1.0
观毕
是谓

「：错误处理测试：」
夫「运行错误处理测试」者受 （） 焉算法乃
  打印调试信息 『运行错误处理测试...』;
  
  设「错误程序列表」为(列开始 （『语法错误1』 其一 『夫 x=』） 其二 「：缺少值表达式：」
    （『语法错误2』 其三 『若 真 则 答 1』） 其一 「：缺少否则分支：」
    （『语法错误3』 其二 『（1 + 2』） 其三 「：不匹配的括号：」
    （『词法错误』 其一 『\』未终止字符串"） 其二 「：未终止的字符串：」 其三 列结束) 在
  
  设「通过数量」为ref 0 在
  设「总数量」为List.length 错误程序列表 在
  
  List.iter （夫「参数函数」者受 （错误名, 错误程序） 焉算法乃
    观 词法分析.词法分析 错误程序 『错误测试』 之 性
    | 失败 _ 焉算法乃
        打印调试信息 （错误名 ^ 『: 词法分析正确报告错误 ✓』）;
        通过数量 :=!通过数量 + 1
    | 成功 （词法单元列表, _） 焉算法乃
        观 语法分析.语法分析 词法单元列表 『错误测试』 之 性
        | 失败 _ ->
            打印调试信息 （错误名 ^ 『: 语法分析正确报告错误 ✓』）;
            通过数量 :=!通过数量 + 1
        | 成功 _ ->
            打印调试信息 （错误名 ^ 『: 未能检测到错误 ✗』）
  ） 错误程序列表;
  
  设「成功」为!通过数量为总数量 在
  打印调试信息 （『错误处理测试: 』 ^ （整数转字符串 !通过数量） ^ 『/』 ^ （整数转字符串 总数量） ^ 『 通过』）;
  成功
是谓

「：主测试运行器：」
夫「主函数」者受 （） 焉算法乃
  设「统计」为创建测试统计 （） 在
  
  打印调试信息 『骆言编译器测试套件』;
  打印调试信息 （『开始时间: 』 ^ （Unix.gettimeofday （） |> 浮点数转字符串））;
  
  「：运行各个模块的测试：」
  运行测试模块 『词法分析器』 词法分析器测试.主函数 统计;
  运行测试模块 『语法分析器』 语法分析器测试.主函数 统计;
  运行测试模块 『集成测试』 运行集成测试 统计;
  运行测试模块 『性能测试』 运行性能测试 统计;
  运行测试模块 『错误处理』 运行错误处理测试 统计;
  
  「：打印最终统计：」
  打印测试统计 统计;
  
  「：输出测试结果：」
  if 统计.失败测试数为0 then （
    打印调试信息 『🎉 所有测试通过！编译器组件工作正常。』;
    打印调试信息 『✅ 骆言编译器已准备就绪进入下一开发阶段。』
  ） else （
    打印调试信息 （『⚠️  有 』 ^ （整数转字符串 统计.失败测试数） ^ 『 个测试失败，需要修复。』）;
    打印调试信息 『❌ 请检查错误日志并修复问题。』
  ）;
  
  统计.失败测试数为0
是谓