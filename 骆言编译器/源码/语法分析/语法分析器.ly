（*
 * 语法分析器 - 递归下降解析器
 * 将词法单元序列转换为抽象语法树
 * 支持错误恢复和详细错误报告
 *）

「：引入基础模块：」
使用 基础工具.工具库
使用 基础工具.位置信息
使用 基础工具.错误处理
使用 基础工具.抽象语法树
使用 词法分析.词法分析器

「：语法分析器状态：」
类型 语法分析器状态={
  词法单元列表: 词法单元 列表;
  mutable 当前索引: 整数;
  错误收集器: 错误收集器;
  文件名: 字符串;
}

「：创建语法分析器状态：」
夫「创建语法分析器」者受 词法单元列表 文件名 焉算法乃
  设「错误收集器」为创建错误收集器 （） 在 {
    词法单元列表=词法单元列表;
    当前索引=0;
    错误收集器=错误收集器;
    文件名=文件名;
  }
是谓

「：获取当前词法单元：」
夫「当前词法单元」者受 状态 焉算法乃
  if 状态.当前索引 >=List.length 状态.词法单元列表 then
    无
  else
    有 （List.nth 状态.词法单元列表 状态.当前索引）
是谓

「：预览下一个词法单元：」
夫「预览词法单元」者受 状态 偏移量 焉算法乃
  设「索引」为状态.当前索引 + 偏移量 在
  if 索引 >=List.length 状态.词法单元列表 then
    无
  else
    有 （List.nth 状态.词法单元列表 索引）
是谓

「：前进到下一个词法单元：」
夫「前进词法单元」者受 状态 焉算法乃
  if 状态.当前索引 < List.length 状态.词法单元列表 then
    状态.当前索引 :=状态.当前索引 + 1
是谓

「：检查当前词法单元类型：」
夫「检查词法单元类型」者受 状态 期望类型 焉算法乃
  观 当前词法单元 状态 之 性
  | 无 -> false
  | 有 词法单元 -> 
      观 （词法单元.类型, 期望类型） 之 性
      | （关键字词法单元 关键字1, 关键字词法单元 关键字2） -> 关键字1=关键字2
      | （类型1, 类型2） -> 类型1=类型2
      观毕
  观毕
是谓

「：消费特定类型的词法单元：」
夫「消费词法单元」者受 状态 期望类型 焉算法乃
  观 当前词法单元 状态 之 性
  | 无 ->
      添加编译错误 状态.错误收集器 
        （语法错误 （『期望词法单元但文件已结束』, 创建初始位置 状态.文件名））;
      无
  | 有 词法单元 ->
      if 检查词法单元类型 状态 期望类型 then （
        前进词法单元 状态;
        有 词法单元
      ） else （
        添加编译错误 状态.错误收集器 
          （语法错误 （『期望不同的词法单元类型』, 词法单元.位置））;
        无
      ）
  观毕
是谓

「：跳过换行符：」
夫 递归 跳过换行符 者 受 状态 焉算法乃
  if 检查词法单元类型 状态 换行符 then （
    前进词法单元 状态;
    跳过换行符 状态
  ）
是谓

「：解析字面量：」
夫「解析字面量」者受 状态 焉算法乃
  观 当前词法单元 状态 之 性
  | 无 -> 无
  | 有 词法单元 ->
      观「词法单元.类型」之性
      | 整数词法单元 值 ->
          前进词法单元 状态;
          有 （整数字面量 值）
      | 浮点词法单元 值 ->
          前进词法单元 状态;
          有 （浮点字面量 值）
      | 字符串词法单元 值 ->
          前进词法单元 状态;
          有 （字符串字面量 值）
      | 布尔词法单元 值 ->
          前进词法单元 状态;
          有 （布尔字面量 值）
      | 关键字词法单元 『真』 ->
          前进词法单元 状态;
          有 （布尔字面量 true）
      | 关键字词法单元 『假』 ->
          前进词法单元 状态;
          有 （布尔字面量 false）
      | _ -> 无
      观毕
  观毕
是谓

「：解析标识符：」
夫「解析标识符」者受 状态 焉算法乃
  观 当前词法单元 状态 之 性
  | 无 -> 无
  | 有 词法单元 ->
      观「词法单元.类型」之性
      | 标识符词法单元 名称 ->
          前进词法单元 状态;
          有 （名称, 词法单元.位置）
      | _ -> 无
      观毕
  观毕
是谓

「：声明解析函数：」
夫 递归 解析表达式 者 受 状态 焉算法乃 失败 『待实现』 是谓
和 解析主表达式 者 受 状态 焉算法乃 失败 『待实现』 是谓
和 解析一元表达式 者 受 状态 焉算法乃 失败 『待实现』 是谓
和 解析二元表达式 者 受 状态 优先级 焉算法乃 失败 『待实现』 是谓
和 解析函数调用 者 受 状态 函数表达式 焉算法乃 失败 『待实现』 是谓
和 解析模式 者 受 状态 焉算法乃 失败 『待实现』 是谓
和 解析类型表达式 者 受 状态 焉算法乃 失败 『待实现』 是谓
和 解析语句 者 受 状态 焉算法乃 失败 『待实现』 是谓

「：解析主表达式实现：」
夫「解析主表达式」者受 状态 焉算法乃
  跳过换行符 状态;
  
  「：首先尝试解析字面量：」
  观 解析字面量 状态 之 性
  | 有 字面量 ->
      观 当前词法单元 状态 之 性
      | 有 词法单元 -> 有 （字面量表达式 （字面量, 词法单元.位置））
      | 无 -> 有 （字面量表达式 （字面量, 创建初始位置 状态.文件名））
      观毕
      
  | 无 ->
      「：尝试解析标识符：」
      观 解析标识符 状态 之 性
      | 有 （名称, 位置） -> 有 （变量表达式 （名称, 位置））
      | 无 ->
          「：尝试解析括号表达式：」
          if 检查词法单元类型 状态 左括号 then （
            观 消费词法单元 状态 左括号 之 性
            | 有 开始词法单元 ->
                观 解析表达式 状态 之 性
                | 有 表达式 ->
                    观 消费词法单元 状态 右括号 之 性
                    | 有 _ -> 有 表达式
                    | 无 -> 
                        添加编译错误 状态.错误收集器 
                          （语法错误 （『期望右括号』, 开始词法单元.位置））;
                        有 表达式
                    观毕
                | 无 -> 无
                观毕
            | 无 -> 无
            观毕
          ） else if 检查词法单元类型 状态 （关键字词法单元 『如果』） then （
            「：解析条件表达式：」
            观 消费词法单元 状态 （关键字词法单元 『如果』） 之 性
            | 有 如果词法单元 ->
                观 解析表达式 状态 之 性
                | 有 条件表达式 ->
                    观 消费词法单元 状态 （关键字词法单元 『那么』） 之 性
                    | 有 _ ->
                        观 解析表达式 状态 之 性
                        | 有 真分支表达式 ->
                            观 消费词法单元 状态 （关键字词法单元 『否则』） 之 性
                            | 有 _ ->
                                观 解析表达式 状态 之 性
                                | 有 假分支表达式 ->
                                    有 （条件表达式 （条件表达式, 真分支表达式, 假分支表达式, 如果词法单元.位置））
                                | 无 -> 无
                                观毕
                            | 无 ->
                                添加编译错误 状态.错误收集器 
                                  （语法错误 （『期望'否则'』, 如果词法单元.位置））;
                                无
                            观毕
                        | 无 -> 无
                        观毕
                    | 无 ->
                        添加编译错误 状态.错误收集器 
                          （语法错误 （『期望'那么'』, 如果词法单元.位置））;
                        无
                    观毕
                | 无 -> 无
                观毕
            | 无 -> 无
            观毕
          ） else if 检查词法单元类型 状态 （关键字词法单元 『让』） then （
            「：解析让绑定表达式：」
            观 消费词法单元 状态 （关键字词法单元 『让』） 之 性
            | 有 让词法单元 ->
                观 解析标识符 状态 之 性
                | 有 （变量名, _） ->
                    观 消费词法单元 状态 等号 之 性
                    | 有 _ ->
                        观 解析表达式 状态 之 性
                        | 有 值表达式 ->
                            观 消费词法单元 状态 （关键字词法单元 『在』） 之 性
                            | 有 _ ->
                                观 解析表达式 状态 之 性
                                | 有 体表达式 ->
                                    有 （让绑定表达式 （变量名, 值表达式, 体表达式, 让词法单元.位置））
                                | 无 -> 无
                                观毕
                            | 无 ->
                                添加编译错误 状态.错误收集器 
                                  （语法错误 （『期望'在'』, 让词法单元.位置））;
                                无
                            观毕
                        | 无 -> 无
                        观毕
                    | 无 ->
                        添加编译错误 状态.错误收集器 
                          （语法错误 （『期望等号』, 让词法单元.位置））;
                        无
                    观毕
                | 无 ->
                    添加编译错误 状态.错误收集器 
                      （语法错误 （『期望变量名』, 让词法单元.位置））;
                    无
                观毕
            | 无 -> 无
            观毕
          ） else if 检查词法单元类型 状态 （关键字词法单元 『函数』） then （
            「：解析函数表达式：」
            观 消费词法单元 状态 （关键字词法单元 『函数』） 之 性
            | 有 函数词法单元 ->
                设「参数列表」为ref 空空如也 在
                
                设 递归 解析参数为函数 （） ->
                  观 解析标识符 状态 之 性
                  | 有 （参数名, _） ->
                      参数列表 :=参数名 :: !参数列表;
                      解析参数 （）
                  | 无 -> List.rev !参数列表
                  观毕
                在
                
                设「最终参数列表」为解析参数 （） 在
                
                观 消费词法单元 状态 箭头 之 性
                | 有 _ ->
                    观 解析表达式 状态 之 性
                    | 有 体表达式 ->
                        有 （函数表达式 （最终参数列表, 体表达式, 函数词法单元.位置））
                    | 无 -> 无
                    观毕
                | 无 ->
                    添加编译错误 状态.错误收集器 
                      （语法错误 （『期望箭头』, 函数词法单元.位置））;
                    无
                观毕
            | 无 -> 无
            观毕
          ） else （
            无
          ）
      观毕
  观毕
是谓

「：运算符优先级表：」
夫「运算符优先级」者受 运算符 焉算法乃
  观「运算符」之性
  | 逻辑或符号 -> 1
  | 逻辑与符号 -> 2
  | 等号 | 不等号 | 小于号 | 小于等于号 | 大于号 | 大于等于号 -> 3
  | 加号 | 减号 | 字符串连接符号 -> 4
  | 乘号 | 除号 | 模运算符 -> 5
  | _ -> 0
  观毕
是谓

「：解析一元表达式：」
夫「解析一元表达式」者受 状态 焉算法乃
  观 当前词法单元 状态 之 性
  | 有 词法单元 ->
      观「词法单元.类型」之性
      | 逻辑非符号 ->
          前进词法单元 状态;
          观 解析一元表达式 状态 之 性
          | 有 子表达式 -> 有 （一元运算表达式 （逻辑非, 子表达式, 词法单元.位置））
          | 无 -> 无
          观毕
      | 减号 ->
          前进词法单元 状态;
          观 解析一元表达式 状态 之 性
          | 有 子表达式 -> 有 （一元运算表达式 （数值取反, 子表达式, 词法单元.位置））
          | 无 -> 无
          观毕
      | _ -> 解析主表达式 状态
      观毕
  | 无 -> 无
  观毕
是谓

「：二元运算符映射：」
夫「词法单元到二元运算符」者受 词法单元类型 焉算法乃
  观「词法单元类型」之性
  | 加号 -> 有 加法
  | 减号 -> 有 减法
  | 乘号 -> 有 乘法
  | 除号 -> 有 除法
  | 模运算符 -> 有 模运算
  | 等号 -> 有 等于
  | 不等号 -> 有 不等于
  | 小于号 -> 有 小于
  | 小于等于号 -> 有 小于等于
  | 大于号 -> 有 大于
  | 大于等于号 -> 有 大于等于
  | 逻辑与符号 -> 有 逻辑与
  | 逻辑或符号 -> 有 逻辑或
  | 字符串连接符号 -> 有 字符串连接
  | _ -> 无
  观毕
是谓

「：解析二元表达式：」
夫 递归 解析二元表达式 者 受 状态 最小优先级 焉算法乃
  观 解析一元表达式 状态 之 性
  | 无 -> 无
  | 有 左表达式 ->
      设「结果」为ref 左表达式 在
      
      设 递归 解析右操作数为函数 （） ->
        观 当前词法单元 状态 之 性
        | 无 -> !结果
        | 有 运算符词法单元 ->
            观 词法单元到二元运算符 运算符词法单元.类型 之 性
            | 无 -> !结果
            | 有 运算符 ->
                设「当前优先级」为运算符优先级 运算符词法单元.类型 在
                if 当前优先级 < 最小优先级 then
                  !结果
                else （
                  前进词法单元 状态;
                  观 解析二元表达式 状态 （当前优先级 + 1） 之 性
                  | 无 -> 
                      添加编译错误 状态.错误收集器 
                        （语法错误 （『期望右操作数』, 运算符词法单元.位置））;
                      !结果
                  | 有 右表达式 ->
                      结果 :=二元运算表达式 （!结果, 运算符, 右表达式, 运算符词法单元.位置）;
                      解析右操作数 （）
                  观毕
                ）
            观毕
        观毕
      在
      
      有 （解析右操作数 （））
  观毕
是谓

「：解析表达式：」
夫「解析表达式」者受 状态 焉算法乃
  解析二元表达式 状态 0
是谓

「：解析程序：」
夫「解析程序」者受 状态 焉算法乃
  设「语句列表」为ref 空空如也 在
  
  设 递归 解析语句序列为函数 （） ->
    跳过换行符 状态;
    
    观 当前词法单元 状态 之 性
    | 无 -> List.rev !语句列表
    | 有 词法单元 ->
        观「词法单元.类型」之性
        | 文件结束 -> List.rev !语句列表
        | _ ->
            观 解析表达式 状态 之 性
            | 有 表达式 ->
                语句列表 :=（表达式语句 表达式） :: !语句列表;
                「：可选的分号：」
                if 检查词法单元类型 状态 分号 then
                  前进词法单元 状态;
                解析语句序列 （）
            | 无 ->
                添加编译错误 状态.错误收集器 
                  （语法错误 （『无法解析语句』, 词法单元.位置））;
                前进词法单元 状态;  「：跳过错误的词法单元：」
                解析语句序列 （）
            观毕
        观毕
    观毕
  在
  
  解析语句序列 （）
是谓

「：语法分析入口函数：」
夫「语法分析」者受 词法单元列表 文件名 焉算法乃
  设「状态」为创建语法分析器 词法单元列表 文件名 在
  
  设「程序」为解析程序 状态 在
  
  if 有错误 状态.错误收集器 then
    创建失败结果 状态.错误收集器
  else
    创建成功结果 程序 状态.错误收集器
是谓