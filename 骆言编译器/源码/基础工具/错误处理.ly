(*
 * 错误处理模块
 * 定义编译器的各种错误类型和错误报告机制
 *)

(* 引入位置信息 *)
使用 位置信息

(* 错误严重程度 *)
类型 错误级别 =
  | 警告
  | 错误
  | 致命错误

(* 编译错误类型 *)
类型 编译错误 =
  | 词法错误 的 字符串 * 位置
  | 语法错误 的 字符串 * 位置范围
  | 语义错误 的 字符串 * 位置范围
  | 类型错误 的 字符串 * 位置范围
  | 代码生成错误 的 字符串 * 位置范围
  | 文件错误 的 字符串 * 字符串  (* 错误信息 * 文件路径 *)
  | 内部错误 的 字符串

(* 错误收集器类型 *)
类型 错误收集器 = {
  mutable 错误列表: (错误级别 * 编译错误) 列表;
  mutable 警告计数: 整数;
  mutable 错误计数: 整数;
}

(* 创建错误收集器 *)
让 创建错误收集器 = 函数 () -> {
  错误列表 = [];
  警告计数 = 0;
  错误计数 = 0;
}

(* 添加错误 *)
让 添加错误 = 函数 收集器 级别 错误 ->
  收集器.错误列表 := (级别, 错误) :: 收集器.错误列表;
  匹配 级别 的
  | 警告 -> 收集器.警告计数 := 收集器.警告计数 + 1
  | 错误 | 致命错误 -> 收集器.错误计数 := 收集器.错误计数 + 1

(* 添加警告的便捷函数 *)
让 添加警告 = 函数 收集器 错误 ->
  添加错误 收集器 警告 错误

(* 添加错误的便捷函数 *)
让 添加编译错误 = 函数 收集器 错误 ->
  添加错误 收集器 错误 错误

(* 添加致命错误的便捷函数 *)
让 添加致命错误 = 函数 收集器 错误 ->
  添加错误 收集器 致命错误 错误

(* 检查是否有错误 *)
让 有错误 = 函数 收集器 ->
  收集器.错误计数 > 0

(* 检查是否有警告 *)
让 有警告 = 函数 收集器 ->
  收集器.警告计数 > 0

(* 获取错误统计 *)
让 错误统计 = 函数 收集器 ->
  (收集器.警告计数, 收集器.错误计数)

(* 清空错误列表 *)
让 清空错误 = 函数 收集器 ->
  收集器.错误列表 := [];
  收集器.警告计数 := 0;
  收集器.错误计数 := 0

(* 格式化错误级别 *)
让 格式化错误级别 = 函数 级别 ->
  匹配 级别 的
  | 警告 -> "警告"
  | 错误 -> "错误"
  | 致命错误 -> "致命错误"

(* 格式化编译错误 *)
让 格式化编译错误 = 函数 错误 ->
  匹配 错误 的
  | 词法错误 (消息, 位置) ->
      "词法错误: " ^ 消息 ^ " 在 " ^ (格式化位置 位置)
  | 语法错误 (消息, 范围) ->
      "语法错误: " ^ 消息 ^ " 在 " ^ (格式化位置范围 范围)
  | 语义错误 (消息, 范围) ->
      "语义错误: " ^ 消息 ^ " 在 " ^ (格式化位置范围 范围)
  | 类型错误 (消息, 范围) ->
      "类型错误: " ^ 消息 ^ " 在 " ^ (格式化位置范围 范围)
  | 代码生成错误 (消息, 范围) ->
      "代码生成错误: " ^ 消息 ^ " 在 " ^ (格式化位置范围 范围)
  | 文件错误 (消息, 文件路径) ->
      "文件错误: " ^ 消息 ^ " 文件: " ^ 文件路径
  | 内部错误 消息 ->
      "内部错误: " ^ 消息

(* 格式化完整错误信息 *)
让 格式化完整错误 = 函数 级别 错误 ->
  "[" ^ (格式化错误级别 级别) ^ "] " ^ (格式化编译错误 错误)

(* 打印错误 *)
让 打印错误 = 函数 级别 错误 ->
  打印 (格式化完整错误 级别 错误)

(* 打印所有错误 *)
让 打印所有错误 = 函数 收集器 ->
  let 错误列表 = List.rev 收集器.错误列表 在
  List.iter (函数 (级别, 错误) -> 打印错误 级别 错误) 错误列表

(* 返回所有错误的字符串列表 *)
让 获取所有错误字符串 = 函数 收集器 ->
  let 错误列表 = List.rev 收集器.错误列表 在
  List.map (函数 (级别, 错误) -> 格式化完整错误 级别 错误) 错误列表

(* 错误结果类型 - 集成错误收集器 *)
类型 编译结果 T = {
  结果: T 选项;
  错误收集器: 错误收集器;
}

(* 创建成功结果 *)
让 创建成功结果 = 函数 值 收集器 -> {
  结果 = 有 值;
  错误收集器 = 收集器;
}

(* 创建失败结果 *)
让 创建失败结果 = 函数 收集器 -> {
  结果 = 无;
  错误收集器 = 收集器;
}

(* 检查编译结果是否成功 *)
让 编译成功 = 函数 结果 ->
  匹配 结果.结果 的
  | 有 _ -> not (有错误 结果.错误收集器)
  | 无 -> false

(* 提取编译结果的值 *)
让 提取结果值 = 函数 结果 ->
  结果.结果

(* 合并编译结果的错误收集器 *)
让 合并错误收集器 = 函数 收集器1 收集器2 ->
  let 新收集器 = 创建错误收集器 () 在
  List.iter (函数 (级别, 错误) -> 添加错误 新收集器 级别 错误) 收集器1.错误列表;
  List.iter (函数 (级别, 错误) -> 添加错误 新收集器 级别 错误) 收集器2.错误列表;
  新收集器