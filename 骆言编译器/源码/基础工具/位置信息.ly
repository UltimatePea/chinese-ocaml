(*
 * 位置信息模块
 * 用于跟踪源代码位置，提供精确的错误报告
 *)

(* 位置信息类型 *)
类型 位置 = {
  文件名: 字符串;
  行号: 整数;
  列号: 整数;
  偏移量: 整数;
}

(* 位置范围类型 *)
类型 位置范围 = {
  开始位置: 位置;
  结束位置: 位置;
}

(* 创建初始位置 *)
让 创建初始位置 = 函数 文件名 -> {
  文件名 = 文件名;
  行号 = 1;
  列号 = 1;
  偏移量 = 0;
}

(* 前进一个字符的位置 *)
让 前进位置 = 函数 位置 字符 ->
  匹配 字符 的
  | '\n' -> {
      文件名 = 位置.文件名;
      行号 = 位置.行号 + 1;
      列号 = 1;
      偏移量 = 位置.偏移量 + 1;
    }
  | _ -> {
      文件名 = 位置.文件名;
      行号 = 位置.行号;
      列号 = 位置.列号 + 1;
      偏移量 = 位置.偏移量 + 1;
    }

(* 创建位置范围 *)
让 创建位置范围 = 函数 开始 结束 -> {
  开始位置 = 开始;
  结束位置 = 结束;
}

(* 格式化位置信息 *)
让 格式化位置 = 函数 位置 ->
  位置.文件名 ^ ":" ^ 
  (整数转字符串 位置.行号) ^ ":" ^ 
  (整数转字符串 位置.列号)

(* 格式化位置范围 *)
让 格式化位置范围 = 函数 范围 ->
  if 范围.开始位置.文件名 = 范围.结束位置.文件名 then
    if 范围.开始位置.行号 = 范围.结束位置.行号 then
      (* 同一行 *)
      范围.开始位置.文件名 ^ ":" ^ 
      (整数转字符串 范围.开始位置.行号) ^ ":" ^
      (整数转字符串 范围.开始位置.列号) ^ "-" ^
      (整数转字符串 范围.结束位置.列号)
    else
      (* 多行 *)
      范围.开始位置.文件名 ^ ":" ^ 
      (整数转字符串 范围.开始位置.行号) ^ ":" ^
      (整数转字符串 范围.开始位置.列号) ^ "-" ^
      (整数转字符串 范围.结束位置.行号) ^ ":" ^
      (整数转字符串 范围.结束位置.列号)
  else
    (* 不同文件 *)
    (格式化位置 范围.开始位置) ^ " to " ^ (格式化位置 范围.结束位置)

(* 比较位置 *)
让 位置比较 = 函数 位置1 位置2 ->
  let 文件比较 = 字符串比较 位置1.文件名 位置2.文件名 在
  if 文件比较 != 0 then 文件比较
  else 
    let 行比较 = 整数比较 位置1.行号 位置2.行号 在
    if 行比较 != 0 then 行比较
    else 整数比较 位置1.列号 位置2.列号

(* 检查位置是否在范围内 *)
让 位置在范围内 = 函数 位置 范围 ->
  (位置比较 范围.开始位置 位置) <= 0 &&
  (位置比较 位置 范围.结束位置) <= 0

(* 合并两个位置范围 *)
让 合并位置范围 = 函数 范围1 范围2 ->
  let 开始 = if (位置比较 范围1.开始位置 范围2.开始位置) <= 0 
            then 范围1.开始位置 
            else 范围2.开始位置 在
  let 结束 = if (位置比较 范围1.结束位置 范围2.结束位置) >= 0 
            then 范围1.结束位置 
            else 范围2.结束位置 在
  创建位置范围 开始 结束

(* 扩展位置范围 *)
让 扩展位置范围 = 函数 范围 位置 ->
  let 开始 = if (位置比较 范围.开始位置 位置) <= 0 
            then 范围.开始位置 
            else 位置 在
  let 结束 = if (位置比较 范围.结束位置 位置) >= 0 
            then 范围.结束位置 
            else 位置 在
  创建位置范围 开始 结束