（乘
 * C代码生成器
 * 将骆言抽象语法树转换为C代码
 *）

「：引入依赖模块：」
使用 抽象语法树
使用 工具库
使用 错误处理

「：代码生成配置：」
类型 代码生成配置等于「
  输出文件： 字符串；
  包含调试信息： 布尔值；
  优化级别： 整数；
  运行时路径： 字符串；
」

「：代码生成上下文：」
类型 代码生成上下文等于「
  配置： 代码生成配置；
  可变 下一个变量标识： 整数；
  可变 下一个标签标识： 整数；
  可变 包含文件： 字符串 列表；
  可变 全局变量： 字符串 列表；
  可变 函数定义： 字符串 列表；
」

「：创建代码生成上下文：」
夫「创建上下文」者受 配置 焉算法乃 「
  配置等于配置；
  下一个变量标识等于0；
  下一个标签标识等于0；
  包含文件等于（列开始 『骆言运行时点子』 其一 列结束）；
  全局变量等于空空如也；
  函数定义等于空空如也；
」 也

「：生成唯一变量名：」
夫「生成变量名」者受 上下文 前缀 焉算法乃
  设「id」为上下文点下一个变量标识 在
  上下文点下一个变量标识 ：等于id 加 1；
  『骆言变量下划线』 乘方 前缀 乘方 『下划线』 乘方 （字符串下划线从整数 id） 也

「：生成唯一标签名：」
夫「生成标签名」者受 上下文 前缀 焉算法乃
  设「id」为上下文点下一个标签标识 在
  上下文点下一个标签标识 ：等于id 加 1；
  『骆言label下划线』 乘方 前缀 乘方 『下划线』 乘方 （字符串下划线从整数 id） 也

「：转义标识符名称：」
夫「转义标识符」者受 名称 焉算法乃
  设 递归 转义字符为函数 字符列表 结果 减大于
    观「字符列表」之性
    或 空空如也 减大于 反向 结果
    或 字符 ：： 剩余 减大于
      若 （字符 大于等于『0『 和和 字符 小于等于『9『） 或或
         （字符 大于等于『甲『 和和 字符 小于等于『终『） 或或
         （字符 大于等于『A『 和和 字符 小于等于『Z『） 或或
         字符等于『下划线『
      则 答 转义字符 剩余 （字符 ：： 结果）
      余者答
        设「代码」为字符下划线到整数 字符 在
        设「转义字符串」为『下划线』 乘方 （十六进制下划线从整数 代码） 乘方 『下划线』 在
        转义字符 剩余 （（字符串下划线到字符列表 转义字符串） 艾特 结果） 观毕
  在
  字符串下划线从字符列表 （转义字符 （字符串下划线到字符列表 名称） 空空如也） 也

「：生成C类型名：」
夫「骆言类型下划线到C类型」者受 类型 焉算法乃
  观「类型」之性
  或 『整数』 减大于 『骆言下划线整数t』
  或 『浮点数』 减大于 『骆言浮点t』
  或 『字符串』 减大于 『骆言下划线字符串t乘』
  或 『布尔值』 减大于 『骆言下划线布尔t』
  或 『单元』 减大于 『void』
  或 『列表』 减大于 『骆言listt乘』
  或 『函数』 减大于 『骆言函数t乘』
  或 『记录』 减大于 『骆言recordt乘』
  或 『数组』 减大于 『骆言arrayt乘』
  或 『引用』 减大于 『骆言引用t乘』
  或 下划线 减大于 『骆言值t乘』 观毕也

「：生成表达式代码：」
设 递归 生成表达式为函数 上下文 表达式 减大于
  观「表达式」之性
  或 字面量表达式 （字面量， 下划线） 减大于 生成字面量 字面量
  或 变量表达式 （名称， 下划线） 减大于
    设「转义名称」为转义标识符 名称 在
    『骆言envlookup（env， \』『 乘方 转义名称 乘方 』\『）』
  或 二元运算表达式 （左表达式， 运算符， 右表达式， 下划线） 减大于
    生成二元运算 上下文 运算符 左表达式 右表达式
  或 一元运算表达式 （运算符， 表达式， 下划线） 减大于
    生成一元运算 上下文 运算符 表达式
  或 条件表达式 （条件， 那么分支， 否则分支， 下划线） 减大于
    生成条件表达式 上下文 条件 那么分支 否则分支
  或 让绑定表达式 （变量， 值表达式， 主体表达式， 下划线） 减大于
    生成让绑定表达式 上下文 变量 值表达式 主体表达式
  或 函数表达式 （参数列表， 主体， 下划线） 减大于
    生成函数表达式 上下文 参数列表 主体
  或 函数调用表达式 （函数表达式， 参数表达式列表， 下划线） 减大于
    生成调用表达式 上下文 函数表达式 参数表达式列表
  或 模式匹配表达式 （表达式， 模式列表， 下划线） 减大于
    生成匹配表达式 上下文 表达式 模式列表
  或 列表表达式 （表达式列表， 下划线） 减大于
    生成列表表达式 上下文 表达式列表
  或 元组表达式 （表达式列表， 下划线） 减大于
    生成元组表达式 上下文 表达式列表
  或 记录表达式 （字段列表， 下划线） 减大于
    生成记录表达式 上下文 字段列表
  或 字段访问表达式 （记录表达式， 字段名， 下划线） 减大于
    生成字段访问表达式 上下文 记录表达式 字段名
  或 记录更新表达式 （记录表达式， 更新列表， 下划线） 减大于
    生成记录更新表达式 上下文 记录表达式 更新列表
  或 数组表达式 （表达式列表， 下划线） 减大于
    生成数组表达式 上下文 表达式列表
  或 数组访问表达式 （数组表达式， 索引表达式， 下划线） 减大于
    生成数组访问表达式 上下文 数组表达式 索引表达式
  或 数组更新表达式 （数组表达式， 索引表达式， 值表达式， 下划线） 减大于
    生成数组更新表达式 上下文 数组表达式 索引表达式 值表达式
  或 引用表达式 （表达式， 下划线） 减大于
    生成引用表达式 上下文 表达式
  或 解引用表达式 （表达式， 下划线） 减大于
    生成解引用表达式 上下文 表达式
  或 赋值表达式 （引用表达式， 值表达式， 下划线） 减大于
    生成赋值表达式 上下文 引用表达式 值表达式
  或 构造器表达式 （构造器名， 参数列表， 下划线） 减大于
    生成构造器表达式 上下文 构造器名 参数列表
  或 序列表达式 （表达式列表， 下划线） 减大于
    生成序列表达式 上下文 表达式列表
  或 下划线 减大于 错误 『不支持的表达式类型』 观毕

「：生成字面量代码：」
夫「生成字面量」者受 字面量 焉算法乃
  观「字面量」之性
  或 整数字面量 索引 减大于 『骆言整数（』 乘方 （字符串下划线从整数 索引） 乘方 『L）』
  或 浮点字面量 函 减大于 『骆言浮点（』 乘方 （字符串下划线从浮点数 函） 乘方 『）』
  或 字符串字面量 串 减大于
    设「转义字符串」为为C转义字符串 串 在
    『骆言字符串（\』『 乘方 转义字符串 乘方 』\『）』
  或 布尔字面量 乙 减大于
    『骆言布尔（』 乘方 （若 乙 则 答 『真』 余者答 『假』） 乘方 『）』
  或 单元字面量 减大于 『骆言unit（）』 观毕也

「：为C转义字符串：」
夫「为C转义字符串」者受 字符串 焉算法乃
  设 递归 转义字符为函数 字符列表 结果 减大于
    观「字符列表」之性
    或 空空如也 减大于 反向 结果
    或 『『『 ：： 剩余 减大于 转义字符 剩余 （『』『 ：： 『\\『 ：： 结果）
    或 『\\『 ：： 剩余 减大于 转义字符 剩余 （『\\『 ：： 『\\『 ：： 结果）
    或 『\数『 ：： 剩余 减大于 转义字符 剩余 （『数『 ：： 『\\『 ：： 结果）
    或 『\项『 ：： 剩余 减大于 转义字符 剩余 （『项『 ：： 『\\『 ：： 结果）
    或 『\行『 ：： 剩余 减大于 转义字符 剩余 （『行『 ：： 『\\『 ：： 结果）
    或 字符 ：： 剩余 减大于 转义字符 剩余 （字符 ：： 结果） 观毕
  在
  字符串下划线从字符列表 （转义字符 （字符串下划线到字符列表 字符串） 空空如也） 也

「：生成二元运算代码：」
夫「生成二元运算」者受 上下文 运算符 左表达式 右表达式 焉算法乃
  设「左代码」为生成表达式 上下文 左表达式 在
  设「右代码」为生成表达式 上下文 右表达式 在
  观「运算符」之性
  或 加法 减大于 『骆言add（』 乘方 左代码 乘方 『， 』 乘方 右代码 乘方 『）』
  或 减法 减大于 『骆言subtract（』 乘方 左代码 乘方 『， 』 乘方 右代码 乘方 『）』
  或 乘法 减大于 『骆言multiply（』 乘方 左代码 乘方 『， 』 乘方 右代码 乘方 『）』
  或 除法 减大于 『骆言divide（』 乘方 左代码 乘方 『， 』 乘方 右代码 乘方 『）』
  或 模运算 减大于 『骆言modulo（』 乘方 左代码 乘方 『， 』 乘方 右代码 乘方 『）』
  或 等于 减大于 『骆言equal（』 乘方 左代码 乘方 『， 』 乘方 右代码 乘方 『）』
  或 不等于 减大于 『骆言notequal（』 乘方 左代码 乘方 『， 』 乘方 右代码 乘方 『）』
  或 小于 减大于 『骆言lessthan（』 乘方 左代码 乘方 『， 』 乘方 右代码 乘方 『）』
  或 小于等于 减大于 『骆言lessequal（』 乘方 左代码 乘方 『， 』 乘方 右代码 乘方 『）』
  或 大于 减大于 『骆言greaterthan（』 乘方 左代码 乘方 『， 』 乘方 右代码 乘方 『）』
  或 大于等于 减大于 『骆言greaterequal（』 乘方 左代码 乘方 『， 』 乘方 右代码 乘方 『）』
  或 逻辑与 减大于 『骆言logicaland（』 乘方 左代码 乘方 『， 』 乘方 右代码 乘方 『）』
  或 逻辑或 减大于 『骆言logicalor（』 乘方 左代码 乘方 『， 』 乘方 右代码 乘方 『）』
  或 字符串连接 减大于 『骆言下划线字符串concat（』 乘方 左代码 乘方 『， 』 乘方 右代码 乘方 『）』 观毕也

「：生成一元运算代码：」
夫「生成一元运算」者受 上下文 运算符 表达式 焉算法乃
  设「操作数代码」为生成表达式 上下文 表达式 在
  观「运算符」之性
  或 逻辑非 减大于 『骆言logicalnot（』 乘方 操作数代码 乘方 『）』
  或 数值取反 减大于 『骆言subtract（骆言整数（0）， 』 乘方 操作数代码 乘方 『）』 观毕也

「：生成条件表达式代码：」
夫「生成条件表达式」者受 上下文 条件 那么分支 否则分支 焉算法乃
  设「条件变量」为生成变量名 上下文 『cond』 在
  设「条件代码」为生成表达式 上下文 条件 在
  设「那么代码」为生成表达式 上下文 那么分支 在
  设「否则代码」为生成表达式 上下文 否则分支 在
  『（「 骆言值t乘 』 乘方 条件变量 乘方 『等于』 乘方 条件代码 乘方 『； 』 乘方
  『（（』 乘方 条件变量 乘方 『减大于type等于等于LUOYANBOOL 和和 』 乘方 条件变量 乘方 『减大于data点布尔val）） 问号 （』 乘方
  那么代码 乘方 『） ： （』 乘方 否则代码 乘方 『）； 」）』 也

「：生成让绑定表达式代码：」
夫「生成让绑定表达式」者受 上下文 变量 值表达式 主体表达式 焉算法乃
  设「值代码」为生成表达式 上下文 值表达式 在
  设「转义变量」为转义标识符 变量 在
  设「主体代码」为生成表达式 上下文 主体表达式 在
  『（「 骆言envbind（env， \』『 乘方 转义变量 乘方 』\『， 』 乘方 值代码 乘方 『）； 』 乘方 主体代码 乘方 『； 」）』 也

「：生成函数表达式代码：」
夫「生成函数表达式」者受 上下文 参数列表 主体 焉算法乃
  设「函数名」为生成变量名 上下文 『func』 在
  设「主体代码」为生成表达式 上下文 主体 在

  「：为多参数函数创建curry化的函数：」
  设 递归 创建curry化函数为（函数 剩余参数 主体代码 减大于
    匹配 剩余参数 与
    或 空空如也 减大于 主体代码
    或 参数 ：： 其他参数 减大于
      设「转义参数」为转义标识符 参数 在
      设「内部主体」为创建curry化函数 其他参数 主体代码 在
      如果 其他参数等于空空如也
      那么
        「：最后一个参数，直接返回主体：」
        设「函数实现」为          『骆言值t乘 』 乘方 函数名 乘方 『下划线impl下划线』 乘方 参数 乘方 『（骆言envt乘 env， 骆言值t乘 arg） 「\数』 乘方
          『  骆言envbind（env， \』『 乘方 转义参数 乘方 』\『， arg）；\数』 乘方
          『  返回 』 乘方 内部主体 乘方 『；\数』 乘方
          『」』 在
        上下文点函数定义 ：等于函数实现 ：： 上下文点函数定义；
        函数实现
      否则
        「：还有更多参数，返回另一个函数：」
        设「下一个函数名」为生成变量名 上下文 『func』 在
        设「函数实现」为          『骆言值t乘 』 乘方 函数名 乘方 『下划线impl下划线』 乘方 参数 乘方 『（骆言envt乘 env， 骆言值t乘 arg） 「\数』 乘方
          『  骆言envbind（env， \』『 乘方 转义参数 乘方 』\『， arg）；\数』 乘方
          『  返回 骆言函数create（』 乘方 下一个函数名 乘方 『下划线impl下划线』 乘方 （列表头部 其他参数） 乘方 『， env， \』『 乘方 下一个函数名 乘方 』\『）；\数』 乘方
          『」』 在
        上下文点函数定义 ：等于函数实现 ：： 上下文点函数定义；
        函数实现） 在

  设「下划线」为创建curry化函数 参数列表 主体代码 在

  匹配 参数列表 与
  或 空空如也 减大于 『骆言unit（）』
  或 第一个参数 ：： 下划线 减大于
    『骆言函数create（』 乘方 函数名 乘方 『下划线impl下划线』 乘方 第一个参数 乘方 『， env， \』『 乘方 函数名 乘方 』\『）』 观毕也

「：生成函数调用代码：」
夫「生成调用表达式」者受 上下文 函数表达式 参数表达式列表 焉算法乃
  设「函数代码」为生成表达式 上下文 函数表达式 在
  匹配 参数表达式列表 与
  或 空空如也 减大于 函数代码  「：无参数调用：」
  或 （列开始 参数表达式 其一 列结束） 减大于
    设「参数代码」为生成表达式 上下文 参数表达式 在
    『骆言函数call（』 乘方 函数代码 乘方 『， 』 乘方 参数代码 乘方 『）』
  或 下划线 减大于
    「：多参数调用：连续调用curry化的函数：」
    列表下划线折叠左 （函数 累积函数 参数表达式 减大于
      设「参数代码」为生成表达式 上下文 参数表达式 在
      『骆言函数call（』 乘方 累积函数 乘方 『， 』 乘方 参数代码 乘方 『）』
    ） 函数代码 参数表达式列表 观毕也

「：生成模式匹配表达式代码：」
夫「生成匹配表达式」者受 上下文 表达式 模式列表 焉算法乃
  设「表达式变量」为生成变量名 上下文 『matchexpr』 在
  设「表达式代码」为生成表达式 上下文 表达式 在

  设 递归 生成模式列表为（函数 模式列表 减大于
    匹配 模式列表 与
    或 空空如也 减大于 『骆言unit（）』 「：应该不会到达这里：」
    或 （模式， 表达式） ：： 剩余 减大于
      设「模式检查」为生成模式检查 上下文 表达式变量 模式 在
      设「表达式代码」为生成表达式 上下文 表达式 在
      如果 剩余等于空空如也
      那么 『（』 乘方 模式检查 乘方 『） 问号 （』 乘方 表达式代码 乘方 『） ： （骆言unit（））』
      否则 『（』 乘方 模式检查 乘方 『） 问号 （』 乘方 表达式代码 乘方 『） ： （』 乘方 （生成模式列表 剩余） 乘方 『）』） 在

  『（「 骆言值t乘 』 乘方 表达式变量 乘方 『等于』 乘方 表达式代码 乘方 『； 』 乘方 （生成模式列表 模式列表） 乘方 『； 」）』 也

「：生成模式检查代码：」
夫「生成模式检查」者受 上下文 表达式变量 模式 焉算法乃
  匹配 模式 与
  或 字面量模式 （整数字面量 索引， 下划线） 减大于
    『骆言equals（』 乘方 表达式变量 乘方 『， 骆言整数（』 乘方 （字符串下划线从整数 索引） 乘方 『））』
  或 字面量模式 （字符串字面量 串， 下划线） 减大于
    『骆言equals（』 乘方 表达式变量 乘方 『， 骆言字符串（\』『 乘方 （为C转义字符串 串） 乘方 』\『））』
  或 字面量模式 （布尔字面量 乙， 下划线） 减大于
    『骆言equals（』 乘方 表达式变量 乘方 『， 骆言布尔（』 乘方 （如果 乙 那么 『真』 否则 『假』） 乘方 『））』
  或 字面量模式 （单元字面量， 下划线） 减大于
    『骆言equals（』 乘方 表达式变量 乘方 『， 骆言unit（））』
  或 字面量模式 （浮点字面量 函， 下划线） 减大于
    『骆言equals（』 乘方 表达式变量 乘方 『， 骆言浮点（』 乘方 （字符串下划线从浮点数 函） 乘方 『））』
  或 变量模式 （变量， 下划线） 减大于
    设「转义变量」为转义标识符 变量 在
    『（骆言envbind（env， \』『 乘方 转义变量 乘方 』\『， 』 乘方 表达式变量 乘方 『）， 真）』
  或 空列表模式 下划线 减大于
    『骆言下划线list下划线isempty（』 乘方 表达式变量 乘方 『）减大于data点布尔val』
  或 列表头尾模式 （头模式， 尾模式， 下划线） 减大于
    设「头检查」为生成模式检查 上下文 （『骆言listhead（』 乘方 表达式变量 乘方 『）』） 头模式 在
    设「尾检查」为生成模式检查 上下文 （『骆言listtail（』 乘方 表达式变量 乘方 『）』） 尾模式 在
    『（！骆言下划线list下划线isempty（』 乘方 表达式变量 乘方 『）减大于data点布尔val 和和 』 乘方 头检查 乘方 『 和和 』 乘方 尾检查 乘方 『）』
  或 通配符模式 下划线 减大于 『真』
  或 下划线 减大于 错误 『不支持的模式类型』 观毕也

「：生成列表表达式代码：」
夫「生成列表表达式」者受 上下文 表达式列表 焉算法乃
  设 递归 构建列表为（函数 表达式列表 减大于
    观「表达式列表」之性
    或 空空如也 减大于 『骆言listempty（）』
    或 表达式 ：： 剩余 减大于
      设「元素代码」为生成表达式 上下文 表达式 在
      设「剩余代码」为构建列表 剩余 在
      『骆言listcons（』 乘方 元素代码 乘方 『， 』 乘方 剩余代码 乘方 『）』 观毕） 在
  构建列表 表达式列表 也

「：生成元组表达式代码：」
夫「生成元组表达式」者受 上下文 表达式列表 焉算法乃
  观「表达式列表」之性
  或 空空如也 减大于 『骆言unit（）』
  或 （列开始 单个 其一 列结束） 减大于 生成表达式 上下文 单个
  或 下划线 减大于
    「：元组存储为记录，字段名为0， 下划线1， 下划线2等：」
    设「元组变量」为生成变量名 上下文 『tuple』 在
    设「初始化代码」为『骆言recordcreate（）』 在
    设「字段赋值」为列表下划线映射索引 （函数 索引 表达式 减大于
      设「字段名」为『下划线』 乘方 （字符串下划线从整数 索引） 在
      设「字段代码」为生成表达式 上下文 表达式 在
      『骆言下划线record下划线setfield（』 乘方 元组变量 乘方 『， \』『 乘方 字段名 乘方 』\『， 』 乘方 字段代码 乘方 『）』
    ） 表达式列表 在
    设「赋值代码」为字符串连接 『； 』 字段赋值 在
    『（「 骆言值t乘 』 乘方 元组变量 乘方 『等于』 乘方 初始化代码 乘方 『； 』 乘方 赋值代码 乘方 『； 』 乘方 元组变量 乘方 『； 」）』 观毕也

「：生成记录表达式代码：」
夫「生成记录表达式」者受 上下文 字段列表 焉算法乃
  设「记录变量」为生成变量名 上下文 『record』 在
  设「初始化代码」为『骆言recordcreate（）』 在
  匹配 字段列表 与
  或 空空如也 减大于 初始化代码
  或 下划线 减大于
    设「字段赋值」为列表映射 （函数 （字段名， 字段表达式） 减大于
      设「字段代码」为生成表达式 上下文 字段表达式 在
      设「转义字段」为转义标识符 字段名 在
      『骆言下划线record下划线setfield（』 乘方 记录变量 乘方 『， \』『 乘方 转义字段 乘方 』\『， 』 乘方 字段代码 乘方 『）』
    ） 字段列表 在
    设「赋值代码」为字符串连接 『； 』 字段赋值 在
    『（「 骆言值t乘 』 乘方 记录变量 乘方 『等于』 乘方 初始化代码 乘方 『； 』 乘方 赋值代码 乘方 『； 』 乘方 记录变量 乘方 『； 」）』 观毕也

「：生成字段访问表达式代码：」
夫「生成字段访问表达式」者受 上下文 记录表达式 字段名 焉算法乃
  设「记录代码」为生成表达式 上下文 记录表达式 在
  设「转义字段」为转义标识符 字段名 在
  『骆言下划线record下划线getfield（』 乘方 记录代码 乘方 『， \』『 乘方 转义字段 乘方 』\『）』 也

「：生成记录更新表达式代码：」
夫「生成记录更新表达式」者受 上下文 记录表达式 更新列表 焉算法乃
  设「记录代码」为生成表达式 上下文 记录表达式 在
  匹配 更新列表 与
  或 空空如也 减大于 记录代码
  或 （字段名， 字段表达式） ：： 剩余 减大于
    设「字段代码」为生成表达式 上下文 字段表达式 在
    设「转义字段」为转义标识符 字段名 在
    设「第一次更新」为『骆言recordupdate（』 乘方 记录代码 乘方 『， \』『 乘方 转义字段 乘方 』\『， 』 乘方 字段代码 乘方 『）』 在
    列表下划线折叠左 （函数 累积代码 （字段名， 字段表达式） 减大于
      设「字段代码」为生成表达式 上下文 字段表达式 在
      设「转义字段名」为转义标识符 字段名 在
      『骆言recordupdate（』 乘方 累积代码 乘方 『， \』『 乘方 转义字段名 乘方 』\『， 』 乘方 字段代码 乘方 『）』
    ） 第一次更新 剩余 观毕也

「：生成数组表达式代码：」
夫「生成数组表达式」者受 上下文 表达式列表 焉算法乃
  匹配 表达式列表 与
  或 空空如也 减大于 『骆言arrayempty（）』
  或 下划线 减大于
    设「数组变量」为生成变量名 上下文 『array』 在
    设「初始化代码」为『骆言arraycreate（』 乘方 （字符串下划线从整数 （列表长度 表达式列表）） 乘方 『）』 在
    设「元素赋值」为列表下划线映射索引 （函数 索引 表达式 减大于
      设「元素代码」为生成表达式 上下文 表达式 在
      『骆言arrayset（』 乘方 数组变量 乘方 『， 』 乘方 （字符串下划线从整数 索引） 乘方 『， 』 乘方 元素代码 乘方 『）』
    ） 表达式列表 在
    设「赋值代码」为字符串连接 『； 』 元素赋值 在
    『（「 骆言值t乘 』 乘方 数组变量 乘方 『等于』 乘方 初始化代码 乘方 『； 』 乘方 赋值代码 乘方 『； 』 乘方 数组变量 乘方 『； 」）』 观毕也

「：生成数组访问表达式代码：」
夫「生成数组访问表达式」者受 上下文 数组表达式 索引表达式 焉算法乃
  设「数组代码」为生成表达式 上下文 数组表达式 在
  设「索引代码」为生成表达式 上下文 索引表达式 在
  『骆言arrayget（』 乘方 数组代码 乘方 『， 』 乘方 索引代码 乘方 『）』 也

「：生成数组更新表达式代码：」
夫「生成数组更新表达式」者受 上下文 数组表达式 索引表达式 值表达式 焉算法乃
  设「数组代码」为生成表达式 上下文 数组表达式 在
  设「索引代码」为生成表达式 上下文 索引表达式 在
  设「值代码」为生成表达式 上下文 值表达式 在
  『骆言arrayupdate（』 乘方 数组代码 乘方 『， 』 乘方 索引代码 乘方 『， 』 乘方 值代码 乘方 『）』 也

「：生成引用表达式代码：」
夫「生成引用表达式」者受 上下文 表达式 焉算法乃
  设「值代码」为生成表达式 上下文 表达式 在
  『骆言引用create（』 乘方 值代码 乘方 『）』 也

「：生成解引用表达式代码：」
夫「生成解引用表达式」者受 上下文 表达式 焉算法乃
  设「引用代码」为生成表达式 上下文 表达式 在
  『骆言引用get（』 乘方 引用代码 乘方 『）』 也

「：生成赋值表达式代码：」
夫「生成赋值表达式」者受 上下文 引用表达式 值表达式 焉算法乃
  设「引用代码」为生成表达式 上下文 引用表达式 在
  设「值代码」为生成表达式 上下文 值表达式 在
  『骆言引用set（』 乘方 引用代码 乘方 『， 』 乘方 值代码 乘方 『）』 也

「：生成构造器表达式代码：」
夫「生成构造器表达式」者受 上下文 构造器名 参数列表 焉算法乃
  设「构造器名称」为转义标识符 构造器名 在
  匹配 参数列表 与
  或 空空如也 减大于
    「：无参数构造器，创建一个带有构造器名的记录：」
    『骆言常量ructorcreate（\』『 乘方 构造器名称 乘方 』\『， NULL）』
  或 下划线 减大于
    设「参数代码」为列表映射 （生成表达式 上下文） 参数列表 在
    设「参数数组」为字符串连接 『， 』 参数代码 在
    『骆言常量ructorcreate（\』『 乘方 构造器名称 乘方 』\『， 骆言下划线array下划线from值s（』 乘方 参数数组 乘方 『））』 观毕也

「：生成序列表达式代码：」
夫「生成序列表达式」者受 上下文 表达式列表 焉算法乃
  匹配 表达式列表 与
  或 空空如也 减大于 『骆言unit（）』
  或 （列开始 表达式 其一 列结束） 减大于 生成表达式 上下文 表达式
  或 下划线 减大于
    设「表达式代码列表」为列表映射 （生成表达式 上下文） 表达式列表 在
    设「最后一个」为列表最后一个 表达式代码列表 在
    设「前面的」为列表去掉最后一个 表达式代码列表 在
    『（「 』 乘方 （字符串连接 『； 』 前面的） 乘方 『； 』 乘方 最后一个 乘方 『； 」）』 观毕也

「：生成语句代码：」
夫「生成语句」者受 上下文 语句 焉算法乃
  观「语句」之性
  或 表达式语句 表达式 减大于
    设「表达式代码」为生成表达式 上下文 表达式 在
    表达式代码 乘方 『；』
  或 设绑定语句 （变量， 表达式， 下划线） 减大于
    设「表达式代码」为生成表达式 上下文 表达式 在
    设「转义变量」为转义标识符 变量 在
    『骆言envbind（env， \』『 乘方 转义变量 乘方 』\『， 』 乘方 表达式代码 乘方 『）；』
  或 递归设绑定语句 （变量， 表达式， 下划线） 减大于
    「：递归函数需要特殊处理：」
    设「转义变量」为转义标识符 变量 在
    设「表达式代码」为生成表达式 上下文 表达式 在
    『骆言envbind（env， \』『 乘方 转义变量 乘方 』\『， 骆言unit（））； 』 乘方
    『骆言envbind（env， \』『 乘方 转义变量 乘方 』\『， 』 乘方 表达式代码 乘方 『）；』
  或 类型定义语句 下划线 减大于 『除乘 类型定义在C生成中被忽略 乘除』
  或 异常定义语句 （下划线， 下划线， 下划线） 减大于 『除乘 异常定义在C生成中被忽略 乘除』 观毕也

「：生成程序代码：」
夫「生成程序」者受 上下文 程序 焉算法乃
  设 递归 生成语句列表为（函数 语句列表 减大于
    观「语句列表」之性
    或 空空如也 减大于 『』
    或 语句 ：： 剩余 减大于
      设「语句代码」为生成语句 上下文 语句 在
      语句代码 乘方 『\数』 乘方 （生成语句列表 剩余） 观毕） 在
  生成语句列表 程序 也

「：生成完整的C代码：」
夫「生成C代码」者受 配置 程序 焉算法乃
  设「上下文」为创建上下文 配置 在

  「：生成主要代码：」
  设「主代码」为生成程序 上下文 程序 在

  「：生成完整的C文件：」
  设「包含文件」为字符串连接 『\数』 （列表映射 （函数 文件 减大于 『#include \』『 ^ 文件 ^ 』\『』） 上下文.包含文件） 在
  设「函数定义」为字符串连接 『\数\数』 （反向 上下文点函数定义） 在

  设「转义打印」为转义标识符 『打印』 在
  设「转义读取」为转义标识符 『读取』 在
  设「转义读取文件」为转义标识符 『内置读取文件』 在
  设「转义写入文件」为转义标识符 『内置写入文件』 在
  设「转义文件存在」为转义标识符 『内置文件存在』 在
  设「转义系统参数」为转义标识符 『系统参数列表』 在
  设「转义系统退出」为转义标识符 『系统退出』 在
  设「转义字符串长度」为转义标识符 『内置字符串长度』 在
  设「转义字符串连接」为转义标识符 『内置字符串连接』 在
  设「转义整数转字符串」为转义标识符 『字符串下划线从整数』 在
  设「转义字符串转整数」为转义标识符 『整数下划线从字符串』 在
  包含文件 乘方 『\数\数』 乘方
  函数定义 乘方 『\数\数』 乘方
  『整数 主（整数 argc， char乘乘 argv） 「\数』 乘方
  『  骆言运行时init（）；\数』 乘方
  『  骆言下划线set下划线systemargs（argc， argv）；\数』 乘方
  『  骆言envt乘 env等于骆言envcreate（NULL）；\数』 乘方
  『  \数』 乘方
  『  // 添加内置函数\数』 ^
  『  骆言envbind（env， \』『 乘方 转义打印 乘方 』\『， 骆言函数create（骆言下划线builtinpr整数， env， \』打印\『））；\数』 乘方
  『  骆言envbind（env， \』『 乘方 转义读取 乘方 』\『， 骆言函数create（骆言builtinread， env， \』读取\『））；\数』 乘方
  『  骆言envbind（env， \』『 乘方 转义读取文件 乘方 』\『， 骆言函数create（骆言下划线builtin下划线readfile， env， \』内置读取文件\『））；\数』 乘方
  『  骆言envbind（env， \』『 乘方 转义写入文件 乘方 』\『， 骆言函数create（骆言下划线builtin下划线writefile， env， \』内置写入文件\『））；\数』 乘方
  『  骆言envbind（env， \』『 乘方 转义文件存在 乘方 』\『， 骆言函数create（骆言下划线builtin下划线file存在， env， \』内置文件存在\『））；\数』 乘方
  『  骆言envbind（env， \』『 乘方 转义系统参数 乘方 』\『， 骆言函数create（骆言下划线builtin下划线systemargs， env， \』系统参数列表\『））；\数』 乘方
  『  骆言envbind（env， \』『 乘方 转义系统退出 乘方 』\『， 骆言函数create（骆言下划线builtin下划线systemexit， env， \』系统退出\『））；\数』 乘方
  『  骆言envbind（env， \』『 乘方 转义字符串长度 乘方 』\『， 骆言函数create（骆言下划线builtin下划线字符串长度， env， \』内置字符串长度\『））；\数』 乘方
  『  骆言envbind（env， \』『 乘方 转义字符串连接 乘方 』\『， 骆言函数create（骆言下划线builtin下划线字符串concat， env， \』内置字符串连接\『））；\数』 乘方
  『  骆言envbind（env， \』『 乘方 转义整数转字符串 乘方 』\『， 骆言函数create（骆言下划线builtin下划线整数下划线to字符串， env， \』字符串下划线从整数\『））；\数』 乘方
  『  骆言envbind（env， \』『 乘方 转义字符串转整数 乘方 』\『， 骆言函数create（骆言下划线builtin下划线字符串下划线to整数， env， \』整数下划线从字符串\『））；\数』 乘方
  『  \数』 乘方
  『  // 用户程序\数』 ^
  主代码 乘方
  『  \数』 乘方
  『  骆言envrelease（env）；\数』 乘方
  『  骆言运行时cleanup（）；\数』 乘方
  『  返回 0；\数』 乘方
  『」\数』

「：主要编译函数：」
夫「编译到C」者受 配置 程序 焉算法乃
  设「丙代码」为生成C代码 配置 程序 在

  「：写入C文件：」
  设「输出通道」为打开输出文件 配置点输出文件 在
  输出字符串 输出通道 丙代码；
  关闭输出通道 输出通道；

  『C代码已生成到： 』 乘方 配置点输出文件 也