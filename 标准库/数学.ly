(* 骆言标准库 - 数学模块 *)
(* 提供数学运算和常用数学函数 *)

模块 数学 = {
  导出: [
    (* 基本运算 *)
    ("阶乘", 函数类型 (整数类型, 整数类型));
    ("幂运算", 函数类型 (整数类型, 函数类型 (整数类型, 整数类型)));
    ("最大公约数", 函数类型 (整数类型, 函数类型 (整数类型, 整数类型)));
    ("最小公倍数", 函数类型 (整数类型, 函数类型 (整数类型, 整数类型)));
    
    (* 比较函数 *)
    ("最大值", 函数类型 (整数类型, 函数类型 (整数类型, 整数类型)));
    ("最小值", 函数类型 (整数类型, 函数类型 (整数类型, 整数类型)));
    ("绝对值", 函数类型 (整数类型, 整数类型));
    
    (* 序列函数 *)
    ("斐波那契", 函数类型 (整数类型, 整数类型));
    ("素数判断", 函数类型 (整数类型, 布尔类型));
    ("下个素数", 函数类型 (整数类型, 整数类型));
    
    (* 数学常量 *)
    ("圆周率", 浮点类型);
    ("自然对数底", 浮点类型);
  ];
  
  语句: [
    (* 阶乘函数 *)
    递归 让 阶乘 = 函数 n ->
      如果 n <= 1 那么 1 否则 n * 阶乘 (n - 1);
    
    (* 幂运算 *)
    递归 让 幂运算 = 函数 底数 指数 ->
      如果 指数 = 0 那么 1
      否则 如果 指数 = 1 那么 底数
      否则 底数 * 幂运算 底数 (指数 - 1);
    
    (* 最大公约数 (欧几里得算法) *)
    递归 让 最大公约数 = 函数 a b ->
      如果 b = 0 那么 a 否则 最大公约数 b (a % b);
    
    (* 最小公倍数 *)
    让 最小公倍数 = 函数 a b ->
      (a * b) / (最大公约数 a b);
    
    (* 最大值 *)
    让 最大值 = 函数 x y ->
      如果 x > y 那么 x 否则 y;
    
    (* 最小值 *)
    让 最小值 = 函数 x y ->
      如果 x < y 那么 x 否则 y;
    
    (* 绝对值 *)
    让 绝对值 = 函数 x ->
      如果 x < 0 那么 -x 否则 x;
    
    (* 斐波那契数列 *)
    递归 让 斐波那契 = 函数 n ->
      匹配 n 与
      | 0 -> 0
      | 1 -> 1
      | _ -> 斐波那契 (n - 1) + 斐波那契 (n - 2);
    
    (* 素数判断 *)
    让 素数判断 = 函数 n ->
      如果 n <= 1 那么 假
      否则 如果 n <= 3 那么 真
      否则 如果 n % 2 = 0 || n % 3 = 0 那么 假
      否则
        (* 检查从5开始的奇数因子 *)
        递归 让 检查因子 = 函数 i ->
          如果 i * i > n 那么 真
          否则 如果 n % i = 0 || n % (i + 2) = 0 那么 假
          否则 检查因子 (i + 6) 在
        检查因子 5;
    
    (* 找下一个素数 *)
    递归 让 下个素数 = 函数 n ->
      如果 素数判断 (n + 1) 那么 n + 1
      否则 下个素数 (n + 1);
    
    (* 数学常量 *)
    让 圆周率 = 3.14159265358979323846;
    让 自然对数底 = 2.71828182845904523536;
  ];
}