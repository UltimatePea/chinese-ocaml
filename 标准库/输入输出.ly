(* 骆言标准库 - 输入输出模块 *)
(* 提供输入输出和文件操作功能 *)

模块 输入输出 = {
  导出: [
    (* 基本输入输出 *)
    ("打印", 函数类型 (类型变量 "a", 单元类型));
    ("打印行", 函数类型 (类型变量 "a", 单元类型));
    ("打印错误", 函数类型 (类型变量 "a", 单元类型));
    ("读取", 函数类型 (单元类型, 字符串类型));
    ("读取行", 函数类型 (单元类型, 字符串类型));
    ("读取字符", 函数类型 (单元类型, 字符类型));
    
    (* 格式化输出 *)
    ("格式化打印", 函数类型 (字符串类型, 函数类型 (列表类型 (类型变量 "a"), 单元类型)));
    ("打印到字符串", 函数类型 (类型变量 "a", 字符串类型));
    
    (* 文件操作 (基础版本) *)
    ("读取文件", 函数类型 (字符串类型, 字符串类型));
    ("写入文件", 函数类型 (字符串类型, 函数类型 (字符串类型, 单元类型)));
    ("追加文件", 函数类型 (字符串类型, 函数类型 (字符串类型, 单元类型)));
    ("文件存在", 函数类型 (字符串类型, 布尔类型));
    
    (* 流控制 *)
    ("刷新输出", 函数类型 (单元类型, 单元类型));
    ("清空输入缓冲", 函数类型 (单元类型, 单元类型));
  ];
  
  语句: [
    (* 基本输入输出实现 *)
    夫 打印 者 受 值 焉 算法 乃
      (* 调用内置打印函数 *)
      内置打印 值 是谓;
    
    夫 打印行 者 受 值 焉 算法 乃
      (* 打印值并添加换行符 *)
      打印 值;
      打印 "\n" 是谓;
    
    夫 打印错误 者 受 值 焉 算法 乃
      (* 打印到错误流 *)
      内置打印错误 值 是谓;
    
    夫 读取 者 受 () 焉 算法 乃
      (* 读取一行输入，不包含换行符 *)
      内置读取行 () 是谓;
    
    夫 读取行 者 受 () 焉 算法 乃
      (* 读取一行输入 *)
      内置读取行 () 是谓;
    
    夫 读取字符 者 受 () 焉 算法 乃
      (* 读取单个字符 *)
      内置读取字符 () 是谓;
    
    (* 格式化输出 *)
    夫 格式化打印 者 受 格式字符串 参数列表 焉 算法 乃
      (* 简化实现：基本的格式化打印 *)
      递归 夫 格式化辅助 者 受 模板 参数 焉 算法 乃
        观 参数 之 性
        若 [] 则 答 打印 模板
        若 [头部; ...尾部] 则
          (* 简单替换 %s, %d 等占位符 *)
          设 替换后 为 替换占位符 模板 头部 在
          格式化辅助 替换后 尾部
        观毕
      在 格式化辅助 格式字符串 参数列表 是谓;
    
    夫 打印到字符串 者 受 值 焉 算法 乃
      (* 将值转换为字符串表示 *)
      值转字符串 值 是谓;
    
    (* 文件操作 (需要底层支持) *)
    夫 读取文件 者 受 文件路径 焉 算法 乃
      (* 读取整个文件内容 *)
      尝试 {
        内置读取文件 文件路径
      } 捕获 异常 -> {
        抛出异常 ("无法读取文件: " + 文件路径 + " - " + 异常消息 异常)
      } 是谓;
    
    夫 写入文件 者 受 文件路径 内容 焉 算法 乃
      (* 写入内容到文件 *)
      尝试 {
        内置写入文件 文件路径 内容
      } 捕获 异常 -> {
        抛出异常 ("无法写入文件: " + 文件路径 + " - " + 异常消息 异常)
      } 是谓;
    
    夫 追加文件 者 受 文件路径 内容 焉 算法 乃
      (* 追加内容到文件末尾 *)
      尝试 {
        内置追加文件 文件路径 内容
      } 捕获 异常 -> {
        抛出异常 ("无法追加文件: " + 文件路径 + " - " + 异常消息 异常)
      } 是谓;
    
    夫 文件存在 者 受 文件路径 焉 算法 乃
      (* 检查文件是否存在 *)
      尝试 {
        内置文件存在 文件路径
      } 捕获 _ -> {
        假
      } 是谓;
    
    (* 流控制 *)
    夫 刷新输出 者 受 () 焉 算法 乃
      (* 刷新输出缓冲区 *)
      内置刷新输出 () 是谓;
    
    夫 清空输入缓冲 者 受 () 焉 算法 乃
      (* 清空输入缓冲区 *)
      内置清空输入缓冲 () 是谓;
    
    (* 辅助函数 *)
    夫 替换占位符 者 受 模板 值 焉 算法 乃
      (* 简化实现：替换第一个占位符 *)
      (* 实际实现需要更复杂的字符串处理 *)
      模板 是谓; (* 占位符实现 *)
    
    夫 值转字符串 者 受 值 焉 算法 乃
      (* 将任意值转换为字符串 *)
      观 值 之 性
      若 整数 i 则 答 整数转字符串 i
      若 浮点 f 则 答 浮点转字符串 f
      若 字符串 s 则 答 s
      若 布尔 真 则 答 "真"
      若 布尔 假 则 答 "假"
      若 列表 lst 则 答 列表转字符串 lst
      余者 答 "<复杂类型>"
      观毕 是谓;
    
    夫 列表转字符串 者 受 lst 焉 算法 乃
      (* 将列表转换为字符串表示 *)
      "[" + (连接列表 "; " (映射 值转字符串 lst)) + "]" 是谓;
    
    夫 整数转字符串 者 受 i 焉 算法 乃
      (* 需要底层实现 *)
      内置整数转字符串 i 是谓;
    
    夫 浮点转字符串 者 受 f 焉 算法 乃
      (* 需要底层实现 *)
      内置浮点转字符串 f 是谓;
    
    夫 异常消息 者 受 异常 焉 算法 乃
      (* 提取异常消息 *)
      内置异常消息 异常 是谓;
  ];
}

(* 常用IO操作的便捷函数 *)
模块 IO便捷 = {
  导出: [
    ("打印调试", 函数类型 (字符串类型, 函数类型 (类型变量 "a", 类型变量 "a")));
    ("打印列表", 函数类型 (列表类型 (类型变量 "a"), 单元类型));
    ("打印换行", 函数类型 (单元类型, 单元类型));
    ("询问用户", 函数类型 (字符串类型, 字符串类型));
    ("确认操作", 函数类型 (字符串类型, 布尔类型));
    ("读取整数", 函数类型 (单元类型, 整数类型));
    ("读取浮点", 函数类型 (单元类型, 浮点类型));
  ];
  
  语句: [
    (* 调试输出：显示标签和值，然后返回值 *)
    夫 打印调试 者 受 标签 值 焉 算法 乃
      打印 (标签 + ": " + 打印到字符串 值);
      值 是谓;
    
    (* 打印列表，每个元素一行 *)
    夫 打印列表 者 受 lst 焉 算法 乃
      映射 (夫 元素函数 者 受 元素 焉 算法 乃 打印行 元素 是谓) lst;
      () 是谓;
    
    (* 打印空行 *)
    夫 打印换行 者 受 () 焉 算法 乃
      打印 "\n" 是谓;
    
    (* 询问用户输入 *)
    夫 询问用户 者 受 问题 焉 算法 乃
      打印 问题;
      打印 " ";
      读取行 () 是谓;
    
    (* 确认操作 (y/n) *)
    夫 确认操作 者 受 问题 焉 算法 乃
      设 回答 为 询问用户 (问题 + " (y/n)") 在
      观 回答 之 性
      若 "y" 或 "Y" 或 "是" 或 "真" 则 答 真
      若 "n" 或 "N" 或 "否" 或 "假" 则 答 假
      余者 
        打印 "请输入 y/n 或 是/否";
        确认操作 问题
      观毕 是谓;
    
    (* 读取并解析整数 *)
    递归 夫 读取整数 者 受 () 焉 算法 乃
      尝试 {
        设 输入 为 读取行 () 在
        字符串转整数 输入
      } 捕获 异常 -> {
        打印 "请输入一个有效的整数:";
        读取整数 ()
      } 是谓;
    
    (* 读取并解析浮点数 *)
    递归 夫 读取浮点 者 受 () 焉 算法 乃
      尝试 {
        设 输入 为 读取行 () 在
        字符串转浮点 输入
      } 捕获 异常 -> {
        打印 "请输入一个有效的浮点数:";
        读取浮点 ()
      } 是谓;
    
    (* 辅助转换函数 (需要底层实现) *)
    夫 字符串转整数 者 受 s 焉 算法 乃
      内置字符串转整数 s 是谓;
    
    夫 字符串转浮点 者 受 s 焉 算法 乃
      内置字符串转浮点 s 是谓;
  ];
}