(* 标准库迁移演示程序 *)
(* 展示从内置函数到标准库的迁移过程 *)

打印 "=== 骆言标准库迁移演示 ===\n";

(* === 第一部分：传统方式 (使用内置函数) === *)
打印 "1. 传统方式 (内置函数):";

(* 使用传统的内置函数 *)
让 数据 = [1; 2; 3; 4; 5; 6; 7; 8; 9; 10];
让 数据长度 = 长度 数据;
打印 ("数据长度: " + 整数转字符串 数据长度);

让 平方数据 = 映射 (函数 x -> x * x) 数据;
打印 ("平方后: " + 列表转字符串 平方数据);

让 偶数数据 = 过滤 (函数 x -> x % 2 = 0) 数据;
打印 ("偶数: " + 列表转字符串 偶数数据);

打印 "";

(* === 第二部分：新方式 (使用标准库) === *)
打印 "2. 新方式 (标准库模块):";

(* 导入标准库模块 *)
导入 列表: [长度, 映射, 过滤, 折叠左, 范围];
导入 输入输出: [打印, 打印行];
导入 字符串: [连接];
导入 数学: [最大值, 阶乘];

(* 使用标准库函数 *)
让 新数据 = 范围 1 10;
让 新数据长度 = 长度 新数据;
打印行 ("标准库计算长度: " + 整数转字符串 新数据长度);

让 新平方数据 = 映射 (函数 x -> x * x) 新数据;
打印行 ("标准库平方映射: " + 列表转字符串 新平方数据);

让 新偶数数据 = 过滤 (函数 x -> x % 2 = 0) 新数据;
打印行 ("标准库过滤偶数: " + 列表转字符串 新偶数数据);

(* 使用标准库的高级功能 *)
让 数据求和 = 折叠左 (函数 acc x -> acc + x) 0 新数据;
打印行 ("数据求和: " + 整数转字符串 数据求和);

打印 "";

(* === 第三部分：混合使用演示 === *)
打印 "3. 混合使用演示:";

(* 可以混合使用内置函数和标准库 *)
导入 基础: [组合函数];

让 加倍 = 函数 x -> x * 2;
让 加一 = 函数 x -> x + 1;
让 复合操作 = 组合函数 加倍 加一;

让 转换数据 = 映射 复合操作 [1; 2; 3; 4; 5];
打印行 ("复合操作结果: " + 列表转字符串 转换数据);

(* 使用数学模块 *)
让 阶乘序列 = 映射 阶乘 [1; 2; 3; 4; 5];
打印行 ("阶乘序列: " + 列表转字符串 阶乘序列);

打印 "";

(* === 第四部分：实际应用场景 === *)
打印 "4. 实际应用场景:";

(* 数据处理管道 *)
让 数据处理管道 = 函数 输入数据 ->
  输入数据
  |> 过滤 (函数 x -> x > 3)     (* 过滤大于3的数 *)
  |> 映射 (函数 x -> x * x)     (* 平方 *)
  |> 映射 (函数 x -> x + 1)     (* 加1 *)
  |> 折叠左 (函数 acc x -> 最大值 acc x) 0; (* 找最大值 *)

让 管道结果 = 数据处理管道 (范围 1 10);
打印行 ("数据处理管道最大值: " + 整数转字符串 管道结果);

(* 文本处理示例 *)
导入 字符串: [重复, 连接];

让 创建标题 = 函数 文本 ->
  让 分隔线 = 重复 (长度 文本 + 4) "=" 在
  连接 分隔线 (连接 "\n| " (连接 文本 (连接 " |\n" 分隔线)));

让 标题 = 创建标题 "骆言编程语言";
打印行 标题;

打印 "";

(* === 第五部分：性能对比演示 === *)
打印 "5. 性能对比演示:";

让 大数据集 = 范围 1 1000;

(* 内置函数版本 *)
让 开始时间1 = 获取当前时间 ();
让 内置结果 = 映射 (函数 x -> x * x) 大数据集;
让 结束时间1 = 获取当前时间 ();
让 内置耗时 = 结束时间1 - 开始时间1;

打印行 ("内置函数处理1000个元素耗时: " + 浮点转字符串 内置耗时 + "ms");

(* 标准库版本 *)
让 开始时间2 = 获取当前时间 ();
让 标准库结果 = 映射 (函数 x -> x * x) 大数据集;
让 结束时间2 = 获取当前时间 ();
让 标准库耗时 = 结束时间2 - 开始时间2;

打印行 ("标准库处理1000个元素耗时: " + 浮点转字符串 标准库耗时 + "ms");

(* 验证结果一致性 *)
让 结果一致 = 长度 内置结果 = 长度 标准库结果;
打印行 ("结果一致性检查: " + (如果 结果一致 那么 "通过" 否则 "失败"));

打印 "";

(* === 第六部分：错误处理演示 === *)
打印 "6. 错误处理演示:";

(* 演示标准库的错误处理 *)
尝试 {
  导入 不存在的模块: [某函数];
  打印行 "这行不应该执行";
} 捕获 异常 -> {
  打印行 ("捕获错误: " + 异常转字符串 异常);
};

尝试 {
  让 空列表 = [];
  导入 列表: [头部];
  让 头 = 头部 空列表;
  打印行 "这行不应该执行";
} 捕获 异常 -> {
  打印行 ("空列表头部错误: " + 异常转字符串 异常);
};

打印 "";

(* === 第七部分：迁移建议 === *)
打印 "7. 迁移建议:";

打印行 "✅ 推荐的迁移步骤:";
打印行 "1. 逐步导入标准库模块";
打印行 "2. 新代码优先使用标准库";
打印行 "3. 保持现有代码兼容性";
打印行 "4. 充分测试迁移效果";

打印行 "\n🎯 迁移优势:";
打印行 "• 更好的代码组织";
打印行 "• 更清晰的模块边界";
打印行 "• 更容易的功能扩展";
打印行 "• 更强的类型安全";

打印行 "\n⚠️  注意事项:";
打印行 "• 保持向后兼容性";
打印行 "• 注意性能影响";
打印行 "• 更新相关文档";
打印行 "• 完善错误处理";

打印 "";

(* === 第八部分：未来展望 === *)
打印 "8. 未来展望:";

打印行 "🚀 计划中的标准库模块:";
打印行 "• 数组模块 - 高效的随机访问";
打印行 "• 文件系统模块 - 文件和目录操作";
打印行 "• 网络模块 - HTTP和TCP/UDP";
打印行 "• 正则表达式模块 - 模式匹配";
打印行 "• 并发模块 - 异步和并行处理";
打印行 "• 序列化模块 - JSON/XML处理";

打印行 "\n🎉 社区贡献:";
打印行 "• 欢迎贡献新的标准库模块";
打印行 "• 提供反馈和改进建议";
打印行 "• 分享使用经验和最佳实践";

打印 "\n=== 演示完成 ===";
打印 "感谢使用骆言编程语言标准库！";

(* 辅助函数定义 *)
让 整数转字符串 = 函数 i ->
  内置整数转字符串 i;

让 浮点转字符串 = 函数 f ->
  内置浮点转字符串 f;

让 列表转字符串 = 函数 lst ->
  "[" + (连接列表 "; " (映射 整数转字符串 lst)) + "]";

让 异常转字符串 = 函数 异常 ->
  内置异常转字符串 异常;

让 获取当前时间 = 函数 () ->
  内置获取当前时间 ();

(* 管道操作符定义 *)
让 (|>) = 函数 x f -> f x;