// 四言骈体风格编程示例
// 展示古典文学中四言骈体的编程应用
// 四言：每行四个汉字，骈体：讲究对仗和平仄

// === 数据定义 - 四言对仗 ===
令甲为零，    // 初值设零
令乙为壹，    // 初值设壹
令丙为贰，    // 初值设贰
令丁为叁；    // 初值设叁

// === 函数定义 - 四言韵律 ===
函名求和，    // 函数命名
参数甲乙，    // 参数声明
返回相加，    // 返回结果
结束定义。    // 定义结束

函名求积，    // 另函命名
参数丙丁，    // 参数声明
返回相乘，    // 返回结果
结束定义。    // 定义结束

// === 条件分支 - 对偶结构 ===
若甲大乙，    // 条件判断
则输出甲，    // 真值执行
否则输出，    // 假值执行
乙为结果。    // 执行结束

若丙等丁，    // 另条件判
则输出零，    // 真值执行
否则输出，    // 假值执行
壹为结果。    // 执行结束

// === 循环结构 - 工整对仗 ===
初令计数，    // 初始计数
为零开始，    // 从零开始
条件判断，    // 循环条件
小于拾数。    // 小于十数

每次循环，    // 循环体内
输出计数，    // 输出当前
然后递增，    // 计数递增
继续下轮。    // 继续循环

// === 数组操作 - 四言并行 ===
创建数组，    // 数组创建
名为甲组，    // 数组命名
包含元素，    // 包含内容
壹贰叁肆。    // 具体数值

创建数组，    // 另数组创
名为乙组，    // 数组命名
包含元素，    // 包含内容
伍陆柒捌。    // 具体数值

// === 高阶函数 - 骈偶工整 ===
函名映射，    // 函数名称
参数函数，    // 高阶参数
参数数组，    // 数组参数
返回新组。    // 返回结果

函名过滤，    // 另函名称
参数条件，    // 条件参数
参数数组，    // 数组参数
返回筛选。    // 返回筛选

// === 递归算法 - 古典韵味 ===
函名阶乘，    // 阶乘函数
参数为数，    // 参数数值
若数为零，    // 基础情况
则返回壹。    // 返回一值

若数不零，    // 递归情况
则计算积，    // 计算乘积
数乘阶乘，    // 递归调用
减壹之值。    // 参数递减

// === 模式匹配 - 对仗工整 ===
匹配数值，    // 模式匹配
依据情况，    // 根据情况
零则输出，    // 零的情况
「空无也」。  // 对应输出

壹则输出，    // 一的情况
「单一也」，  // 对应输出
贰则输出，    // 二的情况
「成双也」。  // 对应输出

// === 错误处理 - 四言平仄 ===
尝试执行，    // 异常处理
除法运算，    // 具体操作
若分母零，    // 错误条件
则抛异常。    // 异常抛出

捕获异常，    // 异常捕获
类型判断，    // 异常类型
除零错误，    // 具体错误
输出警告。    // 错误处理

// === 类型定义 - 骈体结构 ===
类型定义，    // 类型定义
名为坐标，    // 类型名称
包含横值，    // 字段一
包含纵值。    // 字段二

类型定义，    // 另类型定
名为颜色，    // 类型名称
包含红值，    // 字段一
包含绿蓝。    // 字段二三

// === 总结调用 - 四言收束 ===
调用求和，    // 函数调用
传入甲乙，    // 参数传递
存储结果，    // 结果存储
于变量戊。    // 目标变量

调用求积，    // 另函调用
传入丙丁，    // 参数传递
存储结果，    // 结果存储
于变量己。    // 目标变量

输出戊己，    // 输出结果
程序终了，    // 程序结束
四言骈体，    // 风格总结
编程示例。    // 示例结束