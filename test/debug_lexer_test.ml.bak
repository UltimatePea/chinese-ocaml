open Yyocamlc_lib

let debug_input input =
  Printf.printf "测试输入: %s\n" input;
  
  try
    let tokens = Lexer.tokenize input "test" in
    Printf.printf "词法分析结果:\n";
    Printf.printf "Token count: %d\n" (List.length tokens);
    List.iter
      (fun (token, _pos) ->
        let token_str =
          match token with
          | Lexer.QuotedIdentifierToken s -> "QuotedIdentifierToken(\"" ^ s ^ "\")"
          | Lexer.IdentifierToken s -> "IdentifierToken(\"" ^ s ^ "\")"
          | Lexer.AsForKeyword -> "AsForKeyword"
          | Lexer.ChineseNumberToken s -> "ChineseNumberToken(\"" ^ s ^ "\")"
          | Lexer.OneKeyword -> "OneKeyword"
          | Lexer.IntToken i -> "IntToken(" ^ string_of_int i ^ ")"
          | Lexer.LetKeyword -> "LetKeyword"
          | Lexer.FunKeyword -> "FunKeyword"
          | Lexer.ShouldGetKeyword -> "ShouldGetKeyword"
          | Lexer.PlusKeyword -> "PlusKeyword"
          | Lexer.IfKeyword -> "IfKeyword"
          | Lexer.ChineseLeftParen -> "ChineseLeftParen"
          | Lexer.ChineseRightParen -> "ChineseRightParen"
          | Lexer.GreaterThanWenyan -> "GreaterThanWenyan"
          | Lexer.ThenKeyword -> "ThenKeyword"
          | Lexer.ElseKeyword -> "ElseKeyword"
          | Lexer.SetKeyword -> "SetKeyword"
          | Lexer.EOF -> "EOF"
          | _ -> "Other"
        in
        Printf.printf "  %s\n" token_str)
      tokens;
  with e -> Printf.printf "错误: %s\n" (Printexc.to_string e)

let () =
  debug_input "设「数值」为 一";
  Printf.printf "\n";
  debug_input "设「文言」为 二"# Debug: 触发新的CI运行以解决构建问题
