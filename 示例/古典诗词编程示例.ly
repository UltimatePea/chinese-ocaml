「」古典诗词编程语法示例程序 — 古典 诗词 编程 语法 示例 「」

「」四言骈体示例：快速排序算法 「」
设 「快速排序四言骈体」 为   骈体 四言 「
    「快排算法」
    「受列表参」 
    「若小则返」
    「大则分割」
    「左右递归」
    「合并结果」
  」

「」五言律诗示例：排序算法描述 「」
设 「排序算法五言律诗」 为   五言 律诗 「
    「定义排序法」
    「接受数组参」
    「遍历比较值」
    「交换位置定」
    「循环至有序」
    「返回新数组」
    「算法功成就」
    「效率亦可观」
  」

「」七言绝句示例：快速排序完整描述 「」
设 「快速排序七言绝句」 为   七言 绝句 「
    「夫快排者受列表焉」
    「观其长短若小则返」  
    「大则分之递归合并」
    「也快排排序算法」
  」

「」对偶结构示例：数学运算对比 「」
设 「数学运算对偶结构」 为   骈体 ｛
    左联： 「夫加法者受二数焉」，
    右联： 「夫减法者受二数焉」
  ｝

「」实际函数实现示例 — 展示诗词注解的应用 「」

「」使用四言骈体注解的快速排序函数 「」
设 「快速排序」 为 函数 「列表」 故   骈体 四言 「
    「判断空否」
    「空则返回」
    「取首为轴」
    「分割余者」
    「递归排序」
    「连接结果」
  」；
  若 「列表」 为 空空如也 则 「列表」
  否则
    设 「轴」 为 「列表」 之 首；
    设 「余」 为 「列表」 之 尾；
    设 「左」 为 过滤 ｛函数 「甲」 故 「甲」 小于 「轴」｝ 「余」；
    设 「右」 为 过滤 ｛函数 「甲」 故 「甲」 大于等于 「轴」｝ 「余」；
    连接 ｛「快速排序」 「左」｝ ｛「轴」 ：： ｛「快速排序」 「右」｝｝

「」使用五言律诗注解的斐波那契函数 「」
设 「斐波那契」 为 函数 「数字」 故   五言 律诗 「
    「斐波那契数」
    「递归计算法」
    「零一为基础」
    「后者前两和」
    「递推至目标」
    「优雅如诗章」
  」；
  若 「数字」 小于等于 一 则 「数字」
  否则 ｛「斐波那契」 ｛「数字」 减 一｝｝ 加 ｛「斐波那契」 ｛「数字」 减 二｝｝

「」使用七言绝句注解的阶乘函数 「」
设 「阶乘」 为 函数 「数字」 故   七言 绝句 「
    「阶乘运算古而雅洁」
    「从一累乘至目标数」
    「递归实现简明优美」
    「数学之美尽在其中」
  」；
  若 「数字」 小于等于 一 则 一
  否则 「数字」 乘 ｛「阶乘」 ｛「数字」 减 一｝｝

「」使用对偶结构注解的最大值函数 「」
设 「最大值」 为 函数 「左数」 「右数」 故   骈体 ｛
    左联： 「比较左数与右数大小」，
    右联： 「返回较大者为结果」
  ｝；
  若 「左数」 大于 「右数」 则 「左数」 否则 「右数」

「」主程序：演示诗词编程语法 「」
设 「测试列表」 为 列开始 六十四 其一 三十四 其二 二十五 其三 十二 其四 二十二 其五 十一 其六 九十 其七 列结束；
设 「排序结果」 为 「快速排序」 「测试列表」；

「打印」 『═══ 古典诗词编程语法演示 ═══』；
「打印」 『原始列表：』；
「打印」 「测试列表」；
「打印」 『排序结果：』；
「打印」 「排序结果」；

「打印」 『═══ 斐波那契数列 ═══』；
「打印」 ｛『斐波那契（十） ＝ 』 连接 ｛整数转字符串 ｛「斐波那契」 十｝｝｝；

「打印」 『═══ 阶乘计算 ═══』；
「打印」 ｛『阶乘（五） ＝ 』 连接 ｛整数转字符串 ｛「阶乘」 五｝｝｝；

「打印」 『═══ 最大值比较 ═══』；
「打印」 ｛『最大值（四十二，三十三） ＝ 』 连接 ｛整数转字符串 ｛「最大值」 四十二 三十三｝｝｝
