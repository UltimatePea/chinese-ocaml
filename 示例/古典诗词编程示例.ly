(** 古典诗词编程语法示例程序 - Classical Poetry Programming Syntax Examples *)

(** 四言骈体示例：快速排序算法 *)
定义 快速排序_四言骈体 = 
  骈体 四言 {
    「快排算法」
    「受列表参」 
    「若小则返」
    「大则分割」
    「左右递归」
    「合并结果」
  }

(** 五言律诗示例：排序算法描述 *)
定义 排序算法_五言律诗 = 
  五言 律诗 {
    「定义排序法」
    「接受数组参」
    「遍历比较值」
    「交换位置定」
    「循环至有序」
    「返回新数组」
    「算法功成就」
    「效率亦可观」
  }

(** 七言绝句示例：快速排序完整描述 *)
定义 快速排序_七言绝句 = 
  七言 绝句 {
    「夫快排者受列表焉」
    「观其长短若小则返」  
    「大则分之递归合并」
    「也快排排序算法」
  }

(** 对偶结构示例：数学运算对比 *)
定义 数学运算_对偶结构 = 
  骈体 (
    左联: 「夫加法者受二数焉」,
    右联: 「夫减法者受二数焉」
  )

(** 实际函数实现示例 - 展示诗词注解的应用 *)

(** 使用四言骈体注解的快速排序函数 *)
定义 快速排序 列表 =
  骈体 四言 {
    「判断空否」
    「空则返回」
    「取首为轴」
    「分割余者」
    「递归排序」
    「连接结果」
  };
  若 列表 为 空空如也 则 列表
  否则
    设 轴 = 列表 之 首;
    设 余 = 列表 之 尾;
    设 左 = 过滤 (函数 x -> x < 轴) 余;
    设 右 = 过滤 (函数 x -> x >= 轴) 余;
    连接 (快速排序 左) (轴 :: (快速排序 右))

(** 使用五言律诗注解的斐波那契函数 *)
定义 斐波那契 数字 =
  五言 律诗 {
    「斐波那契数」
    「递归计算法」
    「零一为基础」
    「后者前两和」
    「递推至目标」
    「优雅如诗章」
  };
  若 数字 <= 1 则 数字
  否则 (斐波那契 (数字 - 1)) + (斐波那契 (数字 - 2))

(** 使用七言绝句注解的阶乘函数 *)
定义 阶乘 数字 =
  七言 绝句 {
    「阶乘运算古而雅洁」
    「从一累乘至目标数」
    「递归实现简明优美」
    「数学之美尽在其中」
  };
  若 数字 <= 1 则 1
  否则 数字 * (阶乘 (数字 - 1))

(** 使用对偶结构注解的最大值函数 *)
定义 最大值 左数 右数 =
  骈体 (
    左联: 「比较左数与右数大小」,
    右联: 「返回较大者为结果」
  );
  若 左数 > 右数 则 左数 否则 右数

(** 主程序：演示诗词编程语法 *)
设 测试列表 = 列开始 64 其一 34 其二 25 其三 12 其四 22 其五 11 其六 90 其七 列结束;
设 排序结果 = 快速排序 测试列表;

输出 "=== 古典诗词编程语法演示 ===";
输出 "原始列表:";
输出 测试列表;
输出 "排序结果:";
输出 排序结果;

输出 "\n=== 斐波那契数列 ===";
输出 ("斐波那契(10) = " ^ (整数转字符串 (斐波那契 10)));

输出 "\n=== 阶乘计算 ===";
输出 ("阶乘(5) = " ^ (整数转字符串 (阶乘 5)));

输出 "\n=== 最大值比较 ===";
输出 ("最大值(42, 33) = " ^ (整数转字符串 (最大值 42 33)));