(* 骆言数据处理示例 - 展示列表操作和数学计算 *)

(* 计算列表中所有元素的平方和 *)
设 平方和 为 函数 数列 ->
  折叠 (函数 x acc -> (平方 x) + acc) 0 数列

(* 过滤出偶数 *)
设 是偶数 为 函数 n -> n mod 2 = 0

(* 计算斐波那契数列 *)
让 递归 斐波那契 = 函数 n ->
  如果 n <= 1 那么 n
  否则 斐波那契 (n - 1) + 斐波那契 (n - 2)

(* 生成前n个斐波那契数 *)
让 递归 生成斐波那契数列 = 函数 n 当前 累积 ->
  如果 当前 >= n 那么 累积
  否则 生成斐波那契数列 n (当前 + 1) (累积 @ [斐波那契 当前])

(* 统计分析函数 *)
让 分析数据 = 函数 数据 ->
  让 总数 = 长度 数据 在
  让 偶数列表 = 过滤 是偶数 数据 在
  让 偶数个数 = 长度 偶数列表 在
  让 平方列表 = 映射 平方 数据 在
  让 总平方和 = 平方和 数据 在
  
  让 结果报告 = 
    打印 "=== 数据分析报告 ===" 在
    打印 "原始数据: [斐波那契数列]" 在
    打印 "数据分析完成:" 在
    打印 总数 在
    打印 "偶数个数:" 在
    打印 偶数个数 在
    打印 "平方和:" 在
    打印 总平方和 在
    打印 "分析完成！"
  在
  结果报告

(* 主程序演示 *)
让 主程序 = 
  让 消息1 = 打印 "=== 骆言数据处理演示 ===" 在
  
  (* 生成测试数据 *)
  让 斐波那契序列 = 生成斐波那契数列 8 0 [] 在
  让 消息2 = 打印 "生成斐波那契数列完成" 在
  
  (* 分析数据 *)
  让 分析结果 = 分析数据 斐波那契序列 在
  
  (* 展示递归计算 *)
  让 消息3 = 打印 "=== 递归计算演示 ===" 在
  让 第10个斐波那契 = 斐波那契 10 在
  让 消息4 = 打印 "第10个斐波那契数:" 在
  让 消息5 = 打印 第10个斐波那契 在
  
  打印 "数据处理演示完成！"

(* 运行主程序 *)
主程序