「：骆言标准库演示程序：」
「：展示标准库的各种功能和用法：」

打印 『===骆言标准库演示===』;

「：导入需要的模块：」
导入 基础: (列开始 身份函数 其一 常量函数 其二 组合函数 其三 列结束);
导入 数学: (列开始 阶乘 其一 斐波那契 其二 最大值 其三 最小值 其一 素数判断 其二 列结束);
导入 列表: (列开始 长度 其一 映射 其二 过滤 其三 折叠左 其一 反转 其二 范围 其三 重复 其一 列结束);
导入 字符串: (列开始 连接 其一 重复 其二 包含 其三 列结束);

打印 『\n1. 基础模块演示:』;
设「测试数据」为42;
设「身份结果」为身份函数 测试数据;
打印 （『身份函数（』 + 字符串化 测试数据 + 『）=』 + 字符串化 身份结果）;

设「常量10」为常量函数 10;
设「常量结果」为常量10 999;
打印 （『常量函数（10）（999）=』 + 字符串化 常量结果）;

夫「加3」者受 x 焉算法乃 答 x + 3 也;
夫「乘2」者受 x 焉算法乃 答 x * 2 也;
设「复合函数」为组合函数 乘2 加3;
设「组合结果」为复合函数 5;
打印 （『组合函数（乘2, 加3）（5）=』 + 字符串化 组合结果）;

打印 『\n2. 数学模块演示:』;
让「阶乘5」=阶乘 5;
打印 （『阶乘（5）=』 + 字符串化 阶乘5）;

让「斐波那契8」=斐波那契 8;
打印 （『斐波那契（8）=』 + 字符串化 斐波那契8）;

让「最大数」=最大值 15 23;
打印 （『最大值（15, 23）=』 + 字符串化 最大数）;

让「是素数17」=素数判断 17;
让「是素数18」=素数判断 18;
打印 （『素数判断（17）=』 + （若 是素数17 则 答 『真』 余者答 『假』））;
打印 （『素数判断（18）=』 + （若 是素数18 则 答 『真』 余者答 『假』））;

打印 『\n3. 列表模块演示:』;
让「数字列表」=范围 1 10;
打印 （『范围（1, 10）=』 + 列表转字符串 数字列表）;

让「列表长度」=长度 数字列表;
打印 （『列表长度=』 + 字符串化 列表长度）;

让「平方列表」=映射 （夫「匿名」者受 x 焉算法乃 答 x * x 也） (列开始 1 其一 2 其二 3 其三 4 其一 5 其二 列结束);
打印 （『平方映射(列开始 1 其一 2 其二 3 其三 4 其一 5 其二 列结束)=』 + 列表转字符串 平方列表）;

让「偶数列表」=过滤 （夫「匿名」者受 x 焉算法乃 答 x % 2=0 也） 数字列表;
打印 （『过滤偶数=』 + 列表转字符串 偶数列表）;

让「求和」=折叠左 （夫「匿名」者受 acc x 焉算法乃 答 acc + x 也） 0 (列开始 1 其一 2 其二 3 其三 4 其一 5 其二 列结束);
打印 （『列表求和(列开始 1 其一 2 其二 3 其三 4 其一 5 其二 列结束)=』 + 字符串化 求和）;

让「反转列表」=反转 (列开始 1 其一 2 其二 3 其三 4 其一 5 其二 列结束);
打印 （『反转(列开始 1 其一 2 其二 3 其三 4 其一 5 其二 列结束)=』 + 列表转字符串 反转列表）;

让「重复列表」=重复 3 『你好』;
打印 （『重复3次'你好'=』 + 列表转字符串 重复列表）;

打印 『\n4. 字符串模块演示:』;
让「连接结果」=连接 『骆言』 『编程语言』;
打印 （『连接（'骆言', '编程语言'）=』 + 连接结果）;

让「重复字符串」=重复 3 『嗨！』;
打印 （『重复3次'嗨！'=』 + 重复字符串）;

让「包含测试1」=包含 『编程』 『骆言编程语言』;
让「包含测试2」=包含 『爪哇』 『骆言编程语言』;
打印 （『'骆言编程语言'包含'编程'=』 + （若 包含测试1 则 答 『真』 余者答 『假』））;
打印 （『'骆言编程语言'包含'爪哇'=』 + （若 包含测试2 则 答 『真』 余者答 『假』））;

打印 『\n5. 复合功能演示:』;
「：使用多个模块创建复杂功能：」
让「阶乘序列」=映射 阶乘 （范围 1 6）;
打印 （『阶乘序列(列开始 1..6 其一 列结束)=』 + 列表转字符串 阶乘序列）;

让「斐波那契序列」=映射 斐波那契 （范围 0 10）;
打印 （『斐波那契序列(列开始 0..10 其一 列结束)=』 + 列表转字符串 斐波那契序列）;

让「素数列表」=过滤 素数判断 （范围 2 20）;
打印 （『2到20的素数=』 + 列表转字符串 素数列表）;

「：创建一个复杂的数据处理管道：」
夫「数据处理管道」者受 数据 焉算法乃
  答 数据
  |> 映射 （夫「匿名」者受 x 焉算法乃 答 x * 2 也）      「：每个元素乘2：」
  |> 过滤 （夫「匿名」者受 x 焉算法乃 答 x > 10 也）     「：过滤大于10的：」
  |> 映射 （夫「匿名」者受 x 焉算法乃 答 x + 1 也）      「：每个元素加1：」
  |> 折叠左 （夫「匿名」者受 acc x 焉算法乃 答 acc + x 也） 0 也; 「：求和：」

让「管道结果」=数据处理管道 (列开始 1 其一 3 其二 5 其三 7 其一 9 其二 11 其三 列结束);
打印 （『数据处理管道结果=』 + 字符串化 管道结果）;

打印 『\n6. 实际应用示例:』;
「：计算一个数的所有因子：」
夫「计算因子」者受 n 焉算法乃
  答 范围 1 n
  |> 过滤 （夫「匿名」者受 i 焉算法乃 答 n % i=0 也） 也;

让「数字24的因子」=计算因子 24;
打印 （『24的因子=』 + 列表转字符串 数字24的因子）;

「：生成帕斯卡三角形的一行：」
递归夫「帕斯卡行」者受 n 焉算法乃
  若 n=0 则 答 (列开始 1 其一 列结束)
  余者
    让「上一行」=帕斯卡行 （n - 1） 在
    让「左移」=有首有尾 首名为「0;」 尾名为「上一行」 在
    让「右移」=上一行 @ (列开始 0 其一 列结束) 在
    答 映射2 （夫「匿名」者受 a b 焉算法乃 答 a + b 也） 左移 右移 也;

「：注意：这里需要实现映射2函数或者用不同方式实现：」
打印 （『帕斯卡三角形第5行=有首有尾 首名为「计算中」 尾名为「」』）;

打印 『\n===演示结束===』;

「：辅助函数：」
夫「字符串化」者受 x 焉算法乃
  观「x」之性
  | 整数 i -> 答 整数转字符串 i
  | 字符串 s -> 答 s
  | 布尔 b -> 答 （若 b 则 答 『真』 余者答 『假』）
  | _ -> 答 『未知类型』
  观毕也;

夫「列表转字符串」者受 lst 焉算法乃
  答 『(列开始 』 + （连接列表 『 其一 』 （映射 字符串化 lst）） + 『 其二 列结束)』 也;

「：管道操作符 （如果语言支持）：」
夫「管道符」者受 x f 焉算法乃 答 f x 也;
设「（|>）」为管道符;