(* 骆言标准库演示程序 *)
(* 展示标准库的各种功能和用法 *)

打印 "=== 骆言标准库演示 ===";

(* 导入需要的模块 *)
导入 基础: [身份函数, 常量函数, 组合函数];
导入 数学: [阶乘, 斐波那契, 最大值, 最小值, 素数判断];
导入 列表: [长度, 映射, 过滤, 折叠左, 反转, 范围, 重复];
导入 字符串: [连接, 重复, 包含];

打印 "\n1. 基础模块演示:";
设 测试数据 为 42;
设 身份结果 为 身份函数 测试数据;
打印 ("身份函数(" + 字符串化 测试数据 + ") = " + 字符串化 身份结果);

设 常量10 为 常量函数 10;
设 常量结果 为 常量10 999;
打印 ("常量函数(10)(999) = " + 字符串化 常量结果);

设 加3 为 函数 x -> x + 3;
设 乘2 为 函数 x -> x * 2;
设 复合函数 为 组合函数 乘2 加3;
设 组合结果 为 复合函数 5;
打印 ("组合函数(乘2, 加3)(5) = " + 字符串化 组合结果);

打印 "\n2. 数学模块演示:";
让 阶乘5 = 阶乘 5;
打印 ("阶乘(5) = " + 字符串化 阶乘5);

让 斐波那契8 = 斐波那契 8;
打印 ("斐波那契(8) = " + 字符串化 斐波那契8);

让 最大数 = 最大值 15 23;
打印 ("最大值(15, 23) = " + 字符串化 最大数);

让 是素数17 = 素数判断 17;
让 是素数18 = 素数判断 18;
打印 ("素数判断(17) = " + (如果 是素数17 那么 "真" 否则 "假"));
打印 ("素数判断(18) = " + (如果 是素数18 那么 "真" 否则 "假"));

打印 "\n3. 列表模块演示:";
让 数字列表 = 范围 1 10;
打印 ("范围(1, 10) = " + 列表转字符串 数字列表);

让 列表长度 = 长度 数字列表;
打印 ("列表长度 = " + 字符串化 列表长度);

让 平方列表 = 映射 (函数 x -> x * x) [1; 2; 3; 4; 5];
打印 ("平方映射[1;2;3;4;5] = " + 列表转字符串 平方列表);

让 偶数列表 = 过滤 (函数 x -> x % 2 = 0) 数字列表;
打印 ("过滤偶数 = " + 列表转字符串 偶数列表);

让 求和 = 折叠左 (函数 acc x -> acc + x) 0 [1; 2; 3; 4; 5];
打印 ("列表求和[1;2;3;4;5] = " + 字符串化 求和);

让 反转列表 = 反转 [1; 2; 3; 4; 5];
打印 ("反转[1;2;3;4;5] = " + 列表转字符串 反转列表);

让 重复列表 = 重复 3 "你好";
打印 ("重复3次'你好' = " + 列表转字符串 重复列表);

打印 "\n4. 字符串模块演示:";
让 连接结果 = 连接 "骆言" "编程语言";
打印 ("连接('骆言', '编程语言') = " + 连接结果);

让 重复字符串 = 重复 3 "嗨！";
打印 ("重复3次'嗨！' = " + 重复字符串);

让 包含测试1 = 包含 "编程" "骆言编程语言";
让 包含测试2 = 包含 "爪哇" "骆言编程语言";
打印 ("'骆言编程语言'包含'编程' = " + (如果 包含测试1 那么 "真" 否则 "假"));
打印 ("'骆言编程语言'包含'爪哇' = " + (如果 包含测试2 那么 "真" 否则 "假"));

打印 "\n5. 复合功能演示:";
(* 使用多个模块创建复杂功能 *)
让 阶乘序列 = 映射 阶乘 (范围 1 6);
打印 ("阶乘序列[1..6] = " + 列表转字符串 阶乘序列);

让 斐波那契序列 = 映射 斐波那契 (范围 0 10);
打印 ("斐波那契序列[0..10] = " + 列表转字符串 斐波那契序列);

让 素数列表 = 过滤 素数判断 (范围 2 20);
打印 ("2到20的素数 = " + 列表转字符串 素数列表);

(* 创建一个复杂的数据处理管道 *)
让 数据处理管道 = 函数 数据 ->
  数据
  |> 映射 (函数 x -> x * 2)      (* 每个元素乘2 *)
  |> 过滤 (函数 x -> x > 10)     (* 过滤大于10的 *)
  |> 映射 (函数 x -> x + 1)      (* 每个元素加1 *)
  |> 折叠左 (函数 acc x -> acc + x) 0; (* 求和 *)

让 管道结果 = 数据处理管道 [1; 3; 5; 7; 9; 11];
打印 ("数据处理管道结果 = " + 字符串化 管道结果);

打印 "\n6. 实际应用示例:";
(* 计算一个数的所有因子 *)
让 计算因子 = 函数 n ->
  范围 1 n
  |> 过滤 (函数 i -> n % i = 0);

让 数字24的因子 = 计算因子 24;
打印 ("24的因子 = " + 列表转字符串 数字24的因子);

(* 生成帕斯卡三角形的一行 *)
递归 让 帕斯卡行 = 函数 n ->
  如果 n = 0 那么 [1]
  否则
    让 上一行 = 帕斯卡行 (n - 1) 在
    让 左移 = [0; ...上一行] 在
    让 右移 = 上一行 @ [0] 在
    映射2 (函数 a b -> a + b) 左移 右移;

(* 注意：这里需要实现映射2函数或者用不同方式实现 *)
打印 ("帕斯卡三角形第5行 = [计算中...]");

打印 "\n=== 演示结束 ===";

(* 辅助函数 *)
让 字符串化 = 函数 x ->
  匹配 x 与
  | 整数 i -> 整数转字符串 i
  | 字符串 s -> s
  | 布尔 b -> 如果 b 那么 "真" 否则 "假"
  | _ -> "未知类型";

让 列表转字符串 = 函数 lst ->
  "[" + (连接列表 "; " (映射 字符串化 lst)) + "]";

(* 管道操作符 (如果语言支持) *)
让 (|>) = 函数 x f -> f x;