「」古典诗词编程语法示例程序 简化版「」

「」基于当前编译器支持的语法实现「」

「」快速排序函数「」
递归 设 「快速排序」 为 函数 「列表」 故
  如果 「列表」 等于 「空列表」 那么
    「空列表」
  否则
    设 「轴」 为 「列表」 之 首
    在
    设 「余」 为 「列表」 之 尾
    在
    设 「左」 为 「空列表」
    在
    设 「右」 为 「空列表」
    在
    「快速排序」 「左」

「」斐波那契函数「」
递归 设 「斐波那契」 为 函数 「数字」 故
  如果 「数字」 等于 零 那么
    零
  否则 如果 「数字」 等于 一 那么
    一
  否则
    设 「结果一」 为 「斐波那契」 ｛「数字」 减去 一｝
    在
    设 「结果二」 为 「斐波那契」 ｛「数字」 减去 二｝
    在
    「结果一」 加上 「结果二」

「」阶乘函数「」
递归 设 「阶乘」 为 函数 「数字」 故
  如果 「数字」 等于 零 那么
    一
  否则 如果 「数字」 等于 一 那么
    一
  否则
    「数字」 乘以 ｛「阶乘」 ｛「数字」 减去 一｝｝

「」最大值函数「」
设 「最大值」 为 函数 「左数」 故 函数 「右数」 故
  如果 「左数」 大于 「右数」 那么
    「左数」
  否则
    「右数」

「」主程序「」
设 「测试结果一」 为 「斐波那契」 五
设 「测试结果二」 为 「阶乘」 四
设 「测试结果三」 为 ｛「最大值」 十二｝ 八

「打印」 『古典诗词编程语法演示』
「打印」 『斐波那契数：』
「打印」 「测试结果一」
「打印」 『阶乘计算：』
「打印」 「测试结果二」
「打印」 『最大值比较：』
「打印」 「测试结果三」