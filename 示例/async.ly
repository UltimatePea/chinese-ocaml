「：骆言异步编程示例：」

「：异步函数定义：」
异步 夫 异步计算 者 受 n 焉 算法 乃
  夫 延迟 者 受 ms 焉 算法 乃
    「：模拟异步延迟：」
    若 ms <= 0 则 答 ()
    余者 答 延迟 (ms - 1) 是谓
  在
    延迟 1000;  「：延迟1秒：」
    答 n * n 是谓

「：并发任务：」
异步 夫 并发任务1 者 受 () 焉 算法 乃
  打印 『任务1开始』;
  设 结果 为 异步计算 5;
  打印 『任务1完成，结果:』;
  打印 结果;
  答 结果 是谓

异步 夫 并发任务2 者 受 () 焉 算法 乃
  打印 『任务2开始』;
  设 结果 为 异步计算 10;
  打印 『任务2完成，结果:』;
  打印 结果;
  答 结果 是谓

「：主程序：」
异步 夫 主程序 者 受 () 焉 算法 乃
  打印 『开始并发执行』;
  
  「：创建并发任务：」
  设 任务1 为 生成 并发任务1 ();
  设 任务2 为 生成 并发任务2 ();
  
  「：等待任务完成：」
  设 结果1 为 等待 任务1;
  设 结果2 为 等待 任务2;
  
  「：合并结果：」
  设 总和 为 结果1 + 结果2;
  打印 『所有任务完成，总和:』;
  打印 总和;
  答 总和 是谓

「：通道示例：」
异步 夫 生产者 者 受 通道 焉 算法 乃
  设 数据 为 [1; 2; 3; 4; 5];
  递归 夫 发送 者 受 lst 焉 算法 乃
    观 lst 之 性
    | [] -> 答 ()
    | [head; ...tail] -> 答 (发送到通道 通道 head; 发送 tail)
    观毕 是谓
  在 答 发送 数据 是谓

异步 夫 消费者 者 受 通道 焉 算法 乃
  递归 夫 接收 者 受 () 焉 算法 乃
    设 数据 为 从通道接收 通道;
    观 数据 之 性
    | 无 -> 答 ()
    | 有 value -> 答 (打印 『接收到:』; 打印 value; 接收 ())
    观毕 是谓
  在 答 接收 () 是谓

「：运行异步程序：」
设 通道 为 创建通道 ();
生成 生产者 通道;
生成 消费者 通道;

「：运行主程序：」
设 最终结果 为 等待 (生成 主程序 ());
打印 『程序执行完成，最终结果:』;
打印 最终结果; 